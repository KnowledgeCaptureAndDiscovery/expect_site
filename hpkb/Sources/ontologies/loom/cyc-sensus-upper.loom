;;; -*- Mode: Lisp; Package: BATTLE-SPACE; Syntax: COMMON-LISP; Base: 10 -*-

(in-package "BATTLE-SPACE")


;;; ******************** CONCEPTS ********************

(defconcept Abandoning-Something
  :is-primitive (:and Losing-User-Rights Purposeful-Action)
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "The collection of events in which some #$Agent deliberately gives up possession of something, without giving it to another.")))

(defconcept Ablation
  :is-primitive (:and Separation--Complete
                      Intrinsic-State-Change-Event
                      Removing-Something)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events.  In an #$Ablation, a (usually relatively thin) layer of material is removed from the surface of an object.")))

(defconcept Above-Ground-Level-In-A-Construction
  :is-primitive (:and Container-Product Level-Of-A-Construction)
  :annotations (Existing-Object-Type
                (documentation "This refers to first floor and up. We created this to make the distinction between basements and non-basements.  We'd like to be able to talk about, count, etc. the levels above ground.")))

(defconcept Abrading-Something
  :is-primitive (:and Voluntary-Body-Movement
                      Physical-Contact-Situation
                      Ablation)
  :annotations (Default-Disjoint-Script-Type
                (documentation "A collection of events.  In an #$AbradingSomething event, the surface of some object is gradually worn away by scraping or similar physical contact involving friction.  Devices used in elements of #$AbradingSomething include files and sand paper; elements of #$AbradingSomething would include the event in which Howard Hughes sanded down the Spruce Goose for the last time, the event in which Lucy Ricardo filed her fingernails just before her singing debut at Rickie's club, etc.")))

(defconcept Abstract-Information
  :is-primitive Intangible
  :annotations (Object-Type
                Stuff-Type
                (documentation "The collection of all instances of abstract information stored or transmitted in some manner, and representing (to someone potentially at least) something.  Abstract information need not have any propositional content (see #$PropositionalInformationThing); a score for music, or a bit-map, are examples.  Note that #$AbstractInformation is the abstract, intangible information, not any particular physical embodiment.  The same abstract information is often stored in many different physical #$InformationBearingObjects.  #$AbstractInformation may or may not be digital; it need not be representable in a particular number of bits.  #$AbstractInformation does not include every abstract #$Intangible or 'Platonic' concept, only that information that represents something and is (at least potentially) stored or transmitted for that purpose; thus, the ideal regular icosahedron is not in itself an instance of #$AbstractInformation.  Note also that although most instances of #$AbstractInformation are #$IntangibleIndividuals, some are #$SetOrCollections such as #$BiologicalTaxons and other #$ConventionalClassificationTypes.")))

(defconcept Abstract-Programming-Language
  :is-primitive (:and Mathematical-Or-Computational-Thing Language)
  :annotations (Object-Type
                (documentation "The collection of languages invented for use by computers. This includes both command languages and others which one doesn't really `program' in.")))

(defconcept Abstract-Shape
  :is-primitive Geometric-Thing
  :annotations (Object-Type
                (documentation "A collection of objects; a subset of #$GeometricThing.  #$AbstractShape is the collection of all abstract physical shapes.  Each element of #$AbstractShape is an abstract region of physical space, having two or more dimensions.  This includes all circles, spheres, triangles, wedges, spirals, cylinders, toruses, etc.")))

(defconcept Abstract-Shape-Type
  :is-primitive Shape-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$AbstractShapeType is a collection of things which are subsets of #$AbstractShape.  The elements of #$AbstractShapeType comprise the basic physical shapes.  Examples include: #$CylinderShape, #$PyramidShape, #$ConeShape, #$TubeShape, #$Rectangular3DShape, #$Polygon, #$Spiral, etc.")))

(defconcept Academic-Professional
  :is-primitive Professional
  :annotations (Occupation-Type
                (documentation "A collection of persons; a subset of #$Professional.  Each element of #$AcademicProfessional is a person whose job is to educate and/or to perform research as an affiliate of an academic institution.  This includes members of the teaching and/or research staff of schools, colleges, universities, and research institutes.")))

(defconcept Academic-Quarter
  :is-primitive Time-Interval
  :annotations (Temporal-Object-Type
                (documentation "Each instance of this collection is a #$TimeInterval defined by some educational institution: one quarter of their #$AcademicYear.  Since the start dates, end dates, and duration may all vary depending on the institution, the year, etc., instances of this collection must unfortunately be time intervals like StanfordSpringQuarter1991.")))

(defconcept Academic-Semester
  :is-primitive Time-Interval
  :annotations (Temporal-Object-Type
                (documentation "Each instance of this collection is a #$TimeInterval defined by some educational institution: one half of their #$AcademicYear. Since the start dates, end dates and duration may vary depending on the institution and year, instances will be time intervals such as ``StanfordSpringSemester1990-91''.")))

(defconcept Academic-Trimester
  :is-primitive Time-Interval
  :annotations (Temporal-Object-Type
                (documentation "Each instance of this collection is a #$TimeInterval defined by some educational institution: one third of their #$AcademicYear. Since the start dates, end dates, and duration may all vary depending on the institution and year, instances of this collection must unfortunately be time intervals like UCLASpringTrimester1990-91.")))

(defconcept Academic-Year
  :is-primitive Time-Interval
  :annotations (Temporal-Object-Type
                (documentation "Each instance of this collection is an annually recurring #$TimeInterval defined by an educational institution.  Since the start dates, end dates, and duration may all vary depending on the institution, the year, etc., instances of this collection must unfortunately be time intervals like Stanford1989-90AcademicYear.")))

(defconcept Acceleration
  :is-primitive (:and Scalar-Interval Physical-Attribute)
  :annotations (Derived-Numeric-Attribute-Type
                (documentation "Acceleration is the change in speed of an object per unit time.  It is a measurable physical quantity, measured in units such as MilesPerHourPerSecond.")))

(defconcept Accessing-An-Ibt
  :is-primitive (:and Mental-Activity
                      Purposeful-Action
                      Transfer-In
                      Information-Transfer-Event)
  :annotations (Temporal-Object-Type
                Default-Disjoint-Script-Type
                (documentation "A collection of information transfer events.  Each element of #$AccessingAnIBT is an action by which an agent accesses the content of some IBT (i.e., an element of #$InformationBearingThing).  Examples include (getting information from) reading a newspaper, watching a film, listening to a musical performance, decoding an encrypted message, seeing a traffic police officer wave you on, or hearing your roommate ask you to take out the trash.  Of course, communication conventions play a role here.  In the #$NaiveInformationMt, Cyc simply assumes that an agent who accesses an IBT understands its content afterwards.  In the #$InformationGMt, Cyc makes the more complicated inference that an agent who accesses an IBT understands its content afterwards only if the agent is able to get the encoded information using a convention familiar to that agent.  See also #$CommunicationConvention, #$hasCommConvention, #$usesCommConventionForInfo.")))

(defconcept Account
  :is-primitive (:and Legal-Agreement Authorized-Agreement)
  :annotations (Account-Type
                (documentation "A collection of objects; a subset of #$LegalAgreement.  Each element of #$Account is a recorded obligation (of some particular type) between specified parties, consisting of `funds' which typically can be added to and drawn upon.  Examples include the instances of #$RetirementAccount, #$TravelExpenseAccount, and of the many types of #$FinancialAccount.  Note that the contents of an account need not be monetary; for example, the contents may be amounts of time, as in the subsets #$VacationAccount or a #$SickLeaveAccount.  #$Account does NOT include debt obligations of fixed face value that cannot be increased or reduced (such as a bond).")))

(defconcept Account-Status-Attribute
  :is-primitive Attribute-Value
  :annotations (Sibling-Disjoint-Attribute-Type
                (documentation "A collection of attributes.  Each element of #$AccountStatusAttribute is an attribute that describes the obligational status of an #$Account; e.g.,#$PaidInFull, #$InComplianceWithPaymentSchedule, #$PaymentOverdue, #$AccountInactive.")))

(defconcept Account-Type
  :is-primitive Existing-Object-Type
  :annotations (Sibling-Disjoint-Collection
                Temporal-Stuff-Type
                (documentation "A collection of collections.  Each element of #$AccountType is a collection of financial accounts of some type.  Examples: #$SavingsAccount, #$CreditCardAccount, #$RetirementAccount, #$SocialSecurityAccount, #$TravelExpenseAccount.  Typically, accounts are denominated in units of #$Money.")))

(defconcept Acknowledging--Communication-Act
  :is-primitive Communication-Act--Single
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of actions which are #$performedBy one #$Agent to convey information about the receipt of a prior #$CommunicationAct-Single which was #$performedBy another #$Agent.  An example: Judy saying `No' in response to Jane's prior act of saying `Will you clean the toaster.'")))

(defconcept Acquaintance-Attribute
  :is-primitive Attribute-Value
  :annotations (Social-Attribute-Type
                (documentation "The collection of attributes that specify ways in which (and/or degrees to which) one person is acquainted with another  E.g., some instances of this collection are:  #$FamousPersonAcquaintance, #$TrueFanAcquaintance, #$IntimateAcquaintance, #$FrequentContactAcquaintance, etc.")))

(defconcept Action
  :is-primitive Event
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each instance of #$Action is an event in which something is done by some agent.  (See #$doneBy.)  Actions may include any event in which one or more actor(s) effect some change(s) in the tangible or intangible state of the world, typically by some expenditure of effort or energy.  But note that it is not required that any tangible object be moved, changed, produced, or destroyed for an action to occur; the effects of actions may be intangible (such as the change in a bank balance, or the intimidation of a subordinate).  Depending upon the context, actors may be animate or inanimate, conscious or nonconscious.  For actions that are intentional, see also #$PurposefulAction, #$performedBy.")))

(defconcept Action-On-Object
  :is-primitive Action
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "The collection of events in which some doer acts on an object. Each element of #$ActionOnObject is an action in which both the roles of #$doneBy and #$objectActedOn (qq.v.) are filled.  Positive examples: someone typing on a keyboard; a tornado destroying a building.  Negative examples: a person dancing; wind blowing.")))

(defconcept Actor-Slot
  :is-primitive (:and Cyc_Role
                      Binary-Predicate
                      Extensional-Representation-Predicate)
  :annotations (Predicate-Category
                (documentation "A collection of binary predicates.  Each element of #$ActorSlot relates some instance of #$Event to a thing involved in that event (here called a `participant').  The first argument of every #$ActorSlot is an instance of #$Event, and the second argument is an instance of #$SomethingExisting, denoting a participant in that event.  Each specialized actor slot indicates HOW its participant participates in the event, i.e., in what role (e.g., #$inputs, #$outputs, #$doneBy).  `Participant' does NOT include the time of the event's occurrence, external representations of the event, and other more remotely related things that are not directly or indirectly `involved' in the occurrence of the event.")))

(defconcept Address--Location-Designator
  :is-primitive (:and Attribute-Value Character-String)
  :annotations (Object-Type
                (documentation "A collection of strings.  Each element of #$Address-LocationDesignator is a string that denotes an address.  Each string indicates one entire address.  For example: `President Bill Clinton, White House,, 1600 Pennsylvania Avenue, Washington, DC.")))

(defconcept Adjective
  :is-primitive Speech-Part
  :annotations (Linguistic-Object-Type
                (documentation "The collecton of all adjectives. Adjectives are words which can modify nouns. Many adjectives have comparative and superlative forms. Example: `red'.")))

(defconcept Administrator
  :is-primitive Desk-Worker
  :annotations (Occupation-Type
                (documentation "A collection of persons; a subset of #$Professional.  Each element of #$Administrator is an employee of an organization who is responsible for managing its organizational affairs.  Elements of #$Administrator may or may not also be required to manage people.  If so, then they are also #$Managers (q.v.).")))

(defconcept Admiration
  :is-primitive Respect
  :annotations (Feeling-Attribute-Type
                (documentation "A feeling of strong approval.  An intense positive attitude towards another person(s) or group.  May be accompanied by emulation.  #$Admiration is different than #$Respect (qv).  This is a collection --- see #$Happiness for an explanation.  Some more specialized #$FeelingAttributeTypes than #$Admiration are #$Wonder-Admiration, #$Adulation, #$Awe, etc. ")))

(defconcept Adult-Animal
  :is-primitive (:and Animal Biological-Stage-Of-Development)
  :annotations (Existing-Object-Type
                (documentation "The collection of all adult animals (including adult people), meaning all elements of #$Animal that are mature enough to bear offspring, or older.")))

(defconcept Adult-Female-Person
  :is-primitive (:and Human-Adult Female-Person)
  :annotations (Existing-Object-Type
                (documentation "The collection of all women; i.e., #$Persons who are adult and female")))

(defconcept Adverb
  :is-primitive Speech-Part
  :annotations (Linguistic-Object-Type
                (documentation "The collection of all adverbs. Adverbs are words which can modify adverbs, verbs, or adjectives. Many adverbs are morphologically derived from adjectives. Example: `slowly'.")))

(defconcept Advertising
  :is-primitive Communication-Act--Single
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "A collection of #$CommunicationAct-Singles.  In an #$Advertising event, someone is communicating, to potential customers of an #$Agent, the desire of that agent to do business with those customers (either to `do business' in general or to sell them something specific.")))

(defconcept Affection
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "A feeling of fondness for someone or something.  Sympathy, liking, warmth, tenderness.  This is a #$Collection --- for an explanation of that, see #$Happiness.  Some more specialized #$FeelingAttributeTypes than #$Affection are #$Love, #$Passion, etc.")))

(defconcept Afternoon
  :is-primitive Qualitative-Time-Of-Day
  :annotations (Temporal-Object-Type
                (documentation "An #$Afternoon is the daily #$Event where the #$Sun moves from its `highest' position in the daily cycle and `sets', i.e from noon till #$Sunset.  A #$Midday overlaps the start of an #$Afternoon, and an #$Evening is #$contiguousAfter an #$Afternoon.  Each #$Afternoon is #$temporallyFinishedBy a #$Sunset.")))

(defconcept Agent
  :is-primitive Composite-Tangible-And-Intangible-Object
  :annotations (Existing-Object-Type
                (documentation "An agent is something which can show independent action, whether conscious or not.  #$Agent represents the collection of all agents.  Most animals are considered agents, in most contexts; so are most organizations.   Most plants are not agents, in most contexts.  Inanimate devices are sometimes considered agents, in certain contexts.  This is one of those concepts which is important yet very hard to define precisely.  Here is some elaboration, to help convey the intended meaning of the basic criterion for agenthood:  It must seem that a kind of decision-making is going on, even if it's down at the `mindless' level of the reflex reaction of a spider leg to heat, or the reflex reaction of a Human Resources Department rejecting an applicant with no formal degree.  It generally `sounds right' or `feels  natural' to assign causality to agents, rather than some larger or smaller entity.  E.g., it is more natural to say `Fred wrote an essay' than to say `Fred's left hand wrote an essay' or, at the other extreme, to say `The Solar System wrote an essay'.  Similarly, we might very well talk about `Microsoft' buying IBM, but it would be unnatural and even incorrect to talk about a much larger entity (`corporate America') or smaller entity (`the Microsoft lawyers') as the performer of that buying action.")))

(defconcept Agentive-Noun
  :is-primitive Speech-Part
  :annotations (Linguistic-Object-Type
                (documentation "The collection of all nouns in the agentive form.  Agentive nouns usually denote the `doer' or `performer' of some action, and often end in `-er' or `-or'. Example: `runner'.")))

(defconcept Agility
  :is-primitive Script-Performance-Attribute
  :annotations (Script-Performance-Attribute-Type
                (documentation "#$Agility is the #$ScriptPerformanceAttributeType for describing actions in which the performer's whole body moves precisely and in a well-coordinated fashion.")))

(defconcept Agreement
  :is-primitive (:and Intangible-Existing-Thing Supposed-To-Be-Microtheory)
  :annotations (Existing-Object-Type
                (documentation "A collection of `objects' with temporal extent.  Each element of #$Agreement involves two or more parties, who agree that certain propositions should be true.  Making the propositions true may require some action or commitment of wealth on the part of one or more of the #$agreeingAgents.  Thus, elements of #$Agreement will usually involve some instances of #$Obligation.
Note:  Elements of #$Agreement and #$Obligation differ, however, in that an #$obligatedAgent is responsible for the truth of all of the propositions in an obligation.  In an agreement, some agents may not be responsible for all of the propositions in the agreement being true. For example, in a loan agreement, the borrower agrees to give the lender back the money, but the borrower is the only #$obligatedAgent for the repayment.  Note that #$obligatedAgents need not be among the #$agreeingAgents in the agreement that involves or generates the obligation.  For example, the Board of Directors of XYZCorporation may agree that some non-director will assume the post and duties of President of XYZCorporation.  Moreover, #$agreeingAgents aren't always obligatedAgents; e.g., Wanda and Paul may agree that Paul alone is obligated to do some task.
Examples include instances of #$PeaceAccord, #$LegalAgreement, #$InformalAgreement, #$BusinessPartnershipAgreement, #$WorkAgreement, #$SalesAgreement, #$MaintenanceAgreement, #$Reservation, #$Appointment, etc.")))

(defconcept Ailment-Condition
  :is-primitive Physiological-Condition
  :annotations (Physiological-Condition-Type
                (documentation "The most general collection of ailment events; a subset of #$PhysiologicalCondition, and a subset of #$Event.  An instance of #$AilmentCondition is a dynamic state of sickness, injury, or physiological impairment.  Having an ailment is an event:  it has temporal aspects, it progresses dynamically, etc., it is not just `being in some static state of un-wellness.'   Some subsets of #$AilmentCondition are: #$RespiratoryAilment, #$HeartCondition, #$Cancer, #$MotionSickness, #$Poisoning, #$Infection, #$InjuryCondition.  If a particular person suffers from asthma, that is an element of #$AilmentCondition.  Each #$AilmentCondition is a state of actual, developed sickness or impairment, rather than the event of getting sick or becoming impaired.  Also note that each type of ailment, such as #$Asthma, is the set of all `cases' or `instances' of individuals suffering from that condition.")))

(defconcept Air
  :is-primitive (:and Gaseous-Tangible-Thing Mixture)
  :annotations (Tangible-Stuff-State-Type
                (documentation "A collection of tangibles; a subset of #$GaseousTangibleThing.  Each element of #$Air is one `piece' among all the portions of the atmosphere of the Earth, considered as a substance present in various places, in various quantities, under various pressures, etc.  Examples: the #$AirInAustin; the stuffy air in my office; the thin air atop Annapurna.  See also #$TheAtmosphereQuaSinglePieceOfStuff, which is all ambient #$Air on the planet taken as a single object.")))

(defconcept Air-Force
  :is-primitive Military-Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of military organizations.  An element of #$AirForce is a military organization, modern or historical, composed mainly of airborne forces: bombers, fighters, torpedo planes, parachute troops, surveillance aircraft, etc., and having the function of defending or attacking air space, ships, or ground targets.")))

(defconcept Air-Force-Personnel
  :is-primitive Military-Person
  :annotations (Occupation-Type
                (documentation "A collection of people, a subset 
of #$MilitaryPerson. Each element of this collection is
somebody who works for an #$AirForce.")))

(defconcept Airline-Company
  :is-primitive (:and Transportation-Company Business)
  :annotations (Existing-Object-Type
                (documentation "The collection of all air transportation companies.  An element of #$AirlineCompany is a #$TransportationCompany that operates airplanes to transport goods or people in exchange for money.")))

(defconcept Airplane-Runway
  :is-primitive Path-For-Wheeled-Vehicles
  :annotations (Existing-Object-Type
                (documentation "An airstrip, at an airport, on an aircraft carrier, or in some field, upon which airplanes taxi, take off, and land.")))

(defconcept Airport--Physical
  :is-primitive Construction-Artifact
  :annotations (Existing-Object-Type
                (documentation "The collection of all airfields, where airplanes take off and land.  An Airport-Physical definitely has a runway, may or may not have any other buildings.  If it's the grounds of an #$AirportOrganization, some of those other features will be present.")))

(defconcept Airport-Organization
  :is-primitive Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  An element of #$AirportOrganization is an organization that manages and controls particular airports and their appurtenant facilities; e.g., #$LaGuardiaAirport.")))

(defconcept Air-Respiration
  :is-primitive Respiration
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of activities constituting a natural #$PhysiologicalFunction; #$AirRespiration is the collection of all #$Respiration events in which an organism trades some of the carbon dioxide in its tissues for oxygen from the atmosphere.")))

(defconcept Alertness
  :is-primitive (:and Animal-Physiological-Attribute Scalar-Interval)
  :annotations (Primitive-Attribute-Type
                (documentation "#$Alertness is an #$AnimalPhysiologicalAttribute which specifies how sleepy or alert an animal is.  Levels of #$Alertness include #$Asleep, #$Sleepy, and #$Awake.")))

(defconcept Allergic-Reaction
  :is-primitive Ailment-Condition
  :annotations (Physiological-Condition-Type
                (documentation "A collection of dynamic, physiological states.  An instance of #$AllergicReaction is an event in which an organism which is exposed to a particular substance (e.g., pollen, mold) develops some abnormality or impairment of its physiological condition as a result of interacting with the substance.  Allergic reactions to some types of substances occur widely in members of a species; e.g., #$PoisonIvyPoisoning in humans.  But other allergic reactions affect only a small proportion of a species, such as human allergies to penicillin.  This concept is the set of events in which allergic reactions are `taking place', not abstract unrealized potential situations such as `John is allergic to milk.'  I.e., if John were allergic to milk, and he drank some, and then proceeded to have a whopping bad allergic reaction, that latter event would be an element of #$AllergicReaction.")))

(defconcept Amphibian
  :is-primitive (:and Non-Person-Animal Vertebrate)
  :annotations (Biological-Class
                (documentation "The collection of all #$Organism-Wholes which are members of the #$BiologicalClass Amphibia, being a specialization of #$Vertebrate.  
Members of this class are smooth skinned #$Vertebrates which hatch from eggs to form aquatic larvae [see #$Larva].  These larvae metamorphose into an air-breathing adult [see AirBreathingVertebrate] (normally) having #$Lungs.  Subsets of this collection include #$Frogs and #$Salamanders.")))

(defconcept Anesthesia
  :is-primitive Drug-Therapy
  :annotations (Script-Type
                (documentation "A collection of events; a subset of #$DrugTherapy (q.v.).  In an instance of #$Anesthesia, a #$BiologicalLivingObject undergoes the effect of some instance of #$Anesthetic, the effect of which is to eliminate the perception of pain.  #$Anesthesia events occur in connection with other medical care events, so that a patient will not feel the pain or discomfort that would otherwise be associated with those medical procedures.  #$Anesthetics are of various chemical kinds, work in various ways, and can be administered in various ways.  They may topically numb an area, they may poison the central nervous system to the point where the animal loses consciousness, etc.  The resulting anesthetic therapies thus may differ, according to the type of anesthetic used; for example, the patient may or may not be conscious during an instance of #$Anesthesia.  See also #$AdministeringADrug.")))

(defconcept Anger
  :is-primitive Frustration
  :annotations (Feeling-Attribute-Type
                (documentation "Intense feeling of displeasure and usually of antagonism.  This is a #$Collection --- for an explanation of that, see #$Happiness.  Some more specialized #$FeelingAttributeTypes than #$Anger include #$Belligerence, etc.")))

(defconcept Angle
  :is-primitive Geometric-Thing
  :annotations (Object-Type
                (documentation "A collection of #$GeometricThings.  Each element of #$Angle is a pair of line segments, planes (or, more generally, n-dimensional hyperplanes) that share an endpoint, edge (or, more generally, an [n-1]-dimensional hyperedge).")))

(defconcept Angular-Acceleration-Rate
  :is-primitive (:and Physical-Attribute Scalar-Interval)
  :annotations (Measurable-Attribute-Type
                (documentation "#$AngularAccelerationRate is the rate at which the #$RateOfRotation of an object changes.It is a measurable physical quantity, measured in units such as radians per second per second.")))

(defconcept Animal
  :is-primitive (:and Organism--Whole
                      Solid-Tangible-Thing
                      Animal-Blo
                      Perceptual-Agent)
  :annotations (Biological-Kingdom
                (documentation "The collection of all animals; this large class of organisms is one instance of #$BiologicalKingdom.  Animals are typically motile, living, whole organisms; they are elements of #$Heterotroph, incapable of performing instances of #$Photosynthesis.  Animal cells contain cholesterol and lack cell walls made of cellulose.  #$Person is a subset of #$Animal; see also #$NonPersonAnimal.")))

(defconcept Animal-Activity
  :is-primitive (:and Composite-Physical-And-Mental-Event Action)
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "A collection of events.  Each element of #$AnimalActivity is an action whose performer(s) (see #$doneBy) belong to the collection #$Animal.")))

(defconcept Animal-Blo
  :is-primitive Biological-Living-Object
  :annotations (Existing-Object-Type
                (documentation "The subset of #$BiologicalLivingObject which includes all the elements of #$Animal and of #$AnimalBodyPart and #$AnimalBodyRegion.")))

(defconcept Animal-Body-Part
  :is-primitive Animal-Body-Region
  :annotations (Existing-Object-Type
                (documentation "The collection of all the anatomical parts and physical regions of all living animals; a subset of #$OrganismPart.  Each element of #$AnimalBodyPart is a piece of some live animal and thus is itself an instance of #$BiologicalLivingObject.  #$AnimalBodyPart includes both highly localized organs (e.g., hearts) and physical systems composed of parts distributed throughout an animal's body (such as its circulatory system and nervous system).  
Note: Severed limbs and other parts of dead animals are NOT included in this collection; see #$DeadFn.")))

(defconcept Animal-Body-Part-Type
  :is-primitive Existing-Object-Type
  :annotations (Sibling-Disjoint-Collection
                (documentation "The collection of all the types of #$AnimalBodyParts.  An #$AnimalBodyPartType  is a characterization of body parts by structure and/or function.   Some elements of this collection include #$SpinalColumn, #$Eyelash, #$NervousSystem, #$Urethra, #$Wing-AnimalBodyPart, #$HeelOfPalm, etc.  As can be seen from those examples, #$AnimalBodyPartType is not organized along species/order/class/phylum/... taxonomic lines.")))

(defconcept Animal-Body-Region
  :is-primitive (:and Animal-Blo Organism-Part)
  :annotations (Existing-Object-Type
                (documentation "The set of parts of an animal's body that one might point to, operate on, photograph, transplant, etc.  So this is a collection of (conceptual) spatial subdivisions of the bodies of #$Animals, generally contiguous and having some more or less clear boundary.  Some elements of this collections are Einstein's head, #$SantasBeard, and Babe Ruth's right arm.  Other elements of this set are what might be considered unhealthy body regions, such as a blister, a puncture wound, a bruise, etc. -- but those are still clearly a part of an animal's body, can be pointed to, photographed, bandaged up, etc.   
Note that this concept is quite different from an animal body `system' (such as the lymph system, the nervous system, etc.) which comprises a small portion of an animal's total mass but is distributed throughout the animal's body -- see #$AnimalBodyPart.  (At the naive, commonsense level of physiology, and for almost all purposes, it is perfectly acceptable to conceptualize Santa's beard as one #$AnimalBodyRegion, and the same for Farrah Fawcett's hair, etc.  A borderline case of this is:  Cher's fingernails.  In some contexts, one would treat those as an #$AnimalBodyRegion, and in other contexts one would treat them as ten separate #$AnimalBodyRegions.)")))

(defconcept Animal-Migration
  :is-primitive (:and Translation--Round-Trip Locomotion-Event)
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "The collection of regular, species-linked movements of an animal or group of animals from one place to another, usually with a return to the starting point after a certain period of time.  In some species, the migration cycle occurs once in a lifetime, while others migrate annually on a seasonal basis.   Migration is typically linked with an animal's reproductive cycle (as in salmon), but may also involve seasonal relocation to a more hospitable climate and/or more plentiful food supply. For example, many birds exhibit seasonal migration; e.g., native Northeastern U.S. birds that spend their winters in the Southern U.S.")))

(defconcept Animal-Physiological-Attribute
  :is-primitive (:and Physiological-Attribute Attribute-Value)
  :annotations (Attribute-Type
                (documentation "The broadest collection of attributes of #$Animals that describe the physiological aspects of an animal, including its physiological (1) capacities, (2) conditions, and (3) states.  Examples include: (1) Capacities: #$Fertile, #$HearingImpaired, #$Paraplegic; (2) Conditions: #$Anemic, #$AthleticPhysicalBuild; (3) States: #$Intoxicated, #$Injured, #$Inflamed.  #$PlantPhysiologicalAttributes, such as #$InBloom, are excluded.")))

(defconcept Animal-Sound
  :is-primitive (:and Information-Bearing-Wave-Propagation Audible-Sound)
  :annotations (Temporal-Stuff-Type
                (documentation "A collection of information bearing things (IBTs); a subset of #$InformationBearingWavePropagation.  Each element of #$AnimalSound is a sound of a type which originally was, and typically is, made by an animal using just its body parts (though such a sound may subsequently have been reproduced by imitation or recording).  For example, instances of #$Birdsong, #$NeighingSound, #$PurringSound, #$BarkingSound, #$BrayingSound.  Note that the restriction to sounds produced by body parts alone excludes noises produced by moving external objects; i.e., #$AnimalSound does NOT include rustling the leaves underfoot, splashing water, or playing a musical instrument.")))

(defconcept Animal-Walking-Process
  :is-primitive (:and Simple-Whole-Body-Movement Locomotion-Process)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                Object-Type
                (documentation "The collection of individual #$LocomotionProcess es in which an #$Animal agent travels on foot using voluntary movements of its legs.")))

(defconcept Annual-Climate-Cycle
  :is-primitive Weather-Event
  :annotations (Script-Type
                (documentation "A collection of events.  Each element of #$AnnualClimateCycle is an extended event, one year in length, which encompasses #$subEvents describing the changing of the seasons.  Subsets include #$TemperateClimateCycle, #$HumidSubtropicalClimateCycle, etc.  See also the comments on #$ClimateCycleType, #$hasClimateType.")))

(defconcept Annual-Event-Type
  :is-primitive Temporal-Object-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  The instances of an element of #$AnnualEventType are synchronized with the calendar.  If ?X is an #$AnnualEventType, then one occurs each year.  For example, #$ChristmasHoliday is an #$AnnualEventType, because one occurs each year, synchronized with the calendar.")))

(defconcept Anticipation--Feeling
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "Emotion accompanying an expectation of something pleasant in the foreseeable future.  This is a collection; for an explanation of a typical #$FeelingAttributeType, see #$Happiness. ")))

(defconcept Anti-Symmetric-Binary-Predicate
  :is-primitive Binary-Predicate
  :annotations (Cyc_Collection
                Predicate-Category
                (documentation "A collection of predicates; the subset of #$BinaryPredicate whose elements represent antisymmetric relations.  A predicate F is an element of #$AntiSymmetricBinaryPredicate if and only if F is a binary predicate and, if both (F X Y) and (F Y X) hold, then X=Y, for every X,Y within the domain and range of F.  For example, #$greaterThanOrEqualTo, #$compatibleBloodTypes.







Note this additional restriction: A Cyc predicate F can be an element of #$AntiSymmetricBinaryPredicate only if the type (i.e., arg-Isa) constraint applicable to F's first argument is not disjoint with the type constraint applicable to F's second argument.  See also #$NoteOnArgumentTypingAndPropertiesOfRelations.")))

(defconcept Anti-Transitive-Binary-Predicate
  :is-primitive (:and Irreflexive-Binary-Predicate Binary-Predicate)
  :annotations (Predicate-Category
                (documentation "A collection of predicates; the subset of #$BinaryPredicate whose elements represent anti-transitive relations.  A predicate F is an element of #$AntiTransitiveBinaryPredicate if and only if F is a binary predicate and, for every X,Y,Z in the domain of F, (#$not (#$and (F X Y)(F Y Z)(F X Z))).  

Note this additional restriction: A Cyc predicate F can be an element of #$AntiTransitiveBinaryPredicate only if the type (i.e., arg-Isa) constraint applicable to F's first argument is not disjoint with the type constraint applicable to F's second argument.  See also #$NoteOnArgumentTypingAndPropertiesOfRelations.")))

(defconcept Apathy
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "A lack of interest or concern.  If someone is feeling some measure of #$Apathy, then they typically will have little or no response to things normally expected to excite emotion or interest.  This is a #$Collection --- for an explanation of that, see #$Happiness.  A related #$FeelingAttributeType is #$Boredom.")))

(defconcept Appendage--Animal-Body-Part
  :is-primitive (:and Animal-Body-Part Solid-Tangible-Thing)
  :annotations (Animal-Body-Part-Type
                (documentation "The collection of all appendages of #$Animals.  An appendage is an #$AnimalBodyPart that is connected to, and extends from, the animal's #$Torso (or else from another of its appendages, such as a hand extending from an arm).  Each appendage is used by the #$Animal for one or more functions; altogether, appendages serve a wide variety of functions such as locomotion, manipulation, sensing, fighting, scratching, heat dissipation, balance, etc.")))

(defconcept Appropriating-Something
  :is-primitive (:and Taking-Something Gaining-User-Rights)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events; a subset of #$TakingSomething and of #$GainingUserRights.  In an instance of #$AppropriatingSomething, an #$Agent takes something that no one else has user rights over, such as air for breathing, or some object which at that time belongs to no one (e.g.,a dime lying in the street).
Note: The English verb `appropriate' can also mean to take something away from someone else, against their will and wrongfully, but that is not what is meant here.  For that, see #$Stealing-Generic.")))

(defconcept Approval
  :is-primitive Satisfaction
  :annotations (Feeling-Attribute-Type
                (documentation "The emotion of viewing positively a state of affairs or other agent's actions.  This is a collection; for an explanation of a typical #$FeelingAttributeType, see #$Happiness.")))

(defconcept April
  :is-primitive Calendar-Month
  :annotations (Month-Of-Year-Type))

(defconcept Aquatic-Organism
  :is-primitive Organism--Whole
  :annotations (Organism-Type-By-Habitat
                (documentation "The collection of organisms adapted to life underwater, which spend all or most of their time immersed in water.  This includes the elements of #$Fish, also many instances of #$Mollusk, #$SeaMammal, etc.")))

(defconcept Area
  :is-primitive (:and Scalar-Interval Physical-Attribute)
  :annotations (Derived-Numeric-Attribute-Type
                (documentation "A collection of physical attributes.  Each element of #$Area is an amount of two-dimensional space, i.e., a surface.  Elements of #$Area may be either a fixed interval, such as the area of a rectangle 5 cm x 10 cm, or a range, such as the area of a city lot.  See #$UnitOfArea for the units used by Cyc to measure areas.")))

(defconcept Arm
  :is-primitive Appendage--Animal-Body-Part
  :annotations (Symmetric-Anatomical-Part-Type
                (documentation "The collection of all animal arms.  An #$Arm of an animal is one of its #$AnimalBodyParts, more particularly one of its appendages, a limb which it uses for manipulation moreso than for locomotion.  A #$Hand is considered part of an #$Arm.")))

(defconcept Arm-Movement
  :is-primitive Body-Movement-Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of any movements of an arm that are generated by the #$Animal whose arm it is, through nerve impulses to the arm.  Physically, an #$ArmMovement involves movement of the upper arm or elbow in relation to the body to which it is attached.")))

(defconcept Army
  :is-primitive Military-Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of military organizations.  An element of #$Army is a military organization, modern or historical, composed mainly of ground forces, which may include infantry, cavalry, artillery, tank and miscellaneous mechanized units, and special forces.  Its personnel may also include support workers such as engineers and medical staff.")))

(defconcept Army-Personnel
  :is-primitive (:and Military-Person Soldier)
  :annotations (Occupation-Type
                (documentation "A collection of people, a subset 
of #$MilitaryPerson. Each element of this collection is
somebody who works for an #$Army.")))

(defconcept Arresting-Someone
  :is-primitive Taking-Custody-Of-Animal
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "A collection of events.  In an instance of #$ArrestingSomeone, a law enforcement officer arrests another person, who is thereupon taken into custody (#$InCustody).")))

(defconcept Arthropod
  :is-primitive Invertebrate
  :annotations (Biological-Phylum
                (documentation "An instance of #$BiologicalPhylum whose #$taxonMembers include (mostly) the numerous collections of chitin-armored invertebrates that have jointed bodies and limbs, e.g., insects, spiders, crustaceans, etc.")))

(defconcept Artifact
  :is-primitive (:and Partially-Tangible Something-Existing)
  :annotations (Cyc_Collection
                (documentation "A collection of tangible things.  An instance of #$Artifact is a tangible which was more or less intentionally created by an #$Agent (or a group of #$Agents working together) to serve some purpose or perform some function.  By `created', we don't require that the matter itself be created, it is often just the result of some sort of assemblage or modification process, such as a wooden flute that's been whittled from a tree branch, a sawhorse that's been put together out of boards and nails, a coin that's been minted by embossing or by melting liquid silver into a mold, etc.

Let's consider some positive and negative examples.

In addition to the obvious human artifacts (buildings, tools, textiles, power lines), this collection includes certain sorts of things made by #$Animals, such as bird nests, termite mounds, and beaver dams.

Something which just barely squeaks through the intended meaning of this concept is #$YaleUniversity.  In addition to the abstract legal entity, it consists of a set of physical buildings, furnishings, etc.  By contrast, an organization that had no headquarters building, equipment, tangible property, etc. would not be an artifact.  Similarly, a fictional character such as Tom Sawyer is not an artifact (in the context of the story, Tom is not an artifact because he is a real boy; in the context of the real world, Tom is not an artifact because he has no tangible component whatsoever.)

While some artifacts may be alive, or contain living subparts, we do not intend this collection to encompass all organisms which resulted from normal biological reproductive processes.  Your child is not an artifact.

If you do an oil painting of a house that is an artifact, but much more borderline is what you get if you take a rock and just paint it a solid color, say white.  In general that won't be an artifact unless it serves some purpose, such as marking the shoulder of a roadway, but more questionable cases are if the purpose of the white rock is just `to be sold as art' or `to look pretty.'  The white rock might thus be an artifact in certain contexts, but not in others.

Not every instance of #$Path-Generic (q.v.) is necessarily an instance of #$Artifact.  For example, some channels used for navigation may not be artifacts, because even though they are marked with human artifacts (i.e., channel markers) as locations where ships may safely travel, the channel itself may have been a naturally occurring pre-existing thing -- e.g., the #$EnglishChannel.  If a #$Channel-WideStrait were produced or maintained only by constant dredging, it might count as an artifact.  By contrast, each #$Canal, such as #$SuezCanal, is almost certain to be an #$Artifact.")))

(defconcept Artificial-Material
  :is-primitive Artifact
  :annotations (Existing-Stuff-Type
                (documentation "A collection of substances; a subset of #$Artifact.  An instance of #$ArtificialMaterial is a portion of artificial stuff that was intentionally made by some agent(s), such as #$Plastic or #$SweetNLow. Since #$ArtificialMaterials are intentionally produced, this class does not normally include materials which are merely #$byProducts or #$wasteProducts of an intentional process.  However, what is a byproduct at one time or in one context may be a useful material that would count as an instance of #$ArtificialMaterial in another.")))

(defconcept Art-Object
  :is-primitive (:and Information-Bearing-Object
                      Composite-Tangible-And-Intangible-Object
                      Artifact
                      Product)
  :annotations (Existing-Object-Type
                (documentation "A collection of information bearing objects (IBOs).  Each element of #$ArtObject is a tangible object that is a work, or a reproduction of a work, in one of the representational or plastic arts, such as a painting, sculpture, ceramic piece, quilt, stained glass composition, etc.  #$ArtObject does NOT include plays, movies, music, performance art, or other activities.  #$ArtObject is a subset of #$InformationBearingObject, but its elements need not have propositional content, although they may.  Examples of #$ArtObject: the #$StatueOfLiberty, the Mona Lisa, a poster reproduction of Van Gogh's `Starry Night', Rodin's `Burghers of Calais', a piece of Ju ware from the Sung Dynasty, the windows of Chartres Cathedral, a series of prints by Picasso.")))

(defconcept Assertion
  :is-primitive (:and Abstract-Information
                      Computational-Object
                      Cyc-Indexed-Term
                      Individual)
  :annotations (Object-Type
                Cyc_Collection
                (documentation "A collection of computational objects.  Each instance of #$Assertion is either (1) an assertion reified in the Cyc Knowledge Base (i.e., a formula and its associated datastructure, actually in the Cyc KB), or (2) an Epistemological Level #$CycFormula that can be canonicalized and reified as one or more KB assertions.  #$Assertion is used as an argument type for meta-predicates such as #$overrides.")))

(defconcept Astronomical-Object
  :is-primitive (:and Tangible-Thing Inanimate-Object--Natural)
  :annotations (Existing-Object-Type
                (documentation "A collection of tangible objects.  Each element of #$AstronomicalObject is an object of interest to astronomers, which includes the Earth along with other objects in outer space.  Some, but not all, elements of #$AstronomicalObject belong to #$CelestialObject, the collection of heavenly bodies visible from earth.  Examples: #$Polaris-TheStar, the #$Sun, #$PlanetSaturn.")))

(defconcept Asymmetric-Binary-Predicate
  :is-primitive (:and Anti-Symmetric-Binary-Predicate
                      Irreflexive-Binary-Predicate
                      Binary-Predicate)
  :annotations (Cyc_Collection
                Predicate-Category
                (documentation "A collection of predicates; the subset of #$AntiSymmetricBinaryPredicate whose elements represent asymmetric relations.  A predicate F is an element of #$AsymmetricBinaryPredicate if and only if F is a binary predicate and (F X Y) implies (#$not (F Y X)).  For example, #$northOf, #$children, #$greaterThan, #$overrides.



Note this additional restriction: A Cyc predicate F can be an element of #$AsymmetricBinaryPredicate only if the type (i.e., arg-Isa) constraint applicable to F's first argument is not disjoint with the type constraint applicable to F's second argument.  See also #$NoteOnArgumentTypingAndPropertiesOfRelations.")))

(defconcept Athlete
  :is-primitive (:and Person Professional)
  :annotations (Occupation-Type
                (documentation "A collection of persons.  Each element of #$Athlete is a person who trains to compete in contests involving physical agility, stamina, or strength.  In the #$JobMt, #$Athlete is a subset of #$Professional (q.v.), and hence in that microtheory represents the collection of professional athletes.")))

(defconcept Athletic-Activity
  :is-primitive Exercising
  :annotations (Script-Type
                (documentation "Any athletic activity, not just sports events.  E.g., spelunking, or going for a jog, or shooting a few hoops.")))

(defconcept Atom
  :is-primitive Chemical-Object
  :annotations (Existing-Object-Type
                (documentation "A collection of microscopic-scale objects.  Each instance of #$Atom has one atomic nucleus and some number of electrons.  As a default, we assume that an instance of #$Atom has no net charge, i.e., that it has as many instances of #$Electrons as it does of #$Protons in its #$AtomicNucleus; but note there are exceptions, e.g., in the subset #$Ion.")))

(defconcept Atomic-Nucleus
  :is-primitive Chemical-Object
  :annotations (Existing-Object-Type
                (documentation "A collection of objects; a subset of #$ChemicalObject.  Each instance of #$AtomicNucleus is an object composed of some definite number of instances of #$Proton and some definite number of instances of #$Neutron.  Instances of the collection #$Atom are each composed of one member of #$AtomicNucleus and some number of electrons.")))

(defconcept Attribute-Type
  :is-primitive Object-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$AttributeType is a collection of attributes.  Each element of #$AttributeType is a subset of #$AttributeValue (q.v.).  Examples include #$SensoryAttribute, #$BodyPartPosition, #$OrientationAttribute, #$SecurityClearanceLevel, #$ComputerVideoResolution, #$TorqueVector, and many more.")))

(defconcept Attribute-Value
  :is-primitive (:and Individual Intangible-Individual)
  :annotations (Cyc_Collection
                Attribute-Type
                (documentation "The set of all attributes represented in Cyc. #$AttributeValue includes quantities, such as 5 inches (i.e., (#$Inch 5)) or 1000 dollars per year (i.e., (#$DollarsPerYear 1000)), as well as qualities like #$Hilly, #$Rough, #$DeviceOn, etc., which can be used to make assertions about the state of some tangible object.")))

(defconcept Audible-Sound
  :is-primitive Sound
  :annotations (Wave-Propagation-Type
                (documentation "A collection of events; a subset of #$Sound.  Each element of #$AudibleSound is a sound within the #$Frequency range of human hearing.")))

(defconcept Audio-Communicating
  :is-primitive Communicating
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of information transfer events; a subset of #$Communicating.  Each element of #$AudioCommunicating is a transmission of sound-borne information between two (or more) agents; e.g., talking, clapping, or performing music.")))

(defconcept August
  :is-primitive Calendar-Month
  :annotations (Month-Of-Year-Type))

(defconcept Authorized-Agreement
  :is-primitive Agreement
  :annotations (Existing-Object-Type
                (documentation "The collection of generic agreements that are authorized by one of the agreeing parties (typically by the issuer of the document embodying the agreement).  #$AuthorizedAgreements are generic in the sense that their authorizing agents are party to many similar agreements; for that reason, an #$AuthorizedAgreement is typically given a unique identification number.  Examples: bank accounts, driver's licenses, stock certificates.")))

(defconcept Auto-Dealership
  :is-primitive (:and Business Local-Customer-Contact-Point Retail-Store)
  :annotations (Existing-Object-Type
                (documentation "Each instance is an establishment (an organization located at one site) that sells automobiles and other types of road vehicles to consumers.")))

(defconcept Back-Side
  :is-primitive Side
  :annotations (Region-Type
                (documentation "The collection of all the entire back sides (as conventionally understood) of all objects that have distinct #$Sides, one of which faces in the backwards direction.")))

(defconcept Baking-Food
  :is-primitive Cooking-Food
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events in which food is baked in a #$RegularOven.  After an event of #$BakingFood, the food involved has been #$Baked.")))

(defconcept Balcony-Level-In-A-Construction
  :is-primitive (:and Level-Of-A-Construction Container-Product)
  :annotations (Existing-Object-Type
                (documentation "This refers to those overhanging levels or balconies found in some churches, theatres, etc.  They ARE NOT the kind of balcony that protrude from a window or from an already existing level.  These levels are often a third the size of the floor or level below them, and therefore can be called legitimate levels themselves.  They usually contain a mob of seats.")))

(defconcept Bank-Debit-Card
  :is-primitive (:and Official-Document Id-Document Tender-Object Card)
  :annotations (Existing-Object-Type
                (documentation "A collection of official `documents'.  Each element of #$BankDebitCard is a plastic card that enables the holder to access the account with which the card is associated; typically used to withdraw funds from the account.  Cf. #$CreditCard.")))

(defconcept Bartering
  :is-primitive (:and Transaction Exchange-Of-User-Rights)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of transactions between two #$Agents in which one #$Agent gives items or services to another #$Agent, and the other #$Agent gives items or services in return, and neither of the items or services is money, credit, or payment of money.")))

(defconcept Basement-Level-In-A-Construction
  :is-primitive Level-Of-A-Construction
  :annotations (Existing-Object-Type
                (documentation "Any level of a building which is underground.")))

(defconcept Battle
  :is-primitive Hostile-Social-Action
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "The collection of events in which two or more large groups of #$Persons meet and fight one another, each group seeking to vanquish (some of) the others.  #$Battles are often conducted by #$MilitaryOrganizations, and they may influence the outcomes of #$WagingWar.  A #$Battle will have as #$subEvents at least two #$PhysicallyAttackingAnAgent events, in which one of the fighting groups attacks the other.")))

(defconcept Belief-System
  :is-primitive Mental-Object
  :annotations (Belief-System-Type
                (documentation "The collection of ideologies (systems of belief) in terms of which an agent characterizes (i.e., makes sense of) their world.  Elements of this set include: #$VegetarianBeliefs, #$GermanNaziIdeology, #$RepublicanIdeology, #$CommunistIdeology, #$PacifistIdeology, #$Atheism, etc. See also #$ConventionalClassificationSystem.")))

(defconcept Belief-System-Type
  :is-primitive Stuff-Type
  :annotations (Cyc_Collection
                (documentation "The collection of all the kinds of #$BeliefSystems: religious, philosophical, political, ethical, cultural, and scientific.  Some elements of this collection include #$Religion, #$PhilosophyBeliefs, etc.  The most general member of this set is #$BeliefSystems (qv).")))

(defconcept Bilaterally-Symmetric-Object
  :is-primitive Spatial-Thing
  :annotations (Existing-Object-Type
                (documentation "The collection of objects which are symmetric on both sides of a bisecting axis, as are most vertebrates.")))

(defconcept Bill--Payment-Request
  :is-primitive (:and Textual-Material
                      Hardcopy-Information-Bearing-Object
                      Official-Document)
  :annotations (Existing-Object-Type
                (documentation "A collection of documents.  Each element of #$Bill-PaymentRequest is a notification, demand, or request made by a creditor (or its agent) to a debtor, for payment of a debt previously incurred for some loan, goods, or services.  Examples: telephone bills, tax bills, department store bills, cleaning bills, fuel bills.")))

(defconcept Billing-Location
  :is-primitive Mailing-Location
  :annotations (Contact-Location-Type
                (documentation "A collection of places; a subset of #$ContactLocation.  Each element of #$BillingLocation is a location to which invoices are sent.  For most private individuals, their billing location is their home address.")))

(defconcept Binary-Predicate
  :is-primitive Predicate
  :annotations (Cyc_Collection
                Predicate-Category
                (documentation "#$BinaryPredicate is the collection of all Cyc predicates which take two arguments.")))

(defconcept Bio-Deterioration-Resistance
  :is-primitive (:and Physical-Attribute Scalar-Interval)
  :annotations (Primitive-Attribute-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute.  Each element of #$BioDeteriorationResistance represents a specific capacity of a tangible object to resist biological deterioration.  Degrees of #$BioDeteriorationResistance may be represented using #$GenericValueFunctions.  Indicate a particular object's #$BioDeteriorationResistance with the predicate #$resistanceToBioDeterioration.")))

(defconcept Biological-Catabolism-Event
  :is-primitive (:and Biological-Destruction-Event Biological-Metabolism-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each #$BiologicalCatabolismEvent involve the destruction of larger molecules.  E.g., the degradation of glucose into carbon dioxide and water, which releases energy used to make ATP (adenosine triphosphate).")))

(defconcept Biological-Class
  :is-primitive Biological-Taxon
  :annotations (Biological-Taxon-Type
                (documentation "The collection of taxonomic subdivisions directly under #$BiologicalPhylum (for animals and for the animal-like organisms in the #$ProtistaKingdom), or #$BiologicalDivision (for the plants and for the plant-like organisms within the #$ProtistaKingdom).")))

(defconcept Biological-Decomposition-Event
  :is-primitive (:and Decomposition-Event Biological-Destruction-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  In each #$BiologicalDecompositionEvent, some living structures are decomposed.")))

(defconcept Biological-Destruction-Event
  :is-primitive (:and Destruction-Event Biological-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  In each element of #$BiologicalDestructionEvent, something is destroyed by some element(s) of #$BiologicalLivingObject.  For example, #$DigestingInStomach is a subset of #$BiologicalDestructionEvent.")))

(defconcept Biological-Development-Event
  :is-primitive (:and Biological-Event Intrinsic-State-Change-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events, and a subset of #$IntrinsicStateChangeEvents.  In each #$BiologicalDevelopmentEvent, one or more living things undergo biological changes in which they progress from one developmental stage to another.  For example, the germination of a seed, the opening of a flower, the pupating of a caterpillar, a teenager reaching puberty.  Some borderline non-examples include: Groucho Marx being born, Groucho Marx dying.")))

(defconcept Biological-Division
  :is-primitive Biological-Taxon
  :annotations (Biological-Taxon-Type
                (documentation "The collection of main taxonomic subdivisions of #$BiologicalKingdom (or #$BiologicalSubkingdom) for the members of the #$MoneraKingdom (i.e., prokaryotes), #$Fungus Kingdom, #$Plant Kingdom, and for the plant-like organisms within the #$ProtistaKingdom.  In the #$Animal Kingdom, however, the main taxonomic subdivisions are elements of #$BiologicalPhylum (q.v.) rather than #$BiologicalDivision.")))

(defconcept Biological-Event
  :is-primitive Physical-Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "An event in which a biological thing is a #$bodilyDoer.")))

(defconcept Biological-Family
  :is-primitive Biological-Taxon
  :annotations (Biological-Taxon-Type
                (documentation "The collection of biological taxonomic subdivisions below #$BiologicalOrder and above #$BiologicalGenus.  Especially important in Botanical classification.")))

(defconcept Biological-Genus
  :is-primitive Biological-Taxon
  :annotations (Biological-Taxon-Type
                (documentation "The collection of biological taxonomic subdivisions below #$BiologicalFamily and above #$BiologicalSpecies.  Sometimes, hybrids are possible between different instances of #$BiologicalSpecies that belong to the same #$BiologicalGenus.")))

(defconcept Biological-Intake-Event
  :is-primitive Biological-Transportation-Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of processes.  In each element of #$BiologicalIntakeEvent, some object(s) are taken into some living structure.")))

(defconcept Biological-Kingdom
  :is-primitive Biological-Taxon
  :annotations (Biological-Taxon-Type
                (documentation "The collection of the highest, most general taxonomic divisions of organisms.  Traditionally, it has included the elements of #$Animal and of #$Plant and may include separate kingdoms for the elements of #$ProkaryoticCell, single-celled eukaryotes (protists), and fungi.")))

(defconcept Biological-Living-Object
  :is-primitive (:and Composite-Tangible-And-Intangible-Object Organic-Stuff)
  :annotations (Existing-Object-Type
                (documentation "A collection of all structures that are composed of one or more living cells (see #$Cell).  Biological living objects (BLOs) may be either elements of #$Organism-Whole (like dogs or pine trees) or are components of such whole organisms (like noses, tails, and pine needles).  The healthy leg of a living person is a BLO (as is the person), but an amputated leg is not a BLO.  Every element of #$BiologicalLivingObject is either capable of biological reproduction itself or has components which are capable of biological reproduction (such as the cells in a living arm).")))

(defconcept Biological-Metabolism-Event
  :is-primitive Biological-Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of biological processes in which substrates are converted into metabolites.  The metabolites may be more or less complex than the substrates.")))

(defconcept Biological-Order
  :is-primitive Biological-Taxon
  :annotations (Biological-Taxon-Type
                (documentation "The collection of biological taxonomic subdivisions below #$BiologicalClass (or #$BiologicalSubclass) and above #$BiologicalFamily.")))

(defconcept Biological-Phylum
  :is-primitive Biological-Taxon
  :annotations (Biological-Taxon-Type
                (documentation "The collection of main taxonomic subdivisions of #$BiologicalKingdom (or #$BiologicalSubkingdom if present) for the #$Animal kingdom and for the animal-like organisms within the #$ProtistaKingdom.  The other elements of #$BiologicalKingdom have divisions belonging to #$BiologicalDivision instead of Phyla (Phyla is the plural of Phylum).")))

(defconcept Biological-Production-Event
  :is-primitive (:and Biological-Event Creation-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  In each element of #$BiologicalProductionEvent, raw materials are combined to produce a product, and some element(s) of #$BiologicalLivingObject is the producer.  E.g., the production of honey by honeybees, the growth of a seedling into a tree, the secretion of sweat by a marathon runner, etc.  

Note:  This is a very general collection, and for most purposes one of its subsets will better capture what is intended.")))

(defconcept Biological-Reproduction-Event
  :is-primitive (:and Biological-Production-Event Biological-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each element of #$BiologicalReproductionEvent is an event in which one or more biological organisms (the #$parentActors) produce new organisms (the #$offspringActors) generally of the same kind as the parents.")))

(defconcept Biological-Species
  :is-primitive Biological-Taxon
  :annotations (Biological-Taxon-Type
                (documentation "A collection of the lowest taxons (#$BiologicalTaxon, q.v.) that are necessarily common to both parents of fertile offspring, or, in the case of asexual reproduction, necessarily common to parent and child.  Members of different species cannot produce fertile offspring by interbreeding.  An element of #$BiologicalSpecies has members who all have significant traits in common, and members of each biological species have other members as parents.  In biological taxonomy, related species are grouped into a particular element of #$BiologicalGenus (q.v.).")))

(defconcept Biological-Stage-Of-Development
  :is-primitive Biological-Living-Object
  :annotations (Existing-Object-Type
                (documentation "The collection of all the particular stages of existence of all living things.  Each element of #$BiologicalStageOfDevelopment is a spatiotemporal portion of the life of some instance of #$BiologicalLivingObject.  Typical cases (i.e., subsets) include #$Larva, #$Pupa, #$AdultAnimal, etc.  For example, the pupal stage of a particular Monarch butterfly, or my American Beauty rose bush during the stage when it was blooming last year, or Teddy Roosevelt during his 13th year.  See also the related Cyc predicates #$developmentalSuccessor and #$developmentalStages.



")))

(defconcept Biological-Subclass
  :is-primitive Biological-Taxon
  :annotations (Biological-Taxon-Type
                (documentation "The collection of biological taxonomic subdivisions more specific than #$BiologicalClass but more general than #$BiologicalOrder.")))

(defconcept Biological-Subkingdom
  :is-primitive Biological-Taxon
  :annotations (Biological-Taxon-Type
                (documentation "The collection of biological subkingdoms, the biological taxonomic divisions of organisms immediately below #$BiologicalKingdom.")))

(defconcept Biological-Taxon
  :is-primitive (:and Organism-Classification-Type
                      Conventional-Classification-Type)
  :annotations (Biological-Taxon-Type
                (documentation "The collection of ranked categories accepted by biologists for the biological classification of organisms according to their suspected evolutionary relationships.  Includes all levels of taxons.  See also #$BiologicalTaxonType and #$OrganismClassificationType.")))

(defconcept Biological-Taxon-Type
  :is-primitive (:and Sibling-Disjoint-Collection
                      Conventional-Classification-Type)
  :annotations (Sibling-Disjoint-Collection
                Disjoint-Set-Or-Collection
                (documentation "A collection of collections; #$BiologicalTaxonType contains the classes of organism types (i.e., taxons) that biologists recognize, including #$BiologicalSpecies, #$BiologicalPhylum, etc.   The naive classes that non-biologists use may be instances of some element of #$BiologicalTaxonType, though often they are not.  When they coincide, the commonsense class of organism (e.g., #$Person) is an instance of some #$BiologicalTaxonType (#$BiologicalSpecies, for example).  See also #$OrganismClassificationType.")))

(defconcept Biological-Transportation-Event
  :is-primitive (:and Biological-Event Transportation-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of processes involving living structures in which objects are transported.")))

(defconcept Bird
  :is-primitive (:and Terrestrial-Organism Non-Person-Animal Vertebrate)
  :annotations (Biological-Class
                (documentation "The collection of birds; a subset of #$Vertebrate.  Each element of #$Bird is an air-breathing, warm-blooded animal, covered with feathers, having forelimbs modified as wings and a beak rather than teeth.  Members of most, but not all, species of bird can fly.  #$Bird is an instance of #$BiologicalClass.")))

(defconcept Birth-Event
  :is-primitive (:and Biological-Development-Event
                      Pregnancy-Ending-Event
                      Emitting-An-Object
                      Medical-Care-Event)
  :annotations (Temporal-Object-Type
                Default-Disjoint-Script-Type
                (documentation "The collection of events in which one animal (prototypically, a #$Mammal) gives birth to another.  The mother is the #$birthParent and the child is the #$birthChild.  Both are #$objectOfStateChange; the mother goes from being pregnant to not pregnant, while the child goes from the #$Embryo life stage to the #$JuvenileAnimal life stage (see #$BiologicalStageOfDevelopment.")))

(defconcept Blue-Collar-Worker
  :is-primitive Professional
  :annotations (Occupation-Type
                (documentation "A collection of persons; a subset of #$Professional.  Each element of #$BlueCollarWorker is a person whose occupation is manual-labor intensive, sometimes demanding physical strength and, in some jobs, considerable skill, practical judgment, and work experience.  Types of blue-collar workers include miners, truck drivers, steelworkers, construction workers, agricultural workers, laborers, mechanics, garbage collectors, assembly line workers, janitorial workers, etc.  Their jobs may require some specialized training or apprenticeship but don't require a college degree.")))

(defconcept Bodily-Function-Event
  :is-primitive (:and Animal-Activity Physiological-Process Single-Doer-Action)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of animal activities that are regular bodily functions; examples include: a particular eating event, a particular breathing event, etc.")))

(defconcept Bodily-Function-Event--Involuntary
  :is-primitive Bodily-Function-Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "This is the subset of #$BodilyFunctionEvent whose elements are actions in which the `doer' is, by definition, a #$nonDeliberateActors.  Specializations (subsets) of #$BodilyFunctionEvent-Involuntary include #$HavingASeizure, #$Blushing, #$Bleeding, #$ExperiencingHunger, etc.
Note: if the `doer' of an involuntary bodily function is an #$Organism-Whole, then use #$bodilyDoer to describe its role in the event.")))

(defconcept Body-Movement-Event
  :is-primitive (:and Movement-Event Single-Doer-Action Animal-Activity)
  :annotations (Temporal-Object-Type
                Default-Disjoint-Script-Type
                (documentation "The collection of activities in which an #$Animal agent moves a part of its own body, whether consciously and intentionally or reflexively.  #$BodyMovementEvent includes subsets such as #$TakingAStep, #$BlockingAPunch, #$Hiccoughing, and #$BlinkingOnesEyes.")))

(defconcept Body-Of-Water
  :is-primitive (:and Outdoor-Location
                      Topographical-Feature
                      |(liquid-fn Water)|)
  :annotations (Existing-Object-Type
                (documentation "A collection of topographical features.  Each element of #$BodyOfWater is a natural or artificial body of water.  Elements may belong to specialized subsets such as #$Lake, #$Stream, and #$Ocean. #$BodyOfWater includes reservoirs, #$Canals, and navigation channels that are developed and/or enlarged by humans.  However, it does not include smaller purely-artificial bodies of water such as #$SwimmingPools or tanks of water.  Examples of #$BodyOfWater: #$HudsonBay, #$PanamaCanal, #$AdriaticSea, #$BayOfBengal, #$NiagaraFalls.")))

(defconcept Body-Part-Position
  :is-primitive Physiological-Attribute
  :annotations (Attribute-Type
                (documentation "The collection of attributes describing the position of a body part (or a whole body).  A #$BodyPartPosition may be determined relative to the body's environment (as with #$Postures) or merely with respect to the body part itself (e.g., #$Flexed, #$Extended).")))

(defconcept Boiling
  :is-primitive Physical-State-Change-Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  In each #$Boiling, a piece of liquid matter is raised to its #$boilingPoint and is thereby changed from being in the #$LiquidStateOfMatter to being in the #$GaseousStateOfMatter.
Note:  this is not intended to cover the cases of heat/evacuation causing a solid to sublime directly into a gas.")))

(defconcept Book
  :is-primitive Published-Material
  :annotations (Existing-Object-Type
                (documentation "A form of #$HardcopyInformationBearingObject consisting of folded, cut, bound, and usually printed sheets.  #$Books are often #$TextualMaterial, but sometimes contain only images.")))

(defconcept Bookkeeping-Predicate
  :is-primitive Predicate
  :annotations (Cyc_Collection
                Predicate-Category
                (documentation "A collection of predicates.  Each element of #$BookkeepingPredicate is a predicate used to form assertions about the creation and internal representation of a Cyc constant.  Bookkeeping predicates neither specify nor constrain the semantics of Cyc constants.  Examples:  #$myCreator, #$myCreationTime, #$termOfUnit, #$multiplicationUnits, #$quotientUnits.")))

(defconcept Border
  :is-primitive Spatial-Thing
  :annotations (Object-Type
                (documentation "The collection of all lines, linear regions, or dividing planes or surfaces--physical or abstract--that each constitutes the boundary between (#$formsBorderBetween) two regions (i.e., two elements of #$SpatialThing).")))

(defconcept Boredom
  :is-primitive (:and Feeling-Attribute Apathy)
  :annotations (Feeling-Attribute-Type
                (documentation "A state of dissatisfaction, weariness, or restlessness accompanied by a lack of interest.  This is a #$Collection --- for an explanation of that, see #$Happiness.  A related #$FeelingAttributeType is #$Apathy.")))

(defconcept Borrowing-Something
  :is-primitive (:and Temporary-Change-Of-User-Rights Transferring-Possession)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events; a subset of #$TemporaryChangeOfUserRights.  In an instance of #$BorrowingSomething, an #$Agent takes temporary control of something, usually with the permission of its owner(s).  Generally, the lending agent expects the borrowing agent to use the object for one of its normal functions (#$intendedBehaviorCapable).")))

(defconcept Botanical-Organ
  :is-primitive Plant-Part
  :annotations (Existing-Object-Type
                (documentation "A subset of #$PlantPart, the collection #$BotanicalOrgan includes parts of a plant which are major morphological and functional divisions of individual plants, typically consisting of stems, flowers, roots, leaves, etc.")))

(defconcept Bottom-Side
  :is-primitive Side
  :annotations (Region-Type
                (documentation "The collection of all the entire bottom sides (as conventionally understood) of all objects that have distinct #$Sides, one of which faces down.")))

(defconcept Brain
  :is-primitive Organ
  :annotations (Unique-Anatomical-Part-Type
                Animal-Body-Part-Type
                (documentation "The collection of all #$Animal brains.  An individual #$Brain is an #$Organ which controls most bodily movement, recieves sensory input from the body and objects outside the body, and in which the mind operates, being the locus for all #$MentalObjects.")))

(defconcept Breathing
  :is-primitive (:and Air-Respiration Body-Movement-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of activities constituting a natural #$PhysiologicalFunction; #$Breathing is the collection of #$AirRespiration events in which the respiring organism takes air into its internal #$Lungs, where the gas exchange occurs.  See also #$Respiration.")))

(defconcept Broad-Microtheory
  :is-primitive Microtheory
  :annotations (Cyc_Collection
                Microtheory-Type
                (documentation "The collection of those microtheories that contain so many assertions that they are not useful for `relevance' focusing during inference.  (A #$BroadMicrotheory is not used internally in Cyc's indexing scheme during inference.)  Examples: #$BaseKB and #$EnglishMt.")))

(defconcept Building
  :is-primitive (:and Real-Estate Human-Shelter-Construction Fixed-Structure)
  :annotations (Product-Type
                Existing-Object-Type
                (documentation "A collection of artifacts; a subset of #$FixedStructure and of #$HumanShelterConstruction.  An instance of #$Building is typically a substantial structure and must have walls and a roof, with rooms inside or at least some area designed to be occupied by humans (but not necessarily as a residence).  Examples include the Empire State Building, Michael Jackson's house in L.A., King Arthur's castle, an #$AircraftHangar at O'Hare, a #$Lighthouse in the Mediterranean sea, the #$SydneyOperaHouse, the #$WashingtonMonumentInWashingtonDC, etc.")))

(defconcept Building-Material
  :is-primitive Artifact
  :annotations (Product-Type
                Conventional-Classification-Type
                (documentation "A collection of tangible things.  An instance of #$BuildingMaterial is a material thing typically used in making new structures.  Instances of #$BuildingMaterial include a piece of lumber, a brick, a slab of concrete, a roof shingle, a copper nail, a double-paned storm window, etc.")))

(defconcept Bush
  :is-primitive Plant--Woody
  :annotations (Existing-Object-Type
                (documentation "A collection of plants; a subset of #$Plant-Woody.  The collection #$Bush includes all bushes, i.e., woody plants of branching growth habit that lack substantial trunks and are not usually taller than a person (and they are shorter than most specimens of #$Tree-ThePlant).   This is a commonsense collection without distinct boundaries.")))

(defconcept Business
  :is-primitive Commercial-Organization
  :annotations (Existing-Object-Type
                (documentation "The collection of #$Organizations intended to make profits, i.e., make money for agents that own them.  All #$Businesses are #$CommercialOrganizations (they must buy or sell something), but not all #$CommercialOrganizations are #$Businesses.  In a franchise #$Organization, the #$parentCompany is regarded as a #$Business, while the #$subOrganizations are merely instances of #$CommercialOrganization.  #$Businesses are typically #$LegalAgents, while #$CommercialOrganizations need not be.")))

(defconcept Business-Event
  :is-primitive Composite-Physical-And-Mental-Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each element of #$BusinessEvent is an intentional occurrence that is closely associated with, and either helps or hinders, the business purpose of some agent.  Examples include: the development of General Motors' business plan for 1996; an individual sales call on a particular customer; printing the 1996 Yellow Pages directory for the Austin, TX, area; selling a newspaper; designing and manufacturing a new memory chip.  #$BusinessEvent does NOT include purely social or recreational occurrences.")))

(defconcept Business-Person
  :is-primitive Professional
  :annotations (Occupation-Type
                (documentation "A collection of persons; a subset of #$Professional. Each element of #$BusinessPerson is a person whose occupation is primarily in the ownership and/or operation of a business.")))

(defconcept Business-Relationship-Activity
  :is-primitive (:and Business-Event Social-Occurrence)
  :annotations (Temporal-Stuff-Type
                Script-Type
                (documentation "A collection of events; a subset of both #$BusinessEvent and #$SocialOccurrence.  Each instance of #$BusinessRelationshipActivity is a (usually long-term) social activity whose participants are related by some business relationship.  The social events constituting a #$BusinessRelationshipActivity further, either directly or indirectly, the (usually mutual) business interests of the participants.  A #$BusinessRelationshipActivity is typically carried out over multiple social occasions and may consist of many #$subEvents.")))

(defconcept Buying
  :is-primitive (:and Monetary-Exchange-Of-User-Rights Buying-Activity)
  :annotations (Temporal-Object-Type
                Default-Disjoint-Script-Type
                (documentation "A collection of events.  Each element of #$Buying is an event in which an agent voluntarily pays to acquire something tangible or intangible, or for the performance of a service.  Payment may be in money or other exchange of wealth.  Elements of #$Buying may include #$subEvents of negotiation, the act of paying, and the transfer of the purchased thing to the buyer.  Examples of #$Buying include: purchasing fighter jets for the Navy; buying a Pepsi from a vending machine; ordering dinner at a restaurant; acquiring a personal life insurance policy for oneself; mail-ordering clothes from Sears; shopping at a farmers' market.")))

(defconcept Buying-Activity
  :is-primitive Commercial-Activity
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  #$BuyingActivity very generally includes events related to purchasing goods or services.  Each element of #$BuyingActivity is an event that is either (i) a common prelude to buying (i.e., the kinds of activities that contribute to their doers becoming buyers), or (ii) an element of #$Buying itself.  Examples of #$BuyingActivity include shopping for, or ordering, something very specific, and also general expressions of interest in purchasing something, such as placing an `Item Wanted' ad in a newspaper.")))

(defconcept Calendar-Autumn
  :is-primitive Calendar-Season
  :annotations (Calendar-Season-Type
                (documentation "The calendar season that begins at autumnal equinox and runs until winter solstice.")))

(defconcept Calendar-Century
  :is-primitive Time-Interval
  :annotations (Calendar-Covering-Type
                (documentation "The collection of centuries that make up the calendar (1900's, 1700's etc.)  An example of such a constant in Cyc is #$TheNineteenthCenturyAD ")))

(defconcept Calendar-Covering-Type
  :is-primitive Temporal-Object-Type
  :annotations (Sibling-Disjoint-Collection
                (documentation "#$CalendarCoveringType is a collection of collections.  An element ?CC of #$CalendarCoveringType  is itself a collection, a type of time interval, such that the union of all the instances of ?CC would completely cover all of time without overlap.  Thus, #$CalendarYear is a #$CalendarCoveringType because all of time consists of a sequence of non-overlapping #$CalendarYears.  Similarly #$CalendarMonth, #$CalendarDay, #$CalendarHour, etc.  Notice that #$Monday and #$December are NOT instances of #$CalendarCoveringType, because all of time is not a sequence of Mondays, or Decembers.  Also notice that a collection Week -- defined as the set of all seven-day-long-periods-of-time -- would not be an instance of #$CalendarCoveringType, since several different Weeks could overlap; e.g., the week beginning today and the week beginning yesterday and the week beginning tomorrow.")))

(defconcept Calendar-Day
  :is-primitive Date
  :annotations (Calendar-Covering-Type
                Script-Type
                Cyc_Collection
                (documentation "The collection of days that make up the calendar.  This is a collection of disjoint but contiguous time intervals.  One of its elements is Thursday, August 1, 1996.")))

(defconcept Calendar-Decade
  :is-primitive Time-Interval
  :annotations (Calendar-Covering-Type
                (documentation "The collection of decades that make up the calendar; e.g., #$The1970s.")))

(defconcept Calendar-Half-Century
  :is-primitive Time-Interval
  :annotations (Calendar-Covering-Type
                (documentation "The collection of exact half-centuries on the calendar, such as #$FirstHalfOf20thCenturyCE")))

(defconcept Calendar-Hour
  :is-primitive (:and Time-Of-Day Date)
  :annotations (Calendar-Covering-Type
                Cyc_Collection
                (documentation "The collection of hours that make up the calendar.  These are contiguous and disjoint time intervals, except of course for particular instances that represent exactly the same 60-minute-long time interval.  See #$CalendarDay.")))

(defconcept Calendar-Minute
  :is-primitive Date
  :annotations (Calendar-Covering-Type
                Cyc_Collection
                (documentation "The collection of minutes that make up the calendar.  These are contiguous and disjoint time intervals, except of course for particular instances that represent exactly the same 60-second-long time interval.  See #$CalendarDay.  Sixty of these partition each #$CalendarHour")))

(defconcept Calendar-Month
  :is-primitive Date
  :annotations (Calendar-Covering-Type
                Cyc_Collection
                (documentation "The collection of months that make up the calendar.  This is a collection of disjoint but contiguous time intervals.  One of its subsets is #$February, which is the set of all Februaries; one of its elements is February 1992 (#$MonthFn #$February (#$YearFn 1992)), a particular time interval.")))

(defconcept Calendar-Quarter
  :is-primitive Date
  :annotations (Calendar-Covering-Type
                Cyc_Collection
                (documentation "The collection of calendar quarters that divide up a calendar year into four parts.  For each year, the first of its four quarters includes January, February, and March; the second includes April, May, and June, and so on.")))

(defconcept Calendar-Season
  :is-primitive Time-Interval
  :annotations (Calendar-Covering-Type
                (documentation "This is the set of all calendar seasons.  Four of its largest subsets are #$CalendarWinter, #$CalendarSpring, #$CalendarSummer, and #$CalendarAutumn")))

(defconcept Calendar-Season-Type
  :is-primitive (:and Temporally-Disjoint-Interval-Type Annual-Event-Type)
  :annotations (Cyclical-Interval-Group-Type
                (documentation "This is the collection whose four elements are #$CalendarWinter, #$CalendarSpring, #$CalendarSummer, and #$CalendarAutumn.")))

(defconcept Calendar-Second
  :is-primitive Date
  :annotations (Calendar-Covering-Type
                Cyc_Collection
                (documentation "The collection of seconds that make up the calendar.  Sixty of these #$TimeIntervals contiguously divide up each #$CalendarMinute (qv)")))

(defconcept Calendar-Spring
  :is-primitive Calendar-Season
  :annotations (Calendar-Season-Type
                (documentation "The calendar season that begins at vernal equinox and runs until summer solstice.")))

(defconcept Calendar-Summer
  :is-primitive Calendar-Season
  :annotations (Calendar-Season-Type
                (documentation "The calendar season that begins at summer solstice and runs until autumnal equinox.")))

(defconcept Calendar-Week
  :is-primitive Date
  :annotations (Calendar-Covering-Type
                (documentation "The collection of weeks that make up the calendar.  This is a collection of disjoint but contiguous time intervals.  One of its elements is WeekOf2-14-1994.")))

(defconcept Calendar-Winter
  :is-primitive Calendar-Season
  :annotations (Calendar-Season-Type
                (documentation "The calendar season that begins at winter solstice and runs until vernal equinox.")))

(defconcept Calendar-Year
  :is-primitive Date
  :annotations (Calendar-Covering-Type
                Cyc_Collection
                (documentation "The collection of years that make up the calendar.  For example, #$TheYear1972, #$TheYear494BC.")))

(defconcept Calm
  :is-primitive Relaxed--Emotion
  :annotations (Feeling-Attribute-Type
                (documentation "A feeling of calmness or serenity, being quiet and free from disturbance.  This is a #$Collection --- for an explanation of that, see #$Happiness.  A related #$FeelingAttributeType is #$Calm.")))

(defconcept Canal
  :is-primitive (:and Path-Artifact Path--Simple Stream)
  :annotations (Existing-Object-Type
                (documentation "The collection of all canals, artificial waterways created to be paths for boats, or for irrigation (e.g., the #$PanamaCanal).")))

(defconcept Cancer
  :is-primitive (:and Ailment-Condition Terminal-Physiological-Condition)
  :annotations (Physiological-Condition-Type
                (documentation "The collection of all particular cases of cancer.  Instances of #$Cancer may belong to any one of the many different types of disease that are studied and treated by oncologists.  Cancer is characterized by abnormal (and usually rapid) growth of cells in some organ or system of the body; these growths are then prone to dispersal (metastesis) into other body regions.  See also #$CancerFn --- the expression (#$CancerFn #$Lung) represents a subset of #$Cancer, namely the set of all lung cancers.")))

(defconcept Capacity-Attribute
  :is-primitive Attribute-Value
  :annotations (Unordered-Attribute-Type
                (documentation "A collection of attributes.  Each element of #$CapacityAttribute is an attribute representing a specific capacity in which an agent does an action.  For example, an action might be done as an agent's job (#$JobCapacity) or hobby (#$HobbyCapacity), as its main function (#$MainFunction) or an auxiliary function (#$SupportFunction).")))

(defconcept Capital-City-Of-Region
  :is-primitive City
  :annotations (Existing-Object-Type
                (documentation "A collection of cities.  Each element of #$CapitalCityOfRegion is an element of #$City (q.v.) that is the capital of its surrounding region.  This includes both capitals of countries and capitals of subregions.  Examples: #$CityOfRomeItaly, #$CityOfCardiffWales, #$CityOfAustinTX, #$CityOfAbidjanIvoryCoast, #$CityOfLlasaTibet, #$CityOfColumbusOH (#$FranklinCountyOhio).  See also #$capitalCity, #$capitalCityOfThisState.")))

(defconcept Captive-Animal
  :is-primitive Animal
  :annotations (Existing-Object-Type
                (documentation "The collection of all animals that are caged, tied, kept in an animal container, or otherwise held captive.  There is some intersection here with #$DomesticPet, but not complete.   Some elements of #$Person are members of #$CaptiveAnimal, e.g., political detainees, imprisoned criminals, kidnap victims.")))

(defconcept Card
  :is-primitive Hardcopy-Information-Bearing-Object
  :annotations (Existing-Object-Type
                (documentation "A collection of objects; a subset of #$HardcopyInformationBearingObject.  Each element of #$Card is a small, sturdy sheet of stuff--usually cardstock paper, but could be plastic or thin metal--bearing some kind of information.  Some kinds are folded.  Examples: birthday cards, business cards, playing cards, postcards.")))

(defconcept Carnivore
  :is-primitive Organism--Whole
  :annotations (Existing-Object-Type
                (documentation "A #$Collection of organisms classified by their typical source of food.  Elements of #$Carnivore feed on animals.  Note: #$Carnivore is not an instance of #$BiologicalTaxon; e.g., #$Carnivore contains #$Dog as a subset but is not its biological taxon.  Note that a #$Carnivore is not necessarily a #$Heterotroph, as carnivorous plants both digest insects and produce food using #$Chlorophyll.")))

(defconcept Causing-Another-Objects-Translational-Motion
  :is-primitive (:and Translation--Location-Change
                      Translation--Complete
                      Action-On-Object)
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  In an instance of #$CausingAnotherObjectsTranslationalMotion, one object causes another object to undergo a translational motion.  The object causing the motion is the #$providerOfMotiveForce.  The object which is caused to move is the #$objectActedOn (and also the #$objectMoving) in the event.  One way to cause another object's motion is by carrying it along with one (see the subset #$CarryingWhileLocomoting), but there are many others, such as throwing, kicking, or knocking it away.  Examples: a train transporting passengers; a person pushing a coin into a vending machine; the release of a bowstring which propels an arrow; a magnet attracting a nail.")))

(defconcept Cavity
  :is-primitive Partially-Tangible
  :annotations (Existing-Object-Type
                (documentation "The collection of all cavities, #$Crevices or deep concavities or holes, including any cavity of a container, e.g., the interior of a box.  Elements of #$Cavity, unlike elements of #$Interior, may include walls as parts.")))

(defconcept Ceiling-Of-A-Room
  :is-primitive Part-Of-Building
  :annotations (Existing-Object-Type
                (documentation "The collection of all ceilings of every instance of #$RoomInAConstruction.  Note that, unlike walls, ceilings are conventionally considered to be 'one-sided' objects.  The other side of a #$CeilingOfARoom may be a #$RoofOfAConstruction, or in a #$ModernShelterConstruction, more probably the #$FloorInAConstruction in another room.")))

(defconcept Cell
  :is-primitive Biological-Living-Object
  :annotations (Existing-Object-Type
                (documentation "The collection of living cells; a subset of #$BiologicalLivingObject.  Each element of #$Cell is one of the basic structural units of nearly all living things, consisting (at least) of cytoplasm bounded by a cell membrane. Only the living structures viruses, mitochondria, and plastids are not composed of cells.")))

(defconcept Cell-Part
  :is-primitive (:and Microscopic-Scale-Object Biological-Living-Object)
  :annotations (Existing-Object-Type
                (documentation "The collection of structures which are typically found and formed as parts of #$Cells. This covers components of both #$EukaryoticCells and #$ProkaryoticCells.  It includes organelles, vesicles, cell walls, extracellular matrix, plasma membranes, receptors, cellular humours, microtubules, etc.")))

(defconcept Cereal-Food-Group
  :is-primitive (:and Edible-Stuff Vegetable-Matter Food-Or-Drink-Composite)
  :annotations (Food-Group-Type
                (documentation "The food group consisting of grain products such as breads and cereals. Food that contains a significant amount of grain products should be specs of this.")))

(defconcept Cereal-Plant
  :is-primitive Plant--Non-Woody
  :annotations (Organism-Classification-Type
                (documentation "The collection of individual plants like corn, wheat, etc., which bear grains.")))

(defconcept Cgs-Unit-Of-Measure
  :is-primitive Unit-Of-Measure
  :annotations (Relation-Type
                (documentation "A subset of #$UnitOfMeasure.  #$CGSUnitOfMeasure is the collection of all the measurement functions whose results use the CGS (i.e., centimeter-gram-second) system of measure to describe physical quantities.  Examples: #$CentimetersPerSecond, #$CubicCentimeter, #$Gram, #$SecondsDuration.")))

(defconcept Chain-Organization
  :is-primitive (:and Legal-Corporation Business)
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  An element of #$ChainOrganization is a parent business which comes into contact with its customers or clients primarily through its geographically dispersed sub-organizations, which typically are (mostly) homogeneous in product line, style of physical quarters, local organizational structure, etc.  Examples include the parent organizations of McDonald's and Midas Muffler.")))

(defconcept Change-In-User-Rights
  :is-primitive Generalized-Transfer
  :annotations (Script-Type
                (documentation "A collection of events.  Each element of #$ChangeInUserRights is an event in which some instance of #$Agent either gains or loses possession of something.   `Possession' means having some right to use a thing that one has in hand or otherwise has access to.  Different types of possession (e.g., ownership, rental, borrowings) can be specified by the using the appropriate element(s) of #$UserRightsAttribute (q.v.).  Changes in an agent's user rights can come about in various ways: through buying and selling, renting, borrowing or lending, giving, repossession, etc.  Some subsets of this kind of change are #$LosingUserRights, #$GainingUserRights, and #$ExchangeOfUserRights; in the latter class, there is an alteration in the rights of two (or more) agents to use two (or more) items -- as in a purchase, when one agent gets full use rights to an object by turning over a sum of money to the object's previous owner.  In addition, some changes in user rights are classified explicitly in #$TemporaryChangeOfUserRights (e.g., borrowing, renting), while others are permanent.   Events that involve such changes in user rights all belong in the collection of events, #$ChangeInUserRights.   In any particular #$ChangeInUserRights event, the item which is changing hands is identified as the #$objectOfPossessionTransfer.")))

(defconcept Changing-Device-State
  :is-primitive (:and Action Physical-Event Intrinsic-State-Change-Event)
  :annotations (Temporal-Object-Type
                Default-Disjoint-Script-Type
                (documentation "The collection of actions in which a device goes from one state (the #$fromState) to another state (the #$toState).  A change of #$DeviceState may be due to an outside #$Agent adjusting a device, or it may happen automatically due to the behavior of a device.  The two most general state changes (for powered devices) are from #$DeviceOn to #$DeviceOff, and vice versa.  Many other states peculiar to specific devices can be identified; for example, the states of a #$Dishwasher: #$DeviceState-Washing and #$DeviceState-Rinsing; or the states that a trapping device may be in: #$TrapArmed, #$TrapTripped, #$TrapIdle.  Note that a change in the state of a device is an intrinsic change in the device; i.e., #$ChangingDeviceState is a subset of #$IntrinsicStateChangeEvent.")))

(defconcept Character-String
  :is-primitive (:and List--Sequence Intangible-Individual Abstract-Information)
  :annotations (Stuff-Type
                (documentation "A collection of stuff.  Each element of the collection #$CharacterString is a string of characters or an abstract sequence of symbols.  Note: it is NOT any particular physical, tangible representation; different encodings may represent the characters.  An element of #$CharacterString has characters from some fixed character set.  The characters are instances of #$Character-Abstract. An element of #$CharacterString may be any length, including zero (i.e., empty strings, which have no characters).  If elements of #$CharacterString are concatenated, the result is also an element of #$CharacterString.  The length of the resulting string is equal to the sum of the lengths of the concatenated strings.   Some types (subsets) of #$CharacterString include #$EMailAddress, #$AreaCode, #$PhoneNumber, #$PhoneCountryCode, etc.")))

(defconcept Check--Tender-Object
  :is-primitive (:and Financial-Account-Tender-Object
                      Official-Document
                      Id-Document
                      Form--Standardized-Ibo
                      Tender-Object)
  :annotations (Money-Tender-Type
                (documentation "A collection of documents; a subset of #$TenderObject.  Each element of #$Check-TenderObject is a financial instrument, drawn on a particular account at some instance of #$FinancialOrganization, which is redeemable for a monetary value by the agent who is the payee.  The financial organization pays the payee funds from the account, upon proper presentation of the check.")))

(defconcept Chemical-Compound-Type
  :is-primitive Tangible-Stuff-Composition-Type
  :annotations (Sibling-Disjoint-Collection
                (documentation "A collection of collections; a subset of #$TangibleStuffCompositionType.  Every instance of #$ChemicalCompoundType is a subset of #$TangibleThing whose instances are defined ONLY by their chemical composition, and not by their physical state or any other property.  In Cyc's current representation, #$ChemicalCompoundTypes can be of two varieties:  (1) Collections whose instances are completely uniform with each other in terms of chemical composition; this includes (a) the chemical elements -- such as #$Carbon, #$Oxygen, and #$Hydrogen -- which are instances of #$ElementStuffTypeByNumberOfProtons (thus, the latter is a subset of #$ChemicalCompoundType), and (b) compounds constituted of more than one substance chemically bonded, e.g., #$Water, #$Caffeine, and #$IronOxide.  (2) Substances which have a general chemical specification, that is, whose instances do not have exactly the same chemical composition but fall within certain specifications, e.g., #$DNA.  Cyc's current theory includes those cases in #$ChemicalCompoundType, though they are arguably borderline.  (Future work may require the creation of type collections to identify various levels of chemical specification, such as `exact formula' or `exact structure'.)
Note: Collections which Cyc does NOT classify as #$ChemicalCompoundTypes include collections of substances which have some component which is of overriding significance in some context, so that in everyday language such substances are frequently referred to by the name of their important component (e.g., `penicillin' applied to a tablet containing penicillin), but which have significant admixtures of other substances.  Our representation distinguishes between the chemical compound (here, instances of #$Penicillin) and the mixture of substances in a tablet containing some #$Penicillin for pharmaceutical use.  Thus, #$Penicillin is an instance of #$ChemicalCompoundType, but the collection of tablets containing penicillin and including other ingredients are not.  Also, subsets of #$Mixture, such as #$Lemonade, are not instances of #$ChemicalCompoundType, because mixtures are determined by their physical state rather than solely by their chemical composition.")))

(defconcept Chemical-Object
  :is-primitive Microscopic-Scale-Object
  :annotations (Existing-Object-Type
                (documentation "A collection of objects; a subset of #$MicroscopicScaleObject.  Each instance of #$ChemicalObject is an object whose behavior is typically described in terms of its outer cloud of #$Electrons.  Subsets of #$ChemicalObject include the collections #$Atom and #$Molecule and #$Ion, the set of chemical radicals, and the set of molecular fragments.")))

(defconcept Chemical-Reaction
  :is-primitive Transformation-Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events; a subset of #$TransformationEvent.  Each instance of #$ChemicalReaction is an event in which two or more substances undergo a chemical change, i.e., some portions of the substances involved are transformed into different #$ChemicalCompoundTypes.  The transformations are brought about by purely chemical (including biochemical) means which affect chemical bonds between atoms in the molecules of stuff, rather than by physical means, biological means, or purposeful planning, etc.  Examples of #$ChemicalReaction: instances of #$CombustionProcess; instances of #$Photosynthesis.")))

(defconcept Chest--Body-Part
  :is-primitive (:and Animal-Body-Part Biological-Living-Object)
  :annotations (Animal-Body-Part-Type
                Unique-Anatomical-Part-Type
                (documentation "The collection of the chests of #$Animals.  The animal's chest is its #$AnimalBodyPart region located between its neck and its abdomen.  For people and many other types of animals, the chest is bounded by (defined by, given shape by) the animal's ribcage.")))

(defconcept Chordata-Phylum
  :is-primitive loom:thing
  :annotations (Biological-Phylum
                (documentation "An instance of #$BiologicalPhylum within the #$BiologicalKingdom #$Animal, the #$ChordataPhylum contains the many chordate taxa.  All have members who have a notochord (a flexible rod running the length of the body) at some stage of development and pharyngeal gills at some stage of development.  The #$ChordataPhylum has as #$taxonMembers all the subsets of #$Vertebrate (including #$Person), as well as some non-vertebrate chordates like Amphioxus.")))

(defconcept Chronic-Condition
  :is-primitive Physiological-Condition
  :annotations (Physiological-Condition-Type
                (documentation "A collection of ailments.  An instance of #$ChronicCondition is an ailment that lingers or recurs in an organism throughout its life.  In some cases, the symptoms of a chronic condition may abate with treatment.  The condition may never go away completely.  #$Asthma is a subset of #$ChronicCondition.")))

(defconcept Circulatory-System
  :is-primitive (:and Animal-Body-Part Static-Situation)
  :annotations (Animal-Body-Part-Type
                (documentation "The collection of all animals' circulatory systems.  A #$CirculatorySystem is a system of organs and body parts, found in #$Vertebrates and some other animals, which function together to circulate the animal's blood throughout its body, supplying needed substances to its cells and removing waste products from them.  A #$CirculatorySystem is generally composed of #$BloodVessels, #$Heart, #$Spleen, etc., considered as an interrelated functional system of each animal. 
Note:  It generally has a close linkage to the respiration system, as the blood comes in contact with fresh air to divest itself of the waste products it has collected from the body's cells and to acquire new needed substances to take to the body's cells.")))

(defconcept City
  :is-primitive (:and Urban-Area Geopolitical-Entity)
  :annotations (Spatially-Disjoint-Region-Type
                (documentation "A collection of geopolitical entities.  An element of #$City is a local human settlement which has its own government.  This includes cities, towns, suburbs, villages, hamlets, and townships, as long as they have their own governments.  A city government is usually mostly autonomous from the governments of its surrounding regions, rather than being a sub-organization of them.")))

(defconcept Cleaning
  :is-primitive (:and Purposeful-Action
                      Human-Activity
                      Intrinsic-State-Change-Event
                      Removing-Something)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events.  In each #$Cleaning event, dirt (or other unwanted substances) is removed from the #$objectOfStateChange of that event.  If a #$Cleaning event is successful, then the #$Dirtiness level of the object will have been lowered.")))

(defconcept Cleaning-Device
  :is-primitive (:and Physical-Device Solid-Tangible-Product)
  :annotations (Existing-Object-Type
                (documentation "A collection of devices.  An instance of #$CleaningDevice is any device, manually powered or otherwise, whose #$primaryFunction is to be used in cleaning things.  Instances include each #$Mop, each #$RegularWindshieldWiper, each  #$FacialTissue, each #$ShoeBrush, each #$ClothesWasher, each #$Dishwasher, etc.")))

(defconcept Cleaning-Implement
  :is-primitive (:and Hand-Tool Cleaning-Device)
  :annotations (Existing-Object-Type
                (documentation "A collection of tools; a subset 
of #$HandTool and also of #$CleaningDevice.  An instance of #$CleaningImplement is any hand-held tool used for cleaning something.  Cleaning implements are used in a wide variety of activities and settings; some subsets include the collections #$Mop, #$DentalPick, #$ElectricToothBrush, #$WashCloth, #$FacialTissue, #$ShoeBrush.  Many cleaning implements are intended for wiping, scrubbing, or polishing surfaces to remove patches of #$Dirt.")))

(defconcept Climate-Cycle-Type
  :is-primitive (:and Temporal-Object-Type Script-Type)
  :annotations (Sibling-Disjoint-Collection
                (documentation "A collection of collections.  Each element of #$ClimateCycleType is a collection of (extended) events which are weather processes of one type or another.  Examples of elements of #$ClimateCycleType are #$TemperateClimateCycle and #$SteppeClimateCycle.  
Note: in practice, there is little need to create terms denoting members of the collections belonging to #$ClimateCycleType; so long as one just wants to state what TYPE of climate a particular region has, simply use the predicate #$hasClimateType with the appropriate subset of #$AnnualClimateCycle (q.v.).  See also #$hasClimateType.")))

(defconcept Cloth
  :is-primitive (:and Sheet-Of-Some-Stuff
                      Free-Sheet
                      Textile-Product
                      Solid-Tangible-Thing)
  :annotations (Product-Type
                Existing-Stuff-Type
                (documentation "A collection of tangible things.  Each element of #$Cloth is a piece of textile sheet woven or knitted or pressed out of fibers.  Pieces of #$Cloth are commonly used as material inputs to the manufacture of clothing items, towels, sails for sailing craft, parachutes, draperies, etc.  Excludes #$Leather (q.v.).")))

(defconcept Clothing-Accessory
  :is-primitive Clothing-Item
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A collection of tangible objects.  Each element of #$ClothingAccessory is something that is worn as an accessory with other clothing items.  Examples include elements of the collections #$Jewelry, #$Scarf, #$NeckTie, #$Belt-Clothing, #$Suspenders, and suchlike.")))

(defconcept Clothing-Item
  :is-primitive (:and Something-To-Wear Sheet-Of-Some-Stuff)
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A collection of tangible objects.  Each element of #$ClothingItem is something that a person wears as a protective and/or decorative covering or ornament.  Items of clothing are usually made of flexible materials, such as cloth, leather, or yarn.  The collection #$ClothingItem contains primarily individual garments (e.g., elements of the collections #$Pants, #$Shirt, #$Coat, #$Shoe), together with pairs of shoes, socks, and gloves (since each wearer needs a pair).  Jewelry, suspenders, belts, etc., are in the subset #$ClothingAccessory.
Note: outfits (esp. specialized outfits) made up of several individual items worn together belong to the collection #$ClothingOutfit, which is NOT a subset of #$ClothingItem but IS a subset of the broader collection, #$SomethingToWear.")))

(defconcept Clothing-Outfit
  :is-primitive (:and Group Something-To-Wear Sheet-Of-Some-Stuff)
  :annotations (Product-Type
                Existing-Object-Type
                (documentation "A collection of objects.  Every element of #$ClothingOutfit is a group of `coordinated' items that are intended to be worn together; e.g., an instance of #$ThreePieceSuit, consisting of one suit jacket, one vest, and one pair of long pants.  Clothing outfits are often sold or provided together as a set; e.g., military uniforms, business suits, scuba gear.  A clothing outfit may include some accessories, as well as garments.  Cf. #$ClothingItem.")))

(defconcept Cloudiness
  :is-primitive (:and Scalar-Interval Physical-Attribute Weather-Attribute)
  :annotations (Primitive-Attribute-Type
                (documentation "A collection of attributes; a subset of #$ScalarInterval.  The elements of #$Cloudiness characterize the amount of cloud cover at an #$OutdoorLocation.  A higher value indicates more clouds or more dense cover.  Degrees of cloudiness may be represented qualitatively (e.g., #$PartialCloudCover, #$CompleteCloudCover), or using #$GenericValueFunctions.  The cloudiness of a location can be described with the predicate #$cloudinessOfRegion.")))

(defconcept Cloud-In-Sky
  :is-primitive Cloud-Of-H2o
  :annotations (Existing-Object-Type
                (documentation "The collection of clouds (instances of #$CloudOfH2O) in the sky over some #$GeographicalRegion (as opposed to being at ground-level).")))

(defconcept Cloud-Of-H2o
  :is-primitive Suspension
  :annotations (Existing-Object-Type
                (documentation "A cloud of particles of liquid or solid water in the atmosphere covering a #$GeographicalRegion.")))

(defconcept Code-Of-Conduct
  :is-primitive (:and Intangible-Existing-Thing Supposed-To-Be-Microtheory)
  :annotations (Microtheory-Type
                Existing-Object-Type
                (documentation "A collection of microtheories; a subset of both #$Obligation and #$SupposedToBeMicrotheory.  Each element of #$CodeOfConduct is a microtheory which contains rules and/or expectations governing the behavior of those agents subject to it in certain kinds of situations.")))

(defconcept Cohabitation-Unit
  :is-primitive Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  Each element of #$CohabitationUnit is a group of humans or other animals all living together in the same #$physicalQuarters at the same time, whether that be a house, nest, warren, or other dwelling -- loosely speaking, a household.  As a default, the cohabitants in the group are assumed to be all of the same species.  (See also the more specialized #$comments in #$HumanSocialLifeMt and #$NaiveBiologicalDescentMt.)")))

(defconcept Cohesiveness
  :is-primitive (:and Physical-Attribute Scalar-Interval)
  :annotations (Primitive-Attribute-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute.  Each element of #$Cohesiveness represents a specific capacity of a physical object to cohere; e.g., #$RigidlyCohesive, #$LiquidCohesiveness, #$HumanlySeparable.  Cohesiveness of objects is indicated with the predicate #$cohesivenessOfObject.")))

(defconcept Cyc_Collection
  :is-primitive Set-Or-Collection
  :annotations (Cyc_Collection
                Set-Or-Collection
                (documentation "The collection of all Cyc collections.  Cyc collections are natural kinds or classes, as opposed to mathematical sets; their elements have some common attribute(s).  Each Cyc collection is like a set in so far as it may have elements, subsets, and supersets, and may not have parts or spatial or temporal properties.  Sets, however, differ from collections in that a mathematical set may be an arbitrary set of things which have nothing in common (see #$Set-Mathematical).  In contrast, the elements of a collection will all have in common some feature(s), some `intensional' qualities.  In addition, two instances of #$Collection can be co-extensional (i.e., have all the same elements) without being identical, whereas if two arbitrary sets had the same elements, they would be considered equal.   As with any Cyc constant, an instance of #$Collection should be created only if it is expected to have some purpose or utility.  Moreover, the `best' collections to create are the ones which are impossible to define precisely, yet about which there are rules and other things to say.  E.g., `WhiteCat' is not a good element of #$Collection to create, because it's easy to define with other Cyc concepts, and there's not much to say about the collection of white cats; but `WhiteCollarWorker' could be a good element of #$Collection, because it is hard to define exactly, yet there are many things to say about it.")))

(defconcept Collection-Denoting-Function
  :is-primitive Reifiable-Function
  :annotations (Cyc_Collection
                Relation-Type
                (documentation "The collection of all Cyc functions which return elements of #$Collection.  Examples: #$SwimmingEventFn, #$PackageFn, #$MoleculeFn, all produce collections when applied to their proper arguments; e.g., (#$MoleculeFn #$Oxygen) returns the collection of all oxygen molecules.  Note that (#$genls #$CollectionDenotingFunction #$ReifiableFunction).  Cf. #$IndividualDenotingFunction.")))

(defconcept Collection-Event
  :is-primitive Transfer-In
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each element of #$CollectionEvent is an event in which tangible or intangible objects are collected from various sources to a single destination via some collection network.")))

(defconcept Color
  :is-primitive (:and Composite-Attribute Sensory-Attribute Physical-Attribute)
  :annotations (Composite-Attribute-Type
                (documentation "A collection of attributes; a subset of both #$PhysicalAttribute and #$SensoryAttribute.  Each element of #$Color represents a specific color attribute of some object or substance; e.g., #$GoldColor, #$LavenderColor, #$Auburn , #$Olive-FleshColor.  Elements of #$Color are #$CompositeAttributes, since they can vary along several dimensions (e.g., hue, brightness).  Indicate a particular object's #$Color with the predicate #$colorOfObject.")))

(defconcept Combustion-Process
  :is-primitive (:and Composite-Physical-And-Mental-Event
                      Energy-Conversion-Process
                      Decomposition-Process)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events.  Each #$CombustionProcess  is an event in which rapid oxidation is taking place.  These always have heat as an output and often involve emission of light as well (typically, flames).  The #$objectActedOn in a #$CombustionProcess is at least partly consumed.  See also #$Flammability.")))

(defconcept Command
  :is-primitive Request
  :annotations (Object-Type
                (documentation "A collection of illocutionary forces.  Each instance of #$Command consists of a piece of information contained (usually implicitly) in a communication, and which expresses the speaker's intention to have the listener either carry out the action described in the utterance and/or bring about the situation described in the utterance.  The speaker in any given instance of #$Ordering-CommunicationAct presupposes that s/he has the authority to command those s/he adresses.  `Speaker' and `listener' are broadly interpreted to mean, respectively, any #$senderOfInfo and #$recipientOfInfo.  See also #$IllocutionaryForce.")))

(defconcept Commercial-Activity
  :is-primitive (:and Transaction Human-Activity)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "This is a large collection of events.  As can be seen from its subsets, it embraces all types of buying, selling, offering to sell, offering to buy, requesting bids, performing services for hire, advertising, manufacturing for sale, etc.")))

(defconcept Commercial-Organization
  :is-primitive Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  An element of #$CommercialOrganization is an organization which buys or sells goods or services for a profit.  It may also be an element of #$Business or it may merely be a sub-organization of a #$Business entity.")))

(defconcept Commercial-Service-Organization
  :is-primitive (:and Service-Organization Commercial-Organization)
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations; a subset of #$CommercialOrganization.  An instance of #$CommercialServiceOrganization is a commercial organization which sells its services as its main product (rather than tangible goods), for commercial gain.  Some tangible goods may accompany or supplement the main service sold, but only as side products; e.g., some elements of #$HairSalon sell hair care products.")))

(defconcept Communicating
  :is-primitive (:and Purposeful-Action
                      Social-Occurrence
                      Information-Transfer-Event)
  :annotations (Temporal-Stuff-Type
                Default-Disjoint-Script-Type
                (documentation "A collection of events.  Each element of #$Communicating is an event in which the transfer of information between or among agents is a focal action; communicating is the main purpose and/or goal in the event.  That may be contrasted with events which involve communication but wherein the focus is different, e.g., playing cards (wherein the progressive actions--and winning--of the game are focal).  
Communicating may be either a one-way or a two-way transfer of information (cf. #$CommunicationAct-Single, #$MultiDirectionalCommunication).  It may be intentional or unintentional.  Every event belonging to #$Communicating contains at least one transfer of information between at least two agents who participate in the event.  (Note that the latter requirement excludes reading and writing from #$Communicating, when those events are just the private accessing or generating of information.)  
Communicating may be specialized in various ways, such as, by the method or medium used (e.g., #$AudioCommunicating, #$NonVerbalCommunicating, #$FaceToFacePresenceCommunicating); by the type of information involved (e.g., #$MakingAnAgreement); by the purpose of the communication (e.g., #$Teaching, #$Negotiating); by the agents involved (e.g., #$IntraOrganizationCommunication, #$StageProduction).  Examples of #$Communicating include a symphony performance, an email message, a telephone call, a speech, a handshake, issuing a traffic ticket--all of which normally, and focally, involve communication between two or more agents.")))

(defconcept Communication-Act--Single
  :is-primitive (:and Communicating Action)
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "A collection of information transfer events; a subset of #$Communicating.  Each element of #$CommunicationAct-Single is a single-source transmission of information from ONE #$senderOfInfo to one or more recipients; such acts may be one-to-one or one-to-many.  Every element of #$CommunicationAct-Single has a transmission sub-event (which is an element of #$IBTGeneration-Original) and one or more reception #$subEvents (which are elements of #$AccessingAnIBT).  An element of #$CommunicationAct-Single starts when its transmission sub-event starts and ends when its accessing sub-event(s) end.
Notes: (1) For exchanges of information between or among multiple agents, see #$MultiDirectionalCommunication.  (2) An important distinction is made between elements of #$CommunicationAct-Single on the one hand, and their #$subEvents which are elements of #$IBTGeneration-Original and #$AccessingAnIBT, on the other hand; e.g., #$Speaking and #$Writing are NOT subsets of #$CommunicationAct-Single, but rather are subsets of #$IBTGeneration-Original (because instances of both represent only the generation of information and can even occur without actual communication of it), and #$ListeningDeliberately and #$Reading are subsets of #$AccessingAnIBT, NOT of #$CommunicationAct-Single, because instances of both represent only the accessing of information (even if by default they imply a prior generation of information).")))

(defconcept Communication-Convention
  :is-primitive (:and Mental-Object Abstract-Information)
  :annotations (Temporal-Stuff-Type
                (documentation "The collection of conventions used to encode and interpret things which bear information; a syntax together with a semantic mapping.  Instances include natural languages like French or English, database data formats, and computer languages or idiosyncratic systems of gestures or symbols known only by a small group of people.")))

(defconcept Community-Organization
  :is-primitive Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  An element of #$CommunityOrganization is a group that consists of residents of a #$Neighborhood or apartment building or condominium complex, and which is concerned with issues affecting the #$Neighborhood or complex.")))

(defconcept Commutative-Relation
  :is-primitive Relationship
  :annotations (Cyc_Collection
                Relation-Type
                (documentation "An important subset of #$Relationship.  Each element of #$CommutativeRelation is a relationship whose argument order can be changed without changing the value or meaning of the expression; e.g., #$PlusFn, #$TimesFn, #$or, #$bordersOn, #$temporallyIntersects, #$teammates.  Most #$Relationships are NOT commutative: if (#$isa EL COL) is true, it is rare that (#$isa COL EL) is also true.")))

(defconcept Competence
  :is-primitive Script-Performance-Attribute
  :annotations (Script-Performance-Attribute-Type
                (documentation "One of the most general attributes for describing the level of skill with which an agent performs some task.  Knowledge enterers will usually want to use some more specific attribute.")))

(defconcept Competition
  :is-primitive (:and Social-Occurrence Purposeful-Action)
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "The collection of situations in which one or more #$Agents are striving to be the sole exemplar of some high value judgement, or the highest value along some comparative or metric scale.  Arm wrestling, football, fighting for prey, competitive courting, racing, rodeo events, etc. are examples.  See also #$competitionExpr.
Note: `striving' may be a bit of overstatement, as sometimes the competitors may even be unaware that a competition has been going on until after it is over, such as the first year a `Best Restaurant in Austin' award is given out.")))

(defconcept Complex-Temporal-Relation
  :is-primitive Temporal-Relation
  :annotations (Predicate-Category
                (documentation "Instances of #$ComplexTemporalRelation are predicates used to interrelate instances of #$TemporalThing in time.  Some of them (e.g., #$startsAfterEndingOf) make statements about the relationship of the beginning and/or end of their first argument to the beginning and/or end of their second argument.  One can think of this as an interval-based theory of time.  Some of them (e.g., #$temporallyIntersects and #$temporallySubsumes) make statements about the relationship of the entire set of points that is their first argument to the entire set of points that is their second argument.  One can think of this as a set-theoretic theory of time.")))

(defconcept Composite-Attribute
  :is-primitive Attribute-Value
  :annotations (Attribute-Type
                (documentation "A collection of attributes.  Each element of #$CompositeAttribute is an attribute that is essentially a vector with many dimensions.  Instances of #$Color are good examples; colors have intensity, hue, and saturation as independent dimensions.  See also #$primitiveAttributeTypes, #$PrimitiveAttributeType.")))

(defconcept Composite-Attribute-Type
  :is-primitive Attribute-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Every element of #$CompositeAttributeType is a collection of attributes which is a subset of #$CompositeAttribute (q.v.).")))

(defconcept Composite-Physical-And-Mental-Event
  :is-primitive (:and Physical-Event Mental-Event)
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each element of #$CompositePhysicalAndMentalEvent is an event that involves both some mental event(s) and an interaction of physical objects.  Examples include a news broadcast program, a court trial, inheriting property, writing a letter, a physical examination, a charity ball, traffic on some section of highway during rush hour.  Note that this collection does NOT imply that the events which are its instances have doers (see #$doneBy).  Subsets of #$CompositePhysicalAndMentalEvent whose elements all have doers (or performers) -- and there will be many of them -- should have as a second genls #$Action or the appropriate subset of #$Action (qq.v.).")))

(defconcept Composite-Tangible-And-Intangible-Object
  :is-primitive (:and Something-Existing
                      Partially-Intangible
                      Partially-Tangible)
  :annotations (Existing-Object-Type
                (documentation "The collection of things which have both a tangible and an intangible component -- e.g., people (with bodies and minds), information bearing objects (intangible information encoded on a tangible substrate, such as music on a CD, or text in a book) and so on.  Like anything else that has at least some tangible component, each element of #$CompositeTangibleAndIntangibleObject exists in time.  Our representation allows us to separately reify the tangible and intangible components of an object; this is sometimes necessary  (e.g., to state that the age of the Frankenstein monster's mind is x, the age of his body is y, and the age of the new composite is z) but not very often needed --- usually one can just reify the #$CompositeTangibleAndIntangibleObject and state things about it.")))

(defconcept Composition-Predicate
  :is-primitive Physical-Part-Predicate
  :annotations (Predicate-Category
                (documentation "A collection of predicates; one of several subsets of #$PartPredicate.  The collection #$CompositionPredicate contains predicates which are used to relate #$PartiallyTangible things to the substances (pieces of stuffs) which compose them.  #$CompositionPredicates are instance-level (i.e, they relate #$Individuals, not #$Collections), although typically they are used in inferences about specific kinds of things.  Examples include #$constituents, #$mainConstituent #$solvent, #$solute, #$suspendingFluid, #$suspendedPart, #$atmosphereComponent.")))

(defconcept Compressibility
  :is-primitive (:and Physical-Attribute Scalar-Interval)
  :annotations (Primitive-Attribute-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute.   Each element of #$Compressibility represents a specific capacity of a physical object to be compressed.  Compressibility may be measured with a #$GenericValueFunction. Compressibilities of objects are indicated with the predicate #$compressibilityOfObject.")))

(defconcept Computational-Object
  :is-primitive (:and Mathematical-Or-Computational-Thing Intangible-Individual)
  :annotations (Object-Type
                (documentation "A collection of abstract objects; a subset of #$IntangibleIndividual.  Each element of #$ComputationalObject is a syntactically structured form, such as a Cyc system expression, a Lisp string, a C variable name, or an equation in a particular canonical form format.")))

(defconcept Computer-Program
  :is-primitive (:and Information-Bearing-Object
                      Artifact
                      Tangible-Product
                      Inanimate-Thing)
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A collection of information bearing objects (IBOs).  Each element of #$ComputerProgram is an IBO, i.e., a tangible object which contains intangible information, namely instructions written in a code readable by some computer system and which are intended for execution by a computer.  The tangible component of a computer program may be embodied in the memory of a particular instance of #$Computer (during a particular time), in a static magnetic medium (e.g., a disk or tape), in a hardcopy, even (once upon a time) in a set of punch cards.  Again, note that elements of #$ComputerProgram are physically embodied programs, which rightly interpreted yield the information and/or instructions in the program.  The elements of #$Algorithm and of #$CharacterString (which are abstract) are NOT elements of #$ComputerProgram, although they may figure in the intangible components of a computer program.  See also #$containsInformation, #$InformationBearingObject.")))

(defconcept Concrete
  :is-primitive (:and Artificial-Material Building-Material)
  :annotations (Tangible-Stuff-Composition-Type
                (documentation "A collection of tangible things.  Each element of #$Concrete is a piece of an artificial mixture of cement, gravel, sand, and (during mixture, pouring, and forming) water.  Used widely in construction, pieces of concrete are formed into the desired shape while fluid and afterward hardened into a sturdy, durable material.  Examples: bridge pilings, foundations of houses, sidewalks, pieces of IH-35.")))

(defconcept Condensing
  :is-primitive (:and Physical-State-Change-Event Translocation)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  In each instance of this collection, an object is cooled to (and then below) its #$boilingPoint, changing it from #$GaseousStateOfMatter to #$LiquidStateOfMatter.")))

(defconcept Confidence
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "The positive emotion felt when one is free
from doubt about an event or object from which the agent feeling
#$Confidence expects positive contingencies.  For example, one might
say 'I feel confident that tomorrow it will not be rainy'. Do not
confuse this with a personality disposition, e.g. 'Joe is a confident
person.'  (See #$PersonalityAttribute.)  This is a collection; for an
explanation of a typical #$FeelingAttributeType, see #$Happiness.
More specialized #$FeelingAttributeTypes include #$Grief,
#$SelfConfidence, etc.")))

(defconcept Configuration
  :is-primitive (:and Static-Situation Partially-Tangible)
  :annotations (Situation-Type
                Existing-Object-Type
                (documentation "#$Configuration is a subset of #$StaticSituation.  Each #$Configuration is a static configuration, existing over time, of two or more tangible objects.  The #$StaticSituations that aren't #$Configurations are those which don't involve tangible objects; for example, reified relationships among agents such as #$InCustody).")))

(defconcept Congenital-Condition
  :is-primitive Physiological-Condition
  :annotations (Physiological-Condition-Type
                (documentation "A collection of ailments.  An instance of #$CongenitalCondition is an #$AilmentCondition that is present in an afflicted organism from the time of gestation (i.e. before birth), whether or not it is a #$GeneticCondition.  Two example types of #$CongenitalCondition are congenital herpes and congenital heroin addiction.  A #$CongenitalCondition may be caused by behavior of the mother during pregnancy.  Birth defects (such as having an extra toe) are #$CongenitalConditions.  Injuries sustained during the delivery itself are not #$CongenitalConditions.  Thus if forceps are used and the infant is scarred, brain-damaged or killed as a result, the situation is not an element of this collection.")))

(defconcept Connected-Path-System
  :is-primitive Cyc_Thing
  :annotations (Cyc_Collection
                (documentation "The collection of all connected #$PathSystems that are not in separate pieces.  For any different points X and Y in such a system SYS, there is a path PATH in SYS that both X and Y are on.  Another way to put this is that SYS is an instance of #$ConnectedPathSystem iff for any different points X and Y in SYS, there is a path PATH in SYS such that (#$pathBetweenInSystem PATH X Y SYS) holds.  Note that according to this definition, a connected path system does not have to contain a link--a path system containing a single node will be a connected path system.  If a connected path system contains a link, nevertheless, every two different points must be connected by a path. Note also that because of our treatment of path (see #$pathInSystem) and our restriction of points in SYS that are not nodes (see #$nodeInSystem), that there is a path between every two points in SYS is equivalent to that there is a path between every two nodes in Sys.")))

(defconcept Connecting-Together
  :is-primitive (:and Physical-Event Action-On-Object)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  In a #$ConnectingTogether event, two or more tangible things get connected together by means of some sort of connector or fastener.  Some specializations of this include welding, buckling-up, using nailing, tying-up, etc.  #$ConnectingTogether need not be a spec of #$Movement-TranslationEvent since two objects being connected may be already at rest with each other.")))

(defconcept Connection-Predicate
  :is-primitive Cotemporal-Predicate
  :annotations (Relation-Type
                (documentation "A collection of predicates.  Each element of #$ConnectionPredicate is a predicate that specifies physical connections between objects.  Examples: #$nailedTo, #$rivetedTo, #$connectedTo-Rigidly, #$rotationallyConnectedTo, #$hangsFrom, #$in-Embedded.")))

(defconcept Connector
  :is-primitive Non-Powered-Device
  :annotations (Existing-Object-Type
                (documentation "A collection of physical devices.  An instance of #$Connector is a device which connects two objects.  A connector (or part of it) may be a part incorporated into one or both of the objects connected, or a connector may be a totally separate device.  Examples include elements of the collections #$ButtonTheFastener, #$Staple, #$Nail, and many more.")))

(defconcept Constructing
  :is-primitive Making-Something
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events.  In each #$Constructing event, one or more #$ConstructionArtifacts, such as a house, are made or incrementally enlarged or remodeled.")))

(defconcept Construction-Artifact
  :is-primitive (:and Solid-Tangible-Product Artifact)
  :annotations (Existing-Object-Type
                (documentation "A collection of artificial tangible objects.  Each element of #$ConstructionArtifact is a structure designed and built by humans.  This collection includes buildings and parts of buildings, as well as things like dams, railroad lines, and roads.  Examples: the #$RomanColiseum, the #$ArcDeTriomphe, #$HooverDam, the #$WorldTradeCenter, #$HollyWoodBowl.  For further information, see #$FixedStructure, an important subset.")))

(defconcept Construction-Company
  :is-primitive (:and Commercial-Service-Organization Business)
  :annotations (Existing-Object-Type
                (documentation "A collection of businesses.  An element of #$ConstructionCompany is a business whose #$MainFunction is constructing buildings, houses, dams, roads, bridges, or other large structures.")))

(defconcept Consultant
  :is-primitive (:and Professional Business-Person)
  :annotations (Occupation-Type
                (documentation "A collection of persons; a subset of #$Professional.  Each element of #$Consultant works with some business in a consulting capacity.  Consultants can be self employed, or they can work for a consulting company.")))

(defconcept Consumable-Product
  :is-primitive Tangible-Product
  :annotations (Product-Type
                Existing-Stuff-Type
                (documentation "A collection of tangible stuff; a subset of #$TangibleProduct.  Each element of #$ConsumableProduct is a product of which any portion can be used only once.  A portion of a #$ConsumableProduct is `used up', i.e., destroyed or transformed into an unusable or waste form, during normal use.  Note: `consumable' here does mean necessarily consumed by mouth; the consumption may be any use of the product.")))

(defconcept Consuming-Food-Or-Drink
  :is-primitive (:and Destruction-Event Directed-Translation)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events.  Each element of #$ConsumingFoodOrDrink is an event in which a person or other animal ingests some portion of food or drink through its mouth.  This collection generically covers eating or drinking, by a single person, of a meal- or snack-sized portion of food.  For more detail, see the subsets #$EatingEvent and #$DrinkingEvent.  For eating or drinking with a social group, see #$HavingAMeal.  Note: #$ConsumingFoodOrDrink does NOT include intravenous infusion of nutrients or chewing of gum.")))

(defconcept Contact-Location
  :is-primitive Partially-Tangible
  :annotations (Contact-Location-Type
                (documentation "A collection of spatial objects.   Each element of #$ContactLocation is a point at which some particular agent (e.g., corporation or person) may be contacted by any of several means, for any of several purposes.  #$ContactLocation includes any place to which one may direct one or more of the following: letters, packages, phone calls or voice messages, bills, email, faxes, pages, subpoenas.  Contact locations must be particular--e.g., my house or my office or even my secretary, but not simply `Austin'.")))

(defconcept Contact-Location-Type
  :is-primitive Existing-Object-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$ContactLocationType is a collection of places  at which a particular agent may be contacted; such collections may be characterized in several different ways: (a) by method of contact (e.g., #$VoicePhoneLocation, #$FaxLocation); (b) by purpose of contact (e.g., #$BillingLocation, #$ShippingLocation, #$EmergencyContact); (c) by the agent's relationship to those places (e.g., #$HumanResidence, #$Workplace).  Note that particular places may fall under different subsets of #$ContactLocationType for different agents; for example, one person's home might be another's vacation location.")))

(defconcept Container-Product
  :is-primitive (:and Physical-Device Solid-Tangible-Thing)
  :annotations (Existing-Object-Type
                (documentation "A collection of physical devices.  An instance of #$ContainerProduct is an object whose #$primaryFunction (or one of whose main functions) is to be a container.  Examples are of staggering variety, including storage containers for books, office records, food, clothing, tools, and materials; containers for transporting the same; passenger compartments of various kinds of vehicles; artificial constructs for housing humans and animals; etc., etc.  Instances of #$Crib, #$Sandbox, #$OfficeSpace, and #$Coffin.")))

(defconcept Contempt
  :is-primitive (:and Disapproval Dislike)
  :annotations (Feeling-Attribute-Type
                (documentation "Emotion characterized by vehement condemnation of its object as being low, vile, feeble, or ignominious.  This is a #$Collection --- for an explanation of that, see #$Happiness.  Some more specialized #$FeelingAttributeTypes than #$Contempt are #$Hate, #$Abhorrence, etc. ")))

(defconcept Continent
  :is-primitive (:and Land-Topographical-Feature Land-Body)
  :annotations (Existing-Object-Type
                (documentation "A collection of topographical features.  The elements of #$Continent are the seven main land masses on the surface of the earth (plus Eurasia added as a super-region of Europe and Asia).  Elements: #$ContinentOfAfrica, #$ContinentOfAntarctica, #$ContinentOfAsia, #$Australia, #$ContinentOfEurope, #$ContinentOfEurasia, #$ContinentOfNorthAmerica, #$ContinentOfSouthAmerica.")))

(defconcept Contract-Negotiation
  :is-primitive (:and Negotiating Purposeful-Action)
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "The collection of negotiations intended to lead to the formation of a contract between the participants (or the parties they represent in the negotiations).")))

(defconcept Control-Device
  :is-primitive Physical-Device
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A collection of physical devices.  An instance of #$ControlDevice is a device whose #$primaryFunction is to control the behavior/functioning/properties of another thing (usually another instance of #$PhysicalDevice).  Obvious instances of #$ControlDevice include: the remote control for your TV (an instance of #$RemoteControlDevice), the brake pedal on your car (an instance of #$Pedal-ControlDevice), the light switch on your bedroom wall (an instance of #$ElectricalSwitch); a less obvious instance of #$ControlDevice is #$HooverDam (an instance of #$Dam).")))

(defconcept Controlled-Land
  :is-primitive (:and Geopolitical-Entity Country-Subsidiary)
  :annotations (Existing-Object-Type
                (documentation "A collection of geopolitical entities.  Each element of #$ControlledLand is a geopolitical entity that is controlled to some extent by a foreign power.  Examples: #$PuertoRico, #$Bermuda, #$Guadeloupe-TheDependency, #$Tibet.")))

(defconcept Controlling-Something
  :is-primitive (:and Purposeful-Action Composite-Physical-And-Mental-Event)
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "A collection of events; a subset of #$PurposefulAction.  An instance of #$ControllingSomething is a purposeful action in which some #$Agent intentionally controls some object.  It is not necessary that the agent touch the #$objectControlled, only that s/he have an efficacious means of controlling its action -- thus, instances of #$ControllingSomething include all instances of #$GuidingAMovingObject (some of which involve a #$RemoteControlDevice).  Further subsets: #$HandlingAnObject, #$Braking, #$SteeringADeviceByHand, #$PlayingAMusicalInstrument, #$CuttingFabric,  #$CarryingWhileLocomoting, #$FlushingAToilet, etc.  Whenever a #$ControlDevice (qv) is being used, for its primary function, presumably a #$ControllingSomething event is taking place.  Borderline examples include having a conversation by telephone, doing the dishes by hand, and having a cat as a pet.")))

(defconcept Conventional-Classification-System
  :is-primitive Abstract-Information
  :annotations (Object-Type
                (documentation "The collection of all agreed-upon or conventional classification systems, each consisting of #$ConventionalClassificationTypes.  In such systems, a change or reclassification is possible by a decision of an authority, or by a changed social agreement, without changing the intrinsic facts about the actual objects in the category.  (This applies only to named or known classification systems or schemas, and not to everything under the sun as might be urged by some 1990's-era postmodernist deconstructionist literary criticism theorists.)")))

(defconcept Conventional-Classification-Type
  :is-primitive Abstract-Information
  :annotations (Object-Type
                (documentation "The collection of all those collections (of #$Things) that each correspond to a category in some agreed-upon or conventional classification system (a #$ConventionalClassificationSystem).  In such systems, a change or reclassification is possible by a decision of an authority, or by a changed social agreement, without changing the intrinsic facts about the actual objects in the category.  (This applies only to named, known classification systems or schemas, and not to everything under the sun as might be urged by some 1990's-era postmodernist deconstructionist literary criticism theorists.)")))

(defconcept Convex-Tangible-Object
  :is-primitive Tangible-Thing
  :annotations (Existing-Object-Type
                (documentation "The collection of all #$TangibleThings that are #$Convex, i.e. have no significant #$Concave surfaces, cavities or #$Crevices.  A #$ConvexTangibleObject occupies about the same space as its convex hull; see #$ConvexHullFn and #$ConvexHullSpaceFn.  A solid physical sphere or cube are #$ConvexTangibleObjects but a cup or doughnut cannot be.  The size of allowable minor concavities depends on the context.")))

(defconcept Conveyance
  :is-primitive (:and Artifact Solid-Tangible-Thing)
  :annotations (Existing-Object-Type
                (documentation "A collection of concrete physical objects.  Each instance of #$Conveyance is intended for moving (at least partially tangible) things --- it could be a car, ship, plane, or other vehicle for transporting people; it could be a conveyor belt, a grocery bag, etc.  See also #$TransportationDevice which is used to axiomatize more specific kinds of conveying events in which the object doing the conveying actually moves along with the object being transported.  See #$TransportationEvent for the collection of events about this more specific kind of conveying event.  Some positive exemplars:  a gun, a car, a slingshot.  A borderline non-exemplar is a wire over which electricity, signals, etc. are moving.")))

(defconcept Cooking-Food
  :is-primitive (:and Preparing-Food-Or-Drink Heating-Process)
  :annotations (Temporal-Object-Type
                Default-Disjoint-Script-Type
                (documentation "A collection of events.  Each element of #$CookingFood is an event in which some item of #$Food is prepared by heating it.  Typically, the foodstuff is heated until it reaches a certain temperature over some period of time, during which chemical and/or physical changes occur which are supposed to make the foodstuff healthier or tastier (or, in some cases, ethically acceptable).  A #$CookingFood event may last from a few minutes (e.g., #$SteamingFood (vegetables), #$MakingToast) to several hours (e.g., #$RoastingFood).  
Note:  #$SmokingFood is not a subset of #$CookingFood.  Food prepared by smoking (e.g., smoked ham, bacon) is `cured' by a chemical reaction with nitrates in the smoke, rather than being cooked by heat.  Cf. #$SmokingFood, #$SaltingFood.")))

(defconcept Cooling-Process
  :is-primitive Temperature-Changing-Process
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "#$CoolingProcess is a collection of events, and a subset of #$TemperatureChangingProcess.  During each #$CoolingProcess event, the temperature of the #$objectOfStateChange is decreased by removing heat from the object.")))

(defconcept Corner--2d
  :is-primitive Corner--2-Or-3d
  :annotations (Region-Type
                (documentation "The collection of all regions wherein two linear edges of a two dimensional or sheet-shaped object (i.e., considered in this context to be sheet shaped) meet to form an angle of substantially less than 180 degrees.  Polygons have at least three corners each.")))

(defconcept Corner--2-Or-3d
  :is-primitive Partially-Tangible
  :annotations (Region-Type
                (documentation "The collection of all regions centered around a point where two edges of a sheet-like object meet at an angle or where three or more surfaces (together with three or more solid edges dividing them) meet at one place forming a solid angle.  Includes 2-dimensional corners and 3 dimensional corners.  Corners are either #$Convex or #$Concave with respect to some perspective.")))

(defconcept Corner--3d
  :is-primitive Corner--2-Or-3d
  :annotations (Region-Type
                (documentation "The collection of all regions where three or more surfaces of an object (which is considered three dimensional in current context), and three or more #$EdgeOnObjects, meet.  This includes corners of boxes, the tops of pyramids, etc.  Each #$Corner-3d includes some solid angle of part of the object.")))

(defconcept Corporate-Officer
  :is-primitive (:and Administrator Leader)
  :annotations (Occupation-Type
                (documentation "A collection of people.  An instance of #$CorporateOfficer is a person who is recognized as an officer of a corporation, as officially recorded in the corporate records of that corporation.  Common types of #$CorporateOfficer include #$CompanyPresident, #$CompanyVicePresident, Secretary and Treasurer of a corporation.")))

(defconcept Corrosion-Resistance
  :is-primitive (:and Physical-Attribute Scalar-Interval)
  :annotations (Primitive-Attribute-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute. Each element of #$CorrosionResistance represents a specific level of resistance to corrosion of some tangible object.  Degrees of #$CorrosionResistance may be represented using #$GenericValueFunctions.  Indicate a particular object's #$CorrosionResistance with the predicate #$resistanceToCorrosion.")))

(defconcept Cost-Breakdown-Slot
  :is-primitive (:and Predicate Binary-Predicate)
  :annotations (Predicate-Category
                (documentation "A collection of predicates.  Each element of #$CostBreakdownSlot is a binary predicate used to describe some pecuniary aspect of an instance of #$Buying.  The first argument to every #$CostBreakdownSlot is an element of #$Buying and the second argument is always an instance of #$Money.  Examples: #$moneyTransferred, #$discount, #$salesTax, #$salesCommission.")))

(defconcept Cotemporal-Objects-Slot
  :is-primitive (:and Inter-Existing-Object-Slot Cotemporal-Predicate)
  :annotations (Predicate-Category
                (documentation "This is a subset of #$BinaryPredicate (hence the anachronistic `Slot' in its name).  It is also a subset of #$CotemporalPredicate.  Frankly, it is really just the intersection of #$CotemporalPredicate and #$BinaryPredicate, so it is strictly speaking superfluous, but has proven itself to be useful.  Suppose predicate P is an instance of #$CotemporalObjectsSlot.  If (P X Y) holds, then it must be the case that (#$cotemporal X Y).  For example, consider the binary predicate #$owns, which is an instance of #$CotemporalObjectsSlot.  To represent `Nick owned Spot in 1992' we could create the appropriate cotemporal subabstractions of each, and assert (#$owns NickIn1992 SpotIn1992), and this would satisfy the constraint introduced when we declared #$owns to be a #$CotemporalObjectsSlot.  More tersely, we could use #$holdsIn (qv) and just assert (#$holdsIn (#$YearFn 1992) (#$owns Nick Spot)), since #$holdsIn implicitly treats instances of #$SomethingExisting as their appropriate subabstractions.  Alternatively, we could create a context (a microtheory) one of whose assumptions was a temporal one, limiting all axioms to holding during 1992, and then in that context we could simply assert (#$owns Nick Spot).  But it would be incorrect to assert (#$owns Nick Spot) in the #$BaseKB, since Nick as a baby and Nick as an old man didn't/won't own Spot.")))

(defconcept Cotemporal-Predicate
  :is-primitive Predicate
  :annotations (Relation-Type
                (documentation "A collection of Cyc predicates.  Each element of #$CotemporalPredicate is a Cyc predicate whose temporal arguments (i.e., arguments having a temporal extent) must be #$cotemporal, i.e., they have the same temporal starting points and ending points.  Moreover, all the temporal arguments of all the cotemporal predicates involved in a single axiom must be #$cotemporal.  Since this is a very common and important relationship, we'll consider a detailed example.   If I say `Fred owns a Camaro', what I really mean is that some #$subAbstrac (i.e., a time-slice) of Fred, over some time interval INT (e.g., 1993-1995), owns some #$subAbstrac of that Camaro, which exists over that very same time interval INT.  Fred may have owned many cars before and since, and that Camaro may have had many owners before and since, but one time-slice of Fred owned one time-slice of that car.  Common sense tells us that the time interval (INT) must have been the same in both cases; Cyc can infer this commonsensical conclusion from our having told it that #$owns is a cotemporal relation, i.e., (#$isa #$owns #$CotemporalPredicate).  A ternary example is `between', as in `Lucy is between Fred and Ethel'.  Not all predicates are elements of #$CotemporalPredicate, of course; consider `remembers' -- I (today) remember my father as he was forty years ago.  There are some borderline cases here; #$sees clearly belongs to #$CotemporalPredicate, but in the case of someone smelling another object (cf. #$smells) it is less clearcut, since one can smell an object that has ceased to exist.")))

(defconcept Counterfactual-Context
  :is-primitive Microtheory
  :annotations (Microtheory-Type
                Object-Type
                (documentation "The collection of microtheories that are each assumed to include at least one counterfactual assertion: an assertion which is believed to be untrue in the real world.  It may be, however, that there is no explicit counterfactual assertion in a given #$CounterfactualContext.  In particular, it is not required that there be any explicit contradiction of assertions in the #$genlMts of the #$CounterfactualContext.  But intuitively speaking, most adults would be reticent about trusting too strongly in a propositon whose only justification was in a #$CounterfactualContext.  All works of fiction relate events that transpire in counterfactual contexts.  Examples:  #$WorldMythologyMt, #$PaddingtonBearStoriesMt, #$ChristmasMythologyMt.")))

(defconcept Country
  :is-primitive Geopolitical-Entity
  :annotations (Existing-Object-Type
                (documentation "A collection of geopolitical entities.  An element of #$Country is a nation-state having its own territory, population, and government, whether or not it is fully independent.  For example, #$Scotland is an element of #$Country, even though it is a part of the #$UnitedKingdomOfGreatBritainAndNorthernIreland.  Cf. #$IndependentCountry.")))

(defconcept Country-Subsidiary
  :is-primitive Geopolitical-Entity
  :annotations (Existing-Object-Type
                (documentation "A collection of geopolitical entities.  Each element of #$CountrySubsidiary is a political region that is a direct subsidiary of some country.  This collection includes states, provinces, territories, and some special districts such as Washington, D.C.  This class is somewhat artificial but is useful when representing addresses.")))

(defconcept County
  :is-primitive Geopolitical-Entity
  :annotations (Spatially-Disjoint-Region-Type
                (documentation "A collection of geopolitical entities.  An element of #$County is a lesser geopolitical region, having an area typically larger than a #$City but smaller than a #$State-Geopolitical.  Traditionally, a #$County area was within one day's horseback ride from the County Seat.")))

(defconcept County-Government
  :is-primitive Regional-Government
  :annotations (Existing-Object-Type
                (documentation "The collection of all #$County governments.")))

(defconcept Course-During-A-Meal
  :is-primitive Handling-An-Object
  :annotations (Script-Type
                (documentation "A collection of events.  Each element of #$CourseDuringAMeal is an event in which one or more diners at a meal consume a single course.  Examples include the elements of #$AppetizerCourse, #$MainCourse, #$DessertCourse.")))

(defconcept Court--Judicial
  :is-primitive Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations which are judicial agents.  An element of #$Court-Judicial is an established judicial court, i.e., an enduring governmental #$Organization whose #$primaryFunction is to settle disputes by means of legal reasoning by one or more #$Judges.  Typically, a court's orders are enforced by some other agency belonging to the government of which that court is a part.  The collection #$Court-Judicial includes federal, state, county, and municipal courts, appellate and chancery courts, tax courts, courts of claims, courts-martial (if non-temporary), admiralty courts, courts of chivalry, American Indian tribal courts, and the Permanent Court of International Justice.  It excludes Gypsy/Rom Kris courts, nonjudicial administrative county courts, stannaries, and temporary #$Tribunals.")))

(defconcept Courtesy-Title
  :is-primitive Title
  :annotations (Linguistic-Object-Type
                (documentation "The collection of #$Titles, such as  Mr., Ms., Mrs., Miss, Dr., etc., which precede names in Anglo-American addressing custom.")))

(defconcept Cracking
  :is-primitive (:and Physical-Event
                      Intrinsic-State-Change-Event
                      Separation-Event)
  :annotations (Script-Type
                (documentation "A collection of change events.  In each #$Cracking, something becomes cracked.  I.e., two or more areas of the thing are separated from one another (though perhaps not divided wholly into parts).  In order to undergo a #$Cracking, the #$objectOfStateChange must be in a #$SolidStateOfMatter.")))

(defconcept Creation-Event
  :is-primitive (:and Creation-Or-Destruction-Event Action)
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  In each element of #$CreationEvent, at least one instance of #$Entity (the #$outputsCreated) is brought into existence.")))

(defconcept Creation-Or-Destruction-Event
  :is-primitive Physical-Event
  :annotations (Temporal-Object-Type
                (documentation "A collection of events.  During each element of #$CreationOrDestructionEvent, one or more instances of #$Entity come into or go out of existence.  Elements of this collection are the sorts of events that have #$inputs, #$outputs, #$products, #$wasteProducts, and #$byProducts.  Examples of #$CreationOrDestructionEvent would include a particular campfire (a #$CombustionProcess), manufacturing a particular car, etc.")))

(defconcept Credential
  :is-primitive (:and Temporal-Thing
                      Mental-Object
                      Abstract-Information
                      Propositional-Information-Thing)
  :annotations (Object-Type
                (documentation "A collection of intangible objects which consist of propositional information about an agent.  #$Credential is a subset of #$PropositionalInformationThing (q.v.).  Each element of #$Credential is specific information about one agent, provided by another agent; the information content of a credential consists of favorable, enabling, or empowering propositional declarations.  As represented in Cyc, credentials are intangible information, but each element of #$Credential usually has some associated physical document (e.g., a diploma associated with a college degree, a driver's license).  A credential may certify that the holder (i.e., the subject of the credential) has a particular skill (e.g., legal bar certification, ability to drive); has completed certain training (e.g., GED schooling, Ph.D. requirements; is allowed to do a certain thing (e.g., travel visa, permission slip); and so on.  Recommendations are considered a kind of credential.")))

(defconcept Credit-Card
  :is-primitive (:and Financial-Account-Tender-Object
                      Official-Document
                      Id-Document
                      Card
                      Tender-Object)
  :annotations (Money-Tender-Type
                (documentation "A collection of plastic cards.  Each element of #$CreditCard is a piece of plastic that enables authorized users to spend the card-issuing company's money, drawn as a (usually unsecured) loan through an associated instance of #$CreditCardAccount under a pre-arranged credit agreement.  The credit card company credits the vendor of the purchased goods or services and bills the card user, usually with interest.")))

(defconcept Crevice
  :is-primitive Cavity
  :annotations (Existing-Object-Type
                (documentation "The collection of all long, slender cavities or cracks or furrows in otherwise solid objects.")))

(defconcept Crime-Detection
  :is-primitive (:and Human-Activity Purposeful-Action)
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "This is the actual act of detecting a crime.")))

(defconcept Currency
  :is-primitive (:and Visual-Information-Source
                      Tender-Object
                      Information-Bearing-Object
                      Portable-Object)
  :annotations (Money-Tender-Type
                (documentation "A collection of physical objects.  An instance of #$Currency is a physical object generally accepted as legal tender (i.e., not checks or credit cards) and used as a means of transferring a quantity of #$Money between some elements of #$Agent.  Elements of #$Currency may be coins, items of precious metal, paper bills for which precious objects are payable by a government to the bearer on demand, or unbacked paper bills required by a government to be accepted for payment of debts.  Elements of #$Currency are typically backed by and issued by national governments.
Note: This collection includes all instances of legal tender, worldwide and historically.  But, for better or worse, the notion of legal tender is context-dependent.  Normally what counts as currency is relative to the country one is in; legal tender in the United States is not the same as legal tender in China.  (Though US dollars may have excellent value on the black market.)  What counts as legal tender depends on historical events as well, since a government may change, withdraw, or cancel some types of currency it previously authorized.  Also, conquest of one country by another usually brings about the collapse of the loser's currency.  A Confederate ten dollar bill, e.g., is not an element of #$Currency in the context of twentieth century Alabama, even though it belongs to #$Currency in a different context.")))

(defconcept Curvature-Of-Surface
  :is-primitive Attribute-Value
  :annotations (Attribute-Type
                (documentation "The collection of all surface curvature attributes.  These may apply to a particular piece of a surface of an object, or to the whole surface.  For real-world (non-mathematical) surfaces, there is ordinarily some tolerance for minor surface deviations that depends on the context.  Thus a 'flat' surface may have relatively small bumps and crevices.")))

(defconcept Cutting-Device
  :is-primitive Physical-Device
  :annotations (Existing-Object-Type
                (documentation "A collection of devices.  An instance of #$CuttingDevice is a device whose #$primaryFunction is to (enable its user to) cut another object.  Subsets of #$CuttingDevice include the collections #$Razors, #$Scissors, #$LawnMowers,and more.")))

(defconcept Cyc-El-Variable
  :is-primitive (:and Cyc-System-Symbol Cyc-System-Variable)
  :annotations (Cyc_Collection
                Object-Type
                (documentation "The collection of variables that appear in elements of #$CycExpression.  Strings used for elements of #$CycELVariable must begin with the character `?'; e.g., ?X, ?AGENT, ?PROP.")))

(defconcept Cyc-Expression
  :is-primitive (:and Individual Computational-Object Abstract-Information)
  :annotations (Cyc_Collection
                Linguistic-Object-Type
                (documentation "The collection of all syntactically legal CycL expressions.  Note that CycL is NOT just first-order:  this collection includes sets and propositions, as well as individuals and predicates.")))

(defconcept Cyc-Formula
  :is-primitive (:and Cyc-Expression Linguistic-Object Cyc_Proposition)
  :annotations (Cyc_Collection
                Linguistic-Object-Type
                (documentation "The collection of all well-formed CycL formulas.  Every Cyc formula is a Cyc expression and a proposition; #$CycFormula is a subset of both #$CycExpression and #$Proposition.  Example: (#$and (#$isa #$Pittman #$HumanCyclist) (#$residesInRegion #$Pittman #$CityOfAustinTX)).   For a thorough discussion of what constitutes a well-formed CycL formula, see the Cyc documentation.")))

(defconcept Cyc-Indexed-Term
  :is-primitive Cyc_Thing
  :annotations (Cyc_Collection
                (documentation "Elements of #$CycIndexedTerm are objects that are indexed in the Cyc kb (e.g., kb constants, kb assertions).")))

(defconcept Cyclical-Interval-Group-Type
  :is-primitive Mutually-Disjoint-Interval-Collection
  :annotations (Cyc_Collection
                (documentation "(#$isa ?X #$CyclicalIntervalGroupType) means that ?X is a collection of interval types whose instances recur in a set pattern throughout all of calendar history.  ?X must partition all of time: the elements of ?X must be mutually disjoint, and unioned altogether they must encompass all time.  For example, ?X could be the set of the seven calendar days (Monday through Sunday), or the set of the twelve calendar months (January through December).  I.e., (#$isa #$DayOfWeekType #$CyclicalIntervalGroupType) and (#$isa #$MonthOfYearType #$CyclicalIntervalGroupType).  `Recurring in a set pattern' generally means that one can put the elements of ?X in order, say X1, X2,..., Xn, and there will be an instance of X1 immediately followed by an instance of X2 (that instance x2a of X2 will be #$contiguousAfter that instance x1a of X1),  and there will be an instance of X3 immediately following that particular instance of X2, and there will be an instance of X4 immediately following that instance of X3, etc.  One final note:  when we arrange elements of ?X into such a pattern X1,...Xn (whose repetitions then `tile' all time), n may be larger than the cardinality of ?X.  E.g., ?X might be the set with just the 2 elements WeekendDay (the union of the set #$Saturday and the set #$Sunday) and WeekDay, and then the arrangement that tiles all time is 5 contiguous WeekDays followed by 2 contiguous WeekendDays.")))

(defconcept Cyclist
  :is-primitive Temporal-Thing
  :annotations (Cyc_Collection
                (documentation "The set of actors (mostly people) entitled to inspect and modify the Cyc knowledge base")))

(defconcept Cyc-System-Atom
  :is-primitive Cyc-System-List-Or-Atom
  :annotations (Object-Type
                (documentation "A collection of the atomic data belonging to the CycL substrate of the Cyc System.  Elements of #$CycSystemAtom cannot be decomposed (e.g., a symbol).")))

(defconcept Cyc-System-Atom-With-Value
  :is-primitive Cyc-System-Atom
  :annotations (Object-Type
                (documentation "A sub-collection of the atomic data belonging to the CycL substrate of the Cyc System.  Each element of #$CycSystemAtomWithValue is an atomic datum that has a value (e.g., 2) associated with it.")))

(defconcept Cyc-System-List
  :is-primitive (:and Individual Cyc-System-List-Or-Atom List--Sequence)
  :annotations (Cyc_Collection
                Object-Type
                (documentation "A collection of tuples (see #$Tuple).  Each element of #$CycSystemList is an ordered list of items enclosed in parentheses.  Cyc system lists are those things that pass the #$defnIff LISTP, i.e., those things considered by the Cyc System to be lists.")))

(defconcept Cyc-System-List-Or-Atom
  :is-primitive Cyc-System-Object
  :annotations (Object-Type
                (documentation "A collection including both the lists and the atomic data belonging to the CycL substrate of the Cyc System.")))

(defconcept Cyc-System-Object
  :is-primitive Computational-Object
  :annotations (Object-Type
                (documentation "The collection of computational (i.e., abstract, intangible, syntactically structured) objects which make up Cyc's CycL-based system.")))

(defconcept Cyc-System-Real-Number
  :is-primitive (:and Real-Number Cyc-System-Atom-With-Value)
  :annotations (Cyc_Collection
                Object-Type
                (documentation "#$CycSystemRealNumber is the set of all numbers which satisfy the #$defnSufficient NUMBERP (i.e., the set of numbers which are considered reals or integers by CycL).  Thus, 3.14, 0, and -0.004 are legitimate elements of #$CycSystemRealNumber.  But (#$Meter 6), (#$Unity 3.3), :34, #$PlusInfinity, and Avogadro's number are NOT legitimate elements of #$CycSystemRealNumber.")))

(defconcept Cyc-System-String
  :is-primitive (:and Individual Cyc-System-Atom)
  :annotations (Cyc_Collection
                (documentation "Each #$CycSystemString is a sequence of characters enclosed within double quotes")))

(defconcept Cyc-System-Symbol
  :is-primitive (:and Individual Cyc-System-Atom)
  :annotations (Cyc_Collection
                Object-Type
                (documentation "A collection of symbolic atomic terms, namely, all those things that satisfy the  definition of a symbol in the Cyc system.  Every element of #$CycSystemSymbol satisfies the Heuristic Level (SubL) #$defnIff SYMBOLP.  Such terms cannot include numbers or strings (i.e., they must be symbolic), nor can they include lists, non-reified function terms, or axioms (i.e., they must be atomic).")))

(defconcept Cyc-System-Variable
  :is-primitive Cyc-System-Symbol
  :annotations (Object-Type
                (documentation "The collection of atomic data, each element of which denotes a variable within CycL and therefore can have a value associated with it during inferencing.  #$CycSystemVariable excludes Cyc System symbols which designate constants or strings.")))

(defconcept Daily-Personal-Cleaning
  :is-primitive Cleaning
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each #$DailyPersonalCleaning encompasses the standard cleaning and grooming activities that an animal engages in over the course of a day.  Such a `daily routine' is almost sure to include many brief grooming and cleaning actions, such as licking one's paws, combing one's hair, washing one's hands, shaving, bathing, etc., and those are sub-events of that #$DailyPersonalCleaning event.  For example, a human's #$DailyPersonalCleaning might have a #$TeethCleaning as one of its sub-events, along with a #$TakingABath, two instances of #$CombingHair, etc.  
Note:  Those specialized kinds of events, like #$CombingHair, are NOT subsets of #$DailyPersonalCleaning, since it would be abnormal for someone to JUST comb their hair each day (and do absolutely no other daily cleaning activity whatsoever).
Note:  In the context #$HumanActivitiesMt --- where all the performers of actions are, by default, human beings --- #$DailyPersonalCleaning designates human grooming activities only.  In that microtheory, dog-grooming performed by human beings does not constitute #$DailyPersonalCleaning, even if it happens on a daily basis for some pampered poodle, as it is not PERSONAL (i.e, self-) cleaning.")))

(defconcept Database--Abstract-Content
  :is-primitive Indexed-Info-Source
  :annotations (Object-Type
                (documentation "The collection of all databases, as abstract repositories of information rather than as physical storage devices.   A database generally has some means of accessing the data from structured records, frames or relational structures, using some query language.  A particular #$Database-AbstractContent may exist in multiple copies, and may be distributed over several different physical data storage sites: see also #$Database-Physical.")))

(defconcept Database--Physical
  :is-primitive (:and Structured-Information-Source
                      Information-Bearing-Object
                      Composite-Tangible-And-Intangible-Object)
  :annotations (Existing-Object-Type
                (documentation "A collection of information 
bearing objects (IBOs); a subset of 
#$StructuredInformationSource.  Each element of #$Database-Physical 
is an IBO that stores many pieces of information, organized 
for easy scanning and access.  Typically, a data base 
involves one or more formatted data record schemes, 
together with some device for searching and retrieving data.  
Note that, as an IBO, a #$Database-Physical is some particular,
tangible copy of a database. To refer to the abstract 'content'
of a database, use #$Database-AbstractContent.")))

(defconcept Date
  :is-primitive (:and Time-Interval Temporal-Thing)
  :annotations (Temporal-Object-Type
                Cyc_Collection
                (documentation "#$Date is a subset of #$TimeInterval.  A #$Date is any #$TimeInterval which can be defined purely by its location on the calendar.  Thus a #$Date could be a particular calendar day, a particular calendar quarter, a particular calendar month, a particular decade, etc.  So the subsets of #$Date include #$CalendarMinute, #$CalendarQuarter, etc., as well as #$CalendarDay.")))

(defconcept Dawn
  :is-primitive (:and Qualitative-Time-Of-Day Twilight)
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "Each instance of #$Dawn is a dimly-lit period before a #$Sunrise.")))

(defconcept Daytime-Working-Hours
  :is-primitive Time-Of-Day
  :annotations (Temporal-Object-Type
                (documentation "#$DaytimeWorkingHours is a set of time intervals.  The length of each of those intervals, and their #$startingPoint and #$endingPoint, are defined by the bulk of a working population performing their daily jobs.  The schedule varies by context -- i.e. which group of workers are being considered -- and the boundaries are fuzzy.  This fuzziness makes the concept more useful in many ways, though, not less useful.")))

(defconcept Dead-Animal
  :is-primitive Organic-Stuff
  :annotations (Existing-Object-Type
                (documentation "A subset of #$OrganicStuff (and not, of course, of #$Animal, whose elements must be alive).  Each element of #$DeadAnimal is a corpse or partial remains of an individual animal, somewhat intact, and prior to any butchering, burning, cooking, dissolving, or fully decomposing.")))

(defconcept Dead-Language
  :is-primitive Natural-Language
  :annotations (Object-Type
                (documentation "A subset of #$NaturalLanguage.  Each element of #$DeadLanguage is a natural language that is no longer spoken as a native language.")))

(defconcept December
  :is-primitive Calendar-Month
  :annotations (Month-Of-Year-Type))

(defconcept Deciduous-Plant
  :is-primitive Plant--Woody
  :annotations (Existing-Object-Type
                (documentation "A collection of plants.  Each element of #$DeciduousPlant is a plant which sheds all of its leaves once a year, seasonally, and subsequently grows new ones.")))

(defconcept Decomposition-Event
  :is-primitive (:and Decomposition-Process Destruction-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of events in which one or more objects decompose more or less completely.  See also the more general concept #$DecompositionProcess, in whose instances objects at least partially decompose.")))

(defconcept Decomposition-Process
  :is-primitive Transformation-Process
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events in which some object decomposes.  I.e., in a #$DecompositionProcess event, some object's matter undergoes chemical reactions (sometimes mediated by microorganisms) that eventually result in the object losing its shape and material characteristics.  This may sometimes superficially resemble #$Melting, but it is a different process.")))

(defconcept Decrypting
  :is-primitive Ibt-Recoding
  :annotations (Temporal-Object-Type
                (documentation "The collection of actions in which an encrypted IBO (#$InformationBearingObject) is transformed so that it can be accessed.")))

(defconcept Default-Disjoint-Food-Type
  :is-primitive Product-Type
  :annotations (Sibling-Disjoint-Collection
                (documentation "A collection of collections.  Each instance of #$DefaultDisjointFoodType is a collection of beverages or foodstuffs (a subset of #$Food or #$FoodIngredientOnly).  More to the point, this collection-of-collections is a #$SiblingDisjointCollection (qv).  So every two instances of #$DefaultDisjointFoodType are either disjoint, or are in a known subset/superset relationship, or have some known (reified) common specialization.  Virtually every commonly-named type of food will be an element of this set-of-sets.  E.g., the collections #$HotDog, #$ChickenSoup, #$Cocoa-ThePowder, #$Prune, #$ToasterTart, #$MilkPowder, and so on.  One could easily define a collection of foodstuff and beverages, such as The-Food-That-Was-Eaten-In-Dallas-Yesterday, that would not be a member of this set-of-sets, but most such collections are not worth naming and keeping around.  See the concept #$SiblingDisjointCollection for more information about this sort of arrangement.")))

(defconcept Default-Disjoint-Script-Type
  :is-primitive Script-Type
  :annotations (Sibling-Disjoint-Collection
                (documentation "This is a  #$SiblingDisjointCollection (qv).  So the elements of #$DefaultDisjointScriptType are kinds of actions (subsets of #$Event) that can be assumed to be mutually disjoint from each other (unless one is known to be a subset of the other, or there is a known common subset.)")))

(defconcept Default-Monotonic-Predicate
  :is-primitive Predicate
  :annotations (Cyc_Collection
                Object-Type
                (documentation "A collection of predicates.  Each element of #$DefaultMonotonicPredicate is a predicate whose use as the predicate of a locally asserted ground formula causes that formula to be entered, by default, as :MONOTONIC.  Examples: #$isa, #$genls, #$disjointWith, #$equals, #$arity, #$arg1Isa.")))

(defconcept Degeneration-Event
  :is-primitive Incurring-Damage
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  In each #$DegenerationEvent, some object loses its function(s) through a process of deterioration and/or a series of discrete breakdowns.")))

(defconcept Density
  :is-primitive (:and Physical-Attribute Scalar-Interval)
  :annotations (Derived-Numeric-Attribute-Type
                (documentation "A collection of physical attributes.  Each element of #$Density is a measurable physical property of a tangible object, namely, its mass per volume.  Densities may be represented relative to certain substances, e.g., #$SaltWaterDensity, #$FreshWaterDensity, #$DenseAsOil.  Densities of objects are reported using the predicate #$densityOfObject.")))

(defconcept Dentist
  :is-primitive Medical-Care-Professional
  :annotations (Occupation-Type
                (documentation "The collection of doctors that are trained with diagnosing and treating diseases of the gums and teeth.")))

(defconcept Derived-Numeric-Attribute-Type
  :is-primitive Measurable-Attribute-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$DerivedNumericAttributeType is a collection of measurable attributes that are measured in complex units, including #$Volume, #$Area, #$Acceleration, etc.  The types of attributes in #$DerivedNumericAttributeType are `derived' from other, fundamental attributes (such as #$Distance and #$Mass) which are measured in simple units.  Cf. #$FundamentalNumericAttributeType.")))

(defconcept Desert-Climate-Cycle
  :is-primitive (:and Temperate-Climate-Cycle Annual-Climate-Cycle)
  :annotations (Climate-Cycle-Type
                (documentation "The attribute of having a desert climate.  Wide termperature extremes from very hot in day to cold at night.  Very little precipitation on a year-long basis, although there may be desert storms.")))

(defconcept Desk-Worker
  :is-primitive Professional
  :annotations (Occupation-Type
                (documentation "A collection of persons; a subset of #$Professional.  This is a general category of workers that generally sit at desks, as opposed to those who do factory work or outside work, etc.  Subsets include #$Administrator, #$ComputerOperator, and #$Secretary.")))

(defconcept Destruction-Event
  :is-primitive Creation-Or-Destruction-Event
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  In each element of #$DestructionEvent, at least one instance of #$Entity (the #$inputsDestroyed) ceases to exist.")))

(defconcept Device--Single-User
  :is-primitive (:and Physical-Device Partially-Tangible)
  :annotations (Existing-Object-Type
                (documentation "A collection of devices.  
One can classify devices according to how many simultaneous 
users they typically have.  An instance of #$Device-SingleUser
is any device that typically has/requires exactly one (i.e., 
one and only one) user.  A screwdriver (an instance of 
#$Screwdriver) is a #$Device-SingleUser, but a grand piano 
(an instance of #$GrandPiano) is not.  A borderline non-example 
is a car --- although only one person operates it, several can 
`use' it at once, i.e. derive the value of its primary function 
which is transportation.  So a car is not a #$Device-SingleUser.
A borderline example is a telephone -- although it requires 
two or more users (each on telephones) for meaningful use, 
each phone generally has just one user at a time.  
So a telephone is a #$Device-SingleUser but a telephone-circuit is not.")))

(defconcept Device--User-Powered
  :is-primitive (:and Muscle-Powered-Device Solid-Tangible-Thing)
  :annotations (Existing-Object-Type))

(defconcept Device-Running
  :is-primitive Physical-Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events.  An instance of #$DeviceRunning is an event in which some device is running.  This collection includes events which are complete cycles of a device's normal function (see #$SingleCompleteRunOfADevice) as well as random time slices (#$timeSlices) of them running.  Examples include instances of the collections #$AirplaneTakeOff, #$SkateBoarding, #$RidingAMotorcycle, etc.  Some stranger examples --- which are not instances of #$SingleCompleteRunOfADevice --- include: all the the ignition phases of the firing of my Honda's engine during November of 1996; my TV when it was on and showing a commercial this year; my TV when it was on and I was watching it this week.")))

(defconcept Device-State
  :is-primitive Attribute-Value
  :annotations (Unordered-Attribute-Type
                (documentation "A collection of states that devices can be in, including: #$DeviceOn, #$DeviceOff, #$RecordingStates, #$CockedState, #$Folded, #$OffHook, #$Unlocked, and many others.")))

(defconcept Dexterity
  :is-primitive Script-Performance-Attribute
  :annotations (Script-Performance-Attribute-Type
                (documentation "#$Dexterity is the #$ScriptPerformanceAttributeType for describing actions in which the performer's hands move accurately, quickly, and with economy of motion.")))

(defconcept Diagnosing-And-Repairing-Something
  :is-primitive (:and Human-Activity
                      Purposeful-Action
                      Action-On-Object
                      Intrinsic-State-Change-Event)
  :annotations (Default-Disjoint-Script-Type
                (documentation "The collection of all actions of diagnosing and repairing something, in a very broad sense.  Such events can range from fixing a #$PhysicalDevice (e.g., the last time you took your car in to be fixed), to killing pests that infest a place.  All such actions involve an intrinsic change in the thing which undergoes repairs.  Notice that a diagnosis action alone, or a repair action alone, would not be elements of this collection; they could be #$subEvents of an element of this collection.")))

(defconcept Dietary-Deficiency-Condition
  :is-primitive Malnutrition
  :annotations (Physiological-Condition-Type
                (documentation "The collection of physiological conditions brought on by consuming less of a nutrient than the body requires.")))

(defconcept Digestion-Event
  :is-primitive (:and Body-Movement-Event
                      Biological-Decomposition-Event
                      Single-Doer-Action)
  :annotations (Default-Disjoint-Script-Type
                (documentation "A collection of events.  For most animals, a #$DigestionEvent starts at the mouth and, for most vertebrates, end at the anus.  This concept should not be confused with #$DigestingInStomach, whose instances occur only in an organism's #$Stomach.  A #$DigestionEvent spans the whole #$DigestiveSystem, from start to finish.")))

(defconcept Digestive-System
  :is-primitive (:and Animal-Body-Part Biological-Living-Object)
  :annotations (Animal-Body-Part-Type
                (documentation "The collection of all animals' digestive systems.  A #$DigestiveSystem is a system of organs and other body parts (typically of #$Vertebrates) which work together to accomplish the digestion function.")))

(defconcept Dimensionless-Unit-Of-Measure
  :is-primitive Unit-Of-Measure
  :annotations (Interconvertible-Unit-Type
                (documentation "A subset of #$UnitOfMeasure.  #$DimensionlessUnitOfMeasure is the collection of measurement functions whose results are elements of #$ScalarInterval which have no dimension; i.e., they are simply numbers, instances of #$IntervalOnNumberLine.  Examples include #$Percent, #$Unity, #$Thousandths.  (#$Percent 50) returns the point-interval, one-half (0.5).  (#$Unity 3 4) returns the interval that is the range of numbers between 3 and 4, inclusive.")))

(defconcept Directed-Translation
  :is-primitive (:and Movement--Translation-Event Purposeful-Action)
  :annotations (Temporal-Stuff-Type
                Script-Type
                (documentation "A collection of events; a subset of #$Movement-TranslationEvent.  Each instance of #$DirectedTranslation is a movement event that is #$performedBy an #$Agent --- that agent intends for the #$objectMoving to reach a particular #$target.  Examples:  William Tell shooting the arrow off his son's head,  John Wilkes Booth shooting Abraham Lincoln, the last time you tossed a frisbee to someone, a pilot landing an airplane, and a skiier skiing one run of the downhill course.")))

(defconcept Direction-Expression
  :is-primitive Unit-Vector-Interval
  :annotations (Cyc_Collection
                (documentation "A collection of vectors; a subset of #$UnitVectorInterval.  Each element of #$DirectionExpression is a vector representing a direction.  Typically these expressions are used to indicate direction between two objects or locations.  An important subset of this collection is #$GeographicalDirection; e.g., #$South-Directly, #$NorthWest-Directly.")))

(defconcept Dirtiness
  :is-primitive (:and Scalar-Interval Attribute-Value)
  :annotations (Primitive-Attribute-Type
                (documentation "A collection of attributes.  Dirtiness is a measurable attribute that many tangible objects have.  Each element of the collection #$Dirtiness represents a specific level of dirtiness (or cleanliness!); e.g., #$Dirty, #$ReallyDirty, #$ALittleDirty, #$Clean, #$Sterile.  Indicate a particular object's #$Dirtiness with the predicate #$dirtinessOfObject.")))

(defconcept Disappointment
  :is-primitive (:and Sadness Surprise Dissatisfaction)
  :annotations (Feeling-Attribute-Type
                (documentation "The emotion or state of feeling defeated in expectation or hope.  This is a collection; for an explanation of a typical #$FeelingAttributeType, see #$Happiness.")))

(defconcept Disapproval
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "The emotion or state of disapproving of something; a negative attitude towards some situation, proposal, person, or thing, implying a judgment based on explicit or implicit standards (rational, moral, pragmatic, or etc.).  This is a collection; for an explanation of a typical #$FeelingAttributeType, see #$Happiness.  More specialized #$FeelingAttributeTypes than #$Disapproval are #$Contempt, #$Hate, #$Abhorrence, etc.  More subtly, it is often true that feelings of #$Jealousy or #$Envy manifest in superficial shows of #$Disapproval.  #$Disapproval is a #$Collection --- for an explanation of that, see #$Happiness.")))

(defconcept Disaster-Event
  :is-primitive Destruction-Event
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  In each #$DisasterEvent, a large group of people (or, in decreasing order of likelihood of usage of this concept, a large group of animals, plants, corporations, etc.) are at very high risk of injury or property damage, or in which a lot of injury and property damage occurs even though the risk was low.")))

(defconcept Disgust
  :is-primitive Dislike
  :annotations (Feeling-Attribute-Type
                (documentation "A feeling of repulsion or aversion towards something considered distasteful or repugnant.  This is a #$Collection --- for an explanation of that, see #$Happiness.  Some more specialized #$FeelingAttributeTypes than #$Disgust include feelings of #$Abhorrence.")))

(defconcept Disjoint-Set-Or-Collection
  :is-primitive Set-Or-Collection
  :annotations (Cyc_Collection
                (documentation "A collection of mathematical sets and collections the members of which are themselves mathematical sets or collections.  A set or collection, SETORCOL, of sets or collections is an instance of #$DisjointSetOrCollection just in case the elements of SETORCOL are mutually disjoint -- that is, no two elements of SETORCOL have any elements in common.")))

(defconcept Dislike
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "A feeling of disaffection or disaffinity for a person or thing.  This is a #$Collection --- for an explanation of that, see #$Happiness.  Some more specialized #$FeelingAttributeTypes than #$Dislike are #$Disgust, #$Contempt, #$Hate, #$Resentment, etc.")))

(defconcept Dispute-Event
  :is-primitive Hostile-Social-Action
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events with multiple participants.  In each #$DisputeEvent,  some participants seek to achieve states of affairs that other participants seek to prevent.  Disputes may or may not get settled.  Settlement of a dispute may be by fighting, by competition, by using a mediator or court, by chance, by mutual reasoning, etc.")))

(defconcept Dissatisfaction
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "Feeling of discontent, due to a lack of fulfillment of an agent's desires, needs, or requirements.  This is a collection; for an explanation of a typical #$FeelingAttributeType, see #$Happiness.   Some more specialized #$FeelingAttributeTypes than #$Dissatisfaction are #$Disappointment, #$Frustration, #$Impatience, #$Anger, etc. ")))

(defconcept Dissolving
  :is-primitive Destruction-Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events.  In each instance of this collection, a solvent and a solute mix to form a solution.")))

(defconcept Distance
  :is-primitive (:and Physical-Attribute Scalar-Interval)
  :annotations (Fundamental-Numeric-Attribute-Type
                (documentation "A collection of physical attributes.  Each element of #$Distance is the length of a path in space extending from one point to another.  Elements of #$Distance may be either a fixed interval, such as the height of the #$WashingtonMonumentInWashingtonDC, or a range, such as #$WithinAudibleDistance (see #$ScalarInterval for more explanation).  Also, see #$UnitOfDistance for the units used by Cyc to measure distances.")))

(defconcept Distributing-Meta-Knowledge-Predicate
  :is-primitive Predicate
  :annotations (Cyc_Collection
                (documentation "instances are predicates which are permitted to distribute over multiple assertions resulting from canonicalizing one (or more) of the formula args")))

(defconcept Distribution-Event
  :is-primitive Transfer-Out
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each element of #$DistributionEvent is an event in which tangible or intangible objects are distributed from a source to various destinations via some distribution network.")))

(defconcept Dock
  :is-primitive (:and Fixed-Structure Outdoor-Location)
  :annotations (Existing-Object-Type
                (documentation "The collection of long flat walkways that jut out over water from  shorelines.  A Dock's main function is to provide a place to secure boats and to provide a place where passengers and cargo can be loaded and unloaded.")))

(defconcept Doctor--Medical
  :is-primitive (:and Scientist Medical-Care-Professional Prescriber)
  :annotations (Medical-Specialty-Type
                (documentation "The collection of all medical doctors - MDs and Osteopaths.")))

(defconcept Dog
  :is-primitive (:and Domestic-Pet Mammal Carnivore)
  :annotations (Biological-Species
                (documentation "The collection of all dogs of all breeds.  Elements of #$Dog may be members of #$DomesticPet or of #$WildAnimal; e.g., #$Dog includes the dingo dogs of #$Australia.  However, #$Dog excludes the members of #$Wolf, #$Fox, and the other non-dog subsets of #$CanineAnimal.  #$Dog is an instance of #$BiologicalSpecies, Canis familiaris.")))

(defconcept Domesticated-Animal
  :is-primitive Non-Person-Animal
  :annotations (Existing-Object-Type
                (documentation "A subset of #$Animal; the collection of all animals which are kept by humans for labor, transportation, food, or as pets, and whose relations with humans are more or less cooperative.  #$DomesticatedAnimal does NOT include instances of #$Tiger being kept in zoos, though it arguably includes Shamu or Flipper.  Cf. #$WildAnimal, #$CaptiveAnimal.")))

(defconcept Domesticated-Animal-Food
  :is-primitive Tangible-Product
  :annotations (Existing-Stuff-Type
                Product-Type
                (documentation "A collection of tangible stuff; a subset of #$TangibleProduct.  Each element of #$DomesticatedAnimalFood is a foodstuff produced by human beings and intended for consumption by domesticated animals.  This collection includes feed manufactured for horses, cattle, chickens, and other farm animals, as well as `pet foods'.")))

(defconcept Domestic-Pet
  :is-primitive (:and Human-Occupation-Construct-Resident
                      Domesticated-Animal
                      Portable-Object)
  :annotations (Existing-Object-Type
                (documentation "The subset of #$DomesticatedAnimal whose elements are animals kept by humans primarily for their companionship.  (They may, however, do some chores such as catching mice.)  Many members of #$DomesticPet live in the homes of their owners.")))

(defconcept Doorway
  :is-primitive (:and Portal Inanimate-Thing)
  :annotations (Existing-Object-Type
                (documentation "A collection of portals.  Each element of #$Doorway is a portal in some instance of #$ShelterConstruction, suitable for people (and perhaps vehicles) to enter and exit.  For example, doorways to houses, office buildings, elevators, automobiles, airplanes, garages, etc.")))

(defconcept Doorway-Covering
  :is-primitive Portal-Covering
  :annotations (Product-Type
                Existing-Object-Type
                (documentation "A collection of tangible objects.  Each element of #$DoorwayCovering is a physical object used to cover some kind of portal, including but not limited to doorways in buildings.  This collection also includes doors of cars, buses, subways, elevators, garages, airplane hangars--coverings over any doors that people (and perhaps vehicles) pass through.")))

(defconcept Dress
  :is-primitive (:and Womens-Clothing Clothing-Item)
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "The collection of all dresses, a kind of women's clothing")))

(defconcept Drink
  :is-primitive Food-And-Drink
  :annotations (Existing-Stuff-Type
                Product-Type
                (documentation "The collection of drinkable substances; a collection of edible stuff and a subset of #$FoodAndDrink.  Each element of the collection #$Drink is a liquid of a type that is ingestible and commonly consumed by humans or animals.  Drinks are ingested without chewing.  Examples of #$Drink include all elements of the collections #$Water-Ingestible, #$Tea-Hot, #$HotChocolate, #$Lemonade, #$Beer. .  By default they are liquids.  Borderline examples include a thick milkshake or soup, even if there are solid objects suspended in it.  Thus #$LiquidTangibleThing is not necessarily (monotonically) a #$genls of #$Drink, though it is true by default that a #$Drink be an instance of #$LiquidTangibleThing.  I.e., by default, elements of #$Drink are in a #$LiquidStateOfMatter.  Another borderline example of a #$Drink is a glassful of poison or urine; it may be unpalatable or unsafe to drink a #$Drink.  Note that the #$Drink includes the portion of liquid, but not the container such as the glass or coffee cup or bowl.   So one borderline non-example is a glass of water -- as opposed to a glassful of water; the former includes the glass, the latter doesn't.   Other borderline non-examples include: an ice cube, a grape sno-cone, a scoop of ice cream with hot fudge sauce on it, and a tiny bit of liquid such as a single raindrop even if it enters one's mouth.")))

(defconcept Drinking-Event
  :is-primitive (:and Consuming-Food-Or-Drink Translation--Complete)
  :annotations (Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events.  In each instance of this collection, a single individual consumes a portion of some drink.  A #$DrinkingEvent typically consists of several instances of #$DrinkingASip.  See #$EatingEvent.")))

(defconcept Drug-Prescription
  :is-primitive Textual-Material
  :annotations (Existing-Object-Type
                (documentation "The legal document in which a doctor authorizes a patient to purchase a certain amount of a drug and take it according to some specified schedule.")))

(defconcept Drug-Product
  :is-primitive (:and Consumable-Product Drug-Substance Artifact)
  :annotations (Pharmacy-Product-Type
                Existing-Stuff-Type
                (documentation "Any kind of drug, including the stuff you take when you are sick.  Note, however, that this is a product (intentionally created or used) not merely the chemical description.  This means that salt-water would not be an element of #$DrugProduct, even though saline solution would be.")))

(defconcept Drug-Substance
  :is-primitive Tangible-Thing
  :annotations (Existing-Stuff-Type
                (documentation "The class of substances that can be introduced into organism's bodies to produce certain physiological effects.  Includes both stuffs and objects made and/or marketed as #$DrugProducts, as well as naturally-occurring stuffs and objects that have physiological effects.")))

(defconcept Drug-Therapy
  :is-primitive Medical-Treatment-Event
  :annotations (Script-Type
                (documentation "A collection of medical care events in which drugs accomplish a medical purpose.  An instance of #$DrugTherapy is the result of an instance of #$AdministeringADrug (q.v.).  An instance of #$DrugTherapy is the event of the patient's body undergoing the physiological effects of the drug it was given.  
Note: #$DrugTherapy events do not include the administration of the drug; rather, they are the results of such administrations.  Cf. #$AdministeringADrug.")))

(defconcept Drying-Something
  :is-primitive (:and Physical-Event Intrinsic-State-Change-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events.  Each #$DryingSomething event involves reducing the moistness of something -- either its water content or its surface wetness -- by evaporation or by absorbing the moisture (e.g., with towels) or by some other process.  Typical objects of a #$DryingSomething event include instances of: paint, food, dishes, clothes, humans.  When you run your clothes dryer at home, that event is an element of this collection.")))

(defconcept Ductility
  :is-primitive (:and Scalar-Interval Physical-Attribute)
  :annotations (Material-Strength-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute.  Each element of #$Ductility describes a specific capacity of a physical material to be stretched, drawn, or hammered thin without breaking.  Different degrees of ductility may be represented using a #$GenericValueFunction.  Ductilities of objects are indicated with the predicate #$ductilityOfObject.")))

(defconcept Dusk
  :is-primitive (:and Twilight Qualitative-Time-Of-Day)
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "Each #$Dusk is a dimly-lit period of time which is #$contiguousAfter a #$Sunset, and is the #$Event which starts a #$Night.")))

(defconcept Dying
  :is-primitive (:and Single-Doer-Action Biological-Event Destruction-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each element of #$Dying is an event in which a living organism (i.e., an instance of #$Organism-Whole) ceases to live and thus ceases to exist.  The physical portion of the organism may remain, but that is not considered an instance of #$Organism-Whole (cf. #$DeadAnimal).  Note that the expiring animal is related to its dying event by #$bodilyDoer (q.v.)--in contrast to the role an organism plays when it is the #$objectActedOn in a #$Killing-Biological event (which will have some #$Dying event among its #$subEvents), and cf. #$bodilyActedOn.")))

(defconcept Ear
  :is-primitive (:and Vibration-Through-Amedium-Sensor Animal-Body-Part)
  :annotations (Symmetric-Anatomical-Part-Type
                (documentation "The organ of hearing, which occur in pairs on most animals")))

(defconcept Earth-Stuff
  :is-primitive Natural-Tangible-Stuff
  :annotations (Tangible-Stuff-Composition-Type
                (documentation "A collection of tangible things.  Each element in #$EarthStuff is a portion of the stuff that the ground of Earth (at or near its land surface) is made of, including rocks, boulders, sand grains, soil, mud, etc., and mixtures of those things (such as islands or whole continents).  Examples: #$Australia, #$CapeCod, #$ZionHill, #$GreatSmokyMountains.")))

(defconcept Eating-Event
  :is-primitive (:and Consuming-Food-Or-Drink
                      Single-Doer-Action
                      Destruction-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events.  Each element of #$EatingEvent is an event which involves the consumption of a substantial portion of food by a single individual (human or other animal).   An instance of #$EatingEvent is a meal or snack taken in its entirety; it is a series of individual #$EatingAMorsel events.
Note:  If a group of people gets together and eats lunch, that activity is represented by an instance of #$HavingAMeal; during that `super-event' each participant engages in his/her own instance of #$EatingEvent, and all of those are #$subEvents of the #$HavingAMeal event.")))

(defconcept Echolocation-Perception
  :is-primitive Perceiving
  :annotations (Temporal-Stuff-Type
                (documentation "#$EcholocationPerception is the collection of spatial #$Perceivings in which a #$PerceptualAgent (such as a bat or a submarine) generates sounds (potentially ultra- or sub- sonic in frequency), hears the sounds reflected from surfaces, and thereby acquires information about the position of other objects in its environment.")))

(defconcept Ecological-Region
  :is-primitive Geographical-Region
  :annotations (Existing-Object-Type
                (documentation "A collection of geographical regions.  Each element of #$EcologicalRegion is a region having one or more characteristic ecosystems.  From knowledge of those ecosystems, we can posit whether certain organisms can forage, reproduce, and live successfully there.  Information about ecological regions typically also includes what kinds of organisms are in fact found there.  In theory, any arbitrary continuous region could be analyzed as an ecological region, but most regions identified in practice have some kind of sameness or systematic interconnection in their topology, climate, and biology.  Examples: the #$WesternDesertOfEgypt, the #$GreatBarrierReef, the #$Amazon-Region.")))

(defconcept Edge-On-Object
  :is-primitive (:and Partially-Tangible Path--Simple)
  :annotations (Region-Type
                (documentation "The collection of all edges on objects.  For a two-dimensional object, its boundaries other than corners are it edges.  For a three dimensional object the edges are the outer portions of those extremities, excluding any corners (#$Corner-2or3d), that are much more acute in cross section in one direction than in most other directions at the same point.  Some objects, like spheres, hairs, poles and typical burrs, have no edges.  A discus has one, round, edge; a typical sheet has four edges.  A mountain ridge might have only a single edge.  A solid polyhedron has six or more edges.")))

(defconcept Edible-Stuff
  :is-primitive (:and Consumable-Product Tangible-Thing)
  :annotations (Existing-Stuff-Type
                (documentation "A collection of tangible stuff.  Each instance of #$EdibleStuff is, by default, an item that is ingestible and palatable by most macroscopic animals.  #$EdibleStuff includes food and drink, but also other things, such as nutrients, drugs, etc.  #$EdibleStuff presupposes digestion processes resembling those of most terrestrial macroscopic animals.  For inferencing about the diets of people (or koalas or oil-eating microbes), the collection #$EdibleStuff may have additions and deletions.  See also #$EdiblePartFn, #$FoodAndDrink.")))

(defconcept Educational-Degree
  :is-primitive Credential
  :annotations (Object-Type
                (documentation "A collection of abstract (intangible) objects which consist of information about an agent.  Each element of #$EducationalDegree is a credential conferred, by some instance of #$EducationalOrganization, on a student who has successfully completed a prescribed course of study there.  #$EducationalDegree includes high school, associate, baccalaureate, licensate, magisterial, professional, and doctoral degrees, etc.")))

(defconcept Educational-Organization
  :is-primitive Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of educational organizations.  An element of #$EducationalOrganization may be a school, system of schools, college, seminary, etc., -- a place where teaching and/or training are programmed and provided as a service for students.  An educational organization may be public or private.  This collection includes #$AustinISD (i.e., the #$CityOfAustinTX Independent School District), #$StanfordUniversity, #$BrynMawrCollege, #$UniversityOfPennsylvaniaSchoolOfMedicine, and many other institutions.")))

(defconcept Education-Level-Attribute
  :is-primitive (:and Social-Status-Attribute Scalar-Interval)
  :annotations (Social-Attribute-Type
                (documentation "A collection of attributes.  Each #$EducationLevelAttribute, when applied to a person, indicates their level of education or current involvement in a course of study; if applied to a course of study, it indicates the level of it.  The very same attributes apply in both cases, though; some sample elements of this collection are:  #$PhDLevel, #$TwelfthGradeLevel, #$BachelorOfArtsLevel, #$MedicalDegreeLevel, etc.")))

(defconcept Elasticity
  :is-primitive (:and Scalar-Interval Physical-Attribute)
  :annotations (Material-Strength-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute.  Each element of #$Elasticity represents a specific ability of a physical material to quickly and completely return to its original shape after deformation that does not induce breakage, without permanent change to its original dimensions.  For example, billiard balls have a high degree of elasticity in this sense.  Elasticities of objects are indicated with the predicate #$elasticityOfObject.")))

(defconcept Electrical-Charge
  :is-primitive (:and Scalar-Interval Physical-Attribute)
  :annotations (Fundamental-Numeric-Attribute-Type
                Polar-Attribute-Type
                (documentation "A collection of physical attributes.  Each element of #$ElectricalCharge is an amount of net electrical charge (positive or negative) possessed by a particular instance of #$PartiallyTangible.  Elements of #$ElectricalCharge may be either a fixed interval, such as the charge on one electron, or a range, such as a usable charge on a flashlight battery; see #$ScalarInterval.  Also see #$UnitOfCharge for the units used by Cyc to measure electrical charges.")))

(defconcept Electrical-Component
  :is-primitive Electrical-Device
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A collection of electrical devices.  An instance of #$ElectricalDevice is an electrical device which is normally considered to be a part of some larger, more clearly distinguished device (e.g., clearly distinguished in the sense that it is sold, moved, etc. as a unit).  The #$ElectricalComponent must be connected with other parts in order to perform its #$primaryFunction.")))

(defconcept Electrical-Conductor
  :is-primitive Physical-Conducting-Media
  :annotations (Existing-Object-Type
                (documentation "A collection of tangible things; a subset of #$PhysicalConductingMedia.  Each element of #$ElectricalConductor is a physical thing that can conduct electricity; e.g., a power cord, an electrical plug, a piece of metal.")))

(defconcept Electrical-Device
  :is-primitive (:and Physical-Device
                      Powered-Device
                      Partially-Tangible-Product
                      Solid-Tangible-Thing)
  :annotations (Existing-Object-Type
                (documentation "A collection of physical devices; the most general collection of electrical devices.  Such devices require an input of electrical current (as #$energySource) in order to perform their intended functions.  Instances of #$ElectricalDevice include both complex devices (e.g., elements of the collections #$StereoSystem or #$Computer) and simpler ones (e.g., elements of #$ElectricalComponents and #$ElectronicComponents).
Note:  in some contexts, crystal radios might be classified as inert (unpowered) electrical devices; the same for some sorts of passive radar detectors.  These are exceptional cases, but still elements of this collection.  In other contexts, the power for these devices can be viewed as being supplied from the outside, hence they are clearly `powered' in such contexts.")))

(defconcept Electrical-Resistance
  :is-primitive (:and Physical-Attribute Scalar-Interval)
  :annotations (Derived-Numeric-Attribute-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute.  Each element of #$ElectricalResistance is an attribute which measures the resistance to electrical flow through an object.  Examples: #$InsulatorResistance, #$ConductorResistance, #$SemiconductorResistance, #$SuperconductorResistance.")))

(defconcept Electromagnetic-Radiation
  :is-primitive Wave-Propagation
  :annotations (Default-Disjoint-Script-Type
                Wave-Propagation-Type
                (documentation "A collection of events; a subset of #$WavePropagation.  Each element of #$ElectromagneticRadiation is an event that arises from the interaction of an electrical field and a magnetic field.  Examples include the elements of the collections #$VisibleLight, #$RadioWaves, and #$XRays.")))

(defconcept Electro-Magnetic-Radiation-Sensor
  :is-primitive Sensor
  :annotations (Existing-Object-Type
                (documentation "A subset of #$Sensor, namely those sensors that detect #$ElectromagneticRadiation.")))

(defconcept Electron
  :is-primitive Sub-Atomic-Particle
  :annotations (Existing-Object-Type
                (documentation "A collection of objects; a subset of #$SubAtomicParticle.  Every instance of #$Electron is a subatomic particle with an #$ElectricalCharge of -1.")))

(defconcept Electronic-Device
  :is-primitive (:and Electrical-Device Tangible-Product)
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A collection of devices which use electronic circuitry.  More specifically, any instance of #$ElectronicDevice uses electricity to convey information and not just for power.  Usually transistors, diodes, or other semiconductor circuitry are involved.")))

(defconcept Element-Stuff
  :is-primitive (:and Tangible-Thing Inanimate-Thing)
  :annotations (Tangible-Stuff-Composition-Type
                (documentation "A collection of tangible substances; a subset of #$TangibleThing.  Every instance of #$ElementStuff is a piece of tangible stuff, composed of a quantity of atoms, all of which are of the same chemical element.  That is, every atom in an individual piece of #$ElementStuff has the same number of protons in its atomic nucleus as does every other atom in that piece.  For example, all pieces of carbon are instances of #$ElementStuff.   All pieces of two of #$Carbon's subsets, #$Diamond and #$Graphite, also are instances of #$ElementStuff.  On the other hand, instances of #$Water, because they are constituted of both (some) #$Hydrogen and (some) #$Oxygen atoms, do not belong to the collection #$ElementStuff.")))

(defconcept Element-Stuff-Type-By-Number-Of-Protons
  :is-primitive Chemical-Compound-Type
  :annotations (Disjoint-Set-Or-Collection
                Cyc_Collection
                (documentation "A collection of collections.  #$ElementStuffTypeByNumberOfProtons partitions the collection #$ElementStuff.  Each instance of #$ElementStuffTypeByNumberOfProtons is a subset of #$ElementStuff which is defined ONLY by the atomic composition of its instances -- neither the isotopic composition or physical state of the substances, nor any other additional feature, determines membership in a collection which #$isa #$ElementStuffTypeByNumberOfProtons.  All that matters is that the instances of that type (i.e., collection) of stuff are entirely composed of atoms having a particular number of protons in each atomic nucleus.  Thus, the collection #$Carbon is an instance of #$ElementStuffTypeByNumberOfProtons, but neither the collection #$Diamond nor the collection #$Graphite is (even though they are subsets of #$Carbon), because their members have additional qualifications.")))

(defconcept El-Relation
  :is-primitive loom:thing
  :annotations (Cyc_Collection
                (documentation "A subset of #$Relationship such that instances are only permitted at
the EL; that is, the canonicalizer will transform expressions that
reference instances of #$ELRelation into equivalent expressions that do not
reference instances of #$ELRelation; this transformation is guided by the
value (arg2) of #$expansion for each #$ELRelation")))

(defconcept Embarrassment
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "Mental disturbance and confusion at self-exposure.  #$Embarrassment is often an impediment to freedom of thought, speech, or action.  This is a collection; for an explanation of a typical #$FeelingAttributeType, see #$Happiness.  A more specialized #$FeelingAttributeType than #$Embarrassment is #$Shame.")))

(defconcept Embryo
  :is-primitive (:and Biological-Stage-Of-Development Biological-Living-Object)
  :annotations (Existing-Object-Type
                (documentation "The collection of not yet fully-formed organisms, including mammals before birth, birds before hatching, and plants before sprouting from their seeds.  Note that the criteria of the collection #$Embryo do not correspond exactly with the meaning of the English word 'embryo', since #$Embryo includes zygotes, the set of cells derived from the embryo after the fetus is formed (#$AmnioticSac + #$Fetus + #$Placenta-FetalPortion), etc.")))

(defconcept Emirate--Geopolitical
  :is-primitive Geopolitical-Entity
  :annotations (Spatially-Disjoint-Region-Type
                (documentation "The collection of all Emirates, that is, those geopolitical entities, or territories, each of which is ordinarily ruled by an #$Amir-HeadOfState or an Emir (Amir) who is not necessariy a #$HeadOfState of an #$IndependentCountry, but rules a subsidiary region.  See especially the #$UnitedArabEmirates.")))

(defconcept Emission
  :is-primitive Transfer-Out
  :annotations (Temporal-Object-Type
                (documentation "A collection of processes; a subset of #$GeneralizedTransfer.  Each element of #$Emission is an event in which something `comes out' of an object that actively contributes to that thing's emission (e.g., it is a #$providerOfMotiveForce).  The source is indicated with the predicate #$emitter. An entire #$Translocation is associated with an emission, and these are related through the predicate #$transferOutSubEvent.  If the thing which `comes out' is an instance of #$PartiallyTangible, then the event belongs to a more specific collection, #$EmittingAnObject (q.v.). If the associated element of #$Translocation is an instance of #$WavePropagation, then the emission belongs to the more specialized collection, #$EmittingAWave (q.v.).")))

(defconcept Emitting-An-Object
  :is-primitive (:and Translation--Location-Change Emission)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events; and a subset of #$Emission.  An instance of #$EmittingAnObject is an emission event in which there is some #$PartiallyTangible which is the #$objectEmitted, i.e., the thing which `comes out' of the #$emitter of the event.  The #$objectEmitted goes from (#$fromLocation) a place inside of the #$emitter to (#$toLocation) some place that is not within the #$emitter.  The #$emitter plays an active role (#$doneBy and #$providerOfMotiveForce) in the emission.  Examples: the birth of a baby, a bullet shot from a gun, a venonous snake depositing poison.  Negative examples:  a person leaving a building (the building is not active), throwing a ball (the ball was not inside the person before the throwing).")))

(defconcept Emitting-A-Wave
  :is-primitive Emission
  :annotations (Temporal-Stuff-Type
                (documentation "A collection of events; a subset of #$Emission.  Each element is an event in which a wave is emitted at a #$fromLocation.  For example, Themistocles ordering his fleet to withdraw; Miles Davis playing the trumpet; an emergency flare burning by the side of the road.  See also #$WavePropagation.")))

(defconcept Emitting-Sound
  :is-primitive (:and Emitting-A-Wave Physical-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events; a subset of #$EmittingAWave.  Each element of #$EmittingSound is an event in which an instance of #$Sound is emitted from some #$waveSource.  Examples: an explosion generating a sound wave; a plucked violin string resonating; a baby crying; a person saying `Hello'.")))

(defconcept Employee
  :is-primitive Professional
  :annotations (Occupation-Type
                (documentation "A collection of persons; a subset of #$Professional.  Each element of #$Employee works directly for some business.  Disjoint with #$SelfEmployedWorker.")))

(defconcept Employee-Hiring
  :is-primitive (:and Making-An-Agreement Organizational-Transfer-In)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events; a subset of #$MakingAnAgreement.  Each element of #$EmployeeHiring is an event in which some agent--either an organization or individual--hires a person to work as its employee. See also #$employees, #$WorkAgreement.")))

(defconcept Employment-Termination
  :is-primitive (:and Ending-An-Agreement Organizational-Transfer-Out)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events; a subset of #$EndingAnAgreement.  Each element of #$EmploymentTermination is an event in which some employee ceases to work for his or her employer.  The termination may be initiated by either party, or it may have been specified in the original #$WorkAgreement (q.v.).  Different kinds of #$EmploymentTermination are specified by the subsets #$Resigning, #$EmployeeLayoff, #$RetirementEvent, etc.")))

(defconcept Encrypting
  :is-primitive Ibt-Recoding
  :annotations (Temporal-Object-Type
                (documentation "The collection of actions in which some transformation is applied to an IBT (#$InformationBearingThing) which renders it unaccessible to all but the intended audience, since the method required to decrypt the IBT is secret.")))

(defconcept Ending-An-Agreement
  :is-primitive (:and Social-Occurrence Human-Activity Purposeful-Action)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each element of the collection #$EndingAnAgreement is an event in which some instance of #$Agreement comes to an end.  For example, instances of #$EmploymentTermination and #$EndingMembership.")))

(defconcept Energy-Conversion-Process
  :is-primitive (:and Transformation-Event Physical-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events.  In each instance of #$EnergyConversionProcess, energy is converted from one form to another.")))

(defconcept Engine
  :is-primitive (:and Mechanical-Device Powered-Device)
  :annotations (Existing-Object-Type
                (documentation "A collection of #$PoweredDevices.  An instance of #$Engine is a device that changes some form of energy into motion (usually rotation).  An engine may operate by burning some type of fuel (as do jet engines and internal combustion engines), or it may be powered by electricity, fluid flow, etc.")))

(defconcept Engineer
  :is-primitive Professional
  :annotations (Occupation-Type
                (documentation "A collection of persons; a subset of #$Professional.  Each element of #$Engineer is a professional who works in some branch of engineering.  Elements of #$Engineer include the members of the subsets #$ElectricalEngineer, #$ChemicalEngineer, #$CivilEngineer, #$MechanicalEngineer, etc.")))

(defconcept English-Word
  :is-primitive Lexical-Word
  :annotations (Linguistic-Object-Type
                (documentation "The collection of all lexical words in English; a subset of #$LexicalWord.  Different inflectional forms of a word do not count as different words; for example, #$Eat-TheWord encompasses the strings 'eat', 'eating', 'ate', etc.")))

(defconcept Enjoyment
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "The agreeable emotion of taking pleasure or satisfaction in an experience.  This is a collection; for an explanation of a typical #$FeelingAttributeType, see #$Happiness.  Some more specialized #$FeelingAttributeTypes are #$Delight, #$Celebratory-Emotion, etc.")))

(defconcept Enlisted-Person
  :is-primitive Military-Person
  :annotations (Occupation-Type
                (documentation "A collection of people, a subset 
of #$MilitaryPerson. Each element of this collection is
somebody who is an enlisted person in some 
#$MilitaryOrganization, such as a private.")))

(defconcept Entertainment-Event
  :is-primitive (:and Human-Activity Service-Event)
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "The collection of activites performed primarily to amuse or entertain #$Persons.
Note: This is more general than #$EntertainmentPerformance because it may not entail a performance per se.  E.g., one of its subsets is #$SightSeeing, but most sightseeing events are not #$EntertainmentPerformances.
Note:  This is different from the collection #$RecreationalActivity in the following way: entertainment events are necessarily done for the enjoyment or recreation of someone else; in other words, there is an audience.  Also, the performers of a #$RecreationalActivity are generally doing it `for fun', and (expect to) enjoy it, whereas some or all of the performers of an #$EntertainmentEvent may be doing it as a #$WorkingEvent --- i.e, `for a living' and may (expect to) not enjoy it. ")))

(defconcept Entertainment-Or-Arts-Professional
  :is-primitive Professional
  :annotations (Occupation-Type
                (documentation "A collection of persons; a subset of #$Professional.  Each element of #$EntertainmentOrArtsProfessional is a person who uses some sort of creative or artistic abilities in the main function of his or her job.  #$EntertainmentOrArtsProfessional includes both performing artists and producers of tangible artworks, either creative or commercial.  This collection does NOT include people working on the business side of those professions, such as producers or art dealers, whose #$jobAttributes are more similar to those of other business professionals (e.g., managers, marketers, sales representatives) than to the artists'; cf. #$EntertainmentOrArtsAdministrator.")))

(defconcept Entertainment-Performance
  :is-primitive (:and Accessing-An-Ibt Social-Gathering Entertainment-Event)
  :annotations (Default-Disjoint-Script-Type
                (documentation "The collection of public and private entertainment performances, like plays, street performances, ballets, movies.  Each #$EntertainmentPerformance  is a presentation or exhibition, to a human audience, with artistic or entertainment value.  
Note:  Movies are included even though the Performers aren't performing in the same point in space-time.  But we draw the line at still photographs; i.e., those are not considered #$EntertainmentPerformances.")))

(defconcept Entity
  :is-primitive Something-Existing
  :annotations (Temporal-Object-Type
                (documentation "?X is an #$Entity if it is a `maximal' #$SomethingExisting.  What we mean by that is that there cannot be another #$SomethingExisting of which ?X is merely a subabstraction (see #$subAbstrac).  So AlbertEinstein is an entity, but AlbertEinsteinWhileAtPrinceton is not.  In other words, an #$Entity represents the entire existence of a thing, not just one or more `temporal chunks' or #$timeSlices of a thing.")))

(defconcept Ethnic-Group-Type
  :is-primitive (:and Human-Culture-Type Conventional-Classification-Type)
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  An #$EthnicGroupType is a set of people whose group-organization, practices or characteristics are based on ethnic origins.  E.g., some #$EthnicGroupTypes are: #$EthnicGroupOfVietnamese, #$EthnicGroupOfIndiansOfTheUS, etc.")))

(defconcept Eukaryotic-Cell
  :is-primitive Cell
  :annotations (Existing-Object-Type
                (documentation "The collection of eukaryotic cells, #$Cells which serve as the basic structural unit of eukaryotic organisms.  These cells have a membrane-bound nucleus and other organelles.  Multicellular Organisms generally have #$EukaryoticCells; #$EukaryoticCell DNA has introns.  Certain #$EukaryoticCells, like the red blood corpuscles of #$Persons with heathy #$Spleens, lack nuclei.")))

(defconcept Evaluatable-Function
  :is-primitive Function-The-Mathematical-Type
  :annotations (Cyc_Collection
                (documentation "A collection of Cyc functions.  Each element of #$EvaluatableFunction is a Cyc function which is associated (via #$lispDefun) with a piece of Heuristic Level (SubL) code that computes the result of applying the function to legal arguments.  See #$PlusFn for a good example.  An evaluatable function is evaluated only if none of its arguments is unbound.")))

(defconcept Evaporating
  :is-primitive Physical-State-Change-Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of events in which a piece of stuff is transformed from a #$LiquidStateOfMatter to a #$GaseousStateOfMatter by evaporation as opposed to boiling.")))

(defconcept Evening
  :is-primitive Qualitative-Time-Of-Day
  :annotations (Temporal-Object-Type
                (documentation "Each #$Evening is started by a #$Dusk and is #$temporallyCoterminal with the #$CalendarDay it's a part of.  Each #$Evening is #$contiguousAfter an #$Afternoon, and each #$Overnight is #$contiguousAfter an #$Evening.")))

(defconcept Event
  :is-primitive (:and Situation Temporal-Thing Intangible-Individual)
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "This is one important subset of 
#$TemporalThing.  The elements of #$Event are events or actions,
things that we say are `happening', changes in the state of the 
world.  #$Event is also a subset of #$Intangible, since an 
event consists of the `actions' per se, and THEY then refer 
to the tangible objects which participate in them.  
In contrast, the collection #$SomethingExisting (another 
important subset of #$TemporalThing) has elements which have 
temporal extent yet are `static', such as a rock at the bottom 
of a pond.  



Note: While `#$SomethingExisting vs. #$Event' might seem at 
first to be an 
obvious partition of things with temporal extent, there are 
interesting borderline cases -- 
such as agreements -- which Cyc treats as instances of 
#$SomethingExisting, but which could also be represented as 
instances of #$Event.  And there are still other cases,
 such as the pure disembodied elements of #$TimeInterval, 
which are elements of #$TemporalThing yet belong neither to 
#$SomethingExisting nor to #$Event.")))

(defconcept Evergreen-Plant
  :is-primitive Plant--Woody
  :annotations (Existing-Object-Type
                (documentation "A collection of plants.  Each element of #$EvergreenPlant is a plant that retains leaves or needles throughout all the seasons of the year.  Cf. #$DeciduousPlant.")))

(defconcept Exchange-Of-User-Rights
  :is-primitive (:and Human-Activity Social-Occurrence Change-In-User-Rights)
  :annotations (Temporal-Object-Type
                Default-Disjoint-Script-Type
                (documentation "A collection of events.  In an instance of #$ExchangeOfUserRights, two #$Agents (the #$exchangers) perform two distinct (though related) #$TransferringPossessions with each other.  Two objects are exchanged.  Each agent gains possession -- in the form of some #$UserRightsAttribute -- of something (an #$objectOfPossessionTransfer) from the other.  Each transfer is related to the other as some kind of condition, a precondition or an intended result; e.g., the news seller will hand over a paper if given fifty cents, and I give the news seller my fifty cents so that he will turn over a newspaper to me.  The two #$TransferringPossession events are #$subEvents of the #$ExchangeOfUserRights event.")))

(defconcept Excitement
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "A feeling of arousal that stirs up, moves profoundly, or serves as a challenge to one's power, eliciting the desire to do or perceive something.  This is a #$Collection --- for an explanation of that, see #$Happiness.  Some more specialized #$FeelingAttributeTypes than #$Excitement include #$Enthusiasm, #$Celebratory-Emotion, #$Triumph-TheFeeling, etc.")))

(defconcept Executive
  :is-primitive (:and Leader Professional)
  :annotations (Occupation-Type
                (documentation "A collection of people.  An instance of #$Executive is a person who holds an executive managerial positions in some #$Organization.  Among the members of #$Executive are top managers of organizations, including corporate officers (#$CompanyPresident, etc.), Chiefs of Staff, Generals, Admirals and others like Chief Corporate Counsel, Managing Partner, Producer, Chief Scientist, Chief Engineer, as well as other upper and upper-middle managers.")))

(defconcept Exercising
  :is-primitive (:and Human-Activity
                      Purposeful-Action
                      Action-On-Object
                      Voluntary-Body-Movement)
  :annotations (Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of events in which humans move their bodies and limbs for the purpose of general physical conditioning and/or strengthening muscles.")))

(defconcept Exhaling
  :is-primitive (:and Emitting-An-Object Translation--Single-Path)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "Expelling air from the lungs")))

(defconcept Existing-Object-Type
  :is-primitive (:and Object-Type Temporal-Stuff-Type)
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of each element of #$ExistingObjectType is temporally stufflike yet is objectlike in other ways, e.g., spatially.  Any one of many #$timeSlices of a copy of `Moby Dick' sitting on your shelf is still a copy of `Moby Dick' sitting on your shelf.  Most tangible objects are temporally stufflike in this fashion.   That book is, of course, not spatially stufflike; spatially, it is objectlike:  if we take a scalpel and slice the book into ten pieces, each piece is not a copy of `Moby Dick'.   So (#$isa #$Book #$ExistingObjectType) is true, because each book is temporally stufflike but spatially objectlike. See the comment for #$StuffType to find out more about the distinctions between, and the need for, these four collections: #$StuffType, #$ObjectType, #$ExistingStuffType, and #$ExistingObjectType.")))

(defconcept Existing-Stuff-Type
  :is-primitive (:and Stuff-Type Temporal-Stuff-Type)
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$ExistingStuffType is a collection of things (including portions of things) which are temporally and spatially stufflike; they may also be stufflike in other ways, e.g., in some physical property.  Division in time or space does not destroy the stufflike quality of the object.  For example, every piece of wood is temporally stufflike: if W-168 is a piece of wood during 1996, then it's also a piece of wood for the one-minute time-slice 9:05am 7/7/96.  It's also spatially stufflike: if we take that piece of wood W-168 and cut it in half, we have two things which are both pieces of wood.  The fact that every piece of wood is both temporally and spatially stufflike is represented in Cyc by the assertion (#$isa #$Wood #$ExistingStuffType).  Other examples of #$ExistingStuffType: #$AppleJuice, #$IceCream, #$Diamond, #$WaxedPaper, #$StriatedMuscle. See the comment for #$StuffType to learn more about the distinctions between, and the need for, these four collections: #$StuffType, #$ObjectType, #$ExistingStuffType, and #$ExistingObjectType.")))

(defconcept Experiencing-Hunger
  :is-primitive Bodily-Function-Event--Involuntary
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "Being hungry")))

(defconcept Explosion
  :is-primitive (:and Energy-Conversion-Process Decomposition-Process)
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each instance of #$Explosion is an event that involve an extremely violent, chaotic release of energy.  It is not exactly controlled, even in the best circumstances, though it may be contained and channelled to do useful work (such as within the cylinders of a car engine, or such as when a hole is blasted for a backyard swimming pool.)")))

(defconcept Extensional-Representation-Predicate
  :is-primitive Predicate
  :annotations (Predicate-Category
                (documentation "A collection of predicates.  Each element of #$ExtensionalRepresentationPredicate is a predicate used to form assertions about the properties of individual objects. These predicates implement the extensional structure of the Cyc ontology; e.g., #$attorneys, #$objectTakenCareOf, #$actorPartsAffected, #$vestedInterest.")))

(defconcept External-Surface--Whole-Thing
  :is-primitive Surface-On-Tangible-Object
  :annotations (Region-Type
                (documentation "The collection of all entire outer physical surfaces of tangible objects.  Excludes mere patches or portions of the whole surface of an object.")))

(defconcept Eye
  :is-primitive (:and Organ Electro-Magnetic-Radiation-Sensor)
  :annotations (Symmetric-Anatomical-Part-Type
                (documentation "The collection of all eyes of #$Animals. Eyes are the organs of #$VisualPerception.")))

(defconcept Face-Of-Animal
  :is-primitive (:and Animal-Body-Part Biological-Living-Object)
  :annotations (Animal-Body-Part-Type
                Unique-Anatomical-Part-Type
                (documentation "The collection of all faces of animals.  A #$FaceOfAnimal generally consists of the region where the eyes of the animal are located.  In most terrestrial animals, this is the front region of the animal's head, and also turns out to be where the nose, mouth, etc., are located.")))

(defconcept Fall-Season
  :is-primitive Season-Of-Year
  :annotations (Temporal-Object-Type
                (documentation "The collection of Fall seasons.  In the #$TemperateClimateCycle, Fall is usually the time of harvesting and beginnings of shutting down of growth.  Also the time of harvest celebrations.  #$FallSeason represents the climatic aspects of Fall; for its purely temporal aspects, see #$CalendarAutumn.")))

(defconcept Family--Social-Entity
  :is-primitive (:and Social-Being Group Partially-Tangible)
  :annotations (Object-Type
                (documentation "A collection of organizations.  Each element of #$Family-SocialEntity is a group of people or of animals related by birth and mating.  The kinship relation is closer than simply being members of the same species.  Such a family may function together as an #$Organization.  See also the specialization #$Family-Human.")))

(defconcept Family-Relation-Slot
  :is-primitive Inter-Existing-Object-Slot
  :annotations (Predicate-Category
                (documentation "A collection of predicates.  Each element of #$FamilyRelationSlot is a binary predicate used to represent relationships among members of human families.  Examples: #$spouse, #$siblings, #$grandmothers, #$grandfathers, #$relatives, #$cohabitingFamilyMembers.")))

(defconcept Famine
  :is-primitive Disaster-Event
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "A collection of events; a subset of #$DisasterEvent.  Each instance of #$Famine is an event taking place in a contiguous geographical area in which a lot of people are undergoing #$Starvation.")))

(defconcept Farmer
  :is-primitive (:and Professional Blue-Collar-Worker)
  :annotations (Occupation-Type
                (documentation "A collection of persons; a subset of #$Professional.  Each element of #$Farmer is a person who makes (or significantly supplements) his or her income by farming.  This includes growing vegetables, grain, or fruit crops, dairy farming, or raising livestock (e.g., cattle, pigs, sheep, fish) for their meat or other animal products (e.g., wool).")))

(defconcept Fear
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "Unpleasant emotion manifested by painful agitation in the presence or awareness of danger.   Fear implies anxiety and loss of courage.  This is a collection; for an explanation of a typical #$FeelingAttributeType, see #$Happiness.   A more specialized #$FeelingAttributeType than #$Fear is #$Dread.")))

(defconcept February
  :is-primitive Calendar-Month
  :annotations (Month-Of-Year-Type))

(defconcept Feeling-Attribute
  :is-primitive (:and Mental-Attribute Scalar-Interval)
  :annotations (Stuff-Type
                Composite-Attribute-Type
                (documentation "The collection of attributes describing emotions and mental feelings.  An element of this set would be a particular `amount' of happiness, of confidence, of fear, etc.  Obviously there are no real `units of measure' for these quantities, but one can certainly say that the `amount' of happiness one felt at one's wedding was `more' than the happiness they felt at their college graduation ceremony, etc.  There are functions, such as #$LowAmountFn, which take a #$PrimitiveAttributeType (such as the instances of #$FeelingAttributeType) and return as their value a certain-sized amount of that attribute-type; e.g., (#$LowAmountFn #$Confidence) is an expression whose value is a low amount of confidence, and that in turn will be an element of #$Confidence, and also an element of #$FeelingAttribute, and also an element of #$AttributeValue, etc.  See especially the various subsets of #$FeelingAttribute.
Note that #$FeelingAttribute is NOT an element of #$FeelingAttributeType.  Since #$FeelingAttributeType is a subset of #$PrimitiveAttributeType, any element of #$FeelingAttributeType (such as #$Happiness) should have a total order among all its elements.  All the elements of #$FeelingAttribute can't be placed in a total order (for example, how can we compare 'low happiness' with 'low contempt'?), so it should not be an element of #$FeelingAttributeType.")))

(defconcept Feeling-Attribute-Type
  :is-primitive (:and Attribute-Type Primitive-Attribute-Type)
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each #$FeelingAttributeType is a type of attribute that describes some sort of emotion and/or mental feeling.  Some elements of #$FeelingAttributeType are:  #$Envy, #$Curiosity, #$PrideOfAccomplishment, etc.  See also #$FeelingAttribute.")))

(defconcept Female-Animal
  :is-primitive Animal
  :annotations (Organism-Classification-Type
                (documentation "The collection of all female animals.")))

(defconcept Female-Person
  :is-primitive (:and Person Female-Animal)
  :annotations (Existing-Object-Type
                (documentation "The collection of all female persons.")))

(defconcept Fictional-Context
  :is-primitive Counterfactual-Context
  :annotations (Microtheory-Type
                (documentation "The collection of #$CounterfactualContexts which are (1) created intentionally, not by error or chance or gradual evolution and accretion in a culture, and (2) typically are the information content of some #$InformationBearingThing, and (3) are not expected (by their creator) to be believed as factual, nor do their creators believe them to be factual.  In addition to asserting fictional propositions about existing things, a #$FictionalContext may include terms for nonexistent things.  Examples: #$LordOfTheRings, #$AdventuresOfHuckleberryFinn.")))

(defconcept Field-Of-Study
  :is-primitive Propositional-Information-Thing
  :annotations (Object-Type
                (documentation "A collection of microtheories.  Each element of #$FieldOfStudy is a microtheory containing the knowledge, theory, hypotheses, evidence, and problems covered in a particular field of study (in propositional form).  Examples:  #$Linguistics, #$Ethology, #$ArtificialIntelligence, #$BusinessAdministration, #$Nursing-FieldOfStudy, etc.  Fields of study are typically the subject of teaching and/or research within instances of #$AcademicDepartment, although the correlation between #$AcademicDepartment and #$FieldOfStudy is not one-to-one.  Note also that elements of #$FieldOfStudy are intangible objects (i.e., contexts with propositional content), while academic departments are partially tangible organizations.  For the activity of specialized study in a field, see #$CourseOfStudy.")))

(defconcept Financial-Account
  :is-primitive Account
  :annotations (Account-Type
                (documentation "A collection of intangible objects.  Each element of #$FinancialAccount is an instance of #$Account (q.v.) which is denominated in units of #$Money.  Examples: savings accounts, credit card accounts, vendor accounts.")))

(defconcept Financial-Account-Tender-Object
  :is-primitive Tender-Object
  :annotations (Existing-Object-Type
                (documentation "A collection of objects.  Each element of #$FinancialAccountTenderObject is an object, e.g., a check or a credit card, that serves as a vehicle for offering payment in funds drawn on an associated instance of #$FinancialAccount.  The liquidity of an element of #$FinancialAccountTenderObject depends on the #$accountBalance or #$accountStatus of the financial account which that object legally represents.  This collection excludes the elements of #$Currency and #$TravellersCheck.")))

(defconcept Financial-Asset-Holdings
  :is-primitive Holdings
  :annotations (Existing-Object-Type
                (documentation "A collection of partially tangibles.  An element of #$FinancialAssetHoldings is a group of financial assets (e.g., stocks, bonds, ... ) owned by individual or corporate #$Agent(s).  As a default, we assume that the monetary value of each group equals the sum of the monetary values of the individual assets in that group.")))

(defconcept Financial-Organization
  :is-primitive (:and Commercial-Service-Organization Commercial-Organization)
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations; a subset of #$CommercialServiceOrganization.  An element of #$FinancialOrganization is an organization that buys, sells, trades, converts, or lends money, in the form of currency or negotiable financial instruments (such as stocks, bonds, commodities futures, etc.), as (one of) its major function(s).  The collection #$FinancialOrganization does not include businesses, such as retailers, which simply exchange goods or non-financial services for money.")))

(defconcept Finger
  :is-primitive Appendage--Animal-Body-Part
  :annotations (Animal-Body-Part-Type
                (documentation "The collection of all digits of all #$Hands (q.v.).  Fingers are (typically) flexibly jointed and are necessary to enabling the hand (and its owner) to perform grasping and manipulation actions.")))

(defconcept Fiscal-Quarter
  :is-primitive Time-Interval
  :annotations (Temporal-Object-Type
                (documentation "Each instance of this collection is a 3-month-long interval of time kept track of by an #$Agent as part of its financial accounting procedures.  Since the start dates and end dates may vary depending on the organization, instances will be things like Fiscal3rdQuarterOf1995ForCycorp.")))

(defconcept Fiscal-Year
  :is-primitive Time-Interval
  :annotations (Temporal-Object-Type
                (documentation "Each instance of this collection is an annual, year-long interval of time kept track of by an #$Agent as part of its operational and financial accounting procedures.  Since the start dates and end dates may vary depending on the organization, instances of this collection are time intervals like FiscalYearOf1989ForMicrosoft")))

(defconcept Fish
  :is-primitive (:and Aquatic-Organism Non-Person-Animal Animal Vertebrate)
  :annotations (Biological-Class
                (documentation "A collection of cold-blooded animals; a subset of #$Vertebrate.  Each element of #$Fish has gills, cranium, and fins, and spends all or almost all of its life under water.  The collection #$Fish excludes so-called star-fish and cuttle-fish, etc., as well as fish-shaped examples of #$Mammal such as porpoises and whales.  #$Fish is an instance of #$BiologicalClass.")))

(defconcept Fixed-Structure
  :is-primitive Construction-Artifact
  :annotations (Existing-Object-Type
                (documentation "A collection of artifacts.  Each element of #$FixedStructure is a humanly-constructed, freestanding object that exists in a fixed location; e.g., buildings, pyramids, the Great Wall of China, dams, elevated roadways, canals, etc.  Such structures may have parts which are also elements of #$FixedStructure (e.g., bridge pilings) and parts which are not freestanding (e.g., the span of a bridge, or a room in a building).")))

(defconcept Flammability
  :is-primitive (:and Scalar-Interval Physical-Attribute)
  :annotations (Primitive-Attribute-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute.  Each element of #$Flammability represents a specific readiness with which some tangible substance burns.  Different degrees of #$Flammability are represented either using #$GenericValueFunctions or qualitatively (e.g., #$NotFlammable, #$BurnsEasily, #$ExplosivelyFlammable).  Flammability of an object is indicated with the predicate #$flammabilityOfObject.")))

(defconcept Flat-Physical-Surface
  :is-primitive Surface--Physical
  :annotations (Region-Type
                (documentation "The collection of all surfaces that are substantially flat (by the tolerance standards of the the context).  This means that there are no 'significant' concave depressions or convex bulges or bumps, and that the surface approximates some portion of a Euclidian plane in space.  Note that the surface may have holes or cracks and may be disconnected, in multiple (substantially coplanar) pieces.  A typical table top is a FlatPhysicalSurface.")))

(defconcept Floor-In-A-Construction
  :is-primitive Construction-Artifact
  :annotations (Existing-Object-Type
                (documentation "A physical floor in a building, NOT the level (storey).  The latter is called #$LevelOfAConstruction.  The floor can include any floor in a building such as the floor of a room on the third floor as well as the floor covering the entire 1st level of the building.  This includes just the horizontal surface -- not the subfloor.  It also doesn't include floor coverings like carpet or tile.")))

(defconcept Flowering-Plant
  :is-primitive Plant
  :annotations (Organism-Classification-Type
                (documentation "The collection of plants whose seeds are enclosed in ovaries; the flowering plants in the botanical sense.  For flowering plants actually in bloom, see #$FloweryPlant.")))

(defconcept Flowery-Plant
  :is-primitive Flowering-Plant
  :annotations (Existing-Object-Type
                (documentation "A collection of plants.  Each element of #$FloweryPlant is a flowering plant that is actually and visibly in flower (i.e., has flowers showing).  The collection #$FloweryPlant includes flowering bushes and trees with visible flowers.  This collection represents a commonsense category, not the official #$BiologicalTaxon #$FloweringPlant.")))

(defconcept Flow-Path
  :is-primitive (:and Path--Simple Spatial-Thing)
  :annotations (Object-Type
                (documentation "A collection of pathways; a subset of #$Path-Generic.  Each element of #$FlowPath is a path whose extent is delineated by the movement of a fluid over an area; for example, the path of a lava flow or the #$AlaskanPipeline.  Elements of #$FlowPath may (but need not) be constrained by objects or forces that channel the flow of fluid; see also the subset #$FluidConduit.")))

(defconcept Fluid-Reservoir
  :is-primitive Container-Product
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A collection of open-ended containers; a subset of #$ContainerProduct.  An instance of #$FluidReservoir is a container which was designed to hold liquids.  These include elements of the collections #$Spoon, #$ToiletBowl, #$GlassBottle, etc.  Note a special negative case: natural `reservoirs', such as #$Lakes, are not #$ContainerProducts -- though the #$Dams that create them are artifacts, the reservoir water is contained in the natural landscape -- and hence such reservoirs are not subsets of #$FluidReservoir.")))

(defconcept Fluid-Tangible-Thing
  :is-primitive Tangible-Thing
  :annotations (Existing-Stuff-Type
                (documentation "A collection of tangibles.  Each element of #$FluidTangibleThing is a tangible thing that flows, including gases, liquids, and semisolid tangible things which are #$Pourable (e.g., sand).  Examples: the #$AirInAustin, #$LakeErie, the snow drifted in my driveway, the sand on the beach at Hippie Hollow, mercury in the thermometer on the balcony.  Note that the granules of a semisolid #$FluidTangibleThing are not necessarily themselves #$FluidTangibleThings.  Cf. #$LiquidTangibleThing.")))

(defconcept Fog
  :is-primitive (:and Gaseous-Tangible-Thing Cloud-Of-H2o)
  :annotations (Existing-Stuff-Type
                (documentation "The collection of clouds (instances of #$CloudOfH2O) that cover a #$GeographicalRegion at ground-level.")))

(defconcept Food
  :is-primitive (:and Organic-Stuff
                      Edible-Stuff
                      Food-And-Drink
                      Tangible-Product)
  :annotations (Existing-Stuff-Type
                Product-Type
                (documentation "A collection of edible stuff; a subset of #$FoodAndDrink.  Each element of the collection #$Food is a particular portion of food of a type which can, and habitually is, eaten (not drunk or inhaled) by humans or animals.  Here the notion of ``eating'' is important --- not drinking or inhaling or osmosing; an element of #$Food will generally require biting, chewing, etc.  A borderline example is a bowl of Jello; a borderline non-example is a very thick milkshake.  Even closer to the border is a bowl of vegetable soup so thick and chunky that each spoonful require chewing.  The edibles in #$Food provide calories and/or other nutrients that humans or animals need (e.g., protein, vitamins); this is often true with a #$Drink as well, but probably less than half the time (since most drinking is of water).")))

(defconcept Food--Ready-To-Eat
  :is-primitive (:and Food Organic-Stuff Food-And-Drink)
  :annotations (Existing-Stuff-Type
                Product-Type
                (documentation "A collection of food.  Each instance of #$Food-ReadyToEat is an item of food of a type, and in a state, that people or animals can and normally do eat without any further preparation.  This includes foods which have already been prepared and foods which don't need any preparation before eating.  Hot baked instances of #$Pizza and ripe instances of #$Apple-TheFruit all belong in this collection.  To account for differences across cultures or species, use a specialized #$Microtheory (see #$comments on #$FoodAndDrink, #$EdibleStuff).")))

(defconcept Food-And-Drink
  :is-primitive Edible-Stuff
  :annotations (Existing-Stuff-Type
                Product-Type
                (documentation "A collection of edible stuff.  Each element of the collection #$FoodAndDrink is a food or beverage of a type which people or animals (or whatever the current microtheory is restricting its attention to --- e.g., some species of oil-eating bacteria) can and normally do consume.   Elements of #$FoodAndDrink may or may not require further preparation before the eaters find them palatable, medically safe, digestable, etc.  See #$Food-ReadyToEat for the subset of these items that are ready for immediate consumption.  In various microtheories, the elements of #$FoodAndDrink will be restricted or expanded; e.g., in the #$HumanActivitiesMt this collection is limited to only foods or beverages that modern-day human beings consume.  Some examples of #$FoodAndDrink includes a scoop of ice cream (an instance of #$IceCream), a pepperoni pizza (an instance of #$Pizza), an apple (an instance of #$EdibleFruit), a lump of bread-dough (an instance of #$Dough which, after preparation, will become an instance of edible #$Bread), a double espresso (an instance of #$Coffee-Beverage), a mouthful of hay that a horse is about to swallow (an instance of #$Hay), etc.  The latter (the hay) is not an instance of #$FoodAndDrink in the #$HumanActivitiesMt.  Note that #$FoodAndDrink does NOT include such things as spices, condiments, sauces, drugs, etc., which --- though they are nevertheless #$EdibleStuff --- do not constitute a food by themselves; those belong to other subsets of #$EdibleStuff but not to #$FoodAndDrink.  E.g., a particular pinch of oregano would be an instance of #$FoodIngredientOnly (q.v.).  Also see: #$DefaultDisjointFoodTypes.")))

(defconcept Food-Group-Type
  :is-primitive (:and Existing-Stuff-Type
                      Product-Type
                      Conventional-Classification-Type)
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$FoodGroupType is a collection of foodstuffs classified according to their nutritional contents.  When restricted to human foods, the elements of #$FoodGroupType are familiar as the teaching tools used in public health education in order to promote nutritionally balanced diets.  Examples include: #$DairyProduct, #$CerealFoodGroup, #$FruitAndVegetableFoodGroup, #$MeatAndLegumeFoodGroup.")))

(defconcept Food-Ingredient-Only
  :is-primitive Edible-Stuff
  :annotations (Existing-Stuff-Type
                Product-Type
                (documentation "A collection of tangible stuff; a subset of #$EdibleStuff.  Each element of #$FoodIngredientOnly is an edible substance that is used in making other food but isn't eaten by itself.  These may or may not require some preparation.  For example, #$TableSalt, #$VegetableOil, and #$Ketchup are subsets of #$FoodIngredientOnly, because all of their instances are used only as ingredients or condiments.   In contrast, #$Egg-Chickens is not a subset of #$FoodIngredientOnly; some of its instances serve as ingredients in cooking other dishes, (and those instances are elements of #$FoodIngredientOnly,) but other eggs are simply eaten after poaching or frying (and those instances belong to the collection #$Food, not #$FoodIngredientOnly).  Types of foodlike #$Pizza, whose instances are never merely ingredients, are just subsets of #$Food.")))

(defconcept Food-Or-Drink-Composite
  :is-primitive (:and Edible-Stuff Artifact)
  :annotations (Existing-Stuff-Type
                Product-Type
                (documentation "A collection of edible stuff.  Each element of #$FoodOrDrinkComposite is an edible substance that is made up of two or more foodstuffs as constituents.  Typically, some recipe is, explicitly or implicitly, associated with the production of such substances.  #$FoodOrDrinkComposite includes both some instances of #$FoodIngredientOnly (e.g., a dollop of ketchup) and some instances of #$FoodAndDrink (e.g., a slice of a cheese pizza).")))

(defconcept Food-Or-Drink-Preparation-Device
  :is-primitive (:and Physical-Device Hoc-Object)
  :annotations (Existing-Object-Type
                (documentation "A collection of objects; a subset of #$PhysicalDevice.  An instance of #$FoodOrDrinkPreparationDevice is a device whose #$primaryFunction is to prepare food or drink somehow, such as a colander, a spice mill or a pot.")))

(defconcept Food-Professional
  :is-primitive Professional
  :annotations (Occupation-Type
                (documentation "A collection of persons; a subset of #$Professional.  Each element of #$FoodProfessional is a worker in the food and drink industry.  This collection includes bakers, brewers, butchers, and bartenders--everyone from Julia Child to Joe the bartender.")))

(defconcept Food-Service-Organization
  :is-primitive (:and Business Commercial-Service-Organization)
  :annotations (Existing-Object-Type
                (documentation "A collection of business organizations; a subset of both #$CommercialServiceOrganization and #$Business.  An element of #$FoodServiceOrganization is a business which prepares and/or serves food as its major function(s).  Important subsets of #$FoodServiceOrganization include #$Restaurant and #$CateringCompany.  Note that grocery stores -- and airlines -- are not themselves considered elements of #$FoodServiceOrganization, even though some of those may have #$subOrganizations or sub-contractors which are#$FoodServiceOrganizations.  Bars or taverns, in contrast to #$Restaurants that also prepare and serve food, are also not considered #$FoodServiceOrganizations.")))

(defconcept Food-Utensil
  :is-primitive Hoc-Object
  :annotations (Existing-Object-Type
                (documentation "A collection of objects.  Each element of #$FoodUtensil is an implement or a container used in preparing or consuming food.  Among its subsets are: #$Spoon, #$CarvingKnife, #$CookingUtensil, #$FoodVessel, #$CuttingBoard, and #$ChopStick.")))

(defconcept Food-Vessel
  :is-primitive (:and Food-Utensil Container-Product)
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A collection of container products; a subset of #$FoodUtensil.  An instance of #$FoodVessel is a container designed for holding, storing, or preparing food.   For example, a dinner plate, a cake pan, a wok, a plastic food storage container, etc.  Subsets include the collections #$CookingVessel, #$EatingVessel, #$FoodStorageContainer, and numerous others.")))

(defconcept Foot--Animal-Body-Part
  :is-primitive (:and Biological-Living-Object Appendage--Animal-Body-Part)
  :annotations (Symmetric-Anatomical-Part-Type
                (documentation "The collection of all vertebrates' feet.  A foot is a terminal part of a #$Vertebrate #$Leg.  Feet are used in locomotion, support, balance, kicking, etc.")))

(defconcept Form--Standardized-Ibo
  :is-primitive Structured-Information-Source
  :annotations (Temporal-Stuff-Type
                (documentation "A collection of information bearing objects (IBOs); a subset of #$StructuredInformationSource.  Each element of #$Form-StandardizedIBO is an IBO having some standard set of labelled `fields' left blank for the user to fill in with individualized information.  Forms usually accompany some sort of bureaucratic procedure, which they may be used to initiate or to certify.  Examples include the elements of #$JobApplicationForm, #$DepositSlip, #$InsuranceClaimForm, #$OrderForm, #$TaxReturn, #$BirthCertificate, #$DiplomaDocument, #$ATMTransactionReceipt, #$MarriageLicenseDocument, #$DeathCertificate, etc.")))

(defconcept Formal-Coc
  :is-primitive Code-Of-Conduct
  :annotations (Microtheory-Type
                Existing-Object-Type
                (documentation "A collection of microtheories; a subset of #$CodeOfConduct.  Each element of #$FormalCOC is a  code of conduct which is imposed by an organization.   Formal codes of conduct typically are explicitly stated and publicly promulgated among the group subject to them; also, they are associated with prescribed methods of enforcement and punishment of violators.  Thus, the collection #$FormalCOC includes the laws of any legal jurisdiction, the rules of deportment imposed by educational institutions, the practices of some strict religious sects, etc.   In contrast, informal codes of conduct are norms that are not prescribed or enforced by formal means; for example, etiquette (#$MannersCodeOfConduct) and ethics (#$EthicsCodeOfConduct).")))

(defconcept Formal-Product
  :is-primitive Product
  :annotations (Product-Type
                (documentation "A collection of products.  Each element of #$FormalProduct is a complete packaged product, including everything the customer gets when the product is purchased, e.g., the #$mainProduct, packaging, enclosures, warranties, etc.  The typical packaged product as the retailer stocks it on the shelf and sells it at the register.")))

(defconcept Formal-Product-Type
  :is-primitive Product-Type
  :annotations (Object-Type
                (documentation "A collection of collections.  Each element of #$FormalProductType is a collection of products (i.e., tangible products, services, information products, etc.), all of which conform to a standardized product specification (i.e., a `form').  In Western-style capitalistic markets, elements of #$FormalProductType are often associated with a particular brand name (and perhaps model), since competing providers of products design them to be distinctive.  For example, the collection #$InternalCombustionEngine is not an element of #$FormalProductType, but a specific collection of engines manufactured by (e.g.) Mazda would be.  On the service side, the collection #$HairCuttingEvent is not a #$FormalProductType, but a subset of hair stylings for men (e.g., at a particular designer's salon) might be.")))

(defconcept Format
  :is-primitive (:and Individual Intangible-Individual)
  :annotations (Cyc_Collection
                (documentation "Elements of the collection #$Format are attributes that are used to constrain the multi-valued nature of a #$Predicate.  Consider a predicate PRED which takes five arguments, and fix any four of those arguments -- say arguments 1, 2, 4, and 5.  The number of different legal values there can be for the third argument (given that we've already chosen the other four) is determined by which #$Format attribute has been specified for the 3rd argument place of PRED..





(1) If the #$arg3Format for PRED is #$SingleEntry, then there can be at most one single term that's legal (and thus at most one assertion), for those given values of arguments 1, 2, 4, and 5.  To illustrate, let's consider a predicate with a lower #$arity, say (#$mother CHILD MOM), which says that the mother of CHILD is MOM.  The #$arg2Format for #$mother should be #$SingleEntry, since an animal can have only one biological mother.





(2) If the #$arg3Format of PRED is #$SetTheFormat, then there may be any number of assertions with different terms in the third argument position, but sharing the same values for arguments 1, 2, 4, and 5.  E.g., the #$arg1Format for #$mother should be #$SetTheFormat, since a female can have multiple children.





(3) If the #$arg3Format of PRED is #$IntervalEntry, then there may be multiple assertions sharing the values of 1, 2, 4, and 5, but with different terms in the 3rd argument; however, all the values for the 3rd argument must be overlapping elements of #$ScalarInterval (q.v.).  E.g., the height of a person might be specified in several ways, with slightly different margins of error (or approximation), which is fine, but all those alternate values had better have SOME overlap since the person really just has one particular true height at any given time.")))

(defconcept Fps-Unit-Of-Measure
  :is-primitive Unit-Of-Measure
  :annotations (Relation-Type
                (documentation "A subset of #$UnitOfMeasure.  #$FPSUnitOfMeasure is the collection of all the measurement functions whose results use the FPS (i.e., foot-pound-second) system of measure to describe physical quantities.  Examples: #$Gallon-US, #$SquareMile, #$CubicFtPerSec.")))

(defconcept Fragility
  :is-primitive (:and Scalar-Interval Physical-Attribute)
  :annotations (Primitive-Attribute-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute.  Each element of #$Fragility represents a specific property which determines how easily a physical object breaks.  Different fragilities may be designated using a #$GenericValueFunction.  Fragilities of objects are indicated with the predicate #$fragilityOfObject.")))

(defconcept Frame-Of-Reference
  :is-primitive Geometric-Thing
  :annotations (Object-Type
                (documentation "A collection of geometric things.  Each element of #$FrameOfReference is a representation of the context in which certain data are to be interpreted.  Such contexts are typically physical (i.e., spatiotemporal), but contexts may also be purely mathematical.  A Cartesian coordinate system represents a frame of reference.")))

(defconcept Free-Sheet
  :is-primitive Sheet-Of-Some-Stuff
  :annotations (Existing-Object-Type
                (documentation "A collection of certain pieces of tangible stuff.  A #$FreeSheet is a #$SheetOfSomeStuff which has two sides open to the environment.  I.e. over most of each of its surfaces, it is not #$sheetSurfaceConnected with something else.")))

(defconcept Freezing
  :is-primitive (:and Translocation Physical-State-Change-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  In each instance of this collection, an object is cooled to (and then below) its #$freezingPoint and is thereby changed from a #$LiquidStateOfMatter to a #$SolidStateOfMatter.")))

(defconcept Frequency
  :is-primitive (:and Physical-Attribute Rate)
  :annotations (Derived-Numeric-Attribute-Type
                (documentation "A collection of physical attributes; a subset of #$Rate.  Each element of #$Frequency is a measurement of the number of times something happens during some time interval.  Elements of #$Frequency may be either fixed values, such as 103 kiloHertz, or a range, such as #$Yearly, #$Hourly, or #$Rarely.  See #$UnitOfFrequency for the units used by Cyc to measure instances of #$Frequency, e.g. (#$TimesPerSecond 35), (#$KiloHertz 103).  Instances of #$Frequency are important in the characterization of types of #$WavePropagation.")))

(defconcept Friendliness
  :is-primitive (:and Feeling-Attribute Affection)
  :annotations (Feeling-Attribute-Type
                (documentation "Emotion manifested by interest in another person (or, more rarely, in some nonhuman agent), good will towards that individual, and an inclination to favor him or her (or it).  This is a #$Collection --- for an explanation of that, see #$Happiness.  Some more specialized #$FeelingAttributeTypes than #$Friendliness are #$Love and #$Love-Romantic.")))

(defconcept Front-Side
  :is-primitive Side
  :annotations (Region-Type
                (documentation "The collection of all the entire front sides (as conventionally understood) of all objects that have distinct #$Sides, one of which faces in the frontwards direction.")))

(defconcept Fruit
  :is-primitive Plant-Part
  :annotations (Existing-Object-Type
                (documentation "A subset of #$PlantPart.  Each element of #$Fruit is a plant structure that contains the seeds of angiosperms.  Many fruits have fleshy walls having high concentrations of sugars or fats, and these are often eaten by humans and other animals.  Fruits usually develop from the ovary wall, although some fruits include other tissues; e.g., the flesh of apples and of strawberries develops from the receptacle, and the fruits of pineapple and fig develop from a whole inflorescence (group of flowers).")))

(defconcept Frustration
  :is-primitive Dissatisfaction
  :annotations (Feeling-Attribute-Type
                (documentation "A feeling of irritation and dissatisfaction arising from unresolved problems or unfulfilled needs.  This is a collection; for an explanation of a typical #$FeelingAttributeType, see #$Happiness.")))

(defconcept Frying
  :is-primitive Cooking-Food
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "Cooking food by partial or total immersion in hot oil until desired level of doneness")))

(defconcept Functional-Predicate
  :is-primitive Function-Or-Functional-Predicate
  :annotations (Relation-Type
                (documentation "#$FunctionalPredicate is the collection of Cyc predicates which are functional in at least one argument place.  Given a set of legal arguments for such a predicate's other argument positions, there will be a single value for the functional argument -- not two legal values, and not zero legal values.  For example, (#$mother CHILD MOM) is functional in its second argument, since every animal has one and only one biological mother.")))

(defconcept Functional-Slot
  :is-primitive (:and Functional-Predicate Prothetic-Slot)
  :annotations (Predicate-Category
                (documentation "A collection of predicates; a subset of #$FunctionalPredicate.  Each element of #$FunctionalSlot is a binary predicate which is also a function, and in which the second of its two arguments is the functional one.  A functional predicate F is an element of #$FunctionalSlot if and only if, in assertions of the form (F X Y), for any legal value of X, there is always exactly one value of Y.  #$FunctionalSlot is half of the set intersection of #$BinaryPredicate and #$FunctionalPredicate, namely for the cases where the second of the two arguments is the functional one.  Examples: #$latitude, #$countryOfAddress, #$stateOfDevice, #$femaleParentActor.")))

(defconcept Function-From-Quantities-To-Quantities
  :is-primitive (:and Evaluatable-Function Non-Predicate-Function)
  :annotations (Relation-Type
                (documentation "A collection of mathematical functions.  Each element of #$FunctionFromQuantitiesToQuantities is a function that takes one or more numbers as its arguments, and it returns a number as its value.  Examples: subtraction (#$DifferenceFn), square root (#$SqrtFn), absolute value (#$AbsoluteValueFn), and logarithm (#$LogFn).")))

(defconcept Function-Or-Functional-Predicate
  :is-primitive Relationship
  :annotations (Relation-Type
                (documentation "A collection of mathematical objects.  Each element of #$FunctionOrFunctionalPredicate is either a function or else a predicate which is functional in at least one argument place (see also #$FunctionalPredicate).  Examples: #$SkolemFunction, #$IntervalMaxFn, #$ElectricalPotentialDifference, #$revenueFrom, #$costRateForType, #$permeabilityOfSubstThroSubst.")))

(defconcept Function-The-Mathematical-Type
  :is-primitive (:and Relationship Function-Or-Functional-Predicate)
  :annotations (Cyc_Collection
                Relation-Type
                (documentation "A collection of mathematical objects.  Each element of #$FunctionTheMathematicalType takes some arguments and returns a unique value.  Examples: #$TimeElapsedFn, #$IntervalMaxFn, #$SkolemFunction, #$PlusFn.  Note that #$Predicate is a subset of #$FunctionTheMathematicalType, because predicates can be thought of as functions that return only (either) true or false.")))

(defconcept Fundamental-Numeric-Attribute-Type
  :is-primitive Measurable-Attribute-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$FundamentalNumericAttributeType is a collection of measurable attributes, including #$Distance, #$Time, #$Currency, #$Mass, etc.  The types of attributes in this collection are `fundamental' when contrasted with other attributes which are derived from them (such as #$Volume, #$Speed, etc.).  Cf. #$DerivedNumericAttributeType.")))

(defconcept Fungus
  :is-primitive Organism--Whole
  :annotations (Biological-Kingdom
                (documentation "The collection of fungi, the stationary, saprophytic, and symbiotic or parasitic eukaryotic organisms constituting an instance of #$BiologicalKingdom in many systems of classification.  #$Fungus includes as subsets the collections #$Mushroom, #$Yeast, and #$RingwormFungus.  Unlike most other instances of #$Plant, mushrooms are incapable of performing processes of #$Photosynthesis.")))

(defconcept Furniture-Piece
  :is-primitive (:and Solid-Tangible-Product Physical-Device Hoc-Object)
  :annotations (Existing-Object-Type
                (documentation "A collection of durable artifacts which are used in #$HumanShelterConstructions to make human dwelling places more comfortable.  An instance of #$FurniturePiece is a whole piece of furniture, such as a table, chair, or chest of drawers; an arm of a sofa is not a #$FurniturePiece.  Its subsets can be classified according to the main functions their elements serve:  (1) providing support for people's bodies while they are seated or reclining (e.g., #$Bed-PieceOfFurniture, #$Sofa-PieceOfFurniture, #$FootStool, #$FixedTheatreSeat); (2) providing work/action surfaces (e.g., #$Desk-PieceOfFurniture, #$DiningRoomTable); (3) providing organized and/or protective storage for people's stuff (e.g., #$Dresser-PieceOfFurniture, #$Bookcase-PieceOfFurniture); (4) providing extra illumination or some other function in living and work areas (e.g., #$ElectricLamp).  Most pieces of furniture belong to the collection #$NonPoweredDevice (q.v.) in that they don't need any energy input in order to do their function.  
Note: Yes, of course lamps, fancy console TVs, hospital beds, etc. are exceptions to that last rule -- they require power. But in a sense they are really objects performing multiple independent functions.  A fancy console TV is a piece of furniture even when it's turned off; it just so happens to fulfill two roles, one as a piece of furniture and one as an appliance.  When it's turned on, in fact, its users are intended to stop noticing it as a piece of furniture.)")))

(defconcept Fusion-Event
  :is-primitive Creation-Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  In each #$FusionEvent, two or more objects fuse together, yielding a product.")))

(defconcept Gaining-User-Rights
  :is-primitive (:and Change-In-User-Rights Transfer-In)
  :annotations (Temporal-Object-Type
                (documentation "A collection of events.  In an instance of #$GainingUserRights, some #$Agent gains possession of something.  Thus, in such an event, that agent newly acquires a right (viz., some #$UserRightsAttribute) to use some item.  The item in question is identified as the #$objectOfPossessionTransfer, and the agent is the #$toPossessor (i.e., the one to whom the possession comes).  The #$Agent may or may not be a #$deliberateActors in the event; e.g., buying a car is done on purpose, but receiving a car as a gift isn't.  If either of those two events happen to you, though, it is an element of the collection #$GainingUserRights.")))

(defconcept Gamma-Ray
  :is-primitive Electromagnetic-Radiation
  :annotations (Wave-Propagation-Type
                (documentation "A collection of events; a subset of #$ElectromagneticRadiation.  Each element of #$GammaRay is an instance of electromagnetic radiation that has a #$wavelength less than  1x10^-2 #$Angstroms.  Low power #$GammaRays overlap with high power #$XRays.")))

(defconcept Gaseous-Tangible-Thing
  :is-primitive Fluid-Tangible-Thing
  :annotations (Tangible-Stuff-State-Type
                (documentation "A collection of tangible substances.  Each element of #$GaseousTangibleThing is a tangible thing which is in a #$GaseousStateOfMatter; i.e., its shapes would completely conform to the boundaries of a vessel containing it, and it is compressible.  Examples: #$TheAtmosphereQuaSinglePieceOfStuff, the helium filling a child's balloon, a cloud of poisonous gas released from an Iraqi weapons dump during the Gulf War.  Cf. #$FluidTangibleThing, #$LiquidTangibleThing.")))

(defconcept Gender-Of-Living-Thing
  :is-primitive Attribute-Value
  :annotations (Sibling-Disjoint-Attribute-Type
                Unordered-Attribute-Type
                (documentation "The collection of genders that organisms can have.")))

(defconcept Generalized-Transfer
  :is-primitive Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "This collection is a subset of #$Event.  Each element of #$GeneralizedTransfer is a general kind of transfer event, in which something (tangible or intangible) is transferred from one `place' to another.  #$GeneralizedTransfer includes changes in physical location, in ownership or possession, transfer of information, and propagation of wave phenomena through space.  See also the related predicate #$transferredThing, and the specialized subsets of this collection.")))

(defconcept General-Microtheory
  :is-primitive Microtheory
  :annotations (Microtheory-Type
                Object-Type
                (documentation "The collection consisting of every #$Microtheory intended to contain general axioms useful for multiple purposes.  This excludes microtheories which deal with specific situations, such as instances of #$ProblemSolvingCntxt, microtheories that represent the information content of one specific #$InformationBearingObject such as the US Declaration of Independence.  Examples of this collection are #$HumanSocialLifeMt, #$BuyingMt, and #$NaiveAnimalsMt.")))

(defconcept Generic-Attribute
  :is-primitive Scalar-Interval
  :annotations (Primitive-Attribute-Type
                (documentation "#$GenericAttribute is a collection of basic attributes, such as #$Low, #$Medium, #$High, etc., which are applicable to a wide range of topics.")))

(defconcept Generic-Value-Function
  :is-primitive (:and Individual-Denoting-Function Reifiable-Function)
  :annotations (Relation-Type
                (documentation "A collection of Cyc functions; a subset of #$IndividualDenotingFunction.  Each element of #$GenericValueFunction is a function that can be applied to an element of #$PrimitiveAttributeType and returns some `generic' amount (e.g., high, medium, low) of that attribute.  Such functions are particularly useful for qualitative, hard-to-quantify attribute types, e.g., #$Happiness, #$Fragility, #$Absorbency, #$Glamor, etc.  They save us from having to create individually the various levels of attributes like #$Happiness, #$Fragility, etc.  Instead, for example, we need only refer to (#$HighAmountFn #$Happiness) as an alternative to painstakingly reifying `HighHappiness' and hand-entering all the formulas that such a constant requires (e.g. #$isa, #$followingValue, etc.). The compositionality afforded by the elements of #$GenericValueFunction allows this overhead to be taken care of automatically.")))

(defconcept Genetic-Condition
  :is-primitive (:and Physiological-Condition
                      Congenital-Condition
                      Chronic-Condition)
  :annotations (Physiological-Condition-Type
                (documentation "A collection of physiological conditions.  An instance of #$GeneticCondition is an abnormal condition which developed in a particular organism due to that organism's genetic configuration.  Such conditions are not contagious as infections are, but they may be hereditary.  They are often harmful, in fact they are often #$AilmentConditions, such as encephalitis.  Occasionally, though the mutation is beneficial, in which case it would be wrong to also label it an #$AilmentCondition.")))

(defconcept Geographical-Direction
  :is-primitive (:and Direction-Expression
                      Unit-Vector-Interval
                      Terrestrial-Direction)
  :annotations (Object-Type))

(defconcept Geographical-Region
  :is-primitive (:and Place Surface--Physical)
  :annotations (Existing-Object-Type
                (documentation "A collection of spatial regions that include some piece of the surface of #$PlanetEarth.  Each element of #$GeographicalRegion is a #$PartiallyTangible entity that may be represented on a map of the Earth.  This includes both purely topographical regions like mountains and underwater spaces, and those defined by demographics, e.g., countries and cities.  In all cases, though, note that the 'region' in question must contain some tangible component with which it is possible to make physical contact.  The elements of #$GeographicalRegion contrast in this respect with the elements of #$GeographicalThing-Intangible, which are wholly 'imaginary'.  Examples of #$GeographicalRegions: #$CityOfPittsburghPA, #$RockyMountainStates-USRegion, the #$Bahamas, #$YaleUniversity, #$SinaiPeninsula.  Some important types of regions are represented by the subsets #$GeopoliticalEntity, #$LanguageArea, #$TimeZone, #$PostalCodeRegion, #$EcologicalRegion, #$ConstructionSite.  No elements of #$GeographicalRegion are wholly indoor locations.")))

(defconcept Geometric-Thing
  :is-primitive (:and Spatial-Thing Mathematical-Object)
  :annotations (Object-Type
                (documentation "A collection of mathematical objects.  Each element of #$GeometricThing is a spatial thing that can be described mathematically.  #$GeometricThing includes abstract shapes of various dimensions (hence points, lines, curves, polygons, polyhedra), tensors, frames of reference, angles, etc.")))

(defconcept Geopolitical-Entity
  :is-primitive (:and Geographical-Region Legal-Agent)
  :annotations (Existing-Object-Type
                (documentation "A collection of geographical regions.  Each element of #$GeopoliticalEntity is a `thick' geographical region, in other words, a politically defined geographical region taken together with its government, people, artifical habitats, etc.  Important subsets include #$Country, #$IndependentCountry, #$State-Geopolitical, #$City, #$Province.  Examples: #$CityOfTokyoJapan, #$BoroughOfBronxNY, #$Alaska-State, #$Rwanda, #$Singapore, #$InnerMongolia, #$SomershireCountyEngland, #$Taiwan-RepublicOfChina.  Although the name #$GeopoliticalEntity may suggest, elements are not necessarily elements of #$Entity.")))

(defconcept Gesture
  :is-primitive (:and Visual-Information-Source Situation)
  :annotations (Temporal-Stuff-Type
                (documentation "A collection of configurations; a subset of #$VisualInformationSource.  Each element of #$Gesture is a configuration of animal body parts that has some meaning to an observer with an understanding of the interpretive convention.  A gesture may include some tool or prop.  Gestures may be fleeting (e.g., a hello wave) or may last a long time (e.g., the gesture embodied in the #$StatueOfLiberty).  Note that, as defined in Cyc, a gesture is a meaningful configuration of body parts, NOT the actions producing the arrangement; for representation of the actions, see #$MakingAGesture.")))

(defconcept Gift-Giving
  :is-primitive Giving-Something
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  In an instance of #$GiftGiving, one #$Agent intentionally gives all use rights over an object (see #$UserRightsAttribute) to another #$Agent without taking payment in return.")))

(defconcept Giving-Something
  :is-primitive (:and Animal-Activity Transferring-Possession)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  In an instance of #$GivingSomething, one #$Agent gives a tangible thing to another #$Agent.  Every #$GivingSomething event can also be thought of as a receiving event.  
Note: The common case in which one #$Agent gives ownership of an object to another #$Agent is represented by the subset #$GiftGiving.")))

(defconcept Glass
  :is-primitive (:and Tangible-Thing Inanimate-Thing)
  :annotations (Tangible-Stuff-Composition-Type
                (documentation "A collection of tangible things.  Each element of #$Glass is a piece of glass; e.g., a wine bottle, a plate glass window, a microscope slide, a crystal water goblet, the mirrors of a reflecting telescope.")))

(defconcept Goal
  :is-primitive Mental-Object
  :annotations (Stuff-Type
                (documentation "Each element of this collection is a state of affairs that some #$Agent prefers would hold; moreover, the agent is/will be taking steps to achieve (or maintain) that state of affairs.  A #$Goal may be a reified Cyc constant, or may be represented by a #$CycFormula.   Some subsets of #$Goal (that is, some classes of goals) include: species preservation (#$PreservingOwnSpecies), self-preservation (#$PreservingSelf), accomplishing a milestone (#$Milestone), avoiding hunger (#$HungerAvoidanceGoal), etc.")))

(defconcept Going-To-Sleep
  :is-primitive (:and Animal-Activity
                      Single-Doer-Action
                      Intrinsic-State-Change-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of events in which an #$Animal goes from the state of being awake to being in a state of sleep.")))

(defconcept Government-Coc
  :is-primitive Formal-Coc
  :annotations (Microtheory-Type
                Existing-Object-Type
                (documentation "A collection of microtheories; a subset of #$FormalCOC (the set of formal codes of conduct).  Each instance of #$GovernmentCOC is a formal regulation of behavior imposed upon agents -- including citizens, tourists, businesses, government entities, etc., in so far as they are subject to it -- who are located within the legal jurisdiction where that code of conduct holds.  #$GovernmentCOC includes both individual laws and whole legal codes.  Some examples of #$GovernmentCOC include: the Napoleonic Code, the United States Constitution and all Federal, State, and local laws of the United States, and the particular laws against stealing found in most, if not all, countries.  Enforcement of a particular instance of #$GovernmentCOC is authorized by the government associated with that code and carried out by its agents within their jurisdiction(s).  See also #$LegalCode and #$Law.")))

(defconcept Government-Military-Organization
  :is-primitive (:and Military-Organization Legal-Government-Organization)
  :annotations (Existing-Object-Type
                (documentation "The collection of all #$MilitaryOrganizations which belong to, and are directed by, the governing body of a geographical region or international organization.  The government organization may be a national government, state or provincial government, or an international governing body such as the #$UnitedNationsOrganization.  The military forces may include armies, navies, air forces, military border patrols, coast guards, etc.  This collection excludes private armies and mercenary forces.")))

(defconcept Government-Of-Country
  :is-primitive Regional-Government
  :annotations (Existing-Object-Type
                (documentation "A collection of regional government organizations.  An element of #$GovernmentOfCountry is the government of some element of #$Country; e.g., #$UnitedStatesFederalGovernment.  See also the Cyc function #$GovernmentFn, which can be used to refer to the government of a political region.  The governments of smaller regions within a country may or may not be #$subOrganizations of that country's government; in `federal' systems the smaller regions often have partly autonomous governments, as do the elements of #$State-UnitedStates.")))

(defconcept Grasping-Implement
  :is-primitive Hand-Tool
  :annotations (Existing-Object-Type
                (documentation "A collection of tools.  An instance of #$GraspingImplement is a tool which is intended to be used to grasp (and often to subsequently immobilize or control the location/movement of) some other solid object.  Examples include each #$Vise, each pair of #$Forceps, each #$MonkeyWrench, each pair of #$Tweezers, etc.  But not a balloon, a syringe, a doorstop, a cage, etc.  A marginal positive example would be a magnetic tool designed to pick up something without actually touching it.")))

(defconcept Grasping-Something-With-A-Tool
  :is-primitive Handling-A-Device
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of the events in which a tool is used to grasp some object.")))

(defconcept Gratitude
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "A feeling of appreciation towards another agent for a benefit or favor received from him/her.  This is a #$Collection --- for an explanation of that, see #$Happiness.")))

(defconcept Greeting-Someone
  :is-primitive (:and Sociability-Based-Action Communication-Act--Single)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of actions performed by one #$Agent to greet another.  Includes verbal and physical greetings.")))

(defconcept Grilling-Food
  :is-primitive Cooking-Food
  :annotations (Script-Type
                (documentation "Cooking food on a #$BBQGrill or an #$ElectricGrill.")))

(defconcept Grounds-Of-Organization
  :is-primitive (:and Real-Estate Geographical-Region Outdoor-Location)
  :annotations (Existing-Object-Type
                (documentation "A collection of smallish geographical regions.  Each element of #$GroundsOfOrganization is an area which contains buildings inhabited by some organization.  Examples: the campus of the #$UniversityOfTexasAtAustin or the grounds of #$SetonNorthwestHospital.
Note that the `grounds' of an organization, especially an organization with urban locations, might not include a yard.")))

(defconcept Group
  :is-primitive (:and Situation Individual Temporal-Thing)
  :annotations (Object-Type
                (documentation "A collection of objects.  Each element of #$Group is a composite object, made up of individual members which may be either events or objects.  A group is related to its members by the predicate #$groupMembers (q.v.).  Note that elements of #$Group are NOT collections; consider: a group has temporal extent and may have spatial extent and location, while a collection is timeless and abstract.  Nonetheless, it is possible to define a collection parallel to any group, so that the #$groupMembers of that group are also instances (#$isa's) of the correlated collection; e.g., each toe on my left foot is both an element of the collection of my left toes and a member of the group of toes on my left foot.  But that group (of my left toes) is a spatiotemporal thing, while the correlated collection (of my left toes) is NOT.  Another example: if I consider a certain flock of pigeons as having a location, a spatial extent, and a time of existence, then I am considering (the pigeon flock) a group and NOT a collection.  As a default, a group whose #$groupMembers are elements of #$SomethingExisting is itself an element of #$SomethingExisting; and a group whose #$groupMembers are elements of #$Event is itself an element of #$Event.  Finally, unlike a collection, a group cannot be empty; a group must have some #$groupMembers, or there is no group (at that point in time).  Examples of #$Group: #$QueensGuard, #$ThreeWiseMen, #$SantasReindeer, #$InternationalCommunity.")))

(defconcept Guiding-A-Moving-Object
  :is-primitive (:and Movement--Translation-Event Controlling-Something)
  :annotations (Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events; a subset of both #$ControllingSomething and #$Movement-TranslationEvent.  An instance of #$GuidingAMovingObject is an event in which an agent guides or steers an object which is in motion.  For example, someone steering a car or a motorcycle, controlling a surfboard, or flying a kite.  If all you `guide' is a rotation, then that is not quite a #$GuidingAMovingObject event.  Also, if no motion actually takes place, then it would be stretching things to call that a `guiding.'  So a marginal example is #$Running (you are guiding yourself) and two marginal non-examples are:  spinning in place, and running in place.")))

(defconcept Guilt
  :is-primitive Shame
  :annotations (Feeling-Attribute-Type
                (documentation "Negative, self-accusatory feeling of responsibility and blameworthiness for having caused harm by a past action, usually with conscious intent.  Note that this is not `guilty vs. innocent', but rather the feeling of guiltiness.  An unremorseful killer, though guilty (as opposed to innocent) of the murder, may not feel any #$Guilt (i.e., guiltiness) about it.    This is a collection; for an explanation of a typical #$FeelingAttributeType, see #$Happiness.")))

(defconcept Gulf
  :is-primitive Body-Of-Water
  :annotations (Existing-Object-Type
                (documentation "A collection of topographical features.  Each element of #$Gulf is a part of a sea extending into a land mass.  Many gulfs are the outlet for a large river system.   Examples of #$Gulf include the #$SaronicGulf, #$GulfOfMexico, #$GulfOfArkangelsk, #$GulfOfCalifornia, and #$PersianGulf.")))

(defconcept Hail-Process
  :is-primitive Precipitation-Process
  :annotations (Temporal-Stuff-Type
                (documentation "The collection of instances of #$PrecipitationProcess in which solid particles or small chunks of water ice fall to the earth from clouds.")))

(defconcept Hail-Stone
  :is-primitive (:and Precipitation-Particle |(solid-fn Water)|)
  :annotations (Existing-Object-Type
                (documentation "The collection of solid particles or small chunks of ice emitted from clouds in instances of #$HailProcess.")))

(defconcept Hand
  :is-primitive Appendage--Animal-Body-Part
  :annotations (Symmetric-Anatomical-Part-Type
                (documentation "The collection of all terminal parts of a #$Vertebrate forelimb which are structurally suited to function as a grasping organ (as in people, newts, etc.).  E.g., FerdinandTheBull has his forelimbs end in hooves, which are not capable of grasping things, so those are NOT considered #$Hands.")))

(defconcept Handling-A-Device
  :is-primitive (:and Handling-An-Object Human-Activity)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of #$Events; a subset of #$HandlingAnObject.  An instance of #$HandlingADevice is an event in which a device is manipulated (with the operator holding and touching the device) in order to use it for its #$primaryFunction.  Instances include elements of the subsets #$Pruning, #$PlayingAMusicalInstrument, #$OperatingAHouseholdAppliance, #$PumpingGasEvent, #$WritingByHand, and many more.  Just carrying pruning shears around is not a #$HandlingADevice event.")))

(defconcept Handling-An-Object
  :is-primitive (:and Controlling-Something
                      Physical-Contact-Situation
                      Action-On-Object)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events; a subset of both #$ControllingSomething and #$PhysicalContactEvent.  An instance of #$HandlingAnObject is an event in which an object is touched and manipulated by some #$Agent.  Examples of #$HandlingAnObject include instances of  #$HoldingAnObject and of #$CausingAnotherObjectsTranslationalMotion.  So just holding a rock in your hand is a #$HandlingAnObject; so is washing your cereal bowl (an instance of #$WashingDishes), cutting a loose thread on your shirt (an instance of #$CuttingAThread), and carrying the rock from one place to another (an instance of #$CarryingWhileLocomoting.)  One very important class of #$HandlingAnObject instances involve operating some hand-held device --- i.e., events which are instances of the collection #$HandlingADevice.   I.e., the performer handles an object which happens to be a device, but not just lugging it around but actually employing it for its intended #$primaryFunction --- not merely to look at it or rearrange or relocate it.  For example, if you move a fork from the dishwasher to the silverware drawer, that's just #$HandlingAnObject; if you use that fork to eat some food, though, that is an instance of #$HandlingADevice.")))

(defconcept Hand-Tool
  :is-primitive (:and Device--Single-User Tool Portable-Object)
  :annotations (Existing-Object-Type
                (documentation "The collection #$HandTool is a subset of #$Tool.  Each element of #$HandTool fills all the requirements for a generic tool, plus the requirement that a hand tool is a portable object which is hand-guided throughout its operation.  Examples include the elements of #$Screwdriver, #$ManualDrill, and #$BlowDryer.  See also #$Tool, #$PortableObject.")))

(defconcept Happiness
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "The enjoyment of pleasurable satisfaction that goes with well-being, security, effective accomplishments, or satisfied wishes.  As with all #$FeelingAttributeTypes, this is a #$Collection -- the set of all possible amounts of happiness one can feel.  One instance of #$Happiness is `extremely happy'; another is `just a little bit happy'.  
Note:  Obviously there are no real units of measure for this quantity, ways of objectively measuring the amount of happiness possessed or gained or lost, etc., but still this has proven to be a useful way for Cyc to represent and reason with emotions.  E.g., one can have a rule that says that most people have a greater `amount' of happiness at their wedding than at their high school graduation, etc.  There are functions, such as #$LowAmountFn, which take a #$PrimitiveAttributeType (such as the instances of #$FeelingAttributeType) such as #$Happiness and return as their value a certain-sized amount of that feeling; e.g., (#$LowAmountFn #$Happiness) is an expression whose value is a positive but small amount of happiness, and that in turn will be an element of #$Happiness (and also will be an element of #$FeelingAttribute and an element of #$AttributeValue, etc.)  #$FeelingAttributeTypes organize into a lattice; e.g., there are several more specialized forms of #$Happiness that are present in Cyc's ontology, such as #$Elation, #$Delight, #$Triumph-TheFeeling, etc.")))

(defconcept Harbor
  :is-primitive (:and Body-Of-Water Outdoor-Location)
  :annotations (Existing-Object-Type
                (documentation "The collection of those parts of a #$BodyOfWater, each of which is protected from the open sea and deep enough to furnish fairly safe anchorage.")))

(defconcept Hardcopy-Information-Bearing-Object
  :is-primitive (:and Information-Bearing-Object Artifact)
  :annotations (Existing-Object-Type
                (documentation "A collection of information bearing objects (IBOs).  Each element of #$HardcopyInformationBearingObject is an IBO in a `hard' format, e.g., written on paper, on wood, on palm leaves, engraved in metal, carved on stone.  Humans can read hardcopy IBOs without using a computer or electronic device to access them.  Thus, #$HardcopyInformationBearingObject does NOT include the tangible IBOs which are embodied in magnetic media (e.g., data or music on tapes or disks).  Examples of #$HardcopyInformationBearingObject: a billboard, a greeting card, a restaurant check, a magazine, an engraving by Rembrandt, a ten dollar bill, a price tag.")))

(defconcept Hardness
  :is-primitive (:and Physical-Attribute Scalar-Interval)
  :annotations (Material-Strength-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute.  Each element of #$Hardness is an attribute describing how much pressure a tangible material can withstand before deforming or fragmenting.  Hardnesses may be characterized using a #$GenericValueFunction (q.v.), or relative to certain substances, e.g., #$HardAsARock.  Hardnesses of objects are reported using the predicate #$hardnessOfObject.")))

(defconcept Hardware-Tool
  :is-primitive (:and Physical-Device Solid-Tangible-Product Tool)
  :annotations (Existing-Object-Type
                (documentation "A collection of tools.  An instance of #$HardwareTool is an object used to perform a task, usually by applying a particular kind of force on another object.  The tool is used to produce a physical effect in the position, structure, or arrangement of the other object.  Subsets of #$HardwareTool include #$Hammer, #$Screwdriver, #$HandSaw.  An electric drill is also a #$HardwareTool.  Borderline nonexamples include eating utensils, robot servants, screws, nails, and levers.")))

(defconcept Harvesting-A-Plant
  :is-primitive (:and Human-Activity
                      Transportation-Event
                      Removing-Something
                      Directed-Translation)
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each instance of #$HarvestingAPlant is an event in which a plant is harvested.  Harvesting may involve separating some part of the plant and leaving the rest in place (e.g., fruit trees), or it may involve removing the entire plant from its growing location (e.g., carrots).")))

(defconcept Hat
  :is-primitive Clothing-Accessory
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A collection of objects.  Each element of #$Hat is either a hat or other headgear or hatlike object.  Subsets include #$Helmet, #$SwimmingCap, and #$Sombrero.")))

(defconcept Hate
  :is-primitive (:and Hostility Contempt Dislike)
  :annotations (Feeling-Attribute-Type
                (documentation "An intense feeling of hostility and aversion, usually deriving from fear, anger, or a sense of injury, and usually coupled with enmity and malice.  This is a #$Collection --- for an explanation of that, see #$Happiness.")))

(defconcept Having-A-Meal
  :is-primitive (:and Destruction-Event Human-Activity Purposeful-Action)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each element of #$HavingAMeal is an event in which one or more diners consume a meal.  In addition to #$HavingBreakfast, #$HavingLunch, and #$HavingDinner, this includes #$HavingASnack (among other subsets).  Typically, instances of #$HavingAMeal include people eating some food and drinking one or more beverages.")))

(defconcept Head--Animal-Body-Part
  :is-primitive (:and Animal-Body-Part Solid-Tangible-Thing)
  :annotations (Animal-Body-Part-Type
                Unique-Anatomical-Part-Type
                (documentation "The collection of all heads of #$Animals.
[Note: the hyphenated name reflects the need to have other terms in the knowledge base like #$Head-Vertebrate, representing a subset of this set, about which some useful specialized information is stated.]")))

(defconcept Head--Vertebrate
  :is-primitive (:and Head--Animal-Body-Part Biological-Living-Object)
  :annotations (Unique-Anatomical-Part-Type
                (documentation "The collection of all heads of #$Vertebrates (animals with backbones).  Vertebrate heads all have faces (see #$FaceOfAnimal) and connect to the animal's torso via a neck; these things are not generally true for most non-vertebrates.")))

(defconcept Head-Of-Government
  :is-primitive Politician
  :annotations (Occupation-Type
                (documentation "A collection of persons.  Each element of #$HeadOfGovernment is a person who holds a political position as the titular head of the government in some element of #$Country.  Titles that such a person might hold include Prime Minister, President, Premier, King or Queen, Minister of State, Sultan, Chacellor, Chairman.  Examples: John Major, Benjamin Netanyahu, Bill Clinton.  See also #$titleOfHeadOfGovernment.  Cf. #$HeadOfState.")))

(defconcept Head-Of-State
  :is-primitive (:and Leader Politician)
  :annotations (Occupation-Type
                (documentation "A collection of persons.  Each element of #$HeadOfState is a person who holds a political position as the titular leader of some element of #$Country.  Titles that such a person might hold include President, Premier, Chairman, Sultan, King or Queen, Regent.  Examples of #$HeadOfState: #$BillClinton, #$QueenElizabethII, Yasser Arafat, Hirohito, Jiang Zemin.  See also #$titleOfHeadOfState.  Cf. #$HeadOfGovernment.")))

(defconcept Health-Professional
  :is-primitive Professional
  :annotations (Occupation-Type
                (documentation "The collection of all health-related professionals - including medical professionals as well as professionals not in the medical field.  For example, health inspectors.")))

(defconcept Hearing
  :is-primitive Perceiving
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of sensory #$Perceivings in which, by means of vibratory sensors, a #$PerceptualAgent #$hears something that is causing (or consisting of) sound waves, and thereby acquires information about it.  See also: #$ListeningDeliberately, the subset of #$Hearing events in which the aural stimulus is intentionally attended to.")))

(defconcept Heart
  :is-primitive (:and Muscle-Tissue Organ)
  :annotations (Animal-Body-Part-Type
                Unique-Anatomical-Part-Type
                (documentation "The collection of all hearts.  A #$Heart is an #$Organ that pumps blood throughout the body of an #$Animal.")))

(defconcept Heating-Device
  :is-primitive Physical-Device
  :annotations (Existing-Object-Type
                (documentation "A collection of physical devices.  The set of #$PhysicalDevices whose #$primaryFunction is to generate heat to raise the temperature of something else.  The stuff being heated might be gaseous (air in a room or a hair dryer), liquid (water in a pool or hot water tank), or solid (food in an oven, hair with a curling iron, plastic during its shaping, etc.)  An instance of #$HeatingDevice typically has some energy input, some way of converting that energy to heat, and some way of delivering the heat to the object(s) to be heated.  A borderline positive example of this is a device which absorbs heat during warm periods such as daytimes, and radiates it back out again during cool periods such as nighttimes.  Note that heating must be a primary function of the device; no matter how little you think of your personal computer, it is not a #$HeatingDevice.")))

(defconcept Heating-Process
  :is-primitive Temperature-Changing-Process
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "#$HeatingProcess is a specialization of #$TemperatureChangingProcess -- that is, (#$genls #$HeatingProcess #$TemperatureChangingProcess).  During each #$HeatingProcess event, the temperature of the #$objectOfStateChange is increased by applying heat to the object.")))

(defconcept Heavenly-Body
  :is-primitive (:and Partially-Tangible Astronomical-Object)
  :annotations (Existing-Object-Type
                (documentation "A collection of tangible objects.  Each element of #$HeavenlyBody is an astronomical object located in outer space (including the Earth).  Elements of #$HeavenlyBody are natural bodies, NOT artificially made objects such as spaceships or communications satellites.  Examples: the #$Sun, #$Polaris-TheStar, #$PlanetPluto, #$MoonOfEarth.")))

(defconcept Herbivore
  :is-primitive Animal
  :annotations (Existing-Object-Type
                (documentation "The collection of animals that do not eat other animals, or parts of animals, but instead eat plants or plant parts.  #$Ruminant and its subsets #$Deer and #$Sheep are subsets of #$Herbivore.")))

(defconcept Herd-Animal
  :is-primitive Animal
  :annotations (Existing-Object-Type
                (documentation "A subset of #$Animal; the collection of all large plant-eating animals that travel and graze in social

groups.  Elements of #$HerdAnimal also belong to #$Herbivore; they include most instances of #$Ruminant and may also include

Triceretops.")))

(defconcept Highway
  :is-primitive Path-For-Wheeled-Vehicles
  :annotations (Existing-Object-Type
                (documentation "The subcollection of #$PathForWheeledVehicles that contains all highways, inside or outside cities.")))

(defconcept Hoc-Object
  :is-primitive Artifact
  :annotations (Existing-Object-Type
                (documentation "A collection of artifacts.  #$HOCObject is a very general collection for all artifacts that are found in places where humans live or work, i.e., in some element of #$HumanOccupationConstruct (= HOC).  Since these objects are considered to be found indoors, they are all roughly `human-sized'.  Elements include everything from furniture to tools, appliances to artwork, medical examining tables to church altars and pews.")))

(defconcept Holdings
  :is-primitive Group
  :annotations (Existing-Object-Type
                (documentation "A collection of sets of objects, tangible or intangible, which have some special financial, scientific, cultural, or educational value.  An instance of #$Holdings is a set of objects kept and usually maintained by some agent for their value, or to preserve the objects, or to make them available for public display or use (as in a museum's `holdings' or a library's `holdings').  The elements in a group of holdings may or may not be all of a similar type (e.g., books, paintings).  An agent's holdings may or may not all be kept in the same location.")))

(defconcept Holiday
  :is-primitive (:and Event Human-Activity)
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "Each #$Holiday is an #$Event wherein social celebrations and/or rituals are performed, typically lasting for one #$DaysDuration and typically coinciding with a #$CalendarDay.  While #$Holidays are often #$AnnualEvents, they may also be one-time events or scheduled in some other manner.  They are also contextual, as different nationalities, eras, etc. celebrate different ones.")))

(defconcept Holiday-Season
  :is-primitive Event
  :annotations (Temporal-Object-Type
                (documentation "Instances of #$HolidaySeason are events which encompass the activities around a #$Holiday (or group of #$Holidays).  The clearest example is #$ChristmasSeason.  While the exact boundaries of a #$HolidaySeason may be vague, it is nonethless a useful concept; in fact, much of the usefulness comes from that very fuzziness: it is hard to define exactly, but there are many things worth saying about it.")))

(defconcept Hope
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "Expectation of fulfillment or success.  This is a collection; for an explanation of a typical #$FeelingAttributeType, see #$Happiness.")))

(defconcept Horizon
  :is-primitive Place
  :annotations (Existing-Object-Type
                (documentation "The collection of all horizons, each being the far-off region within a few degrees of the horizontal plane, where the sky appears to join the distant landscape.   The horizon is always relative to a particular point of observation.")))

(defconcept Hospital
  :is-primitive (:and Medical-Care-Organization
                      Local-Customer-Contact-Point
                      Medical-Care-Institution)
  :annotations (Existing-Object-Type
                (documentation "Local (at one site) organizations composed of physicians, support personnel, and usually also administrators.  The main function of the organization is to provide medical care (short or long term) to a number of patients/clients, for a fee if the patient/client is able to pay.  A clinic services out-patients, while a hospital has in-patients.  A hospital may have a clinic as a sub-organization, though.")))

(defconcept Hospital-Care-Event
  :is-primitive Medical-Care-Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "What happens when you are in the hospital being treated for a disease like Cancer or Hepatitis or AIDS, or recovering from Surgery.  This is not just a #$MedicalCareEvent which happens in a hospital; it's the whole event meant by a hospital stay.  Also see #$HospitalRoomStay which only represents the stay in the room.")))

(defconcept Hostile-Social-Action
  :is-primitive (:and Social-Occurrence Purposeful-Action)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of all hostile or pugnacious events, adverse to someone, in which multiple agents take part, at least one of whom is acting deliberately.  See also #$PurposefulAction.  An element of this collection is #$AssassinationOfPresidentLincoln.")))

(defconcept Hostility
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "A feeling of strong antagonism towards another agent, organization, or group, sufficient to motivate harmful speech or actions against them.  This is a #$Collection --- for an explanation of that, see #$Happiness.  Some more specialized #$FeelingAttributeTypes than #$Hostility include feelings of #$Hate.")))

(defconcept Hour-Of-Day-Type
  :is-primitive (:and Time-Of-Day-Type Temporally-Disjoint-Interval-Type)
  :annotations (Cyclical-Interval-Group-Type
                (documentation "A collection of collections. Instances #$HourOfDayType are 24 canonical subsets of #$CalendarHour, such as #$TimeOfDay-8AM.  This is a proper subset of #$TimeOfDayType, which could include larger or smallers times of the day, such as `before noon' (which in Cyc in named #$TimeOfDay-AM).")))

(defconcept Household-Appliance
  :is-primitive (:and Hoc-Object Powered-Device Mechanical-Device)
  :annotations (Existing-Object-Type
                (documentation "A collection of devices, a subset of #$MechanicalDevice. It includes those mechanical devices typically found inside a #$HumanResidence.  An instance of #$HouseholdAppliance is a device used in one of the tasks typically carried on in a home, such as food preparation, food storage, laundry, household cleaning, personal cleaning, cooling or heating the house for comfort, etc.  Examples include elements of the collections #$Oven, #$Refrigerator, #$ClothesDryer,  #$VacuumCleaner, #$HotWaterHeater, #$Furnace.  Note that a bed, which naively is thought of as having no moving parts, is not a mechanical device, and hence not a #$HouseholdAppliance --- the same is true for most chairs, tables, sofas, and other articles of furniture.")))

(defconcept Human-Activity
  :is-primitive Animal-Activity
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each element of #$HumanActivity is an activity that is performed by some instance(s) of #$Person.")))

(defconcept Human-Adult
  :is-primitive (:and Adult-Animal Person)
  :annotations (Existing-Object-Type
                Conventional-Classification-Type
                (documentation "The collection of human beings old enough to participate as independent, mature members of society.  Since different societies have different age or maturity requirements for people to be considered adults, different axioms in various society-specific microtheories express these requirements.  For most modern, Western, middle-class,... purposes, e.g., the current view is that anyone over 18 is an adult.  In many cultures, adulthood occurs when one reaches puberty.  Adulthood is #$contiguousAfter childhood; that is, a #$Person is a #$HumanChild for a while, and then is a #$HumanAdult.")))

(defconcept Human-Child
  :is-primitive |(juvenile-fn Person)|
  :annotations (Existing-Object-Type
                (documentation "The collection of all #$Persons in the childhood stage of life.  Functionally, this ends when the child begins to take responsibility for themselves, work, have children of their own,... or, at latest, when the person's age greatly exceeds that at which most people reach those milestones.  Generally, this means that it spans the period from birth to teenage years.   This is highly dependent on context, of course; childhood in Shakespeare's culture ended around age 12.")))

(defconcept Human-Culture-Type
  :is-primitive (:and Existing-Object-Type Conventional-Classification-Type)
  :annotations (Cyc_Collection
                (documentation "A collection of all collections.  Each #$HumanCultureType is a set of #$Persons with its own distinctive culture.  Some elements of #$HumanCultureType are:  #$FrenchPerson, #$EthnicGroupOfAustralianAborigines, etc.")))

(defconcept Human-Cyclist
  :is-primitive (:and Cyclist Person)
  :annotations (Cyc_Collection
                (documentation "Cyclists who are also human (not androids)")))

(defconcept Human-Family-Name-String
  :is-primitive (:and Human-Name-String Id-String)
  :annotations (Id-String-Type
                (documentation "The collection of family name strings such as ``Lenat'', ``Jones'', etc., which are given as last names (in most Western countries), usually at birth.
Note: elements of this collection are really just character strings, not concepts like TheNameSmith that represent character strings.")))

(defconcept Human-Given-Name-String
  :is-primitive (:and Human-Name-String Id-String)
  :annotations (Id-String-Type
                (documentation "The collection of non-family name strings such ``Betty'' and ``Phillip'' which are given as first or middle names (in most Western countries), usually shortly after birth.   This also includes nicknames like ``Red'' or ``The Refrigerator''.
Note: elements of this collection are really just character strings, not reified concepts like ''TheNameBetty'' that might be used to represent character strings.")))

(defconcept Human-Infant
  :is-primitive Human-Child
  :annotations (Existing-Object-Type
                (documentation "The collection of #$Persons in the infant stage of life.  Functionally, this ends when the infant learns to walk (even just toddle) and/or talk (even a few words)... or, at latest, when the person's age greatly exceeds that at which most people develop those skills.  Generally, this means that it spans the period from birth to about 12 - 18 months old.  One of the subsets of this collection is #$NewbornBaby.")))

(defconcept Humanly-Occupied-Spatial-Object
  :is-primitive Partially-Tangible
  :annotations (Existing-Object-Type
                (documentation "A collection of places.  Each element of #$HumanlyOccupiedSpatialObject is a place that humans occupy, not restricted to (though including) the interiors of things built by humans, such as houses, office buildings, and ships.  #$HumanlyOccupiedSpatialObject also extends to campsites, caves, villages, and towns.  Examples: Doug Lenat's house, North Austin, the Five Boroughs of New York, Minnesota, the Vatican, an Antarctic research station, and (briefly) the Moon.")))

(defconcept Human-Name-String
  :is-primitive (:and Proper-Name-String Id-String)
  :annotations (Id-String-Type
                (documentation "This is the class of names which human beings give themselves.  See two of its important subsets, #$HumanGivenNameString and #$HumanFamilyNameString, for examples.")))

(defconcept Human-Occupation-Construct
  :is-primitive (:and Construction-Artifact
                      Humanly-Occupied-Spatial-Object
                      Container-Product)
  :annotations (Existing-Object-Type
                (documentation "A collection of places.  Each #$HumanOccupationConstruct is a place where people do things, such as: the Empire State Building, an individual office in that building, the White House, the Lincoln Bedroom in the White House, an elevator, a tent, etc.

An instance of #$HumanOccupationConstruct is an artificial construction belonging to the collection #$ContainerProduct, and its #$primaryFunction is as a place in which humans perform activities.  Some large subsets include 
   (a) instances of #$HumanShelterConstruction (e.g., houses); 
   (b) sub-regions within a #$HumanShelterConstruction or within any building which are intended for human use (e.g., rooms, shower stalls), and 
   (c) regions in any transportation vehicle which are designed for human occupancy (e.g., the cockpit, passenger compartment).  

Note:  Some buildings which are not themselves instances of #$HumanOccupationConstruct, such as #$HooverDam, may have a sub-region which is a #$HumanOccupationConstruct (e.g., the control room at the top of the dam).

Note:  The collection #$HumanOccupationConstruct is broad enough to include tents, boiler rooms, elevator shafts, steam tunnels, and the space inside the #$LincolnMemorialInWashingtonDC.  Thus, an instance of #$HumanOccupationConstruct need not be strictly #$Indoors (q.v.), since #$Indoors is meant to include many characteristics that those places do not necessarily share (such as humanly comfortable temperature, lighting at night, not terribly noisy or windy, clean).  We therefore do not make the default assertion that a #$HumanOccupationConstruct is #$Indoors; however, an instance of #$HumanOccupationConstruct is certainly not a purely #$OutdoorLocation (q.v.), so we DO assert that those two collections are disjoint.  Certain subsets of #$HumanOccupationConstruct, however, do have `indoor' characteristics, and so we assert (for example) that anything found inside instances of #$RoomInAConstruction or #$ModernShelterConstruction is found #$Indoors.  Note:  For places designed to be occupied by humans but which are purely outdoor locations (such as elements of #$Lawn, #$ParkingLot, and #$Playground), see #$HumanlyOccupiedSpatialObject.")))

(defconcept Human-Occupation-Construct-Resident
  :is-primitive Animal
  :annotations (Existing-Object-Type
                (documentation "The collection of those #$Animals that (commonly) reside in #$HumanOccupationConstructs -- i.e., in structures that also house people.  This mostly just includes domestic pets and people.")))

(defconcept Human-Residence
  :is-primitive (:and Human-Shelter-Construction Physical-Contact-Location)
  :annotations (Contact-Location-Type
                Product-Type
                (documentation "A collection of construction artifacts.  Each element of #$HumanResidence is a humanly constructed shelter (or a part of one) in which humans reside--as opposed to, say, their places of employment (though the two might be the same).  #$HumanResidence includes residential huts, igloos, longhouses, hotels, barracks, palaces, houseboats, mobile homes, as well as apartments, duplexes, and detached houses.  A person's residence is typically the place where she/he usually sleeps and keeps most personal effects.")))

(defconcept Human-Residence-Area
  :is-primitive (:and Ecological-Region Humanly-Occupied-Spatial-Object)
  :annotations (Existing-Object-Type
                (documentation "A collection of geographical regions.  Each element of #$HumanResidenceArea is a region in which a number of people live, at least semi-permanently (i.e., for a year or more).  Examples: #$SanFranciscoBayArea, #$ResearchTrianglePark, research stations at the #$SouthPole, radar posts in the Aleutians.")))

(defconcept Human-Shelter-Construction
  :is-primitive (:and Container-Product
                      Shelter-Construction
                      Human-Occupation-Construct)
  :annotations (Existing-Object-Type
                (documentation "A collection of artifacts; a subset of #$HumanOccupationConstruct.  An instance of #$HumanShelterConstruction is a place made to shelter people from the elements by allowing them to get #$Indoors.  Subsets include #$ModernHumanResidence, #$SchoolBuilding, #$ShoppingMallBuilding, many others.   An instance of #$HumanShelterConstruction must have a roof and typically has sides, though the latter may be flimsy (as in elements of #$TentTheShelter) or even absent (as in some elements of #$ParkingGarage).")))

(defconcept Humid-Climate-Cycle
  :is-primitive Annual-Climate-Cycle
  :annotations (Climate-Cycle-Type
                (documentation "A collection of annual climate cycles.  Each element of #$HumidClimateCycle is a year-long event consisting of weather occurring (typically) in various continental and subtropical regions.  Characteristics of a humid climate include copious precipitation and high humidity.")))

(defconcept Humid-Continental-Climate-Cycle
  :is-primitive (:and Humid-Climate-Cycle Temperate-Climate-Cycle)
  :annotations (Climate-Cycle-Type
                (documentation "A collection of annual climate cycles.  Each element of #$HumidContinentalClimateCycle is a year-long event consisting of weather occurring (typically) in continental interiors within a temperate climate zone.  Characteristics of a humid continental climate cycle include a warm summer and cold winter, with precipitation throughout.  A good example of a region whose annual climate cycles are instances of #$HumidContinentalClimateCycle is the American Midwest.  Cf. #$HumidSubtropicalClimateCycle.")))

(defconcept Humid-Subtropical-Climate-Cycle
  :is-primitive (:and Humid-Climate-Cycle Temperate-Climate-Cycle)
  :annotations (Climate-Cycle-Type
                (documentation "A collection of annual climate cycles.  Each element of #$HumidSubtropicalClimateCycle is a year-long event consisting of weather occurring (typically) within a temperate climate zone.  Characteristics of a humid subtropical climate cycle include a hot summer and a cool winter, with precipitation and moist air throughout.  Cycles of this kind occur closer to the equator than do instances of #$HumidContinentalClimateCycle.  For instance, the Southeastern United States is a good example of a region whose annual climate cycles are instances of #$HumidSubtropicalClimateCycle.")))

(defconcept Ibo-Creation
  :is-primitive (:and Human-Activity
                      Information-Transfer-Event
                      Creation-Event
                      Ibt-Generation)
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "A collection of events; a subset of #$IBTGeneration.  Each element of #$IBOCreation is an event which creates a new IBO (i.e., an element of #$InformationBearingObject).  An IBO is a relatively long-lasting instance of #$InformationBearingThing.  Examples of #$IBOCreation include publishing a book, making a film, printing a photograph, molding a plastic credit card, painting a billboard, minting a coin.  When an IBO is created, its content may be either original or be copied from a prior IBO.  For creation of IBOs with new content, e.g., a personal letter, see the subset #$IBTGeneration-Original; for creation of IBOs with pre-existing content, e.g., reprinting a photograph, see #$IBTGeneration-Replication.")))

(defconcept Ibt-Copying
  :is-primitive Ibt-Generation--Replication
  :annotations (Temporal-Object-Type
                (documentation "A collection of events; a subset of #$IBTGeneration-Replication.  Each element of #$IBTCopying is an event which generates a new IBT (i.e., an element of #$InformationBearingThing) by copying the information and format from a source IBT (see #$informationOrigin).  The new IBT encodes approximately the same information in approximately the same way as the source IBT.  Examples: photocopying a document, faxing a document, duplicating a videotape.")))

(defconcept Ibt-Generation
  :is-primitive (:and Information-Transfer-Event Transfer-Out Action)
  :annotations (Temporal-Object-Type
                (documentation "A collection of information transfer events.  Each element of #$IBTGeneration is an event which creates some information-bearing thing--thus, an event in which some idea or information is expressed.  In elements of #$IBTGeneration, the particular IBT (i.e., element of #$InformationBearingThing) which is created may be either a transient wave phenomenon (e.g., made of sound, light, or radio waves), or it may be a relatively long-lasting instance of #$InformationBearingObject (cf. #$IBOCreation).  Humans frequently generate such IBTs as spoken language, gestures, and handwritten notes.  It is irrelevant for elements of #$IBTGeneration whether there is another agent who immediately (or, indeed, ever) accesses the resulting IBTs.  Note the difference: reading is NOT an IBT generation event, but writing (usually) is.  IBTs may be generated intentionally or unintentionally.  Also, every communication act starts with an instance of #$IBTGeneration.  See also: #$Communicating and its subsets, esp. #$CommunicationAct-Single.")))

(defconcept Ibt-Generation--Original
  :is-primitive (:and Purposeful-Action Ibt-Generation Human-Activity)
  :annotations (Temporal-Object-Type
                Default-Disjoint-Script-Type
                (documentation "A collection of events; a subset of #$IBTGeneration.  Each element of #$IBTGeneration-Original is an event in which some original idea is expressed; that is, the content of the IBT generated is not a copy of the content of a previously created information-bearing thing.  See also #$IBTGeneration, #$Communicating.")))

(defconcept Ibt-Generation--Replication
  :is-primitive Ibt-Generation
  :annotations (Temporal-Object-Type
                (documentation "A collection events; a subset of #$IBTGeneration.  Each element of #$IBTGeneration-Replication is an event in which a new IBT (i.e., an #$InformationBearingThing) is created whose content is based on that of a preexisting IBT (which is the #$informationOrigin of the generation event).  The new IBT contains at least part of the information content of the original IBT.  It may use the same or a different way of encoding the information.")))

(defconcept Ibt-Recoding
  :is-primitive Ibt-Generation--Replication
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "A collection of events; a subset of #$IBTGeneration-Replication.  Each element of #$IBTRecoding is an event which generates a new IBT (i.e., an element of #$InformationBearingThing), by taking information from a source IBT (see #$informationOrigin), encoding it a new way, and incorporating it into a new information-bearing thing (see #$ibtGenerated).  Elements of #$IBTRecoding may be done either by agents (e.g., people) or by non-agents (e.g., record players, or computers running translation software).  Recoding the content of a pre-existing IBT presupposes some instance of accessing it (i.e., of #$AccessingAnIBT).")))

(defconcept Id-Document
  :is-primitive Official-Document
  :annotations (Existing-Object-Type
                (documentation "A collection of official documents.  Each element of #$IDDocument is an accepted credential for identifying some object.  Important subsets of #$IDDocument include #$Passport, #$DriverLicense, #$SocialSecurityCard.  Other examples include student ID cards, dog tags (worn by military personnel), dog tags (worn by dogs), authentication certificates for a work of art or an antique.")))

(defconcept Id-String
  :is-primitive Character-String
  :annotations (Id-String-Type
                (documentation "A collection of objects; a subset of #$CharacterString.  Each element of #$IDString is a character string which is used to denote a specific object in some identification mapping; for example, instances of #$ModelNumber (e.g., ``JHS146973S2''), or instances of #$PostalCode (e.g., ``78751'').  See also #$DenotedObjectFn and #$objectID.")))

(defconcept Id-String-Type
  :is-primitive Object-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element in #$IDStringType is a collection of character strings which is a subset of #$IDString (q.v.).  A few instances of #$IDStringType: #$ProductName, #$ProductVersion, #$EMailAddress, #$PhoneNumber, #$PostalCode.")))

(defconcept Illocutionary-Force
  :is-primitive (:and Supposed-To-Be-Microtheory
                      Propositional-Information-Thing)
  :annotations (Object-Type
                (documentation "A collection of pieces of information; a subset of #$PropositionalInformationThing.  Each element of #$IllocutionaryForce is a specialized component of a communication; its function is to indicate how the speaker in a communication wants the agent(s) whom s/he is addressing to understand, and respond to, the situation--i.e., the state of affairs--described in that communication.  Isolating the `illocutionary force' of a communication allows us to characterize the intention of a speaker; e.g., whether s/he means to assert that the described state of affairs in fact holds; or to express a desire that such a state of affairs hold; or to command someone to make that state of affairs hold; or to offer to make the state of affairs hold.  S/he may even intend to make something true by stating it (e.g., ``I name this ship `The Intrepid'.''). 
Usually, apprehending a speaker's intention is important for understanding what s/he means and what s/he intends the hearer to do.  Although illocutionary forces can be represented propositionally, they are not generally communicated so explicitly.  For example, questions in English are typically communicated by inverting subject-object word order and raising one's intonation at the end of the utterance.  (The intonation marker so strongly indicates a question that it may suffice without the inverted word order, as in `You are going tonight' uttered with a rising intonation.)  Commands in English typically have an (unexpressed) understood subject and perhaps a forceful tone.  In every culture and language there are conventional sets of commonly used illocutionary forces which would be the subsets of #$IllocutionaryForce for that culture; e.g., in English, they include #$Inform contexts, #$Request, #$Offer, #$Promise, and #$Query.
Note: although in this comment #$IllocutionaryForce is explained in terms of utterances, it applies to communication generally; so `speaker' and `listener' should be broadly interpreted to mean, respectively, any #$senderOfInfo and #$recipientOfInfo.  See also #$Communicating, #$CommunicationAct-Single.  The portion of a communication's information content that represents the illocutionary force is indicated using #$componentIF.")))

(defconcept Illumination-Mode-Attribute
  :is-primitive Attribute-Value
  :annotations (Unordered-Attribute-Type
                (documentation "A collection of attributes.  Each element of #$IlluminationModeAttribute describes something about the type of illumination falling on a region or an object.  For example, #$DirectIllumination, #$IndirectIllumination, #$ReflectedIllumination, #$PartDirectPartIndirect.")))

(defconcept Immediate-Weather-Process
  :is-primitive Weather-Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of meteorological events of a duration shorter than seasonal processes.  A particular hurricane event, for example, might be characteristic of a seasonal process for a region; but the hurricane event itself is an instance of #$ImmediateWeatherProcess.  Another example of an #$ImmediateWeatherProcess is a single #$LightningEvent.  (Cf. #$AnnualClimateCycle.)")))

(defconcept Inanimate-Object--Natural
  :is-primitive Inanimate-Thing--Natural
  :annotations (Existing-Object-Type
                (documentation "A collection of natural (i.e. not man-made) objects. It is a subclass of #$InanimateThing-Natural, distinguished from it mainly by only having subclasses which are existing object-types. Thus, #$CelestialObject would be a subclass of this collection, but #$Dirt would not.")))

(defconcept Inanimate-Thing
  :is-primitive Tangible-Thing
  :annotations (Existing-Object-Type
                (documentation "A collection of tangibles.  Each element of #$InanimateThing is a tangible thing which is not a living structure.  Examples: #$YaleUniversity, the #$StatueOfLiberty, a U.S. ten-dollar bill, the #$MoonOfEarth, a safety pin.")))

(defconcept Inanimate-Thing--Natural
  :is-primitive Inanimate-Thing
  :annotations (Temporal-Stuff-Type
                (documentation "A collection of tangibles. Each element of #$InanimateThing-Natural is an #$InanimateThing that is not man-made. Thus, the #$MoonOfEarth and  the #$AtlanticOcean belong to this class, but the #$ArcDeTriomphe does not.")))

(defconcept Incurring-An-Injury
  :is-primitive (:and Incurring-Damage Animal-Activity Single-Doer-Action)
  :annotations (Script-Type
                (documentation "A collection of events.  An instance of #$IncurringAnInjury is an event in which an animal becomes injured.  In such events, the animal which is hurt is the #$bodilyActedOn in the event.  The condition which results of an instance of #$IncurringAnInjury would be an instance of #$InjuryCondition (q.v.).  Also see the comment on #$AilmentCondition.")))

(defconcept Incurring-Damage
  :is-primitive (:and Intrinsic-State-Change-Event Physical-Event)
  :annotations (Script-Type
                (documentation "The collection of events in which some sort of damage is incurred to a person or property.")))

(defconcept Independent-Country
  :is-primitive Country
  :annotations (Spatially-Disjoint-Region-Type
                (documentation "A collection of geopolitical entities. Each element of #$IndependentCountry is a distinct, independent geopolitical entity generally recognized by the international community. An independent country typically has a (relatively) stable government and enforced borders, its own currency, laws, culture, etc. Examples: #$UnitedStatesOfAmerica, #$Germany, #$Liberia, #$Mongolia-PeoplesRepublic, #$India, #$Taiwan-RepublicOfChina, #$Honduras.")))

(defconcept Independent-Organization
  :is-primitive Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  An element of #$IndependentOrganization is an organization which is not affiliated with any #$ChainOrganization and that is not a sub-organization of any other #$Organization.  An independent organization is neither the top-level organization of a chain, nor a lower level organization in a chain, nor is it an element of #$ChainOrganization.  Note, however, that an #$IndependentOrganization may have several locations within a small geographical region; e.g., Texas French Bread (a single, independent business) has multiple locations in Austin, TX.")))

(defconcept Indexed-Info-Source
  :is-primitive Abstract-Information
  :annotations (Object-Type
                (documentation "The collection of all 
information sources in which the information contained theirein 
is indexed by some set of terms, names, #$CharacterStrings, 
#$IDNumbers or codes.   Given such an index term, there is a 
specific part of the #$IndexedInfoSource associated with that 
term.  Each instance has some format or organizing structure 
imposed on the information, although the format might not be 
intrinsically ordered..  An instance of #$IndexedInfoSource 
is the abstract informational content of the source, not any 
particular physical object in which the information is stored.  
Examples include a #$Dictionary, #$Thesaurus, 
#$Database-AbstractContent, or a #$KnowledgeBase.  Some examples that do not qualify are #$PaintingAsArtForm, or a #$CharacterString without any structuring information about it or that has no 
structure beyond being a string of characters.")))

(defconcept Indexical-Concept
  :is-primitive Cyc_Thing
  :annotations (Cyc_Collection
                (documentation "#$IndexicalConcepts are those 
whose referent essentially depends on the occasion of use and 
the user, e.g., #$Now, I, Here. When I use the concept 'I,' I 
am referring to myself (#$OKeefe), but 'I' does not mean 
#$OKeefe, but refers to whomever the user is. Similarly, #$Now denotes the moment in which it used.")))

(defconcept Individual
  :is-primitive Cyc_Thing
  :annotations (Cyc_Collection
                (documentation "#$Individual is the collection of all things that are NOT sets or collections.  Thus, #$Individual includes (among other things) physical objects, temporal subabstractions of physical objects, numbers, relations, and groups (see #$Group).  An element of #$Individual may have parts or a structure (including parts that are discontinuous); but NO instance of #$Individual can have elements or subsets.

Important distinction:  Though an element of #$Individual may have parts (e.g., #$physicalParts or #$groupMembers), that individual is NOT the same thing as the collection containing those same parts.  For example, your car is an individual, but the collection of all the parts of your car is an instance of #$Collection.  The latter -- the collection of parts of your car -- is an abstract collection; it doesn't have a location, it doesn't have a top speed, etc. -- it's just a collection! -- but it does have subsets, supersets, and members.  Similarly: `Bill Clinton's immediate family' is an individual; however, the collection of persons who belong to that family is a collection. One final example: A company belongs to #$Individual and is distinct from the collection of its employees (which #$isa #$Collection).")))

(defconcept Individual-Agent
  :is-primitive Agent
  :annotations (Existing-Object-Type
                (documentation "The collection of all individuals belonging to the collection #$Agent.  Each person, each animal, etc., is an element of #$IndividualAgent, in most contexts.  Note that instances of #$Organization will in general NOT be elements of #$IndividualAgent.")))

(defconcept Individual-Denoting-Function
  :is-primitive Non-Predicate-Function
  :annotations (Relation-Type
                (documentation "The collection of all Cyc functions which return elements of #$Individual.  Examples: #$PerimeterFn, #$InteriorFn, #$GoalFn, #$MedalAwardCeremonyFn, all return particular individuals when applied to their proper arguments; e.g., (#$InteriorFn #$LincolnMemorialInWashingtonDC) designates the particular space inside the Lincoln Memorial.  Cf. #$CollectionDenotingFunction.")))

(defconcept Infection
  :is-primitive Ailment-Condition
  :annotations (Physiological-Condition-Type
                (documentation "A collection of ailments; a subset of #$AilmentCondition.  An instance of #$Infection is a disease condition in which microorganisms are abnormally present (or abnormally numerous) within an animal's body.  The microorganisms involved in an infection may be some instance of the collections #$Bacterium, #$Virus, or #$ProtistaKingdom.  Specialized subsets of #$Infection include: #$Bronchitis, #$Tonsillitis, #$SexuallyTransmittedInfection (which has further subsets).  A particular case of tonsilitis is thus an element of the collection #$Infection.")))

(defconcept Infection-Transmission-Event
  :is-primitive (:and Generalized-Transfer Intrinsic-State-Change-Event)
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "The collection of events in which some instance of #$Infection is transmitted from one member of #$BiologicalLivingObject to another.")))

(defconcept Infection-Type
  :is-primitive Physiological-Condition-Type
  :annotations (Sibling-Disjoint-Collection
                (documentation "Elements are the subsets of #$Infection.  This type collection may be removed from the KB.")))

(defconcept Inference-Related-Bookkeeping-Predicate
  :is-primitive Bookkeeping-Predicate
  :annotations (Cyc_Collection
                Predicate-Category
                (documentation "A collection of predicates.  Each element of #$InferenceRelatedBookkeepingPredicate is a predicate involved in assertions used by the Cyc application to direct inferencing.  Examples: #$defnIff, #$defnSufficient, #$termOfUnit, #$afterAdding.")))

(defconcept Inform
  :is-primitive Illocutionary-Force
  :annotations (Object-Type
                (documentation "A collection of illocutionary forces.  Each instance of #$Inform consists of a piece of information contained (usually implicitly) in a communication, and which expresses the speaker's intention to inform the listener that the propositional content of what s/he utters is true.  `Speaker' and `listener' are broadly interpreted to mean, respectively, any #$senderOfInfo and #$recipientOfInfo.  See also #$IllocutionaryForce.")))

(defconcept Inform--Communication-Act
  :is-primitive Communication-Act--Single
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "The collection of acts of conveying information by means of intentional communication.")))

(defconcept Information-Adding
  :is-primitive Information-Updating
  :annotations (Temporal-Stuff-Type
                (documentation "A collection of events; a subset of #$InformationUpdating.  Each element of #$InformationAdding is an event in which information is added to the information content of an IBO (i.e., an element of #$InformationBearingObject).  After the action, the IBO which is the #$informationDestination of the update `has' the new information (i.e., #$infoAdded).  The resulting information content of that IBO includes both its content immediately prior to the addition, plus the newly added information.  Examples of #$InformationAdding: recording a check in the check register of one's checkbook; taking the next photograph on a roll of film; adding a new constant to the #$CycKB.")))

(defconcept Information-Bearing-Object
  :is-primitive (:and Composite-Tangible-And-Intangible-Object
                      Information-Bearing-Thing)
  :annotations (Existing-Object-Type
                (documentation "A collection of objects which are both tangible and intangible.  (See also the comment for its superset #$CompositeTangibleAndIntangibleObject.)  Each element of #$InformationBearingObject is an object that can be interpreted, by an interpreter understanding its conventions, to yield a chunk or chunks of information.  #$InformationBearingObject includes all of the following: (1) artifacts made solely for the purpose of conveying information (e.g., a newspaper, or a children's science video); (2) artifacts that convey information in addition to their intended function (e.g., Neolithic pottery); and (3) non-artifacts, such as a person's fingerprints, gestures, and utterances, which may be interpreted to yield information.  Note: `an IBO' abbreviates `an information bearing object'.  Cf. #$InformationBearingWavePropagation.  See also #$containsInformation.")))

(defconcept Information-Bearing-Thing
  :is-primitive Temporal-Thing
  :annotations (Cyc_Collection
                (documentation "A collection of temporal objects, including actions and events as well as physical objects.  Each element of #$InformationBearingThing is an item that carries information, for an interpreter who understands its conventions.  Examples: a copy of the novel `Moby Dick'; a signal buoy; a photograph; a flag; an elevator sign in Braille; a map; a US dollar bill; a resume; an account ledger; a word in ASL; a musical score; the #$Cyc program itself.  Note: `an IBT' abbreviates `an information bearing thing'.  See also #$SpecifiedInformationBearingThingType.  For representation of the propositional content of information bearing things, see #$PropositionalInformationThing; but note that not all IBTs have a propositional content (cf. #$ArtObject).")))

(defconcept Information-Bearing-Wave-Propagation
  :is-primitive (:and Information-Bearing-Thing Wave-Propagation)
  :annotations (Temporal-Stuff-Type
                (documentation "A collection of information bearing things (IBTs).  Each element of #$InformationBearingWavePropagation is a #$WavePropagation (q.v.) event that carries information, for an interpreter which understands its conventions.  Examples of #$InformationBearingWavePropagation include sounds, radio signals, and images of visible light.  These eventlike IBTs should be contrasted with the relatively static, persistent, objectlike IBTs in the collection #$InformationBearingObject.")))

(defconcept Information-Recording-Device
  :is-primitive Physical-Device
  :annotations (Existing-Object-Type
                (documentation "A collection of physical devices.  An instance of #$InformationRecordingDevice is a device used for the recording of sensory information (i.e., audio and visual, but not encoded as character strings.)  So an instance would be your answering machine at home (an #$AnsweringMachine), your cam-corder (a #$VideoCamera), but NOT your address book or your copy of the Yellow Pages.  
Note: A borderline case is a PDA (such as an Apple Newton) used to record handwritten script.  If it then processes that information and converts it to ASCII characters, it has stopped being an #$InformationRecordingDevice in the currently intended sense.  Probably a better name for this concept, therefore, would be DeviceToRecordAnalogInformation.")))

(defconcept Information-Recording-Process
  :is-primitive (:and Ibo-Creation Physical-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events in which information is recorded, using an #$InformationRecordingDevice.  Every #$InformationRecordingProcess produces an #$InformationBearingObject.")))

(defconcept Information-Removing
  :is-primitive Information-Updating
  :annotations (Temporal-Stuff-Type
                (documentation "The collection of actions in which information is removed from or erased from an IBO (#$InformationBearingObject).  After the action, the remaining info content, if any, of the IBO acted on is only a part of what it started out to be.  The removed information doesn't go anywhere; after removal it doesn't end up encoded in something else.")))

(defconcept Information-Transfer-Event
  :is-primitive Generalized-Transfer
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each element of #$InformationTransferEvent is an event in which information is transferred from a source (#$informationOrigin) to a destination (#$informationDestination), both of which are either intelligent agents or IBTs (i.e., elements of #$InformationBearingThing).  Examples: reading a book (transfer from book to reader); saying something to someone (transfer from speaker to listener); machine translation (transfer from an encoded IBT in the source language to an encoded IBT in the target language); OCR scanning (transfer of info from visual information source to another IBT in different format); carving initials in a tree (transfer from agent to IBT), etc.  Note: this is a generalization of the `mtrans' operator in Roger Schank's Conceptual Dependency theory.")))

(defconcept Information-Updating
  :is-primitive Information-Transfer-Event
  :annotations (Temporal-Stuff-Type
                (documentation "A collection of information transfer events.  Each element of #$InformationUpdating is an event in which the information content of an IBO (i.e., an element of #$InformationBearingObject) is altered, either by removing or by adding information, or both.  Note that this is possible only for tangible IBOs.")))

(defconcept Ingesting
  :is-primitive (:and Bodily-Function-Event
                      Biological-Intake-Event
                      Voluntary-Body-Movement
                      Directed-Translation
                      Human-Activity)
  :annotations (Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events; a subset of #$BiologicalIntakeEvent.  Each element of #$Ingesting is a complex process in which a thing is brought into some organism's mouth from the outside, is swallowed, and is moved to the organism's stomach.  Every element of #$Ingesting has among its #$subEvents an instance of #$Swallowing which occurs after the intake.   (Thus, though chewing gum is a #$BiologicalIntakeEvent, it is not an #$Ingesting unless the gum is swallowed.)  An ingesting event ends when the ingested stuff reaches the ingester's stomach (where an instance of #$DigestionEvent begins -- provided that what was ingested is an element of #$EdibleStuff).")))

(defconcept Inhaling
  :is-primitive (:and Biological-Intake-Event Body-Movement-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of all body movement events in which an animal takes air in through an appropriate portal (#$Mouth, #$Nose) and passes it into its #$Lungs.  The elements of #$Breathing all have #$subEvents which are #$Inhalings.")))

(defconcept Inorganic-Stuff
  :is-primitive (:and Tangible-Thing Inanimate-Thing)
  :annotations (Existing-Stuff-Type
                (documentation "A collection of tangible things.  Each element of #$InorganicStuff is a tangible thing which is wholly composed of one or more types of inorganic #$Molecule.  Instances of #$InorganicStuff usually didn't originate as parts or products of living things.")))

(defconcept Insect
  :is-primitive Arthropod
  :annotations (Biological-Class
                (documentation "A collection of animals; a subset of #$Arthropod.  Each element of #$Insect is a small arthropod whose body is segmented into thirds, with three pairs of legs, and one or two pairs of wings.  The most familiar members of #$Arthropod are the 'bugs' encountered in human daily life.  Some insects bite, some infest houses, and some carry disease.  #$Insect is an instance of #$BiologicalClass.")))

(defconcept Inside-Surface
  :is-primitive Surface--Physical
  :annotations (Region-Type
                (documentation "The collection of all inside surfaces of (surfaces of the interiors of) tangible things.  The tangible thing may have a #$Cavity or several cavities or passageways.  Often the tangible thing can be thought of as a container of some sort.")))

(defconcept Instructions
  :is-primitive Propositional-Information-Thing
  :annotations (Object-Type
                (documentation "A collection of executable pieces of information; a subset of #$PropositionalInformationThing.  Each element of #$Instructions outlines a sequence of tasks to be performed, such as instructions on a food package, verbal instructions, etc.")))

(defconcept Insurance-Provider
  :is-primitive Service-Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations; a subset of #$ServiceOrganization.  An element of #$InsuranceProvider is an organization whose #$MainFunction is to provide financial and material protection to its clients in the event of sickness, death, natural disaster, loss, theft, lawsuits, etc.  (Insurers may specialize in one or more of those areas.)  Elements of #$InsuranceProvider may belong to either #$CommercialServiceOrganization or #$NonProfitOrganization (including insurance providers belonging to #$LegalGovernmentOrganization).  Examples include State Farm Insurance Co., Aetna Casualty Co., Lutheran Brotherhood, and all fifty members of U.S. #$StateMedicaidAdministrationOrganizations.")))

(defconcept Intangible
  :is-primitive Cyc_Thing
  :annotations (Cyc_Collection
                (documentation "The collection of things that are not physical -- are not made of, or encoded in, matter.  Every #$Collection is an #$Intangible (even if its instances are tangible), and so are some #$Individuals.  Caution: do not confuse `tangibility' with `perceivability' -- humans can perceive light even though it's intangible--at least in a sense.  For more on this issue, see the relevant #$cyclistNotes.")))

(defconcept Intangible-Existing-Thing
  :is-primitive (:and Partially-Intangible Intangible-Individual)
  :annotations (Object-Type
                Existing-Stuff-Type
                (documentation "The set of things which are intangible yet exist in time.  E.g., the code of conduct for a formal dinner party, the standards for acceptance to Caltech as an undergrad, an account at Sears, etc.")))

(defconcept Intangible-Individual
  :is-primitive (:and Individual Intangible)
  :annotations (Object-Type
                (documentation "The collection of intangible 
individuals, a subset of #$Intangible and of #$Individual.  
The elements of #$IntangibleIndividual do not have mass, volume, 
color, etc.  E.g., hours, ideas, algorithms, integers, 
distances, and so on. However, as a subset of #$Individual, 
this collection EXCLUDES sets and collections, which are
elements of #$Intangible but not of #$IntangibleIndividual.")))

(defconcept Intangible-Object-Predicate
  :is-primitive Extensional-Representation-Predicate
  :annotations (Predicate-Category
                (documentation "A collection of predicates.  Each element of #$IntangibleObjectPredicate is a predicate used in assertions which describe the properties of intangible objects.  For example, #$knowsAbout, #$titleOfHeadOfGovernment, #$religionOfRule, #$standardUnitMeasuring, #$territoriesControlled.")))

(defconcept Cyc_Integer
  :is-primitive (:and Cyc_Rational-Number Real-Number)
  :annotations (Measurable-Attribute-Type
                Cyc_Collection
                (documentation "The collection of all whole numbers; a subset of #$RationalNumber.  Each element of #$Integer is a whole number, resolvable into units with no fractional remainder.  An integer may be positive (e.g., 42), zero, or negative (e.g., -42).")))

(defconcept Intelligent-Agent
  :is-primitive Agent
  :annotations (Existing-Object-Type
                (documentation "The collection of all intelligent agents.  Each element of #$IntelligentAgent is an agent that is capable of having knowledge which it employs in its actions.  An intelligent agent #$knowsAbout certain things, and having #$beliefs (and possibly #$goals) concerning those things may influence its actions.  In addition to persons, Cyc considers certain social beings, such as business and government organizations, and intelligent machines, to be intelligent agents.  See also #$Agent, #$performedBy.")))

(defconcept Intensional-Representation-Predicate
  :is-primitive Predicate
  :annotations (Predicate-Category
                (documentation "A collection of predicates.  Each element of #$IntensionalRepresentationPredicate is a predicate used to form assertions about the properties of collections.  These predicates implement the intensional structure of the ontology; e.g., #$citizens, #$unitsMeasuringThisQuantity, #$hasDepartmentTypes, #$granuleOfTime, #$objectTypeTransported, #$contraryFeelings.")))

(defconcept Inter-Actor-Slot
  :is-primitive (:and Binary-Predicate Extensional-Representation-Predicate)
  :annotations (Predicate-Category
                (documentation "A collection of predicates.  Each element of #$InterActorSlot is a binary predicate used in assertions that state the relationship between two actors in some event, actual or implied.  The event in which the actors participate may or may not be explicitly represented in the KB.  For example, (#$authorOfPublication X Y) implies the existence of a #$Writing event in which X is the author and Y is the book written.  Examples: #$agreeingAgents, #$artisticWorksCreated, #$spouse, #$wornOn.")))

(defconcept Interconvertible-Unit-Type
  :is-primitive Cyc_Collection
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$InterconvertibleUnitType is a collections of functions (all belonging to #$UnitOfMeasure) that are used to measure quantities whose units are convertible into one another.  Some collections of interconvertible units include #$UnitOfTime, #$UnitOfDistance, #$UnitOfCPUSpeed.   For example, #$UnitOfTime includes the functions #$HoursDuration and #$SecondsDuration (among others).  Any quantity denoted by applying one of those functions can also be expressed in terms of the other.  For example, (#$HoursDuration 1) equals (#$MinutesDuration 60).  On the other hand, not all the instances of #$UnitOfMeasure constitute types of interconvertible units. #$UnitOfRate is not an element of #$InterconvertibleUnitType; therefore, it does not necessarily follow that quantities denoted by its elements are interconvertible.  For example, #$TimesPerDay and #$MilesPerHour are both elements of #$UnitOfRate; however, quantities denoted using either function are not convertible into one another.")))

(defconcept Inter-Existing-Object-Slot
  :is-primitive (:and Extensional-Representation-Predicate Binary-Predicate)
  :annotations (Predicate-Category
                (documentation "A collection of predicates.  Each element of #$InterExistingObjectSlot is a binary predicate used in assertions that relate two elements of #$SomethingExisting (i.e., two objects).  Examples: #$soldAt, #$derivedFrom, #$cohabitants, #$soilComponent, #$containsInformation, #$capitalCity, #$electricallyConnectedTo.")))

(defconcept Interior
  :is-primitive Piece-Of-Free-Space
  :annotations (Region-Type
                (documentation "The collection of spatial regions that are physical areas inside the walls or boundary of some object.  The area need not be completely sealed off.  See also #$Cavity which, unlike #$Interior, can include walls.")))

(defconcept Internal-Sensory-Attribute
  :is-primitive Sensory-Attribute
  :annotations (Unordered-Attribute-Type
                (documentation "A collection of attributes.  Each element of #$InternalSensoryAttribute is a state of a sentient being in which it experiences within itself some somatic or psycho-somatic feeling, urge, or impulse.  An internal sensory attribute differs from an `external' one in that the sensing agent refers the former to itself and the latter to external objects.  #$InternalSensoryAttribute includes states of feeling hungry, thirsty, tired, or in pain, as well as various bodily urges such as the urge to sneeze, burp, or urinate.  Sensory attributes that may occur with more or less intensity are represented by indicating a #$LevelOfPain, #$LevelOfPhysicalPleasure, #$LevelOfStress, etc.")))

(defconcept International-Organization
  :is-primitive Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  An element of #$InternationalOrganization is an organization of international `scope' -- that is, one which has substantial operations, physical facilities, or substantial membership in multiple countries.  International organizations may have individual #$Persons, #$Organizations, or countries as members.  They may be political or commercial in nature.  International organizations with countries as members belong to the subset #$InternationalOrganizationOfCountries.  Examples of #$InternationalOrganization: #$UnitedNationsOrganization, #$OPEC, #$IBMInc.  See also #$internationalOrg-MemberCountry.")))

(defconcept International-Organization-Of-Countries
  :is-primitive International-Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations; a subset of #$InternationalOrganization.  An element of #$InternationalOrganizationOfCountries is an organization whose members are countries (as represented by their goverments).  Examples: the United Nations, NATO, SEATO, OAU, the League of Arab States, and OPEC.")))

(defconcept Inter-Personal-Relation-Slot
  :is-primitive Inter-Existing-Object-Slot
  :annotations (Predicate-Category
                (documentation "A collection of predicates.  Each element of #$InterPersonalRelationSlot is a binary predicate used to represent relationships between two instances of #$Animal.  Examples: #$mate, #$friends.")))

(defconcept Interval-Based-Quantity-Slot
  :is-primitive (:and Functional-Slot Quantity-Slot)
  :annotations (Predicate-Category
                (documentation "A collection of binary predicates (i.e., slots).  Flexibility in the representation of quantities is allowed in assertions made with the binary predicates that are elements of #$IntervalBasedQuantitySlot.  Each of these predicates, like those in their superset #$QuantitySlot, is a binary predicate whose second argument must be an element of #$ScalarInterval, i.e., an interval or point representing the value of some measurement.  For example, take the predicate #$heightOfObject, which relates an object to its vertical length.  Although we suppose that in reality there is only a single distance that is the height of some one particular object, our measurement systems are in practice less precise--and typically we need a measurement only within a certain tolerance.  For example, in measuring the #$heightOfObject of a person, usually a measurement to the nearest inch or centimeter will do.  Or we may be even less detailed in our descriptions, perhaps caring only whether someone is more than four feet tall, or `Tall enough to ride' on an amusement park ride.  By allowing an #$IntervalEntry #$Format (qq.v.) in the second argument of the measuring predicate, we are telling Cyc that it's okay to describe the (e.g.) #$heightOfObject in several different ways, with varying levels of precision, SO LONG AS all of the measurements asserted for the same object `overlap'.  For example, it is consistent to say both that Jenny is 4'10'' tall, between four and five feet tall, and that she is `Tall enough to ride' the Dodgems (provided that `Tall enough to ride' is an interval whose minimum is at 4'10'' or lower).  Even though there is only one height of a person in reality, using an #$IntervalBasedQuantitySlot allows us to represent that height in many different ways, avoiding contradictions while still checking for consistency.  For example, asserting both that Jeff's #$heightOfObject is 5'9'' and in the range 4.5-5.5 feet tall is an inconsistency.")))

(defconcept Interval-On-Number-Line
  :is-primitive Scalar-Interval
  :annotations (Cyc_Collection
                Measurable-Attribute-Type
                (documentation "A collection of measurable intervals; a subset of #$ScalarInterval.  Each element of #$IntervalOnNumberLine is an interval on the real number line; for example, the interval described by `numbers greater than zero and less than or equal to 10'.  A common special case of such intervals is that of a single point on that line, viz., a number such as five or 125.  Note that such an interval need not be contiguous; e.g., `even numbers between Pi and the square root of 1000' describes a legitimate element of #$IntervalOnNumberLine.  The collection #$RealNumber is a subset of #$IntervalOnNumberLine.  The elements of #$IntervalOnNumberLine are measured by elements of #$DimensionlessUnitOfMeasure, e.g., units or percentages.  See also #$Unity, #$Percent, #$UnitOfMeasure.")))

(defconcept Intrinsic-Axis-Of-Object
  :is-primitive Vector-Interval
  :annotations (Object-Type
                (documentation "The collection of all intrinsic axes of objects, being the conventional or obvious axes depending on shape, movement or function of the object.  For example, for a chest-of-drawers, the intrinsic axes are top-to-bottom, side-to-side, and front-to-back.  See also #$AxisFn.  Each intrinsic axis is a direction relative to the object's orientation.")))

(defconcept Intrinsic-State-Change-Event
  :is-primitive Event
  :annotations (Temporal-Object-Type
                (documentation "The collection of #$Events which are characterized primarily by a change in some intrinsic property of one main entity involved in the event (i.e., one of the #$actors).  Such intrinsic changes may include changes of a thing's color, temperature, device state, size, and so on.  Events where the main change is extrinsic (such as a change in location or ownership) are not #$IntrinsicStateChangeEvents.  In events which have more than one actor, the event may be an #$IntrinsicStateChangeEvent for one actor but not for another.  For example, in a #$FasteningSafetyBelt event, the #$SafetySeatBelt (the device used) goes from unconnected to connected (to itself), which is an intrinsic change; however, the agent who does the fastening (i.e., who is #$HandlingADevice) does not change intrinsically, but only in its configuration to the belt, an external object.  Another example: in a #$HairCuttingEvent, the hair that is barbered undergoes an #$IntrinsicStateChangeEvent due to its role in that kind of event, but the barber undergoes no intrinsic change due to the hair cutting.

Note: Some events, such as an ice cube melting into a small puddle of water, could be represented in Cyc either as an #$IntrinsicStateChangeEvent or as a #$TransformationEvent but not (within a single micro-theory) as both; see the comments on those constants.")))

(defconcept Invertebrate
  :is-primitive (:and Non-Person-Animal Animal)
  :annotations (Organism-Classification-Type
                (documentation "A collection of animals; every element of #$Invertebrate is an animal that has no backbone.  #$Invertebrate includes insects, molluscs, sea squirts, worms (in a large variety of worm phyla), and many others. 

Note: Although #$Invertebrate is a scientific category, it is not a standard taxon in the biological taxonomy, hence it is not an instance of #$BiologicalTaxon.")))

(defconcept Involuntary-Body-Movement
  :is-primitive (:and Body-Movement-Event Bodily-Function-Event--Involuntary)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of involuntary bodily movements, those movements in which an #$Animal's body does the action automatically -- the agent's consent doesn't enter into it.  Subsets of #$InvoluntaryBodyMovement include #$Heartbeating, #$Sneezing, #$Snoring, etc.")))

(defconcept Irreflexive-Binary-Predicate
  :is-primitive Binary-Predicate
  :annotations (Predicate-Category
                Cyc_Collection
                (documentation "A collection of predicates; the subset of #$BinaryPredicate whose elements represent antireflexive relations.  A predicate F is an element of #$IrreflexiveBinaryPredicate if and only if F is a binary predicate and, for every X in the domain of F, (#$not (F X X)).  Examples: #$spouse, #$causes, #$northOf, #$temporallyDisjoint. 
Note this additional restriction: A Cyc predicate F can be an element of #$IrreflexiveBinaryPredicate only if the type (i.e., arg-Isa) constraint applicable to F's first argument is not disjoint with the type constraint applicable to F's second argument.  See also #$NoteOnArgumentTypingAndPropertiesOfRelations.")))

(defconcept Island
  :is-primitive (:and Islands-And-Island-Group Land-Body)
  :annotations (Existing-Object-Type
                (documentation "The collection of all islands, each being a #$LandBody (smaller than a #$Continent) surrounded by water.")))

(defconcept Island-Area
  :is-primitive Islands-And-Island-Group
  :annotations (Existing-Object-Type))

(defconcept Islands-And-Island-Group
  :is-primitive Land-Topographical-Feature
  :annotations (Existing-Object-Type
                (documentation "A collection of topographical features.  Each element of #$IslandsAndIslandGroup is either an island or a group of islands (see #$Archipelago).  Elements of #$IslandsAndIslandGroup include groups of scattered islands which do not form a natural geographical area; the chief reasons for representing such groups is that they are geopolitical areas and/or were historically significant.  Examples: #$FrenchPolynesia, #$Cyclades, #$OuterHebrides-Archipelago, #$Grenadines-Islands.")))

(defconcept Itinerary-Document
  :is-primitive Textual-Material
  :annotations (Existing-Object-Type
                (documentation "The collection of documents that contain information about the time/location of each leg of a trip, accomodations, etc.")))

(defconcept January
  :is-primitive Calendar-Month
  :annotations (Month-Of-Year-Type))

(defconcept Jealousy
  :is-primitive Resentment
  :annotations (Feeling-Attribute-Type
                (documentation "Intolerance of rivalry; feeling of suspicion and resentment of one's rivals.  This is a collection; for an explanation of a typical #$FeelingAttributeType, see #$Happiness.
Note: #$Envy is related to covetousness, wanting (perhaps in the future) what someone else has; #$Jealousy is related to possessiveness, wanting to keep what is (or was or could have been) already yours.")))

(defconcept Job-Attribute
  :is-primitive Attribute-Value
  :annotations (Unordered-Attribute-Type
                (documentation "A collection of attributes.  Each element of #$JobAttribute describes a general property of a job or type of job.  Examples of #$JobAttribute include #$BlueCollar, #$WhiteCollar, and #$FlexibleWorkingHours.")))

(defconcept Joint--Animal-Body-Part
  :is-primitive (:and Animal-Body-Part Configuration Solid-Tangible-Thing)
  :annotations (Animal-Body-Part-Type
                (documentation "The collection of all joints of #$Animals.  A joint is the juncture between the ends or edges of abutting bones of the animal's skeleton.  Joints are of several types mechanically (e.g., ball-and-socket).  Many major joints function as hinges, in which the ends of the abutting bones are joined with ligaments and cushioned by cartilege.")))

(defconcept July
  :is-primitive Calendar-Month
  :annotations (Month-Of-Year-Type))

(defconcept Junction-Of-Paths
  :is-primitive (:and |(group-fn Spatial-Thing)|
                      Static-Situation
                      Partially-Tangible)
  :annotations (Situation-Type
                (documentation "The collection of junctions of paths, each being an arrangement of two or more links of #$Path-Generics such that the parts are in a particular spatial relation to each other (they are all locally connected to each other and join at the place of the #$JunctionOfPaths).  It includes the case of two or more paths that 'cross' at a junction, but not the case in which the end of one path simply joins the end of another path.  For junctions in #$PathSystems, see #$junctionInSystem.")))

(defconcept Junction-Of-Pipes
  :is-primitive Junction-Of-Paths
  :annotations (Region-Type
                (documentation "The collection of all junctions of pipes or tubes.  Each junction permits flow between any two #$Pipe-GenericConduits joined at that junction.  At any #$JunctionOfPipes, three or more #$Pipe-GenericConduit segments must be joined, although some joined pipes may loop back to the same junction.")))

(defconcept June
  :is-primitive Calendar-Month
  :annotations (Month-Of-Year-Type))

(defconcept Juvenile-Animal
  :is-primitive (:and Animal Portable-Object Biological-Stage-Of-Development)
  :annotations (Existing-Object-Type
                (documentation "An element of #$LifeStageType.  #$JuvenileAnimal is the collection of all animals that are not fully grown nor fully mature.")))

(defconcept Killing--Biological
  :is-primitive (:and Animal-Activity Destruction-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  In each instance of this collection, one living organism ends the life of another, either intentionally or unintentionally.")))

(defconcept Kinetic-Energy-Powered-Device
  :is-primitive Powered-Device
  :annotations (Existing-Object-Type
                (documentation "A collection of devices; a subset of #$PoweredDevice.  An instance of #$KineticEnergyPoweredDevice does not have an `on-board' energy source incorporated into it, at least not one supplying the bulk of the power requirements of the device.  Instead, its operating power is supplied by the kinetic energy from something else in motion -- such as animal muscle power (including human labor), wind energy, or hydraulic power.  Examples include elements of the collections #$Hammer and #$Piano-Acoustic. (Contrast with #$SelfPoweredDevice --- e.g., an electric organ is a #$SelfPoweredDevice, not a #$KineticEnergyPoweredDevice.)")))

(defconcept Cyc_Knowledge-Base
  :is-primitive (:and Conventional-Classification-System
                      Database--Abstract-Content)
  :annotations (Object-Type
                (documentation "A collection of intangible individuals;
a subset of #$Database-AbstractContent. Each element
of #$KnowledgeBase is a database that attempts to
represent the structure of at least part of the world.
Instances include #$Cyc and #$SENSUS-Information1997.")))

(defconcept Lake
  :is-primitive Body-Of-Water
  :annotations (Existing-Object-Type
                (documentation "A collection of topographical features.  Each instance of #$Lake is a land-locked body of water, typically but not necessarily of freshwater.  Examples: #$LakeMaracaibo, #$LakeWinnipeg, #$LakeTanganyika, #$LochNess-Lake, #$LakeErie, #$LakeTahoe.  Note that inland saltwater lakes, commonly referred to as `seas', belong to the collection #$InlandSea (rather than to #$Lake); e.g., #$CaspianSea, #$BlackSea, #$DeadSea.")))

(defconcept Land-Body
  :is-primitive Topographical-Feature
  :annotations (Existing-Object-Type
                (documentation "A collection of geographical regions.  Each element of #$LandBody is a cohesive chunk of land whose extent is principally defined by one or more bordering bodies of water (liquid or frozen).  Types of #$LandBody include the subsets #$Island and #$Continent.  Examples: #$Australia, #$ContinentOfNorthAmerica, #$Trinidad-Island, #$Crete-Island-Greece.  Areas of land defined by human occupation or political boundaries, e.g.,  #$NorthernCalifornia or #$NorthernIreland, are elements of #$GeographicalRegion, but not of #$LandBody.")))

(defconcept Land-Topographical-Feature
  :is-primitive (:and Outdoor-Location
                      Topographical-Feature
                      Solid-Tangible-Thing
                      Earth-Stuff)
  :annotations (Existing-Object-Type
                (documentation "A collection of geographical regions.  Each element of #$TopographicalFeature is a region of land distinguishable from surrounding regions by salient physical differences in surface texture, three-dimensional shape, or elevation.   For example, the #$ArabianPeninsula, #$ZionHill, the #$SanAndreasFault, the #$GreatSmokyMountains.")))

(defconcept Language
  :is-primitive (:and |(meaning-in-system-fn sensus--information-1997 LANGUAGE)|
                      |(meaning-in-system-fn sensus--information-1997 LANGUAGE-RELATED-OBJECT)|
                      Communication-Convention)
  :annotations (Object-Type
                (documentation "The collection of systems which use conventionalized signs or symbols. This includes dead languages, computer languages, unspoken languages, codes - anything which relates symbols to meaning.")))

(defconcept Law-Enforcement-Officer
  :is-primitive (:and Professional Public-Sector-Employee)
  :annotations (Occupation-Type
                (documentation "A collection of persons; a subset of #$Professional.  Each element of #$LawEnforcementOfficer is a person whose job is to prevent, detect, stop, and/or punish people committing illegal activities.  The collection #$LawEnforcementOfficer includes local, state, and special police (e.g., transit police), and federal agents (e.g., border patrol, national security agents).  An instance of #$LawEnforcementOfficer typically also belongs to one of the following collections: #$StateEmployee, #$LocalGovernmentEmployee, or #$NationalGovernmentEmployee (see #$PublicSectorEmployee).")))

(defconcept Law-Enforcement-Organization
  :is-primitive Legal-Government-Organization
  :annotations (Existing-Object-Type
                (documentation "The collection of all law enforcement organizations.  An element of #$LawEnforcementOrganization is any organization which is legally empowered to enforce laws.  This collection includes police forces, national bureaux of investigation, some forest services, park police, hunting and game commission officers, #$BorderPoliceOrganizations, governmental executive protection services, military police, etc.")))

(defconcept Layer
  :is-primitive Sheet-Of-Some-Stuff
  :annotations (Existing-Object-Type
                (documentation "The collection of all layers of things, each layer being a #$SheetOfSomeStuff that is #$sheetSurfaceConnected, or situated adjacent, surface-to-surface, to at least one surface or layer or region on one side, and possibly to other layers or surfaces on both sides.  A layer may be part of a larger object, or it may be an independent whole object such as a hide confined in a stack of hides.  A #$Layer is not a #$FreeSheet.  See the #$OneSidedVsTwoSidedObjectNote.")))

(defconcept Leader
  :is-primitive (:and Intelligent-Agent Person)
  :annotations (Position-Type
                (documentation "A collection of persons.  Each element of #$Leader is a person who heads an instance of #$Organization.  Typically, a leader of an organization makes major decisions on behalf of the whole organization, has the authority to direct the organization's personnel to carry out those decisions, and is empowered to engage or negotiate with external agents to achieve the organization's goals.  This collection includes leaders of #$subOrganizations, such as department heads within larger organizations.  Also, a single person may be a leader in more than one organization.  In addition, see #$hasLeaders, #$Manager, and #$seniorExecutives.")))

(defconcept Leap-Year
  :is-primitive Calendar-Year
  :annotations (Temporal-Object-Type
                (documentation "The collection of #$CalendarYears which are leap years; i.e., calendar years in which February has 29 days")))

(defconcept Learning
  :is-primitive (:and Composite-Physical-And-Mental-Event Purposeful-Action)
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "The collection of all events, brief or extended, in which an agent is consciously acquiring information or know-how.")))

(defconcept Leather
  :is-primitive (:and Sheet-Of-Some-Stuff Free-Sheet Solid-Tangible-Thing)
  :annotations (Product-Type
                Existing-Stuff-Type
                (documentation "A collection of tangible things.  Each element of #$Leather is a piece of tanned animal hide.  Pieces of #$Leather are commonly used as material inputs to the manufacture of shoes, gloves, upholstery, satchels and purses, saddles, etc.")))

(defconcept Left-Object
  :is-primitive Partially-Tangible
  :annotations (Existing-Object-Type
                (documentation "The collection of objects that are meant for, or are found on and distinctively structured for, the left side of some larger entity or ensemble of parts.  Examples include left hands, left shoes, left automobile turning signals.")))

(defconcept Leg
  :is-primitive Appendage--Animal-Body-Part
  :annotations (Symmetric-Anatomical-Part-Type
                (documentation "The collection of all #$Animal appendages used for locomotion overland, supporting the animal and moving it along by walking, running, etc.  Thus wings, fins, etc., are not #$Legs.  The #$Foot-AnimalBodyPart is considered part of the #$Leg")))

(defconcept Legal-Agent
  :is-primitive Social-Being
  :annotations (Existing-Object-Type
                (documentation "The collection of all legal agents; a subset of #$Agent.  A legal agent is one that has some legal status in a particular legal system.  At the very least, such an agent is recognized by some legal authority as having some kinds of rights and/or responsibilities as an agent (e.g., #$citizens of Germany), or as being subject to certain restrictions and penalties (e.g., a company that has been blacklisted by Iraq).  Thus, instances of #$LegalAgent include agents that may have property rights, may be taxed, may have a government identification number, may be sued, may have an address, etc. 
Note: membership in this collection is very much dependent upon context.  In some societies, only adult males and various kinds of state-run organizations would be included in #$LegalAgents.")))

(defconcept Legal-Agreement
  :is-primitive Agreement
  :annotations (Existing-Object-Type
                (documentation "A collection of microtheories; a subset of #$Agreement.  Each element of #$LegalAgreement is an agreement which has a legal status, i.e., is recognized as a valid agreement by a government.  #$LegalAgreement includes the elements in its subsets #$SalesContract, #$PublicHealthRegulations, #$AssumableLoan, #$Patent, #$InsurancePlan, #$Visa-Permit, and the different kinds of #$License -- among many others.")))

(defconcept Legal-Code
  :is-primitive Government-Coc
  :annotations (Microtheory-Type
                Existing-Object-Type
                (documentation "A collection of microtheories.  Each element of #$LegalCode is a microtheory for collecting all the instances of #$Law which hold in a given #$GeopoliticalEntity.  For example, #$LegalCode-ModernUnitedStates.")))

(defconcept Legal-Corporation
  :is-primitive (:and Legal-Agent Organization)
  :annotations (Existing-Object-Type
                (documentation "A collection of businesses.  An element of #$LegalCorporation is a private, legal, corporate entity with the legal rights to own property, manage itself, and sue or be sued.  It is established by a charter or registration granted by a government.  A corporation's owners have #$Stock in it and normally elect its #$BoardOfDirectors, but are usually not active in its operation nor liable for its debts, crimes, or torts.")))

(defconcept Legal-Government-Organization
  :is-primitive (:and Organization Legal-Agent)
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  An element of #$LegalGovernmentOrganization is an organization which is a part of, and funded by, the government of a geopolitical entity.  Examples include the #$InternalRevenueService, #$UnitedStatesNavy, and #$CityCouncilOfAustin (TX).  Some elements of #$LegalGovernmentOrganizations have legal standing in courts.")))

(defconcept Legal-Holiday
  :is-primitive Holiday
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "The subset of #$Holidays which are typically declared to be #$Holidays by the governments of western countries, and which are therefore days on which most people governed by that government do not work and on which students do not attend classes.  Such #$Holidays may coincide with #$ReligiousHolidays, especially where there is a government-sanctioned religion.")))

(defconcept Legal-Professional
  :is-primitive Professional
  :annotations (Occupation-Type
                (documentation "A collection of persons; a subset of #$Professional.  Each element of #$LegalProfessional is a person working in the field of law. This collection includes lawyers, judges, paralegals, and law clerks.")))

(defconcept Level-Of-A-Construction
  :is-primitive Space-In-A-Hoc
  :annotations (Existing-Object-Type
                (documentation "The levels, also called floors or storeys, of a #$ConstructionArtifact.  Levels are regions in space; they are not two-dimensional planes.")))

(defconcept Level-Of-Discomfort
  :is-primitive (:and Internal-Sensory-Attribute Animal-Physiological-Attribute)
  :annotations (Sensory-Reaction-Type
                (documentation "An #$AttributeType whose elements represent the various levels of discomfort that may be felt by a perceptual agent.  Typically, the agent must be a living entity.  Typically, the sensation is an internal feeling, and is more of a long-lasting dull ache than a sharp pain (see: #$LevelOfPain).")))

(defconcept Level-Of-Exhaustion
  :is-primitive (:and Animal-Physiological-Attribute Internal-Sensory-Attribute)
  :annotations (Physical-Urge-Type
                (documentation "An #$AttributeType whose elements represent the qualitative degrees of exhaustion that an animal may feel.
Note that this predicate is NOT properly used for any other purpose (e.g., to describe metal fatigue, or the depletion of natural resources, or the gradual inhibition that a single cell devlops to repeated stimuli, etc., even though in English the words `exhaustion' and `fatigue' have those meanings.)  This is a good example of how Cyc's internal representation must, and does, disambiguate different concepts even though they might be metaphors for each other, and even though those distinct meanings might be mixed together at a word level in a natural language like English.")))

(defconcept Level-Of-Hunger
  :is-primitive (:and Scalar-Interval
                      Animal-Physiological-Attribute
                      Internal-Sensory-Attribute)
  :annotations (Physical-Urge-Type
                (documentation "A collection of #$AnimalPhysiologicalAttributes that express how hungry an #$Animal is (e.g., #$Hungry, #$NotHungry, #$Starving).  These #$LevelOfHunger attributes are the first argument to the predicate #$hungerLevelOf (q.v.).")))

(defconcept Level-Of-Pain
  :is-primitive Level-Of-Discomfort
  :annotations (Sensory-Reaction-Type
                (documentation "An #$AttributeType whose elements represent the qualitative levels of pain that may be felt by a perceptual agent.  Although the agent is often a living entity, this is not required.  The source of the pain could be either external or internal; in either case, the subjective feeling is generally `sharper' and hopefully shorter-lived than just `a feeling of discomfort' (see: #$LevelOfDiscomfort.)")))

(defconcept Level-Of-Relaxation-Feeling
  :is-primitive Internal-Sensory-Attribute
  :annotations (Sensory-Reaction-Type
                (documentation "An #$AttributeType whose elements represent the qualitative levels of comfort/relaxation/ease that an animal may have.  This feeling is generally internal, and relatively long-lasting (compared with, e.g., the duration of a painful twinge.)  Any positive degree of this #$LevelOfRelaxationFeeling is incompatible with a high level of #$MuscleTenseness, a high #$LevelOfPain, or a high #$LevelOfDiscomfort.")))

(defconcept Lexical-Item
  :is-primitive Linguistic-Object
  :annotations (Linguistic-Object-Type
                (documentation "The collection of items which form the lexicon of a language. These include both free morphemes, like 'dog', and bound morphemes, like affixes.")))

(defconcept Lexical-Word
  :is-primitive (:and Linguistic-Object Lexical-Item)
  :annotations (Linguistic-Object-Type
                (documentation "The collection of all words. A lexical word is a free morpheme; it need not be bound to another lexical item.  Note that inflectional forms of a word, if there are such, do not constitute distinct words.  Examples of #$LexicalWord: #$Aluminum-TheWord, #$Confetti-TheWord, #$To-TheWord, #$Confetti-TheWord, #$Hang-Glide-MWW.")))

(defconcept Life-Threatening-Condition
  :is-primitive Physiological-Condition
  :annotations (Physiological-Condition-Type
                (documentation "A collection of ailments which are distinguished by the shared characteristic that if left untreated, those ailments may cause an organism to die (but will not certainly do so).  Cases of #$Poisoning and of #$Pneumonia are often instances of #$LifeThreateningCondition.  Cf. #$TerminalPhysiologicalCondition.  ")))

(defconcept Lighting-Device
  :is-primitive (:and Physical-Device Powered-Device)
  :annotations (Existing-Object-Type
                (documentation "A collection of physical devices.  An instance of #$LightingDevice has the #$primaryFunction of providing light.  The light provided may be provided in different ways and for different specialized purposes.  For example, it may be for general illumination of a fixed area (as by instances of #$Candle, #$Lantern, #$ElectricLamp, and #$Streetlight); or it may be for specially directed illumination (as by instances of #$AutomotiveLight and #$Flashlight); or it may be for use in a signal or sign (as by instances of #$TrafficLight and #$IndicatorLight); or it may be for some other special purposes (as by instances of StrobeLight).")))

(defconcept Light-Intensity
  :is-primitive (:and Scalar-Interval Sensory-Attribute Physical-Attribute)
  :annotations (Primitive-Attribute-Type
                (documentation "A collection of attributes; a subset of #$ScalarInterval.  Each element of #$LightIntensity is a characterization of how brightly illuminated a location is.  (At the low extreme is total darkness.)  The light intensity of a location is indicated with the predicate #$illuminationLevel.")))

(defconcept Lightning-Event
  :is-primitive Immediate-Weather-Process
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of lightning flashes, events in which the atmosphere discharges electricity.")))

(defconcept Line
  :is-primitive Geometric-Thing
  :annotations (Object-Type
                (documentation "A collection of geometical things.  Each instance of #$Line is a one-dimensional path through two- or three-dimensional space, whether curved or straight.  Formally, this is a 1-manifold.")))

(defconcept Linguistic-Object
  :is-primitive (:and Abstract-Information
                      Mental-Object
                      |(meaning-in-system-fn sensus--information-1997 LANGUAGE-RELATED-OBJECT)|)
  :annotations (Linguistic-Object-Type
                (documentation "The collection of intangible objects which are parts of language systems.  Subsets of #$LinguisticObject include #$LinguisticObject, #$Title, #$WordSense, #$SententialConstituent, #$NonlexicalLinguisticObject, #$LinguisticAttribute, etc.)")))

(defconcept Linguistic-Object-Type
  :is-primitive Object-Type
  :annotations (Cyc_Collection
                (documentation "#$LinguisticObjectType is the collection of things which are subsets of #$LinguisticObject.")))

(defconcept Liquid-Asset
  :is-primitive Something-Existing
  :annotations (Existing-Object-Type
                (documentation "A collection of objects.  Each element of #$LiquidAsset is either an instance of #$Currency or some asset that is readily convertible to currency by selling or borrowing againstit.  Examples: stocks, bonds, money market accounts.")))

(defconcept Liquid-Tangible-Thing
  :is-primitive Fluid-Tangible-Thing
  :annotations (Tangible-Stuff-State-Type
                (documentation "A collection of tangible stuff.  Each element of #$LiquidTangibleThing is a tangible thing which is in a #$LiquidStateOfMatter; i.e., its shape would conform to the bottom of a vessel containing it.  Cf. #$FluidTangibleThing and #$GaseousTangibleThing.")))

(defconcept List--Sequence
  :is-primitive Tuple
  :annotations (Object-Type
                (documentation "The collection of all lists or finite sequences of items, as an abstract notion.  A #$List-Sequence is a special kind of #$Tuple that is a finite structure with a first and last member-position, and for each member-postion but the last, there is a succesor member-position.   A #$List-Sequence, like other #$Tuples, allows repetition of its members -- the same item can appear at multiple member-positions in the list.  A list can be viewed formally as a function from a finite index set of counting numbers, beginning with one or zero, into the domain of #$Things or perhaps some more restrictive domain.  Unlike #$Series, #$List-Sequence is purely abstract and the only implied relation between an item and its successor is the successor relation of the list itself.  #$List-Sequence is, technically, more specific than #$Tuple only in that the index set must be the counting numbers in their usual order rather than some other index set.")))

(defconcept Listening-Deliberately
  :is-primitive (:and Accessing-An-Ibt Hearing)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of events in which an #$Agent deliberately facilitates and does #$Hearing.")))

(defconcept List-Without-Repetition
  :is-primitive (:and List--Sequence Totally-Ordered-Set)
  :annotations (Stuff-Type
                (documentation "The collection of all those #$List-Sequences, for each of which, no element appears more than once in the list.  (In general a #$List-Sequence and #$Series may have repeated elements.)  See also #$SeriesWithoutRepetition.")))

(defconcept Liver
  :is-primitive Organ
  :annotations (Animal-Body-Part-Type
                Unique-Anatomical-Part-Type
                (documentation "The collection of all living #$Animal livers.  Each instance of #$Liver is a large compound #$InternalOrgan.  A #$Liver breaks down dead #$RedBloodCells, removes certain poisons and waste material from the blood stream, creates glycogen from sugars and proteins, stores glycogen, removes certain chemicals from the blood, secretes bile (#$BileTheSecretion) which is used for digestion,and regulates metabolism of carbohydrates, #$Proteins, #$Vitamins, #$Minerals, and fats.")))

(defconcept Living-Language
  :is-primitive Natural-Language
  :annotations (Object-Type
                (documentation "#$LivingLanguage, a subset of #$NaturalLanguage, is the collection of all natural languages which have some native speaker(s).")))

(defconcept Local-Customer-Contact-Point
  :is-primitive (:and Local-Organization Single-Site-Organization)
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  Each element of #$LocalCustomerContactPoint is a single-site organization serving customers in a local area, working from a particular store, office, or other physical quarters where customers (or their agents) go in person to speak with company representatives about the services or products offered.  Elements of #$LocalCustomerContactPoint may be either stand-alone organizations or sub-organization of a larger company.  Examples of #$LocalCustomerContactPoint include #$NewYorkHospital, #$Threadgills restaurant, the Bank of America office on Jollyville Road, #$StudtmanPhoto studios, the Village Cinema on Anderson Lane.")))

(defconcept Local-Government-Organization
  :is-primitive (:and Local-Organization Legal-Government-Organization)
  :annotations (Existing-Object-Type
                (documentation "A collection of government organizations; a subset of #$LocalOrganization.  An element of #$LocalGovernmentOrganization is any government organization -- whether federal, state, county, or municipal -- that is specific to, i.e., has jurisdiction and/or services generally limited to, one (local) location.  For example, a Board of Education of a particular school district is a #$LocalGovernmentOrganization, because its authority extends to schools in a limited (local) area; in the U.S., such a Board answers to another #$LocalGovernmentOrganization, typically a city or township government.  In another example, an element of #$VeteransAdministrationMedicalCenter is a local organization in terms of its service area, but bureaucratically it belongs to the U.S. Federal government; thus, #$VeteransAdministrationMedicalCenter is a subset of both #$LocalGovernmentOrganization and #$USFederalGovernmentOrganization.")))

(defconcept Local-Organization
  :is-primitive Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  An element of #$LocalOrganization is an organization having local `scope' -- that is, members distributed in a local area (a #$Neighborhood, #$City, rural region, etc.) or having a local area of activity and concern, as opposed to statewide, national, or international organizations.")))

(defconcept Locomotion-Event
  :is-primitive (:and Translation--Complete
                      Translation--Single-Path
                      Animal-Activity)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events; a subset of #$Movement-TranslationEvent.  In an instance of #$LocomotionEvent, the #$objectMoving (at least the object that is playing the role of #$doneBy in the event) moves along some pathway under its own power (i.e. plays the role of #$providerOfMotiveForce).  In addition to episodes of walking and swimming, #$LocomotionEvent includes events in which an agent moves itself using a device, with that agent supplying the motive force to the device -- as in instances of #$PedalingABicycle, #$IceSkating, #$InLineSkating, etc.  Since the locomotor virtually always supplies the vast majority of the force required to make the motion happen, it is safe to infer that IF something plays the role of #$providerOfMotiveForce, THEN it is an #$objectMoving.  In certain abnormal situations this rule will make the wrong conclusions: e.g. if a mountain climber's assent is aided by another stationary person above.  Some locomotion events are also transportation events, e.g. when someone is walking while carrying something else.
Note: Elements of #$LocomotionEvent may be `non-homogeneous' (by contrast, each #$LocomotionProcess is `homogeneous.')  That is, if you take #$timeSlices of a #$LocomotionEvent, they may or may not be #$LocomotionEvents.  E.g., even though a mountain-climbing event is a #$LocomotionEvent, if you take a time-slice of it  -- even a quite long time-slice of it! -- that whole time-slice could be where you were tying your climbing rope to a piton you'd just pounded into the mountainside, and that tying event is not a #$LocomotionEvent.  Note that this is not quite the same thing as the granularity of a process, such as #$AnimalWalkingProcess, where if you take a fine enough time-slice you are just lifting your leg up into the air.  In the case of a #$LocomotionEvent such as scaling a sheer rock wall, very little of the time actually involves the motion of your body up the wall. ")))

(defconcept Locomotion-Process
  :is-primitive (:and Locomotion-Event Movement--Translation-Process)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of processes in which an animal moves from one place to another by its own power.  A #$LocomotionProcess is an activity considered as a #$TemporalStuffType, in which any time-slice of the activity can also be considered an instance of that activity.  Subsets of #$LocomotionProcess include: #$AnimalWalkingProcess, #$Brachiating, #$Climbing, #$WheelchairLocomotionEvent, #$Boring-Locomotion, etc.")))

(defconcept Logical-Connective
  :is-primitive Relationship
  :annotations (Relation-Type
                (documentation "A collection of mathematical objects, including the basic logical connectives.  Each element of #$LogicalConnective is a Cyc predicate which takes one or more truth-valued expressions as arguments and returns a truth-valued argument.  The elements of #$LogicalConnective include #$and, #$or, #$not, and #$implies.")))

(defconcept Loneliness
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "The disagreeable feeling of being without company.  This is a collection; for an explanation of a typical #$FeelingAttributeType, see #$Happiness.  Some more specialized #$FeelingAttributeTypes are #$Loneliness, #$Solitude, etc.")))

(defconcept Looking-For-Something
  :is-primitive Purposeful-Action
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "Searching for something with the intent to find it.  Instances of failure to find the object of the search are still instances of #$LookingForSomething.")))

(defconcept Losing-User-Rights
  :is-primitive (:and Change-In-User-Rights Transfer-Out)
  :annotations (Temporal-Object-Type
                (documentation "A collection of events.  In an instance of #$LosingUserRights, some #$Agent loses possession of something.  Thus, in such an event, that agent loses a previously held right (viz., some #$UserRightsAttribute) to use some item.  The item in question is identified as the #$objectOfPossessionTransfer, and the agent is the #$fromPossessor (i.e., the one from whom possession is taken).  The #$Agent may or may not be a #$deliberateActors in the event; e.g., selling one's car is done on purpose, but having one's car repossessed probably isn't.  If either of those two events happen to you, though, it is an element of the collection #$LosingUserRights.")))

(defconcept Love
  :is-primitive Affection
  :annotations (Feeling-Attribute-Type
                (documentation "Strong affection for another agent arising out of kinship or personal ties.  Love may be felt towards things, too: warm attachment, enthusiasm, or devotion.  This does not, however, mean something as specialized/metaphorical as `Fred loves to eat ice cream' or `Ethel loves to get her way.'  #$Love is a collection, as further explained under #$Happiness.  Specialized forms of #$Love are #$Love-Romantic, platonic love, maternal love, infatuation, agape, etc.")))

(defconcept Lung
  :is-primitive Organ
  :annotations (Symmetric-Anatomical-Part-Type
                (documentation "The collection of all lungs, the primary respiratory organs of #$AirBreathingVertebrates.")))

(defconcept Mailing-Location
  :is-primitive Contact-Location
  :annotations (Contact-Location-Type
                Conventional-Classification-Type
                (documentation "A collection of places; a subset of #$ContactLocation.  Each element of #$MailingLocation is a location at which an agent can be contacted by mail, e.g., a home, office, or post office box.")))

(defconcept Making-A-Gesture
  :is-primitive (:and Visual-Information-Conveying-Act
                      Ibt-Generation--Original
                      Voluntary-Body-Movement)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of acts of #$IBOCreation
done by an #$Animal (including #$Person) arranging its limbs or other
body parts (and whatever objects the limbs might be holding) in some
meaningful configuration (static or dynamic).  Vocal #$IBTGenerations
are not considered to be gestures (see #$MakingAnOralSound for this),
but they might be done in conjunction with gestures.
NB:  #$MakingAGesture is NOT a subset of #$NonVerbalCommunicating;
at most, an instance of #$MakingAGesture is only half of a communication event.
And someone can make a gesture while alone, without using it for
communication. Thus, only some gestures are #$subEvents of
#$NonVerbalCommunicating. (But note that #$MakingAGesture IS a subset
of #$IBTGeneration-Original (q.v.), since every gesture encodes
information, whether or not it is used for communication in a
particular instance.)")))

(defconcept Making-An-Agreement
  :is-primitive (:and Communicating Social-Occurrence Creation-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each element in the collection #$MakingAnAgreement is an event in which two or more parties specify the terms of an #$Agreement to which they will be #$agreeingAgents, and enter into it.  Some types of #$MakingAnAgreement include its subsets #$GettingEngaged, #$EmployeeHiring, #$DeclaringCeaseFire, and #$MakingAReservation.")))

(defconcept Making-An-Oral-Sound
  :is-primitive (:and Single-Doer-Action Emitting-Sound Body-Movement-Event)
  :annotations (Default-Disjoint-Script-Type
                (documentation "The collection of actions in which the lips and other mouth parts are
used to make sound. MakingAnOralSound means the event in which sound
is produced more-or-less voluntarily, using the mouth, mouth portal,
lips, and tongue.")))

(defconcept Making-Facial-Expression
  :is-primitive (:and Body-Movement-Event Action)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of events during which the configuration of an agent's face changes.  This is usually associated with the expression of some emotion.")))

(defconcept Making-Something
  :is-primitive (:and Creation-Event Purposeful-Action)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of (very generic) events.  In each #$MakingSomething event, something (tangible) is made from some raw materials. The end result may or may not be what is called a #$Product.")))

(defconcept Making-Something-Available
  :is-primitive Human-Activity
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of all activities in which an #$Agent makes it possible for another #$Agent to use (but not necessarily own) a good or service.")))

(defconcept Making-Travel-Arrangements
  :is-primitive Purposeful-Action
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of all events in which an agent arranges for some kind of travel event.")))

(defconcept Male-Animal
  :is-primitive Animal
  :annotations (Existing-Object-Type
                (documentation "The collection of all male animals.")))

(defconcept Male-Person
  :is-primitive (:and Person Male-Animal)
  :annotations (Existing-Object-Type
                (documentation "The collection of all male persons.")))

(defconcept Malleability
  :is-primitive (:and Scalar-Interval Physical-Attribute)
  :annotations (Material-Strength-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute.  Each element of #$Malleability represents a specific capacity of a physical material to be shaped or formed.  Different degrees of malleability may be designated using a #$GenericValueFunction.  Malleability of objects is indicated with the predicate #$malleabilityOfObject.")))

(defconcept Malnutrition
  :is-primitive Ailment-Condition
  :annotations (Physiological-Condition-Type
                (documentation "A collection of physiological conditions caused by the lack of
essential #$Nutrients (usually vitamins, minerals or proteins).
Specialized forms of #$Malnutrition are: (1)
#$DietaryDeficiencyCondition, in which the necessary nutrients are
not ingested; and (2) #$Malnutrition-Secondary, in which the necessary
nutrients are not properly metabolized.")))

(defconcept Mammal
  :is-primitive Vertebrate
  :annotations (Biological-Class
                (documentation "The collection of mammals; a subset of #$Vertebrate.  Each element of #$Mammal is an air-breathing, warm-blooded animal which, if female, nurses its young with milk secreted by mammary glands.  The collection #$Mammal includes the subsets #$Dog, #$Horse, #$Person, #$Elephant, etc.  The skin of mammals is typically covered with hair (or sometimes hair modified into scales or plates (e.g. pangolins)), but some types are almost hairless.  All mammals other than the Monotremes of Australia bear live young rather than laying eggs and have teats, which on females are used for nursing the young.  Monotremes do not have teats, but both male and female produce milk from #$MammaryGlands.   #$Mammal is an instance of #$BiologicalClass.")))

(defconcept Manager
  :is-primitive Desk-Worker
  :annotations (Occupation-Type
                (documentation "A collection of people.  An instance of #$Manager is a person whose primary job is to manage other people, directing their work activity in an #$Organization or for a #$Project.  A #$Manager tells his or her subordinate workers what to do.")))

(defconcept Manufacturing
  :is-primitive Making-Something
  :annotations (Default-Disjoint-Script-Type
                (documentation "A collection of events.  In each #$Manufacturing event, raw materials or component parts are combined to produce a product.  In a typical #$Manufacturing process, the motivation of the manufacturer is that the value of the #$outputs should exceed the value of the #$inputs.  #$Manufacturing does not include related or supportive processes such as transporting the raw materials to the manufacturing site, scheduling done ahead of time, etc. -- the concept #$ProductionEvent covers that bigger picture.")))

(defconcept Manufacturing-Organization
  :is-primitive (:and Commercial-Organization Organization)
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  An element of #$ManufacturingOrganization is any organization whose #$MainFunction is #$Manufacturing or production of goods.  These may be departments, suborganizations, companies, or conglomerate enterprises.")))

(defconcept Map
  :is-primitive (:and Information-Bearing-Thing Structured-Information-Source)
  :annotations (Object-Type
                Temporal-Stuff-Type
                (documentation "A collection of information bearing things (IBTs).  Each element of #$Map is an IBT which, properly interpreted, models a region of physical space many times its own size by using graphical symbols (or possibly another code), often in conjunction with a natural language, to represent features of one or more of the following kinds: geographical areas (#$GeographicalRegion), topographical features (#$TopographicalFeature), political regions (#$GeopoliticalEntity), climate zones (#$ClimateCycleType), human artifacts (#$ConstructionArtifact), population densities (#$populationDensity), etc.  Maps are generally intended to help an agent to orient itself in space or to understand some aspect(s) of a large spatial area.  The collection #$Map includes terrestrial and celestial maps, either on paper, in computerized geographical information systems, or in other forms.")))

(defconcept March
  :is-primitive Calendar-Month
  :annotations (Month-Of-Year-Type))

(defconcept Marine-Corps
  :is-primitive Military-Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of military organizations.  An instance of #$MarineCorps is a military organization, modern or historical, composed mainly of soldiers (i.e., combat personnel) who serve on ships or in conjunction with naval forces, with the purpose of defending or attacking coastal areas.")))

(defconcept Marine-Personnel
  :is-primitive Military-Person
  :annotations (Occupation-Type
                (documentation "A soldier who is in the Marines.")))

(defconcept Marital-Status-Of-People
  :is-primitive Attribute-Value
  :annotations (Unordered-Attribute-Type
                Sibling-Disjoint-Attribute-Type
                (documentation "The attribute values indicating the #$maritalStatus of a #$Person.  Members of this collection include #$Divorced, #$Widowed, #$Single, and #$Married.")))

(defconcept Marking-On-A-Surface
  :is-primitive (:and Handling-An-Object Ibo-Creation)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events.  In a #$MarkingOnASurface event, visible markings are placed on a surface by an #$Agent.  The marking may be done by adding material to or removing material from the surface; e.g., by painting or by engraving the surface.")))

(defconcept Mass
  :is-primitive (:and Physical-Attribute Scalar-Interval)
  :annotations (Fundamental-Numeric-Attribute-Type
                (documentation "A collection of physical attributes.  Each element of #$Mass is an amount of matter present in a given object.  Elements of #$Mass may be either a fixed interval, such as two pounds, or a range, such as a legal load for a certain type of trailer.  The more mass an object has, the greater is the force required to accelerate it.  See #$UnitOfMass for the units used by Cyc to measure mass.")))

(defconcept Mass-Noun
  :is-primitive Speech-Part
  :annotations (Linguistic-Object-Type
                (documentation "The collection of all mass nouns.  Mass nouns are syntactically singular, and often they denote stufflike things. Example: 'water'.")))

(defconcept Material-Strength-Type
  :is-primitive Derived-Numeric-Attribute-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$MaterialStrengthType is a specific collection of attributes used in determining the strength of a material.  Examples: #$Hardness, #$Malleability, #$Ductility, #$Elasticity, #$ShearStrength.")))

(defconcept Mathematical-Object
  :is-primitive (:and Mathematical-Or-Computational-Thing Intangible-Individual)
  :annotations (Object-Type
                (documentation "A collection of intangible objects; a subset of #$MathematicalThing.  Each element of #$MathematicalObject is a purely abstract mathematical thing which is an individual (see #$Individual).  Examples of #$MathematicalObject include: #$Quantifiers, #$RealNumbers, #$Triangles, #$TruthValues, etc.  But instances of #$SetOrCollection are not #$MathematicalObjects in Cyc, because they are not #$Individuals.")))

(defconcept Mathematical-Or-Computational-Thing
  :is-primitive Intangible
  :annotations (Object-Type
                (documentation "A collection of abstract (#$Intangible) objects.  Each element of #$MathematicalOrComputationalThing is a massless, timeless abstraction, such as an algorithm, logical connective, character string, assertion, integer, etc.")))

(defconcept May
  :is-primitive Calendar-Month
  :annotations (Month-Of-Year-Type))

(defconcept Measurable-Attribute-Type
  :is-primitive Primitive-Attribute-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$MeasurableAttributeType is a collection of attributes, the members of which are quantifiable attributes, i.e., they can be assigned a numeric value.  For example, #$RateOfRotation and #$ConcentrationPerVolume.  For the units in which specific attributes are measured, see #$measuredIn, #$unitsMeasuringThisQuantity, #$standardUnitMeasuring.  Note that in Cyc, numbers are classified as measurable attributes; see #$RealNumber, etc.")))

(defconcept Measuring-Device
  :is-primitive Physical-Device
  :annotations (Existing-Object-Type
                (documentation "A collection of physical devices.  An instance of #$MeasuringDevice is a device used for measuring some quantity such as #$Distance, #$Volume, #$Temperature, etc.  Examples include the odometer in your car (an #$Odometer), the graduated glass measuring cup in your kitchen (a #$MeasuringCup), and the thermostat on your wall (a #$TemperatureMeasuringDevice, although it is also a #$ControlDevice.)")))

(defconcept Measuring-Something
  :is-primitive (:and Thinking Purposeful-Action)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each element of #$MeasuringSomething is an event in which an agent uses a physical device to measure some physical attribute of a tangible object.  The last part of such an event involves the perception (and perhaps recording) of a #$measurementResult by some instance of#$PerceptualAgent.  See also #$MeasurementFn.")))

(defconcept Mechanical-Device
  :is-primitive (:and Physical-Device Solid-Tangible-Thing)
  :annotations (Existing-Object-Type
                (documentation "A collection of physical devices.  An instance of #$MechanicalDevice is a physical device which has one part that moves with respect to another of its parts.  Thus a spoon is not one of these, but a pair of scissors is, as are more complex devices such as vacuum cleaners and the #$SpaceShuttleChallenger.")))

(defconcept Medical-Care-Event
  :is-primitive (:and Service-Event Human-Activity Action-On-Object)
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "A collection of events.  When any medical care professional provides a medical service to patients, that is an instance of #$MedicalCareEvent.  An instance of #$MedicalCareEvent may be a diagnostic procedure, a treatment, a consultation, routine check-up, a medical test, etc. -- anything a medical care provider can bill for.  E.g., (#$BirthFn #$NicoleLenat) represents the birth of a particular person; since she were born in a modern Western hospital, doctors, nurses, and a variety of hospital equipment were present and used, so this is a #$MedicalCareEvent. ")))

(defconcept Medical-Care-Institution
  :is-primitive Medical-Care-Organization
  :annotations (Existing-Object-Type
                (documentation "Large organizations that provide medical or psychiatric care and have facilities for patients to stay at least overnight.")))

(defconcept Medical-Care-Organization
  :is-primitive (:and Medical-Care-Provider Service-Organization)
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations; a subset of both #$MedicalCareProvider and #$ServiceOrganization.  An element of #$MedicalCareOrganization is any organization that provides some kind of medical care; it may be a sub-organization of a larger organization.  Examples include all instances of #$DoctorsOffice, #$DentistsOffice, #$OptometricFacility, or #$RehabilitationFacility; #$IndependentPracticeAssociation or #$Hospital; #$EmergencyRoom, #$DialysisUnit, #$AllergyTestingFacility; #$HomeNursingServiceOrganization or #$LongTermMedicalCareFacility; and #$VeterinaryHospital.")))

(defconcept Medical-Care-Professional
  :is-primitive (:and Health-Professional Medical-Care-Provider)
  :annotations (Occupation-Type
                (documentation "A collection of persons; a subset of #$Professional.  Each element of #$MedicalCareProfessional is a person whose occupation principally involves medical care of patients, including surgery, psychological care, physical therapy, practical nursing, and dispensing drugs.  The collection #$MedicalCareProfessional includes members of the subsets #$Psychiatrist, #$Pharmacist, #$EmergencyMedicalTechnician, #$Nurse, #$Doctor-Medical, etc., as well as #$Veterinarian.")))

(defconcept Medical-Care-Provider
  :is-primitive Social-Being
  :annotations (Existing-Object-Type
                (documentation "The collection of agents who provide medical care in a professional capacity.")))

(defconcept Medical-Facility-Type
  :is-primitive Existing-Object-Type
  :annotations (Cyc_Collection
                (documentation "Instances are kinds of medical care facilities.  Some may be organizations , some may be places and some are equipment.")))

(defconcept Medical-Patient
  :is-primitive Animal
  :annotations (Existing-Object-Type
                (documentation "One who is undergoing medical care - which includes routine examinations as well as treatment for injuries or illnesses.")))

(defconcept Medical-Specialty-Type
  :is-primitive Occupation-Type
  :annotations (Cyc_Collection
                (documentation "The collection of all medical worker types, divided up by specialty.")))

(defconcept Medical-Testing
  :is-primitive (:and Thinking Medical-Care-Event)
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "A collection of events in which some aspect of a patient's physiological condition is evaluated using medical procedures.  An instance of #$MedicalTesting is a test done on a patient -- or, often, on a sample taken from the patient's body -- in order to gather information (a) about the patient's general state of health, (b) to help in making a diagnosis, (c) to determine or monitor the severity of a known condition of the patient's.  The collection #$MedicalTesting includes an enormous variety of procedures in modern Western medicine, from simple blood tests to complex MRIs.")))

(defconcept Medical-Treatment-Event
  :is-primitive (:and Medical-Care-Event Simple-Repairing)
  :annotations (Temporal-Object-Type
                Default-Disjoint-Script-Type
                (documentation "A collection of medical care events; i.e., a subset of #$MedicalCareEvent.  In any instance of #$MedicalTreatmentEvent, the procedures performed by a medical professional are done to alleviate or ameliorate an #$AilmentCondition.  The set of treatments for a specific ailment may be denoted using #$TreatmentFn (q.v.).")))

(defconcept Meeting-Someone
  :is-primitive Social-Occurrence
  :annotations (Script-Type
                (documentation "A collection of actions.  In a #$MeetingSomeone event, one #$Agent is moving and meets (comes into close proximity with) another #$Agent.  This may or may not be purposeful.  It may be performed by non-human animals, and occasionally by other sorts of #$Agents.
Note: this does not mean `being introduced to someone', but rather `going to meet with someone'.")))

(defconcept Meeting-Taking-Place
  :is-primitive Social-Gathering
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of human meeting events, in which #$Persons gather intentionally at a location in order to communicate or share some experience; business is often transacted at such a meeting.  Examples include: a particular conference, a business lunch, etc.")))

(defconcept Melting
  :is-primitive (:and Physical-State-Change-Event Making-Something)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events.  In each instance of this collection, an object is heated to (and then above) its #$freezingPoint and is thereby changed from a #$SolidStateOfMatter to a #$LiquidStateOfMatter.")))

(defconcept Memory
  :is-primitive Mental-Information
  :annotations (Stuff-Type
                (documentation "A collection of mental information.  Each element of #$Memory is the propositional content of a mental state in which a person recalls past events.  Most commonly those memories concern first-person experiences, but they may include recollections of anything that the person has learned in the past.")))

(defconcept Mens-Clothing
  :is-primitive (:and Something-To-Wear Sheet-Of-Some-Stuff)
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A collection of objects.  Each element of #$MensClothing is a clothing item worn usually by men, i.e., items normally found in the men's section of department stores.  Subsets include #$Tuxedos and #$MensJockeyUnderwear.")))

(defconcept Mental-Activity
  :is-primitive (:and Mental-Event Animal-Activity)
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "The collection of all actions which involve some mental activity on the part of at least one doer (see #$doneBy).  Consciously carrying out some activity, solving a math problem, engaging in a conversation, are all examples of #$MentalActivity.")))

(defconcept Mental-Attribute
  :is-primitive Attribute-Value
  :annotations (Attribute-Type
                (documentation "A collection of attributes.  Each element of #$MentalAttribute is an attribute which pertains to an agent's mental state or mental ability.  Examples: #$HighIntelligence, #$LegallyDrunk, #$VisualAwareness, #$InattentiveMentalActivityLevel.")))

(defconcept Mental-Event
  :is-primitive Event
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "A collection of events. Each event belonging to #$MentalEvent has some actor whose mental functions are involved (see #$actors). Mental events include such things as theorizing about something, dreaming, perceiving, sensing, having a realization, designing something, making a decision, and consciously carrying out a task.  Some of those examples are actions as well as events (see #$doneBy).  For mental events that are also instances of #$Action, see the subset #$MentalActivity.")))

(defconcept Mental-Information
  :is-primitive (:and Propositional-Information-Thing
                      Mental-Object
                      Abstract-Information)
  :annotations (Stuff-Type
                (documentation "A collection of information.  Each element of #$MentalInformation is the propositional content of a specific mental state of an individual person. Thus, this is information which is embodied in a person having a memory or sensory perception or other type of thought.  Note that elements of #$MentalInformation are the propositional content of memories, perceptions, judgments, etc.  For example, when I remember that my grandmother's eyes are blue, the mental information contained therein is `my [the rememberer's] grandmother's eyes are blue'; it is NOT `I remember that my grandmother's eyes are blue'.  As a consequence, mental information (as defined in Cyc) is not incorrigible.")))

(defconcept Mental-Object
  :is-primitive Intangible-Individual
  :annotations (Object-Type
                Stuff-Type
                (documentation "Each element of #$MentalObject is an intangible object intimately connected in some fashion with mental activity.  This includes objects such as thoughts, emotions, knowledge; events such as thinking and reasoning; and intangible time-like objects such as mental-processing-time and cpu-time.")))

(defconcept Meta-Knowledge-Predicate
  :is-primitive (:and Predicate Modal-Relationship)
  :annotations (Predicate-Category
                (documentation "A collection of predicates.  Each element of #$MetaKnowledgePredicate is a predicate used in assertions about the Cyc ontology itself.  Examples: #$myCreator, #$cyclistNotes, #$sharedNotes, #$salientAssertions, #$axiomConclusionActionType.")))

(defconcept Metal
  :is-primitive (:and Tangible-Thing Inanimate-Thing)
  :annotations (Tangible-Stuff-Composition-Type
                (documentation "A collection of tangible stuffs.  Every instance of #$Metal is a piece of stuff defined as a metal only by its chemical composition, not by its physical properties.  Thus, #$Metal includes all instances of #$Mercury and #$Potassium as well as all pieces of #$Brass, #$Lead, #$Iron.  Cyc infers only by default that metals are solid.  #$MetalAlloy is a subset of #$Metal.")))

(defconcept Metal-Alloy
  :is-primitive (:and Metal Artificial-Material Mixture)
  :annotations (Tangible-Stuff-Composition-Type
                (documentation "A collection of tangible stuffs; a subset of #$Metal.  Each instance of #$MetalAlloy is a metallic stuff which is a homogeneous blend of at least one part of #$UnalloyedMetal with at least one other substance.  #$MetalAlloy is not a subset of #$Mixture, because each instance of #$MetalAlloy is defined not only by the amounts and kinds of its #$constituents, but also (unlike a mixture) by the internal structures formed during its creation.  Furthermore, the creation process is typically more complex than #$Mixing.  Common metal alloys include the instances of #$Bronze, #$Brass, and #$Steel.  Note that #$GalvanizedMetal is NOT a subset of #$MetalAlloy, because every instance of #$GalvanizedMetal has a coating of some #$Zinc on its surface, and thus (unlike an alloy) the components of galvanized metals are not homogenously distributed throughout.")))

(defconcept Meta-Predicate
  :is-primitive Meta-Relation
  :annotations (Predicate-Category
                (documentation "A collection of predicates. Each element of #$MetaPredicate can be used to define other predicates.")))

(defconcept Meta-Relation
  :is-primitive Relationship
  :annotations (Relation-Type
                (documentation "A collection of relations. Each element of #$MetaRelation can be used to define other relations.")))

(defconcept Microscopic-Scale-Object
  :is-primitive Tangible-Thing
  :annotations (Existing-Object-Type
                (documentation "A collection of objects.  Every instance of #$MicroscopicScaleObject is a material object which is so small that human beings cannot perceive it, except (perhaps) with the use of special devices such as electron microscopes.  Some types of #$MicroscopicScaleObject include its subsets #$Molecule, #$Atom, #$SubAtomicParticle, #$Chloroplast, and #$Mitochondrion.")))

(defconcept Microtheory
  :is-primitive (:and Intangible-Individual Abstract-Information)
  :annotations (Microtheory-Type
                Cyc_Collection
                (documentation "The collection of all microtheories, or `mts' for short.  Microtheories implement contexts in Cyc.  Each mt serves to group a set of assertions together that share some common assumptions.  Thus each mt can be thought of as having two parts: a corpus of assertions that represent the `content' of the mt, and a separate corpus of assertions that represent the `assumptions' which are being made.  E.g., in a normal modern everyday life microtheory, there might be hundreds of content assertions such as `drivers are at least 16 years old', and there might be dozens of assumption assertions about that microtheory's content, such as `all actors are assumed to be law-abiding'.   You can think of the assumptions as a set of extra conjuncts on the left hand side (the antecedent or `if'-part) of every content assertion in the mt.  

Each assertion in the knowledge base must be explicitly stated to be true in at least one mt.  It will then (by inference) also be true in all the more specialized contexts.  If something is true in the `life in North America' mt, then it should by default be true in the `life in Canada' mt.  I.e., the microtheories are organized into a generalization/specialization lattice by the predicate #$genlMt (q.v.), just as collections are organized into such a lattice by #$genls, and just as predicates are organized into such a lattice by #$genlPreds.  Just as a collection may have several incommensurable supersets, so too a microtheory may have several incommensurable #$genlMts.  Just as each and every collection must have some explicitly recorded superset (except for #$Thing), each and every mt must have some (expicitly recorded) more general mt (except for the #$BaseKB, which is the most general context, containing universal, timeless truths).  Just as a Cyc concept may have multiple incommensurable sets of which it is an element (via #$isa), so too a Cyc assertion may be declared to be true in a set of incommensurable mts.

Every query is made in some mt, so the answer you get might very well depend on the mt in which you ask the question.  Let's call the current context C1, for the remainder of this paragraph.  The only assertions which can be used in C1 to answer the query are those assertions which were explicitly stated to be true in C1 or in some more general mt than C1.  But what if you want and need something like assertion P, to answer the question, but P doesn't fit that criterion, though P is true in some other mts that are unrelated to C1?  You can `import' or `lift' P into C1, by conjoining to its left hand side (if-part) the various assumptions of a context C999 in which P is known to be true.  I.e., what you actually conclude to be true in C1 is an assertion of the form `if a1 and a2 and... then P', where a1, a2,... are the assumptions of a context in which P holds (but which are NOT implied by assumptions of C1).  When there are several contexts to choose from, from which to import P, you will usually prefer the context whose assumptions are most similar to C1's assumptions, so there will be few extra conjuncts that need to be inserted in the `lifting' process.

There is an implicit third component to each #$Microtheory, namely the Cyc terms which are `known about' in that mt.  E.g., #$Lenat is not `known about' in a microtheory set in prehistoric times; #$PhotochemicalEnergyTransduction is not `known about' in a microtheory representing things that a toddler believes to be true; etc.  Unlike the content and the assumptions, however, there is no need to explicitly collect into one list all the terms which are `known about'.  Rather, one could compute such a list by looking at all the terms which are mentioned anywhere in the content assertions of the mt.

Note that #$Microtheory is itself a `first-class object', as is each and every element of that collection --- e.g., #$CommercialBuyingMt, #$WorldGeographyMt, #$USHealthcareMt, #$HumanSocialLifeMt, etc.  The assertions about a #$Microtheory are just like any other Cyc assertions.  

Note that one important predicate we haven't mentioned here yet is the one that says `assertion P is true in microtheory M'.  That predicate is #$ist.  Thus:  (#$ist M P).

Note that another important predicate we haven't mentioned here yet is the one that says `microtheory M has the proposition P as a domain assumption'.  Thus: (#$domainAssumptions M P).")))

(defconcept Microtheory-Predicate
  :is-primitive Predicate
  :annotations (Relation-Type
                (documentation "A collection of predicates.  Each element of #$MicrotheoryPredicate is a predicate used to describe the properties and relationships of instances of #$Microtheory.  Examples: #$domainAssumptions, #$mtTime, #$genlMt, #$adheresToCodeOfConduct, #$ist-Agreement, #$ist-Obligation.")))

(defconcept Microtheory-Type
  :is-primitive Cyc_Collection
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each instance of #$MicrotheoryType is a type of #$Microtheory, for example, #$ProblemSolvingCntxt and #$GeneralMicrotheory.")))

(defconcept Microwaving
  :is-primitive Cooking-Food
  :annotations (Temporal-Object-Type
                Default-Disjoint-Script-Type
                (documentation "A collection of events in which a #$MicrowaveOven is used to heat food (or drink).
After a #$Microwaving event, the food involved has been #$Microwaved.")))

(defconcept Midday
  :is-primitive Qualitative-Time-Of-Day
  :annotations (Temporal-Object-Type
                (documentation "A #$Midday is the daily event where the #$Sun is near its `highest' position in the daily cycle.  A #$Midday overlaps the start of an #$Afternoon, and a #$Morning overlaps the start of a #$Midday.")))

(defconcept Migratory-Animal
  :is-primitive Animal
  :annotations (Existing-Object-Type
                (documentation "A subset of #$Animal; the collection of animals that change their dwelling place on a periodic, typically seasonal basis.  Such behavior is usually characteristic of particular types of #$BiologicalSpecies.")))

(defconcept Military-Officer
  :is-primitive (:and Military-Person Leader)
  :annotations (Occupation-Type
                (documentation "A collection of people, a subset 
of #$MilitaryPerson. Each element of this collection is
somebody who is an officer in some #$MilitaryOrganization,
e.g., an element of #$Admiral or #$Lieutenant.")))

(defconcept Military-Organization
  :is-primitive Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  An element of #$MilitaryOrganization is an organization whose function (and expertise) is the use of armed force, or the threat of such use, against enemies, especially other organized, armed enemies.  A military organization includes its fighting forces and their command structure, together with dedicated support services controlled by that military command.  Typically, there are special conditions in the relationships between a #$MilitaryOrganization and its workers, going beyond what is expected of work agreements in civilian settings, including strict sanctions to enforce obedience.  This collection includes #$GovernmentMilitaryOrganizations such as the armies, navies, air forces, etc., of the world's governments, and in addition private armies, rebel armies, and organized mercenary units.")))

(defconcept Military-Person
  :is-primitive Professional
  :annotations (Occupation-Type
                (documentation "A collection of persons; a subset of #$Professional.  Each element of #$MilitaryPerson is a person who works for some #$MilitaryOrganization, usually holding some #$MilitaryTitle or rank.  Subsets include #$MilitaryOfficer and #$EnlistedPerson.")))

(defconcept Mineral
  :is-primitive (:and Inorganic-Stuff
                      Natural-Tangible-Stuff
                      Solid-Tangible-Thing)
  :annotations (Existing-Stuff-Type
                (documentation "A collection of tangible things.  Each element of #$Mineral is a piece of homogeneous inorganic physical substance that has a crystalline structure.  For example, instances of #$Diamond, #$Turquoise-Gem, #$Jade-Gem, #$Corundum.")))

(defconcept Mineral-Ore
  :is-primitive Earth-Stuff
  :annotations (Tangible-Stuff-Composition-Type
                (documentation "A collection of tangible things; a subset of #$EarthStuff.  Each element of #$MineralOre is a piece of substance from which some useful #$Mineral can be extracted.  For example, elements of #$IronOre, #$BauxiteOre, and #$Copper-Ore.")))

(defconcept Mixing
  :is-primitive (:and Handling-An-Object Creation-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events.  In each #$Mixing, two or more substances are combined to form a #$Mixture.")))

(defconcept Mixture
  :is-primitive Tangible-Thing
  :annotations (Existing-Stuff-Type
                (documentation "A collection of tangible stuffs.  Every instance of #$Mixture is a tangible stuff composed of two or more different #$constituents which have been mixed.  The stuffs which were inputs to the mixing do not form chemical bonds between them, and at a later time the mixture may be resolved by some #$SeparationEvent.  Examples include all elements of the collections #$Blood, #$Mud, #$Air, and #$CarbonatedBeverage.  A mixture has a composition but not a structure; thus, the following are NOT mixtures, since all have some structure: a wet sponge, a person, or a portion of plywood.
Note: By default, mixtures are assumed to be stable, i.e., they won't separate on their own.  Use #$separatingConstituent to override this default for a constituent that does separate out spontaneously (e.g. a #$CarbonatedBeverage going flat).")))

(defconcept Mks-Unit-Of-Measure
  :is-primitive Unit-Of-Measure
  :annotations (Relation-Type
                (documentation "A subset of #$UnitOfMeasure.  #$MKSUnitOfMeasure is the collection of all the measurement functions whose results use the MKS (i.e., meter-kilogram-second) system of measure to describe physical quantities.  Examples: #$MetersPerSecondPerSecond, #$Liter, #$MetricTon.")))

(defconcept Mob
  :is-primitive Group
  :annotations (Stuff-Type
                (documentation "A collection of objects; a subset of #$Group.  Each element of #$Mob is a group that contains a large number of objects or events of the same type.  Mobs typically have too many members to enumerate or reify; one rarely refers to particular mob members, or at most refers to relatively few of them.  Examples: the #$Andes-Mountains is a mob of mountains; each element of #$Galaxy is a mob of stars; a cup of sand is a mob of grains of sand; and making popcorn involves a mob of corn kernel bursting events.")))

(defconcept Modal
  :is-primitive Verb
  :annotations (Linguistic-Object-Type
                (documentation "The collection of all modal auxiliary verbs. Modals have only tensed forms, do not inflect for person and number, and can take contracted negation. Example: `should'.")))

(defconcept Modal-Relationship
  :is-primitive Relationship
  :annotations (Relation-Type
                (documentation "A collection of predicates and functions.  Each element of #$ModalRelationship is a predicate or function wherein substituting equals for equals may not preserve truth.  For example, `believes': even though Jack's age is equal to 29, we can't substitute `29' for `Jack's age' in the sentence `Fred believes that Jack's age is 31', because Fred surely does NOT believe that 29 is 31.  Thus, `believes' is a modal relationship.  So are meta-predicates such as #$myCreator: e.g., suppose that Doug Lenat added the term FirstUSPresident to the Cyc ontology, and Cyc later is told that that person was George Washington, who in turn is represented by the term #$GeorgeWashington, which term was NOT entered by Doug but by Karen Pittman; it would be incorrect to substitute equals for equals [that is, to substitute #$GeorgeWashington for FirstUSPresident] in the assertion (#$myCreator FirstUSPresident #$Lenat) and conclude (#$myCreator #$GeorgeWashington #$Lenat), since Doug did not enter the latter term into Cyc's ontology.  Thus, meta-predicates such as #$myCreator are also modal relationships.  The same applies to functions; e.g., if we had a function such as MyCreatorFn, then (MyCreatorFn FirstUSPresident) would not have the same value as (MyCreatorFn #$GeorgeWashington).")))

(defconcept Modern-Human-Residence
  :is-primitive (:and Modern-Shelter-Construction Human-Residence)
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A collection of objects; a subset of both #$HumanResidence and #$ModernShelterConstruction.  Each element of #$ModernHumanResidence is a humanly constructed shelter of a modern type, in which people live.  Such residences are the typical dwellings in the developed world of the late 20th century and may be found in the more affluent regions of the developing world.  Examples include houses in suburban `developments', modern apartment buildings, `modular' homes, etc.")))

(defconcept Modern-Shelter-Construction
  :is-primitive Building
  :annotations (Existing-Object-Type
                (documentation "A collection of construction artifacts; a subset of #$Building (q.v.).  An instance of #$ModernShelterConstruction is a building that provides comfortable shelter for humans during some of their daily activities.  Elements of #$ModernShelterConstruction have the kinds of features found in modern-day buildings in Europe, the USA, and other technologically developed parts of the world, namely, amenities like doors, plumbing, electricity, and probably some kind of climate control system for maintaining humanly comfortable conditions #$Indoors.  Examples include the #$NewYorkHiltonAtBroadway, the #$SydneyOperaHouse, and instances of the collection #$ModernHumanResidence (e.g., a newly built home in a suburban development or a renovated brownstone in NYC).")))

(defconcept Molecular-Stuff
  :is-primitive Tangible-Thing
  :annotations (Tangible-Stuff-Composition-Type
                (documentation "A collection of tangible stuff.  Every instance of #$MolecularStuff is a portion of stuff composed of covalently-bonded molecules.  Thus, #$Water and #$DNA are subsets of #$MolecularStuff; each of their instances consists of covalently bonded molecules.  But instances of #$Salt-NaCl are not examples of #$MolecularStuff.  Also, #$Oxygen is not a subset of #$MolecularStuff, since #$Oxygen denotes anything composed of that element, not just O2 (molecular oxygen) and O3 (ozone). ")))

(defconcept Molecule
  :is-primitive Chemical-Object
  :annotations (Existing-Object-Type
                (documentation "A collection of microscopic-scale objects; a subset of #$ChemicalObject.  Every instance of #$Molecule is a microscopic object whose component atoms are all chemically bonded to each other; typically, this means that the atoms are covalently bonded.  Examples: some instances of #$Molecule, including molecules of oxygen (O2), ozone (O3), water (H2O), carbon monoxide (CO), carbon dioxide (CO2), etc., contain covalently bonded atoms belonging to the collection #$Oxygen.  Some highly complex examples of #$Molecule are those belonging to the collection #$DNA.  See also #$MoleculeFn.
Note: #$Diamond and other macroscopic covalent solids are excluded from belonging to #$Molecule by the constraint that instances of #$Molecule are microscopic.")))

(defconcept Monera-Kingdom
  :is-primitive loom:thing
  :annotations (Biological-Kingdom
                (documentation "A biological kingdom including bacteria, blue green algae, and prochlorophytes (recently discovered).  All members are prokaryotes - their cells lack a nuclear membrane and other internal organelles.")))

(defconcept Monetary-Exchange-Of-User-Rights
  :is-primitive (:and Money-Transaction Exchange-Of-User-Rights)
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "The collection of events in which two #$Agents (#$exchangers) perform two #$TransferringPossessions with each other, one of which is a #$MoneyTransfer.  The #$buyer gains possession (i.e., some #$UserRightsAttribute) of the #$objectPaidFor  from the #$seller, who gains possession of the #$objectTendered.  Note that #$Renting, as well as #$Buying, is a #$MonetaryExchangeOfUserRights")))

(defconcept Monetary-Flow-Rate
  :is-primitive (:and Scalar-Interval Attribute-Value Money-Rate Rate)
  :annotations (Derived-Numeric-Attribute-Type
                (documentation "A collection of rates; a subset of #$ScalarInterval.  Each element of #$MonetaryFlowRate is a rate at which money is earned, spent, transferred, lost, invested, etc. It is a measurable quantity, expressed as a rate of units of money per unit of time, such as #$DollarsPerHour (see #$UnitOfMonetaryFlowRate).  #$MonetaryFlowRate includes generic intervals, such as those which describe (in a particular context) #$HighIncomeLevel, #$LowIncomeLevel, etc.")))

(defconcept Money
  :is-primitive (:and Attribute-Value Scalar-Interval)
  :annotations (Fundamental-Numeric-Attribute-Type
                (documentation "The collection of amounts of currency or debt, of which payments, wealth, capital, assets, etc., consist.   An instance of #$Money may be considered as either (1) an amount of actual, valuable tangible goods (such as gold) or (2) an abstract quantity.  That is, from one perspective, elements of #$Money represent the amount of a debt (or credit), while from another perspective, they represent what is actually transferred to create or discharge a debt.  Typically, money is created by national governments; either (a) money is a backed claim for a certain amount of precious physical wealth payable by the government on demand (e.g., the gold standard), or (b) money is a legally enforced means of debt payment without any backing.  



Elements of #$Money in Cyc may be either a fixed amount, such as a U.S. five-dollar bill, or a range, such as `the price of a 1997 Mazda Protege'.  See #$UnitOfMoney for the units used by Cyc to measure instances of #$Money. 



Note: The tangible coins, bills, checks, etc., that represent certain amounts of #$Money (but which as physical objects may have little value) are elements of #$TenderObject, not of #$Money.  Elements of #$TenderObject which also belong to #$Currency are typically associated with some instance of #$UnitOfMoney (e.g., #$Dollar-UnitedStates) and have a fixed value.")))

(defconcept Money-Rate
  :is-primitive Scalar-Interval
  :annotations (Derived-Numeric-Attribute-Type
                (documentation "A collection of rates; a subset of #$ScalarInterval.  Each element of #$MoneyRate is a measurement applied to something that is measured by money-per-amount; e.g., $1.14 per gallon, $10,000 per acre, $250 per week, $0.89 per pound.  Important subsets of #$MoneyRate include: #$MoneyPerVolumeRate, #$MoneyPerAreaRate, #$MoneyPerMassRate, #$MonetaryFlowRate.  The units for #$MoneyRate measures are terms such as #$DollarsPerSquareFoot, #$DollarsPerHour, Yen per kilo, etc.")))

(defconcept Money-Tender-Type
  :is-primitive Existing-Object-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$MoneyTenderType is a collection of objects of a type commonly offered in payment for goods, services, fees, wage-work, etc.  Examples include #$Currency, #$CreditCard, #$TravellersCheck, #$MoneyOrder, #$PostageStamp, #$Check-TenderObject, etc.")))

(defconcept Money-Transaction
  :is-primitive (:and Transaction
                      Transferring-Possession
                      Commercial-Activity
                      Money-Transfer)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each element of #$MoneyTransaction is an event in which a transfer of money occurs.  Thus, buying something, investing, making a donation, executing a bequest and exchanging currency, are all examples of #$MoneyTransaction events.")))

(defconcept Money-Transfer
  :is-primitive (:and Transferring-Possession
                      Generalized-Transfer
                      Purposeful-Action)
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "The most generic collection of events in which #$Money changes hands.  Thus, in an instance of #$MoneyTransfer, there is some way in which money transfers possession -- though `ownership' of the funds may or may not be transferred from and/or to the agents involved.  E.g., an ATM withdrawal from the user's own account, a utility payment made at one's local grocery store, buying a newspaper, getting change for a dollar from a cashier, are all examples of #$MoneyTransfer events.  Compare this collection with its subset #$MoneyTransaction; in money #$Transactions, which are also elements of #$CommercialActivity, not only is there a transfer of money, but it is done as part of an agreement (explicit or implicit) between the two participating agents that one will do something for the other -- something more than bookkeeping -- contingent upon the transfer of funds.")))

(defconcept Month-Of-Year-Type
  :is-primitive Cyc_Collection
  :annotations (Sibling-Disjoint-Collection))

(defconcept Morning
  :is-primitive Qualitative-Time-Of-Day
  :annotations (Temporal-Object-Type
                (documentation "A #$Morning is an #$Event where the #$Sun apparently `rises' and `moves' to its `highest' position in the daily cycle, i.e. from a #$Sunrise to the ensuing noon (the latter of which is the #$startingPoint of a #$TimeOfDay-NoonHour)  Each ?M which #$isa #$Morning is #$contiguousAfter an #$Overnight, and an #$Afternoon is #$contiguousAfter ?M; and ?M overlaps the start of a #$Midday.")))

(defconcept Mountain
  :is-primitive (:and |(solid-fn Earth-Stuff)| Land-Topographical-Feature)
  :annotations (Existing-Object-Type
                (documentation "A collection of topographical features.  Each element of #$Mountain is a geographical region of significantly higher elevation than its surrounding area.  Mountains may occur individually or as part of a chain (see #$MountainRange).  Examples: #$MountWhitney, #$DiamondHead-Mountain, #$MountKosciusko, #$AyersRock, #$MountOlympus.")))

(defconcept Mountain-Range
  :is-primitive (:and Land-Topographical-Feature |(mob-fn Mountain)|)
  :annotations (Existing-Object-Type
                (documentation "A collection of topographical features.  Each element of #$MountainRange is a natural group of mountains.  Examples: the #$RockyMountains, #$Andes-Mountains, #$Alps-Mountains.")))

(defconcept Mouth
  :is-primitive (:and Animal-Body-Part Biological-Living-Object)
  :annotations (Unique-Anatomical-Part-Type
                Animal-Body-Part-Type
                (documentation "The collection of all animal mouths.  A mouth is a container #$AnimalBodyPart of an #$Animal.  It has an opening (a #$Portal) to the region outside the organism.  Through that opening, the animal ingests tangible substances from the environment, such as food, water, air, etc.  Additional activities, such as #$Chewing, may occur in the #$Mouth, and it may participate in other activities such as talking, kissing, etc.")))

(defconcept Movement--Non-Periodic
  :is-primitive Movement-Event
  :annotations (Temporal-Object-Type
                (documentation "#$Movement-NonPeriodic is a subset of #$MovementEvent.  Each element of this collection is an #$Event in which the #$objectMoving does not return to a previous location or orientation (either not at all or only in a chaotic fashion).  E.g., the motion of a basketball being dribbled by Magic Johnson as he runs downcourt.  For contrast, see #$Movement-Periodic.")))

(defconcept Movement--Periodic
  :is-primitive Movement-Event
  :annotations (Temporal-Stuff-Type
                (documentation "A collection of events, and a subset of #$MovementEvent.  An element of this collection is an #$Event in which the #$objectMoving returns repeatedly to a certain location or orientation at more or less regular time intervals.  E.g., the motion of a seesaw one afternoon; the dribbling of a basketball in place by Magic Johnson; the motion of a slinky going down a staircase as it periodically changes its orientation through a fixed, repetive series of orientations.")))

(defconcept Movement--Rotation
  :is-primitive Movement-Event
  :annotations (Temporal-Object-Type
                (documentation "#$Movement-Rotation is a subset of #$MovementEvent.  Elements of #$Movement-Rotation are those moving events in which the #$objectMoving rotates about an internal or external axis.  For example, the daily rotation of the Earth on its axis, or the rotation of a clock hand about its fastened end.")))

(defconcept Movement--Translation-Event
  :is-primitive (:and Movement-Event Translocation)
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "This collection is a subset of #$MovementEvent.  An element of this set is an #$Event in which the center of mass of the #$objectMoving changes location, with respect to the relevant frame of reference.  Moreover, the moving object travels along some #$pathway-Complete from its origin (#$fromLocation) to its stopping place (#$toLocation) and must, at some point during the movement, be in a different location than it was at the start of motion (even if it ultimately returns to the origin).  So:  One special subset of translational movements includes those in which the movement ends in the same place it started from (e.g., one lap of a race car around the Indianapolis race trace; a trip to the grocery store and back); this subset is #$Translation-NoLocationChange (including its subset #$Translation-RoundTrip).  The other case is where the #$fromLocation and #$toLocation of a #$Movement-TranslationEvent are different; in that case, the movement event is also an element of #$Translation-LocationChange (e.g., the movement of the baseball during a home run hit by Roger Maris.)     Note that a #$Stationary object cannot be an #$objectMoving in a #$Movement-TranslationEvent, because it has a zero translational velocity.")))

(defconcept Movement--Translation-Process
  :is-primitive (:and Movement--Translation-Event Movement-Process)
  :annotations (Script-Type
                Temporal-Stuff-Type
                (documentation "#$Movement-TranslationProcess is the subset of #$Movement-TranslationEvent whose elements can be pragmatically considered to be continuous processes.  In any instance of #$Movement-TranslationProcess, all time-slices of that process are also themselves elements of #$Movement-TranslationProcess.  
Note that walking is a type of #$Movement-TranslationProcess, even though it involves some nonzero accelerations and jerks.
A non-example would be a plot of the various residences you've lived in (``moved to'') over the course of your lifetime; another non-example would be Captain Kirk beaming up to the Enterprise; another would be the ``tunneling'' of an electron in a tunnel diode.
Note:  If you believe in quantum mechanics, then ultimately all physical motion is series of discrete, discontinous ``hops''.   This is where ``PRAGMATICALLY'' continuous vs. discontinuous comes in; i.e., in a quantum physics context some particular motion might be considered discontinuous, whereas in some naive everyday context that same motion is considered continuous.")))

(defconcept Movement-Event
  :is-primitive (:and Generalized-Transfer Physical-Event)
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "#$MovementEvent is the most general collection of events which are physical movements.  Each element of #$MovementEvent is an action primarily about some element(s) of #$PartiallyTangible rotating or translating, periodically or nonperiodically, with respect to some frame of reference which is not a part of the #$objectMoving.  Thus, Neil Armstrong stepping from the lunar landing module onto the Moon's surface is an instance of #$MovementEvent.  Another element of this collection: the turning of the Earth on its axis 31 times during the month of August 1996.  Li Xiaoshuang's compulsory floor exercise in the 1996 Olympics Men's Gymnastics Team Competition is also a (complex!) movement event.  















Note on what is NOT included in this concept:  Consider a person raising her hand and waving, or a tree whose branches are bending in a strong wind:  the person and the tree are remaining in the same place, so that person and that tree are not moving in the sense of #$MovementEvent (though the hand and the branches are).  In other words, `performers' which do not, as a whole, rotate or translate are not #$actors in any element of #$MovementEvent.  However, the waving person and tree events would have #$subEvents which DO belong to #$MovementEvent, in which a hand, a branch, etc., `moves' in this sense.  Note also that elements of #$TransformationEvent, such as a caterpillar turning into a butterfly, or of #$ShapingSomething, such as molding a piece of clay into the bust of Napoleon, are also not necessarily elements of this collection, because they do not involve motion of the whole object with respect to some frame of reference that is different from the object's.  (See also #$FrameOfReference.)















Note: When classifying something into #$MovementEvent, one should consider (1) is it translational or rotational motion?  (2) is it periodic or nonperiodic?  (3) does it involve a continuous flow or a discrete (an object or objects moving completely from one place to another) motion? (4) does it involve a location change or no location change? (5) does it involve a single pathway or more than one?  Based on the answers to those questions, one or more of these subsets of #$MovementEvent may more precisely represent the moving: #$Movement-TranslationEvent, #$Movement-Rotation, #$Movement-Periodic, #$Movement-NonPeriodic, #$Translation-Flow, #$Translation-Complete, #$Translation-SinglePath, #$Translation-MultiPath.")))

(defconcept Movement-Process
  :is-primitive Movement-Event
  :annotations (Script-Type
                Temporal-Stuff-Type
                (documentation "#$MovementProcess is a subset of #$MovementEvent.  Its elements are those #$MovementEvents which can be considered as continuous motions.  That is, (1) motion happens without interruption throughout a #$MovementProcess, and thus (2) every time-slice of a #$MovementProcess is also a #$MovementProcess.")))

(defconcept Multi-Directional-Communication
  :is-primitive Communicating
  :annotations (Script-Type
                (documentation "A collection of complex information transfer events.  Each element of #$MultiDirectionalCommunication is an event in which more than one agent is involved as a #$senderOfInfo.  For example, a conversation or a debate, as opposed to a speech or lecture.  The predicate #$infoContributed is used to correlate each sending agent with the information s/he transmits in such an event.  For communication acts having only one sender, see #$CommunicationAct-Single.")))

(defconcept Multi-Graph
  :is-primitive Set-With-Structure
  :annotations (Cyc_Collection
                (documentation "An instance of #$PathSystemType and a subcollection of #$PathSystem.  Each instance of #$MultiGraph is an instance of #$PathSystem in which the only points are nodes in the system and all paths are made of links (i.e., no intermediate points along links). Sometime such a system is called a graph or multi-graph in graph theory.  A #$MultiGraph consists of nodes interconnected by links, with loops on single nodes allowed, and with multiple links between the same two nodes also allowed.  (For a graph with no parallel links and no loops, see #$SimpleGraph-GraphTheoretic.")))

(defconcept Muscle-Powered-Device
  :is-primitive Kinetic-Energy-Powered-Device
  :annotations (Existing-Object-Type
                (documentation "A collection of physical devices.  An instance of #$MusclePoweredDevice is a device which is powered by animal muscle power (including human labor); e.g., hammers, horse-drawn carriages, etc.")))

(defconcept Muscle-Tissue
  :is-primitive (:and Solid-Tangible-Thing Biological-Living-Object)
  :annotations (Existing-Stuff-Type
                (documentation "The collection of all instances of muscle tissue, considered as an #$OrganicStuff; that is, the collection of all tissue composing the biological organs that convert chemical energy into mechanical energy.  E.g., the elements of #$Biceps, #$Triceps, #$Heart, #$Stomach, all consist of some type of #$MuscleTissue.")))

(defconcept Muscular-System
  :is-primitive Animal-Body-Part
  :annotations (Animal-Body-Part-Type
                (documentation "The collection of all animals' muscle systems.  A #$MuscularSystem of an animal is composed of all its muscles, considered as a functional whole.  As a system, they work together to enable foot motions in locomotion, pumping in circulation, breathing in respiration, biting and chewing and swallowing in eating, etc.")))

(defconcept Music
  :is-primitive Sound-Information-Bearing-Thing
  :annotations (Temporal-Stuff-Type
                (documentation "A collection of sounds; a subset of #$SoundInformationBearingThing.  Each element of #$Music is a sound produced by actions such as singing, whistling, playing an instrument, playing recorded music, etc.  Music has certain features that distinguish it from random noise (though recognizing them may depend upon a specific cultural background); such features usually include variations of pitch over time (i.e., melody), multiple (somehow) related pitches sounding at one time (i.e., some kind of harmony), and/or some regular temporal pattern to the component sounds (i.e., rhythm).  Examples of #$Music include: the debut performance of Beethoven's Fifth Symphony; Leonard Bernstein's rendition of the Ninth Symphony with the BPO in Berlin in 1989; a particular playing of a particular CD of Bernstein's 1989 Ninth in Berlin; the Messiah sing-in in Austin, TX, in 1995.")))

(defconcept Mutually-Disjoint-Interval-Collection
  :is-primitive Cyc_Collection
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Any element, X, which is an element of #$MutuallyDisjointIntervalCollection is a collection of interval types X1, X2, X3,..., whose instances are #$temporallyDisjoint; that is, each instance of X1 has no temporal intersection with any instance of X2 or X3 or...; each instance of X2 has no temporal intersection with any instance of X1 or X3 or...; etc.  For example, consider #$DayOfWeekType, whose instances are #$Monday, #$Tuesday,...   It is true that (#$isa #$DayOfWeekType #$MutuallyDisjointIntervalCollection), because no Monday can temporally intersect any Tuesday or Wednesday or....; no Tuesday can temporally intersect any Monday or Wednesday or...; etc.  Other elements of #$MutuallyDisjointIntervalCollection include #$DayOfWeekType, #$CalendarSeasonType, #$HourOfDayType, and so on.  See also #$TemporallyDisjointIntervalType.")))

(defconcept Named-Roadway
  :is-primitive Street--Generic
  :annotations (Existing-Object-Type
                (documentation "The collection of named parts (stretches or segments) of roadways.  (Not roadway the stuff.)  Instances are named pieces of roadways (or highways or streets) which have names and lengths, and (usually) intersect with other roads. ")))

(defconcept Narrative
  :is-primitive Propositional-Information-Thing
  :annotations (Object-Type
                (documentation "A collection of pieces of information; a subset of #$PropositionalInformationThing.  Each element of #$Narrative is a recounting of events, told in sequence (or so that their temporal order is decipherable) and involving some agent or members of a set of agents.  Narratives may be factual or fictional; thus, the agents involved may be real people or fictional characters.  Examples: the #$PeloponnesianWarHistoryByThucydides, the #$Frankenstein-Novel of Mary Shelley, Mark Twain's #$AdventuresOfHuckleberryFinn.")))

(defconcept Nationality
  :is-primitive Human-Culture-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each #$Nationality is the set of people resident in (or visiting for a long term) some country -- e.g., #$AmericanPerson, #$TrinidadAndTobagoPerson, etc.")))

(defconcept National-Organization
  :is-primitive Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  An element of #$NationalOrganization is an organization which has nationwide `scope' -- that is, nationwide distribution (throughout some #$Country) of members and/or activities, as opposed to to local, state-wide or international organizations.  Examples: the National Association for the Advancement of Colored People and the Daughters of the American Revolution in the United States; the Red Guards and the Young Pioneers in China (PROC).")))

(defconcept National-Postal-Service
  :is-primitive (:and Legal-Government-Organization Service-Organization)
  :annotations (Existing-Object-Type
                (documentation "A collection of national postal services run by the governments of their particular countries.  The United States Postal Service would be an example, but United Parcel Service, since it is a private business, wouldn't be.")))

(defconcept National-Tax-Agency
  :is-primitive Legal-Government-Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of government organizations.  An element of #$NationalTaxAgency is a revenue agency that is part of the government of a #$Country and which is concerned primarily with collecting tax money (from national taxes) from the residents of that #$Country.  This collection does NOT include customs agencies and agencies that collect minor fees only.")))

(defconcept Natural-Language
  :is-primitive Language
  :annotations (Object-Type
                (documentation "The collection of languages which are used for human communication and evolved naturally. This includes dead languages such as Ancient Greek and Latin but excludes concocted languages such as Esperanto.")))

(defconcept Natural-Tangible-Stuff
  :is-primitive Tangible-Thing
  :annotations (Existing-Stuff-Type
                (documentation "A collection of naturally occurring tangible things.  Each element of #$NaturalTangibleStuff is a naturally occurring tangible thing, including, for example, elements of its subsets #$EarthStuff, #$Wood, and #$Air.  Man-made materials are NOT included in #$NaturalTangibleStuff.")))

(defconcept Naval-Ship-Base
  :is-primitive (:and Grounds-Of-Organization
                      Humanly-Occupied-Spatial-Object
                      Contact-Location)
  :annotations (Existing-Object-Type
                (documentation "The collection of all naval bases with facilities for #$ModernNavalShips, or operated by a #$Navy.")))

(defconcept Navigating
  :is-primitive (:and Thinking Purposeful-Action)
  :annotations (Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of all events in which the performer determines the location of an object in some frame of reference, and determines the direction the object should travel to reach some destination.  Navigating usually involves using some devices (compass, clock, etc.) as aids")))

(defconcept Navigation-Device
  :is-primitive (:and Physical-Device Solid-Tangible-Thing)
  :annotations (Existing-Object-Type
                (documentation "A collection of physical devices.  An instance of #$NavigationDevice is a device used for #$Navigating, i.e., for taking the bearings and plotting the course of someone or something travelling through some medium, usually in some transportation device.  Instances include the simplest elements of #$Compass, but also sophisticated GPS (geopositioning systems utilizing satellites.)")))

(defconcept Navy
  :is-primitive Military-Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of military organizations.  An element of #$Navy is a military organization, modern or historical, composed mainly of seaborne forces and/or forces responsible for military operations on water and adjacent coastal areas.  Includes battleships and aircraft carriers (with their battle groups), submarines, shore patrol vessels, and special forces, as well as the support personnel of naval bases.")))

(defconcept Navy-Personnel
  :is-primitive Military-Person
  :annotations (Occupation-Type
                (documentation "A collection of people, a subset 
of #$MilitaryPerson. Each element of this collection is
somebody who works for a #$Navy.")))

(defconcept Negative-Integer
  :is-primitive (:and Negative-Number Cyc_Integer)
  :annotations (Measurable-Attribute-Type
                (documentation "#$NegativeInteger is a subset of #$Integer.  Each element of #$NegativeInteger is a whole number less than zero; thus, -4, but not 0 or 4 or -4.3.")))

(defconcept Negative-Number
  :is-primitive Real-Number
  :annotations (Measurable-Attribute-Type
                (documentation "#$NegativeNumber is a subset of #$RealNumber.  Each element of #$NegativeNumber is a real number that is less than zero; thus, it includes -0.17, but not 0 or 5 or 0.17.")))

(defconcept Negotiating
  :is-primitive (:and Thinking Communicating)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of #$Communicating events.  In a #$Negotiating, an #$Agent communicates facts and changes in the #$Agent's attitude or conditions to another #$Agent, with the (ostensible) purpose of their reaching an #$Agreement.")))

(defconcept Nervousness
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "Feeling of nervousness and excitability.  One can be nervous ABOUT something in particular, or one can have undirected feelings of anxiety.   For the former, state an assertion of the form (#$feelsTowardsObject ?AGT ?OBJ #$Nervousness ?DEGREE) or (#$feelsTowardsEvent ?AGT ?EVNT #$Nervousness ?DEGREE); but for the latter (undirected feelings of anxiety) use (#$feelsEmotion ?AGT #$Nervousness).
Note: This is a collection; for an explanation of a typical #$FeelingAttributeType, see #$Happiness.  A more specialized #$FeelingAttributeType than #$Nervousness is #$Panic.")))

(defconcept Nervous-System
  :is-primitive Animal-Body-Part
  :annotations (Animal-Body-Part-Type
                Unique-Anatomical-Part-Type
                (documentation "The collection of all animals' nervous systems.  A #$NervousSystem is composed of all its nerves, brain, etc., and enables the animal to sense things and react to them both by instinct (spinal reflex) and deliberation (brain).")))

(defconcept Neutron
  :is-primitive Nucleon
  :annotations (Existing-Object-Type
                (documentation "A collection of objects; a subset of #$Nucleon.  Each instance of #$Neutron is a nucleon which has an #$ElectricalCharge of 0.")))

(defconcept News
  :is-primitive Propositional-Information-Thing
  :annotations (Stuff-Type
                (documentation "A collection of abstract (intangible) informational items.  Each element of #$News consists of some factual information about recent events in the world (or #$geographicalSubRegions thereof).  News is commonly embodied in newspapers and communicated through radio and television news broadcasts.")))

(defconcept Night
  :is-primitive Qualitative-Time-Of-Day
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "#$Night is the temporal complement of #$DaytimeHours:  each #$Night is #$contiguousAfter one #$DaytimeHours, and vice versa.  Each #$Night intersects two different #$CalendarDays.  Each #$Night is #$temporallyStartedBy a #$Dusk, #$temporallyFinishedBy a #$Dawn, #$contiguousAfter a #$Sunset, and has a #$Sunrise which is #$contiguousAfter it.")))

(defconcept Noble-Gas
  :is-primitive Element-Stuff
  :annotations (Tangible-Stuff-Composition-Type
                (documentation "All pieces of all substances that are comprised of one type of noble gas")))

(defconcept Nonintrusive-Junction
  :is-primitive Junction-Of-Paths
  :annotations (Region-Type
                (documentation "The collection of junctions or crossings of #$Path-Generics in each of which: one path crosses, or its end joins the side of, another path of the same, or possibly a completely different, type, without so intruding upon or affecting the path as to cause it to be different in nature or name on either side of that junction. (Examples: A small side street joins a major boulevard and the boulevard does not change name or size at the junction.  A hallway ends at another hall, but only allows looking through a window into it.  A railroad crossing.  A small vein is one of the #$sideBranches of a large vein and the name of the large vein doesn't change at that point.)")))

(defconcept Non-Leap-Year
  :is-primitive Calendar-Year
  :annotations (Temporal-Object-Type
                (documentation "The collection of #$CalendarYears which are not leap years; i.e., calendar years in which February has 28 days")))

(defconcept Nonlexical-Linguistic-Object
  :is-primitive Linguistic-Object
  :annotations (Linguistic-Object-Type
                (documentation "The collection of linguistic objects which are not morphemes, but which nonetheless make up part of a language system; e.g., the parts of speech.")))

(defconcept Non-Negative-Integer
  :is-primitive (:and Non-Negative-Number
                      Non-Negative-Scalar-Interval
                      Cyc_Integer)
  :annotations (Measurable-Attribute-Type
                Cyc_Collection
                (documentation "#$NonNegativeInteger is the subset of #$Integer that excludes the negative integers.  Each element of #$NonNegativeInteger is a whole number greater than or equal to zero, e.g., 0, 1, 2, 3, ....")))

(defconcept Non-Negative-Number
  :is-primitive Real-Number
  :annotations (Measurable-Attribute-Type
                (documentation "#$NonNegativeNumber is the subset of #$RealNumber that excludes the negative reals.  Each element of #$NonNegativeNumber is a  number greater than or equal to zero, e.g., 0, 0.173, Pi, 4, 101, ....")))

(defconcept Non-Negative-Scalar-Interval
  :is-primitive Scalar-Interval
  :annotations (Cyc_Collection
                (documentation "For a measurable non-negative quantity, the ordered sequence of possible values may be thought of as a line. #$NonNegativeScalarIntervals are the line segments (or points) on such a line,  representing a range of consecutive values, all equal to or greater than 0.  The most common case is where the line is just the non-negative part of the Real Number Line, and in fact where the #$NonNegativeScalarInterval is either a contiguous set of points there (i.e., a range of numbers) or just a single point there (i.e., a number). Another common case is where the line has some unit of measure marked off, such as meters.")))

(defconcept Non-Person-Animal
  :is-primitive Animal
  :annotations (Existing-Object-Type
                (documentation "The collection of all #$Animals that are not #$Persons.")))

(defconcept Non-Physical-Part-Predicate
  :is-primitive Part-Predicate
  :annotations (Predicate-Category
                (documentation "A collection of predicates. Instances of #$NonPhysicalPartPredicate are used to describe the relationship between a #$PartiallyIntangible and its non-physical parts.")))

(defconcept Non-Powered-Device
  :is-primitive Physical-Device
  :annotations (Existing-Object-Type
                (documentation "A collection of tangible objects; a subset of #$PhysicalDevice.  An instance of #$NonPoweredDevice is a device which is `inert' as opposed to being powered in any way.  Non-powered devices do not need to have any kind of energy supplied to them in order to function -- not even kinetic energy supplied by a user (except perhaps to move them into place).  E.g., a coat hanger.  Once you hang a coat up on it, it does its function without any motion, without any energy being converted or used, etc.  So this collection is a much smaller collection that than consisting merely of devices which don't require fuel or electricity (e.g., a hammer).  It should be noted that an inert device need not be #$Stationary during use (though many are); for example, tires are inert devices in the sense that once they are placed on a vehicle they don't require any energy input to do their job, which is, in essence `hanging onto a wheel no matter what!'.  A steering wheel, on the other hand, is not a #$NonPoweredDevice.  Further examples of #$NonPoweredDevices include a table, a floor mat, a bookshelf, an auto ramp, a bookmark, a support column, and a shirt.")))

(defconcept Non-Predicate-Function
  :is-primitive Function-The-Mathematical-Type
  :annotations (Cyc_Collection
                Relation-Type
                (documentation "The collection of functions in the Cyc language whose uses are to be treated as NATs (non-atomic terms).  In other words, these functions, when applied to arguments, form new terms that may then freely appear as arguments in other CycL expressions.  For example, consider #$GovernmentFn.  It takes one argument, such as #$France, and the resulting NAT --- in this case (#$GovernmentFn #$France) --- can be used anywhere in CycL expressions that an instance of #$RegionalGovernment could occur.  We could, instead, have created a specific new term `GovernmentOfFrance', asserted that it #$isa #$RegionalGovernment, etc., but by having NATs we can drastically reduce the total size of the Cyc vocabulary of constant terms.  



This collection does not include: 

1) abstract functions, like the one-to-one function that must exist between the positive integers and the rational numbers; 

2) Lambda functions (functions which bind variables in arbitrary CycL expressions; #$TheSetOf is an example); 

3) Predicates.  Predicates can be thought of as functions from a set of arguments to a truth value.  Wffs that start with a predicate can even serve as terms, i.e., as arguments to other predicates, but when they do so they can't just be replaced with their truth value!  So #$Predicate is a subset of #$FunctionTheMathematicalType but not a subset of #$NonPredicateFunction.")))

(defconcept Non-Profit-Corporation
  :is-primitive (:and Non-Profit-Organization Legal-Corporation)
  :annotations (Existing-Object-Type
                (documentation "A collection of corporations; a subset of both #$LegalCorporation and #$NonProfitOrganization.  An element of #$NonProfitCorporation is a #$LegalCorporation which is engaged in non-profit or not-for-profit activities.  Typically, (unlike commercial corporations,) non-profit corporations have no shareholders or owners, although they are commonly governed by a board (cf. #$BoardOfDirectors).  Many non-profit organizations are incorporated, including charities, political action groups, clubs, and political parties.  Most have official non-profit standing with a government.  Because they are non-profit organizations, non-profit corporations do not pay corporate income taxes.  For the broader class of non-profit entities, see #$NonProfitOrganization.")))

(defconcept Non-Profit-Employee
  :is-primitive Professional
  :annotations (Occupation-Type
                (documentation "A collection of persons; a subset of #$Professional.  Each element of #$NonProfitEmployee is a worker who is employed by a non-profit organization such as a college, museum, or charity foundation.")))

(defconcept Non-Profit-Organization
  :is-primitive Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  An element of #$NonProfitOrganization is an organization whose activities are not conducted for the profit of any owner.  Thus, non-profit organizations are typically exempt from business taxes.  Most non-profit organizations are charities, clubs, schools, political action groups, political parties, or churches.  See also the specialization #$NonProfitCorporation.")))

(defconcept Non-Published-Text
  :is-primitive Textual-Material
  :annotations (Existing-Object-Type
                (documentation "A collection of information bearing things (IBTs).  #$NonPublishedText is that subset of #$TextualMaterial whose elements are text that has not yet been published (such as a rejected book manuscript) and may not even be intended for publication (such as a memo or personal letter).")))

(defconcept Non-Verbal-Communicating
  :is-primitive Communicating
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of information
transfer events; a subset of #$Communicating.  Each element of
#$NonVerbalCommunicating is a transmission of information by means of
some bodily movement other than speaking.  Subsets include
#$ShakingHands and #$Cuddling, since such actions by definition are
communications involving two actors.  (Note that #$MakingAGesture
(q.v.) is NOT a subset of #$NonVerbalCommunicating; instances of
#$MakingAGesture are merely information-encodings.  They may or may
not be #$subEvents of #$NonVerbalCommunicating events.)")))

(defconcept Nose
  :is-primitive (:and Organ Sensor)
  :annotations (Animal-Body-Part-Type
                Unique-Anatomical-Part-Type
                (documentation "Facial organ used in smelling and breathing")))

(defconcept November
  :is-primitive Calendar-Month
  :annotations (Month-Of-Year-Type))

(defconcept N-Tuple-Interval
  :is-primitive (:and Attribute-Value Tuple)
  :annotations (Object-Type
                (documentation "A collection of mathematical objects; a subset of #$Tuple.  Each element of #$NTupleInterval is a tuple (an ordered list of items) whose items are intervals.  For example, vectors and complex numbers, as well as scalar intervals (which are one-tuples).  Note that intervals in Cyc may be numerical, or they may be intervals along any scale with distinguishable gradations (e.g., riskiness, alertness, roughness of texture).")))

(defconcept Nuclear-Powered-Device
  :is-primitive Powered-Device
  :annotations (Existing-Object-Type
                (documentation "A collection of physical devices; a subset of #$PoweredDevice.  An instance of #$NuclearPoweredDevice is a device which uses nuclear fission or nuclear fusion reactions as a source of power.  Examples include elements of #$NuclearSubmarine and #$NuclearWeapon.")))

(defconcept Nucleon
  :is-primitive Sub-Atomic-Particle
  :annotations (Existing-Object-Type
                (documentation "A collection of objects; a subset of #$SubAtomicParticle.  Each instance of #$Nucleon is a subatomic particle normally found in some atomic nucleus.   #$Nucleon has two subsets, #$Proton and #$Neutron.  Every instance of #$AtomicNucleus is composed of some number of #$Nucleons.")))

(defconcept Number--General
  :is-primitive Mathematical-Object
  :annotations (Object-Type
                (documentation "A collection of mathematical
objects. This is the most general class of numbers,
including #$RealNumbers, #$ComplexNumbers, various
values of infinity such as Aleph Null, and whatever else might count
as a number in mathematics.")))

(defconcept Numeric-Comparison
  :is-primitive Binary-Predicate
  :annotations (Relation-Type
                (documentation "A collection comprising the predicates used to compare elements of #$ScalarInterval.  Examples: #$greaterThanOrEqualTo, #$greaterThan, #$numericallyEqual.  Note that `less than' and `less than or equal to' are simply inverses of #$greaterThan and #$greaterThanOrEqualTo.  E.g., in Cyc `A is less than B' is written as (#$greaterThan B A).")))

(defconcept Nurse
  :is-primitive Medical-Care-Professional
  :annotations (Medical-Specialty-Type
                (documentation "The class of health professionals who provide various aspects of hands-on health care to patients.  Nurses do not usually diagnose or decide on treatments, but they administer medicines and treatments, perform medical tests, give regular care to hospitalized patients, etc.")))

(defconcept Nutrient
  :is-primitive Edible-Stuff
  :annotations (Tangible-Stuff-Composition-Type
                (documentation "A collection of tangible stuff.  Each element of #$Nutrient is a substances considered necessary or beneficial in the diet of a person or animal.  Nutrients in food or pills are often listed on the package label.  Some types of #$Nutrient include its subsets #$EdibleSodium, #$Protein, #$EdibleCalcium, #$EdibleIron, #$Vitamin.")))

(defconcept Object-Type
  :is-primitive Cyc_Collection
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Elements of #$ObjectType more or less correspond to count nouns in the following way: If COL is an element of #$ObjectType, and ITEM is any element of COL, then if you divide ITEM into two pieces, you do NOT generally end up with two elements of COL.  Another way of thinking of this is:  If you take several elements of COL, and put them together, the result is generally not another element of COL.  Sample instances of #$ObjectType are #$Automobile (the set of all cars);  #$LeapYear (the set of all leap years).  See the comment for #$StuffType to find out more about the distinctions between, and the need for, these four collections: #$StuffType, #$ObjectType, #$ExistingStuffType, and #$ExistingObjectType.")))

(defconcept Obtaining-Permission
  :is-primitive Transaction
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of events in which one #$Agent gets permission from another #$Agent to do something.")))

(defconcept Occupation-Type
  :is-primitive (:and Position-Type Person-By-Activity-Type)
  :annotations (Sibling-Disjoint-Collection
                (documentation "A collection of collections.  Each element of #$OccupationType is a collection of workers, based on their kinds of work; each of those workers is an element of (#$isa) #$Professional.  Elements of #$OccupationType represent all kinds of jobs, not just the kinds of occupations colloquially considered `professional'.  Elements of #$OccupationType include the collections #$ComputerProgrammerProfessional, #$FoodServiceEmployee, #$MedicalCareProfessional, #$BaseballUmpire, #$SalesRepresentative, #$Brewer, #$Gymnast, and many others.  Also see #$Professional, #$PositionType.")))

(defconcept Ocean
  :is-primitive Sea
  :annotations (Spatially-Disjoint-Region-Type
                (documentation "A collection of topographical features.  Each instance of #$Ocean is one of the oceans of the world.  This includes #$TheOceanSea, the interconnected expanse of salt water covering 71% of the Earth's surface, and of which the other oceans are subregions.  Examples: #$AtlanticOcean, #$ArcticOcean, #$IndianOcean, #$PacificOcean.")))

(defconcept October
  :is-primitive Calendar-Month
  :annotations (Month-Of-Year-Type))

(defconcept Offer
  :is-primitive Illocutionary-Force
  :annotations (Object-Type
                (documentation "A collection of illocutionary forces.  Each instance of #$Offer consists of a piece of information contained (perhaps implicitly) in a communication, and which expresses the speaker's intention of volunteering to perform the action described in that utterance and/or to bring about the situation described therein, on the condition that the listener accept the offer.  An offer may be made with additional conditions as well.  When an offer is accepted (and all conditions are true), the speaker of the offer incurs an obligation.  `Speaker' and `listener' are broadly interpreted to mean, respectively, any #$senderOfInfo and #$recipientOfInfo.  See also #$IllocutionaryForce, #$Offering-CommunicationAct.")))

(defconcept Offering--Communication-Act
  :is-primitive Communication-Act--Single
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of actions, many of which are speech acts.
In each element of this collection,
somebody offers to do something, furnish something, make
something the case, etc. See also the
#$IllocutionaryForce associated with these actions,
#$Offer.")))

(defconcept Official-Document
  :is-primitive Hardcopy-Information-Bearing-Object
  :annotations (Existing-Object-Type
                (documentation "A collection of information bearing objects (IBOs).  Each element of #$OfficialDocument is a document that can be used as the basis, proof, or support of some fact (such as a person's nationality, marital status, credit, or qualifications; or the ownership or transfer of property; etc.).  Official documents are typically generated, issued, and certified by the relevant institutions (as with passports or stock certificates), but they also include unique personal documents (such as holographic wills) which meet certain standards to be accepted in support of facts. Examples of #$OfficialDocument: birth certificates, tax returns, passports, insurance policies, postage stamps, receipts, packing slips, student ID cards, etc.")))

(defconcept Oil
  :is-primitive Organic-Stuff
  :annotations (Tangible-Stuff-Composition-Type
                (documentation "A collection of tangible things.  Each element of #$Oil is a piece of some type of typically viscous, primarily hydrophobic liquid hydrocarbon.  For example, portions of #$HeatingOil, #$MotorOil, #$PeanutOil, #$OliveOil, etc.")))

(defconcept Omnivore
  :is-primitive Organism--Whole
  :annotations (Existing-Object-Type
                (documentation "The collection of organisms that feed on both plants and animals, and possibly other things.  Subsets of #$Omnivore include, for example, #$Person, #$Pig, and #$Bear.")))

(defconcept One-Story-Building
  :is-primitive Building
  :annotations (Existing-Object-Type
                (documentation "Collection of all one story buildings.")))

(defconcept Ordering--Communication-Act
  :is-primitive (:and Requesting--Communication-Act Human-Activity)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of actions, many of which are speech acts.
In each element of this collection, somebody orders
somebody to do something. See also the #$IllocutionaryForce
associated with this action, #$Command.")))

(defconcept Order-Of-Magnitude-Interval
  :is-primitive Scalar-Interval
  :annotations (Object-Type
                (documentation "#$OrderOfMagnitudeInterval, a subset of #$ScalarInterval, is the collection of intervals which represent significant differences in quantity, for the various types of measurable properties.  The most familiar case is for numbers, in which orders of magnitudes typically correspond with powers of 10; thus, in any given numerical quantity, the 100's dominate the 10's or the units, which are negligible with respect to the hundreds.  In Cyc, we can identify the significant intervals for any measurable property.  For example, for #$Time, some intervals which represent orders of magnitude are: #$AFewSecondsDuration, #$AFewMinutesDuration, #$AFewHoursDuration, #$AFewDaysDuration, #$AFewWeeksDuration, etc.  Similar scales could be identified for any measurable property.  Moreover, orders of magnitude for the same measurable property may differ between microtheories; e.g., the orders of magnitude for #$Time in a `GeologicalTimeMt' would be much larger than those listed above, which are relevant for human perceptions and activities.  



Any two attributes which represent amounts of the same kind of property (e.g., time, distance) and which are also elements of #$OrderOfMagnitudeInterval will be assumed to differ so substantially in size that the smaller one (and values associated with it) will be insignificant compared to the larger interval (and values associated with it).  That is, in general and as a default, if ORD1 and ORD2 are two different elements of #$OrderOfMagnitudeInterval which are also elements of the same type of #$AttributeValue (e.g., #$Speed, #$Mass, #$Density), then one is negligible with respect to the other.  To know which dominates the other, we need additional knowledge about their relative size, e.g., that ORD2 is a #$followingValue of (i.e., 'bigger' than) ORD1.  See also #$negligibleWRT, #$followingValue.  The predicate #$orderOfMagnitude (q.v.) is used to relate particular quantities to the appropriate element of #$OrderOfMagnitudeInterval.  For example, two days -- in Cyc, (#$DaysDuration 2) -- has the #$orderOfMagnitude #$AFewDaysDuration.")))

(defconcept Organ
  :is-primitive (:and Animal-Body-Part Solid-Tangible-Thing)
  :annotations (Animal-Body-Part-Type
                (documentation "The collection of all the #$Organs of #$Animals; i.e., the #$AnimalBodyParts that have specialized physiological functions and which are more or less localized in the animal.  For example: a heart, a kidney, etc.  A borderline case of this is a person's (whole) skin; in some contexts, it is treated as a sense organ, and in some contexts it is excluded because it is distributed over their entire body.")))

(defconcept Organic-Stuff
  :is-primitive Tangible-Thing
  :annotations (Tangible-Stuff-Composition-Type
                (documentation "A collection of tangible things.  Each element of #$OrganicStuff is a tangible thing composed of one or more types of organic #$Molecule.  Instances of #$OrganicStuff usually have their origin in the bodies (or other products) of living things.  Since some organic substances can be synthesized, #$OrganicStuff is not a subset of #$NaturalTangibleStuff.  Chemically, instances of #$OrganicStuff have fairly (or very) complex carbon-based structures.  Examples include the elements of the collections #$Oil, #$DNA, #$Alcohol-Compound, #$Ivory, #$AnimalBodyPart.")))

(defconcept Organism--Whole
  :is-primitive Biological-Living-Object
  :annotations (Existing-Object-Type
                (documentation "The collection of all elements of #$BiologicalLivingObject which are wholes, not parts of other biological living objects (BLOs).  Most members of #$Organism-Whole are capable of existing and reproducing while physically separate from other organisms (with allowances for sexual reproduction).  Abnormal BLOs which are nonetheless considered to belong to #$Organism-Whole include elements of #$Virus, as well as sterile hybrids and colony organisms like those in slime molds or the elements of #$PortugueseManOfWar.  All of those organisms operate by DNA- and RNA-controlled mechanisms.")))

(defconcept Organism-Classification-Type
  :is-primitive (:and Existing-Object-Type Conventional-Classification-Type)
  :annotations (Sibling-Disjoint-Collection
                (documentation "A collection of collections; #$OrganismClassificationType is the collection of all biological types used to classify animals, plants, or other elements of #$Organism-Whole.  The scientific types in #$OrganismClassificationType may or may not correspond to naive categories of organisms, and, in addition, although they are scientific, they might not be officially accepted biological taxons at the standard taxonomic levels.  (#$Invertebrate is an example.)  Compare #$BiologicalTaxonType.







Note that #$OrganismClassificationType is an element of #$SiblingDisjointCollection; hence, any two instances of #$OrganismClassificationType can be assumed to be disjoint, unless we know that one is a subset of the other (also see #$SiblingDisjointCollection).")))

(defconcept Organism-Part
  :is-primitive Biological-Living-Object
  :annotations (Existing-Object-Type
                (documentation "The collection of all the anatomical parts of all living organisms.  It includes gross anatomical parts and microscopic anatomical parts of every individual of every species.")))

(defconcept Organism-Type-By-Habitat
  :is-primitive Existing-Object-Type
  :annotations (Sibling-Disjoint-Collection
                (documentation "A collection of collections.  Each element of #$OrganismTypeByHabitat is a collection of organisms characterized by the sort of habitat in which they live.  For example, #$AquaticOrganism or #$TerrestrialOrganism.")))

(defconcept Organization
  :is-primitive (:and Social-Being |(group-fn Intelligent-Agent)|)
  :annotations (Existing-Object-Type
                (documentation "The collection of all organizations.  Each element of the collection #$Organization is a group whose #$groupMembers are instances of #$IntelligentAgent, and which is established such that certain known relationships and obligations exist between the members, and/or between the organization and its members, and/or between the organization and `outsiders' (individuals or groups).  #$Organization includes both informal and legally constituted organizations.  Organizations can act as agents --- specifically, group agents, not individuals (cf. #$IndividualAgent) --- to undertake projects, enter into agreements, own property, etc.   Most organizations have names.  Almost all have at least two members. Examples: #$Cycorp, #$NASA, #$FreeSoftwareFoundation, #$UnitedStatesArmy, #$KMartCompany.  Note the specialization #$OrganizationOfPeople, whose instances have only human members, e.g., an instance of #$Family-Human such as Joseph Kennedy's family.  Other kinds of #$Organization have organizations as their #$groupMembers, e.g., the #$OrganizationOfAmericanStates.")))

(defconcept Organizational-Chart
  :is-primitive (:and Structured-Information-Source Information-Bearing-Object)
  :annotations (Existing-Object-Type
                (documentation "A collection of information bearing objects (IBOs); a subset of #$StructuredInformationSource.  Each element of #$OrganizationalChart is an IBO that graphically or in outline fashion depicts information about the control structure or resource use structure of an organization.  E.g., a diagram of Exxon Corporation's top managers showing their reporting structure.")))

(defconcept Organizational-Transfer
  :is-primitive (:and Generalized-Transfer Social-Occurrence Purposeful-Action)
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "A collection of events.  An
#$OrganizationalTransfer occurs when some #$IntelligentAgent changes
affiliation with some #$Organization.  This can involve becoming a
member of the organization, ceasing to be a member of it, or switching
from one organization to another.  An #$OrganizationalTransfer may be
voluntarily undertaken by the transferee but may also be #$performedBy
some other agent.  Examples include: joining a club, being transferred
from one division of a company to another, and being excommunicated.
Negative examples include: transfer of objects or information between
organizations (since these aren't #$IntelligentAgents), and changes of
#$Nationality (since neither #$Nationality nor #$Country is currently
a kind of #$Organization).")))

(defconcept Organizational-Transfer-In
  :is-primitive (:and Organizational-Transfer Transfer-In)
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "A subcollection of #$OrganizationalTransfer such that elements necessarily have some thing which becomes the member of the 'to organization'.  Exemplars include hiring someone to a company, pledging a fraternal organization, admitting a nation to NATO.  The event of leaving one organization to join another is also an element of #$OrganizationalTransferIn as well as #$OrganizationalTransferOut.  Negative exemplars include layoffs, expulsions, and excommunications which do not involve 'from organizations'.")))

(defconcept Organizational-Transfer-Out
  :is-primitive (:and Organizational-Transfer Transfer-Out)
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "A subcollection of #$OrganizationalTransfer such that elements necessarily have some thing which stops being the member of the 'from organization'.  Exemplars include laying someone off, expulsions, and excommunications.   The event of leaving one organization to join another is also an element of #$OrganizationalTransferIn as well as #$OrganizationalTransferOut.  Negative exemplars include 'admitting a nation to NATO', 'hiring someone', and 'pledging a fraternal organization'.")))

(defconcept Organization-Policy
  :is-primitive Agreement
  :annotations (Microtheory-Type
                Existing-Object-Type
                (documentation "A collection of microtheories; a subset of #$Agreement.  Each element of #$OrganizationPolicy is a microtheory which contains the terms of some policy of a particular organization.  For example, U.S. Federal government hiring policies; a policy governing a corporation's charitable or political donations; or a school dress code.")))

(defconcept Organization-With-Business-Customers
  :is-primitive Commercial-Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations; a subset of #$CommercialOrganization.  An element of #$OrganizationWithBusinessCustomers is a commercial organization most of whose #$customers are other #$Organizations rather than individual #$Persons.")))

(defconcept Organization-With-Individual-Customers
  :is-primitive Commercial-Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations; a subset of #$CommercialOrganization.  An element of #$OrganizationWithIndividualCustomers is a commercial organization most of whose #$customers are individual #$Persons rather than other #$Organizations.")))

(defconcept Orientation-Attribute
  :is-primitive Attribute-Value
  :annotations (Attribute-Type
                (documentation "The collection of attributes which characterize an object's orientation relative to whatever instance of #$FrameOfReference is being used in the current context.  In most contexts, orientation is taken with respect to the #$TerrestrialFrameOfReference.")))

(defconcept Outdoor-Location
  :is-primitive Ecological-Region
  :annotations (Existing-Object-Type
                (documentation "A collection of geographical regions.  Each element of #$OutdoorLocation is a region of outdoor space, i.e., a region which is directly subject to atmospheric weather.  Objects found in an outdoor location are #$in-ImmersedFully in the atmosphere of Earth.  Thus, as defined here, #$OutdoorLocation does NOT include elements of #$UnderwaterLocation or places that are #$Underground.  OutdoorLocations include large geographical regions.  Among the elements of #$OutdoorLocation are instances of the subsets #$Lawn, #$Meadow, #$SkiSlope, #$Beach, #$Swamp (and many others).  Note: #$OutdoorLocation is a collection of places, rather than an attribute; to represent the concept of being outside, see #$Outdoors-ExposedToWeather.  Of course, elements of #$OutdoorLocation have the #$locationState attribute of being #$Outdoors-ExposedToWeather.")))

(defconcept Outer-Garment
  :is-primitive Clothing-Item
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A collection of objects; a subset of #$ClothingItem.  Each element of #$OuterGarment is a piece of clothing that is worn outside of other garments.  A common purpose of outer garments is protection (e.g., the subsets #$RainCoat, #$Apron).  An outer garment may also be a robe of office or position, such as an academic gown or a bishop's mantle.")))

(defconcept Ovum
  :is-primitive Eukaryotic-Cell
  :annotations (Existing-Object-Type
                (documentation "A subset of #$Cell.  #$Ovum is the collection of specialized gamete cells produced by meiosis in the reproductive tract of female animals.  Each ovum usually has half the number of chromosomes that regular body cells do, and when fertilized by a spermatozoon, it becomes a zygote and continues to develop into a mature individual.  Also called 'egg'.  See also #$FemaleAnimal, #$SexualReproductionEvent.")))

(defconcept Oxidation-Process
  :is-primitive (:and Transformation-Process Chemical-Reaction Emission)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events.  In each instance of this collection, some amount of #$Oxygen reacts with (`reduces') another substance and releases energy in the process.")))

(defconcept Oxide
  :is-primitive (:and Tangible-Thing Inanimate-Thing)
  :annotations (Tangible-Stuff-Composition-Type
                (documentation "A collection of tangible things.  Each element of #$Oxide is a portion of stuff in which each molecule consists of a combination of oxygen atoms with one or more atoms of another element.  For example, instances of #$Water (H2O), pieces of rust (#$IronOxide), portions of #$CarbonDioxide.")))

(defconcept Pants
  :is-primitive Clothing-Item
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A collection of objects.  Every element of #$Pants is a clothing item worn on the lower torso and legs.  The collection #$Pants includes the subsets #$ShortPants and #$LongPants.  There are also very specialized subsets, e.g., #$FootballPants.")))

(defconcept Paper
  :is-primitive (:and Solid-Tangible-Thing Tangible-Product)
  :annotations (Product-Type
                Tangible-Stuff-Composition-Type
                (documentation "A collection of tangible things.  
Each element of #$Paper is a portion of paper, considered
as a 'stuff' out of which things can be made, like
metal or plastic.  Thus, this collection includes
the collection #$SheetOfPaper, but is wider.
Important sources from which paper may be #$derivedFrom 
include wood pulp, cotton, papyrus, rice.  
Examples: business stationery, #$MaxiPads, paper currency, 
toilet paper, newsprint, paper coffee filters, notebook paper.")))

(defconcept Partially-Intangible
  :is-primitive Something-Existing
  :annotations (Temporal-Stuff-Type
                Object-Type
                (documentation "The collection of things having an intangible component but which exist in time.  Some, but not all, elements of #$PartiallyIntangible have a tangible component; some are just those elements of #$Intangible which do exist in time (#$IntangibleExistingThing), such as the laws of the state of Texas, your bank account, etc.  Since some elements of #$Intangible have no temporal aspect (e.g., the number 42), #$Intangible is NOT a subset of #$PartiallyIntangible.")))

(defconcept Partially-Ordered-Set
  :is-primitive Quasi-Ordered-Set
  :annotations (Object-Type
                (documentation "The collection of all partially ordered sets (also called ordered sets, partial orders, or posets), each being a #$SetWithStructure consisting of a set together with an ordering relation on that set.   Mathematical directed chains, trees, forests, and lattices are special cases of #$PartiallyOrderedSet.  The ordering relation is defined on the associated set, and is transitive on that set, reflexive on that set, and antisymmetric on that set.   Sometimes the members of the #$PartiallyOrderedSet are called its nodes, and the non-redundant (transitively reduced) pairwise relations between the nodes are called the links.  A #$PartiallyOrderedSet may be finite or infinite, and connected or unconnected.  (Note: A #$PartiallyOrderedSet is not a #$SetOrCollection, rather it is a #$SetWithStructure that has an associated #$SetOrCollection.)")))

(defconcept Partially-Tangible
  :is-primitive (:and Something-Existing Spatial-Thing)
  :annotations (Object-Type
                Existing-Stuff-Type
                (documentation "Elements of #$PartiallyTangible have some tangible (i.e., material) part and also have a temporal extent (i.e., they exist in time).  They may or may not also have an intangible part; e.g., a book is made of matter, has a temporal extent, and also has intangible content which is the information content of the text that the author wrote.")))

(defconcept Partially-Tangible-Product
  :is-primitive (:and Product Partially-Tangible)
  :annotations (Product-Type
                Existing-Object-Type
                (documentation "A collection of spatial objects; a subset of #$Product.  Each element of #$PartiallyTangibleProduct is a product that has some tangible component and may, but need not, have an intangible component (e.g., information).  (See also #$PartiallyTangible.)  Examples of #$PartiallyTangibleProduct: a newspaper, a photograph, a videotape of `Star Wars', a sack of flour, lumber, a mobile home.")))

(defconcept Particle
  :is-primitive (:and Tangible-Thing Inanimate-Thing)
  :annotations (Existing-Object-Type
                (documentation "A collection of tangibles; a subset of #$TangibleThing.  Each element of #$Particle is a smallish liquid or solid tangible thing, at least small enough to be blown about by ordinary gusts of wind, and possibly much smaller.  Examples include elements of the collections #$CornMeal, #$SandParticle, #$Sawdust, #$DustParticle, #$Sugar-Table.")))

(defconcept Partnership
  :is-primitive (:and Business Legal-Agent)
  :annotations (Existing-Object-Type
                (documentation "A collection of businesses.  An element of #$Partnership is a business which is owned and operated by more than one person but generally fewer than fifty; these owners have the relation #$businessPartners (q.v.) to one another.  Commonly, the partners are workers in the enterprise.  The partners typically have equal shares in the assets and liablities (except for limited partners), and the partners jointly decide the firm's actions, perhaps by vote.")))

(defconcept Part-Of-Building
  :is-primitive Construction-Artifact
  :annotations (Existing-Object-Type
                (documentation "A collection of parts of a building that are 'built-in', that is, built with the intention of remaining as part of the building.")))

(defconcept Part-Of-Room-In-A-Construction
  :is-primitive Part-Of-Building
  :annotations (Existing-Object-Type
                (documentation "A collection of all parts of all instances of #$RoomInAConstruction.  This includes both solid parts, like #$Mantels, and enclosed regions such as are contained by cabinets and #$Cupboards.  Instances should be features which are 'built-in', that is, built with the intention of remaining as part of the room.")))

(defconcept Part-Predicate
  :is-primitive Extensional-Representation-Predicate
  :annotations (Predicate-Category
                (documentation "A collection of predicates.  Instances of #$PartPredicate are used to describe the relationship between an #$Individual and its #$parts.")))

(defconcept Party--Celebration
  :is-primitive Social-Gathering
  :annotations (Script-Type
                (documentation "The collection of party events and other similar celebrations such as baby showers.  #$Persons gather intentionally at a location in order to communicate or share some experience, and to enjoy themselves, but (unlike a #$MeetingTakingPlace) business is rarely transacted at a #$Party-Celebration, or at least is beside the official point of the party.
Note: as with most collection worth naming, there are borderline cases here; e.g., Tupperware parties.")))

(defconcept Passport
  :is-primitive (:and Official-Document Id-Document)
  :annotations (Existing-Object-Type
                (documentation "A collection of official documents.  Each element of #$Passport is a document issued to a person by a national government in order to identify that person as a citizen of said country while s/he is travelling across or outside of that country's borders.")))

(defconcept Pasteurization
  :is-primitive Preserving-Food
  :annotations (Script-Type
                (documentation "The heating of a milk product in order to kill off microorganisms that might make it spoil.")))

(defconcept Path--Customary
  :is-primitive (:and Path--Generic Something-Existing)
  :annotations (Existing-Object-Type
                (documentation "The collection of all existing objects that are commonly paths, or are normally used as paths or conduits for people, animals, vehicles, material or information.  A #$Path-Customary is either designed as a path or it has a significant known function as a path for movement.  Examples include roads, railroads, sea-lanes, cowpaths, boardwalks, tubes, channels, blood vessels, fibers, wires, communication links, etc.   It does not include all the things that may be used as paths in some particular #$PathSystems, but are otherwise not ordinarily viewed as paths (though the latter are still instances of #$Path-Generic).  If a #$Path-Customary is an instance of a certain #$PathType, it may be assumed to be part of a system (not necessarily explictly given) of such paths.  Or, on the other hand, it may be asserted to be part of a particular specified #$PathSystem using the predicate #$pathInSystem.  A #$Path-Customary is either a #$Path-Simple (with two distinct ends, not forming a cycle) or else it may be a #$Path-Cyclic.")))

(defconcept Path--Generic
  :is-primitive Cyc_Thing
  :annotations (Cyc_Collection
                (documentation "A collection of #$Things that are paths or can be considered paths.  Each #$Path-Generic is either a #$Path-Simple or a #$Path-Cyclic, i.e., either a non-self-crossing path or a cycle.  A #$Path-Generic may be abstract (as in Graph Theory), or it may be concrete such as a #$Path-Customary, for example a road, railroad, sea-lane, cowpath, pipe, blood vessel, fiber or wire, or on the other hand it could be anything that is used as a path in some #$PathSystem.  If a #$Path-Generic is a #$Path-Customary, then it may or may not have a specified #$PathSystem in which it is a path; if the #$Path-Generic is not a #$Path-Customary, then it can only be a path in some given #$PathSystem.  For example, an orange is not a customary path, but it can be a path for ants in a specified ant path system.  For any #$Path-Generic, there can be a #$Traversal of something moving along that path; a single #$Traversal can cross itself, double back along itself, and/or go back and forth along some part of a #$Path-Generic any number of times.")))

(defconcept Path--Simple
  :is-primitive Path--Generic
  :annotations (Cyc_Collection
                (documentation "A collection of non-cyclic paths, broadly conceived.  Each instance of #$Path-Simple has two ends and it forms a #$pathBetween them.  It can be a road, railroad, air lane, sea lane, channel, blood vessel, part of an electric circuit, part of a pipe system, or even some abstract chain of connections among people or a 'path' in Graph Theory.  A #$Path-Simple cannot cross itself, return to the same point, nor double back along itself.  Each #$Path-Simple has two distinct ends that do not 'overlap' each other.  But in general a path may have more than two things that are its 'end-points' -- for example, a path between Austin and Pittsburgh can also be a path between Texas and Pennsylvania.  In such an example Texas and Pennsylvania are required to be spatially disjoint.   (To prohibit multiple things being an end-point of a path simultaneously, specify a #$PathSystem, because in a specified #$PathSystem a path's two end points in the system are unique.  The predicate #$pathBetweenInSystem is restricted to a set of paths and points specified for the particular #$PathSystem.)  For a #$Path-Simple any points on it (e.g., #$pointOnPath X PATH) are connected: '#$pathConnects' is true of them.  Any number of intersections may occur along a #$Path-Simple.   A path is different from a #$Traversal or a #$Trajectory: a traversal is the trace of an object moving along a path or in a #$PathSystem, and the #$Traversal can cross itself and/or double back along itself any number of times.  While a path is fixed and may have no direction, a traversal has a particular direction.  Many distinct traversals may traverse the same underlying path (see #$Traversal and #$traversalInSystem), since a traversal can go back and forth across the same part of a path any number of times.  A #$Trajectory (a trace of motion) along paths is a #$Traversal.")))

(defconcept Path-Artifact
  :is-primitive (:and Construction-Artifact Path--Customary)
  :annotations (Existing-Object-Type
                (documentation "A collection of artifacts.  Each element of #$PathArtifact is a path made by agents, whether animal or human.  Elements of #$PathArtifact range from deer trails to superhighways.  Such paths connect places that animals or people are found in and/or between which they want to travel.  Examples: #$ErieCanal, #$WellandShipCanal, #$ChampsElysee, #$WallStreet, #$USHighway80, #$Highway101CA.")))

(defconcept Path-For-Wheeled-Vehicles
  :is-primitive (:and Path--Simple
                      Path-Artifact
                      Fixed-Structure
                      Outdoor-Location)
  :annotations (Existing-Object-Type
                (documentation "Each instance of #$PathForWheeledVehicles is an instance of #$PathArtifact, whose primary function is to serve as a place along which wheeled vehicles may move or park. Usually but not necessarily they are paved.")))

(defconcept Path-Type
  :is-primitive Object-Type
  :annotations (Sibling-Disjoint-Collection
                (documentation "A collection of collections.  Each instance of #$PathType is a collection that is a subcollection of #$Path-Simple.  There are several  types of path, according to the medium or surface the path goes through or over.")))

(defconcept Paying
  :is-primitive (:and Transferring-Ownership Purposeful-Action Money-Transfer)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events; a subset of#$MoneyTransfer.  Each element of #$Paying is an event in which one agent pays money to another agent.  The payer is the #$fromPossessor; the recipient is the #$toPossessor.  In all payings, the payer gives the payee #$FullUseRights to the money. Some types of payings: (1) all instances of #$Buying and #$Renting contain (at least one) #$subEvents which are elements of #$Paying; (2) making charitable contributions; (3) paying off one's gambling debts; (4) paying an employee's salary or a child's allowance.  Writing a check or offering a credit card in payment are #$firstSubEvents of paying events; such payings are successful only if the check is not lost or stolen, if it clears the bank, etc.  On the other hand, filling out a pledge card, e.g., for United Way, is NOT considered a #$Paying event or part of one, because it does not involve or initiate any legal reassignment of rights to the money.")))

(defconcept Pensive
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "A feeling of deep thoughtfulness, reflection, or introspection, and sometimes melancholia.  This is a #$Collection --- for an explanation of that, see #$Happiness.")))

(defconcept Perceiving
  :is-primitive (:and Single-Doer-Action Composite-Physical-And-Mental-Event)
  :annotations (Temporal-Stuff-Type
                Default-Disjoint-Script-Type
                (documentation "#$Perceiving is the collection of sensory-perceptual events in which a #$PerceptualAgent perceives, i.e. acquires information, using its senses.")))

(defconcept Perceiving--Involuntary
  :is-primitive Perceiving
  :annotations (Temporal-Stuff-Type
                (documentation "A collection of mental events, a subset of #$Perceiving. Each element of this collection is a perceptual event in which the agent involuntarily receives senory information. Thus, if I am in a room, and a light is turned on, I would see the light reflected off of the walls, but without any effort on my part.  On the other hand, actively searching for something with my eyes would not be a member of this collection.")))

(defconcept Perceiving--Voluntary
  :is-primitive (:and Perceiving Purposeful-Action)
  :annotations (Temporal-Stuff-Type
                Script-Type
                (documentation "A collection of mental events, a subset of #$Perceiving.
Each element of this collection is a perceptual event in which
the agent does not merely passively receive sensory information,
but is actively filtering or directing how he is perceiving.
Thus, searching for a set of lost keys would be an element
of this collection, as would straining to hear something, but
merely hearing a balloon pop next to you would not.")))

(defconcept Perceiving-Slot
  :is-primitive Binary-Predicate
  :annotations (Relation-Type
                (documentation "A collection of predicates.  Each element of #$PerceivingSlot is a binary predicate relating a perceiver and an object or event (not a sense-datum) that s/he perceives in the mode specified by the predicate; e.g., #$sees, #$hears, #$smells, #$perceivesByTouching, #$tastes.  Assertions that use a predicate belonging to #$PerceivingSlot imply that some perception event occurs during the time that the assertion holds.  See also #$Perceiving and its subsets.")))

(defconcept Perceptual-Agent
  :is-primitive Individual-Agent
  :annotations (Existing-Object-Type
                (documentation "The collection of all sentient agents.  Elements of #$PerceptualAgent are beings capable of doing instances of #$Perceiving.  Furthermore, in many cases the information that a perceptual agent gathers is input that can influence its other actions.")))

(defconcept Permission
  :is-primitive Agreement
  :annotations (Existing-Object-Type
                (documentation "A collection of agreements.  Each element of #$Permission is an agreement specifying some rights or privileges which have been granted to an #$Agent.  A permission may be an informal agreement between individuals, but many instances are formal and involve permissions granted by a government authority to some agent.  E.g., a driver's license, a marriage license, a visa for entering the U.S., a license to practice medicine.")))

(defconcept Person
  :is-primitive (:and Omnivore
                      Human-Occupation-Construct-Resident
                      Primate
                      Legal-Agent)
  :annotations (Organism-Classification-Type
                (documentation "The collection of all human beings.  The collection #$Person constitutes the species Homo Sapiens; thus, #$Person is an instance of #$BiologicalSpecies in the #$BiologyMt.  (See also #$HomoGenus, of which Homo Sapiens is the only nonextinct species.)  Persons constitute the most intelligent subset of #$Primate, and it is the only class whose elements are known to be naturally capable of speaking a language.  All cultural activity requires participation of persons.  #$Person excludes non-human legal persons; see #$Agent.")))

(defconcept Personality-Attribute
  :is-primitive Mental-Attribute
  :annotations (Unordered-Attribute-Type
                (documentation "The collection of attributes which describe aspects of a person's personality.  E.g., #$Dependability.  
Note that #$Gentleness, #$Viciousness, and other emotive traits common to both humans and other animals, appear under #$TemperamentAttribute, which is a superset of #$PersonalityAttribute.")))

(defconcept Personal-Product
  :is-primitive Product
  :annotations (Product-Type
                Existing-Object-Type
                (documentation "A collection of products.  Each element of #$PersonalProduct is a service or tangible product designed for the physical body of a person, including clothing, accessories, personal care products (e.g., deodorant, hand soap) and devices (e.g., razors, heating pads), cosmetics, and personal services such as massages and manicures.  These are products or services which a person would seek out or apply to him/herself; i.e., it excludes products used on the body of a person by physicians (e.g., scalpels), dentists (e.g., dental drills), or morticians.")))

(defconcept Person-By-Activity-Type
  :is-primitive Existing-Object-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$PersonByActivityType is a collection which classifies people by some kind of activity that an individual does regularly.  Some examples are: #$Student, #$Tourist, and #$HornPlayer.  If the differentiating activity is one that can be done as a career or job, it is preferable to make that collection an element of the more specific #$OccupationType (q.v.).")))

(defconcept Pharmacist
  :is-primitive Medical-Care-Professional
  :annotations (Medical-Specialty-Type
                (documentation "The collection of professionals who are trained and licensed to prepare and distribute legal drugs.")))

(defconcept Pharmacy
  :is-primitive (:and Commercial-Organization Local-Customer-Contact-Point)
  :annotations (Medical-Facility-Type
                (documentation "The collection of (local-level) organizations which sell mainly prescription drugs, but usually also carry non-prescription drugs and other medical supplies that might be needed by a family or individual. (i.e. not a supplier to hospitals).  Sometimes these are free-standing stores, sometimes departments within other stores like drugstores and supermarkets.")))

(defconcept Pharmacy-Product-Type
  :is-primitive Product-Type
  :annotations (Cyc_Collection
                (documentation "The collection of pharmaceutical product types, including drugs and pharmaceutical devices.")))

(defconcept Phone-Number
  :is-primitive (:and Character-String Id-String)
  :annotations (Id-String-Type
                (documentation "A collection of strings. Each element of #$PhoneNumber is a string that represents a telephone number.")))

(defconcept Physical-Amount-Slot
  :is-primitive (:and Tangible-Object-Predicate Interval-Based-Quantity-Slot)
  :annotations (Predicate-Category
                (documentation "A collection of predicates.  Each element of #$PhysicalAmountSlot is a slot (i.e., a binary predicate) used in assertions that state (perhaps roughly) `how much' of an object there is.  These can be viewed as different ways of stating the size of an object; e.g., #$lengthOfObject, #$volumeOfObject, #$massOfObject, #$depthOfObject, #$interiorFloorSpace.")))

(defconcept Physical-Attribute
  :is-primitive Attribute-Value
  :annotations (Attribute-Type
                (documentation "A collection of attribute
values.  Each element of #$PhysicalAttribute is an attribute
value could in theory be measured using physical instruments. 
Subsets of this collection include #$Density, #$Speed, 
#$Rigidity, #$Mass, etc. Elements include #$ColdToBitterlyCold,
(#$MediumAmountFn #$Visibility), and #$AFewYearsDuration.")))

(defconcept Physical-Attribute-Description-Slot
  :is-primitive (:and Extensional-Representation-Predicate
                      Binary-Predicate
                      Physical-Feature-Describing-Predicate)
  :annotations (Relation-Type
                (documentation "A collection of predicates.  #$PhysicalAttributeDescriptionSlot is a subset of both #$BinaryPredicate and #$PhysicalFeatureDescribingPredicate.  Each element of #$PhysicalAttributeDescriptionSlot relates some particular tangible object to an instance of #$PhysicalAttribute which characterizes that object.  The attribute may or may not be a quantifiable property.  Examples of #$PhysicalAttributeDescriptionSlot: #$objectEmitsOdor, #$viscosityOfSubstance, #$colorOfObject, #$diameterOfObject, #$physicalParts, #$shape, #$xzCrossSectionShapeType.")))

(defconcept Physical-Conducting-Media
  :is-primitive Tangible-Thing
  :annotations (Existing-Stuff-Type
                (documentation "A collection of tangible stuff.  Each element of #$PhysicalConductingMedia is a physical thing that can serve as a conductor, e.g., for heat or electricity.  Examples include power lines, pieces of superconductor materials, ceramic, etc.")))

(defconcept Physical-Contact-Location
  :is-primitive (:and Human-Shelter-Construction Contact-Location)
  :annotations (Contact-Location-Type
                (documentation "A collection of locations; a subset of #$HumanShelterConstruction.  An instance of #$PhysicalContactLocation is the principal place(s) where an #$Agent can be physically found.  For people, that would (probably) be their home and/or office.   For an organization, it would be the location of their place of business, their headquarters, etc.  Note that a purely procedural method for getting in touch with someone, such as their Post Office Box number in a certain city, is not a #$PhysicalContactLocation.")))

(defconcept Physical-Contact-Situation
  :is-primitive Situation
  :annotations (Temporal-Stuff-Type
                (documentation "The collection of all #$Situations in which two or more tangible objects are touching (#$touches).  Includes an object rubbing against another, objects colliding, as well as static touching configurations.  Note that although most #$PhysicalEvents involve some kind of touching, not all of them should be specs of #$PhysicalContactSituation.  Only on those in which contact is salient to what the event is about should be #$PhysicalContactSituations.")))

(defconcept Physical-Device
  :is-primitive (:and Inanimate-Thing Artifact Partially-Tangible-Product)
  :annotations (Existing-Object-Type
                (documentation "A collection of tangible things. 
 Each #$PhysicalDevice is an #$Artifact which is designed 
for a specific use or 
to perform a specific function. 
Thus, the collections #$Tool, #$Condom, #$BathTub, and
#$TransportationDevice-Vehicle are all subsets of this
collection, as are many other collections. Excluded are
artifacts which can only be 'used' in a very loose or
metaphorical sense, such as instances of #$Sculpture,
#$FlowerBed, or #$Advertisement. Also, an instance of 
#$PhysicalDevice should have a relatively rigid, set
shape (which doesn't exclude it having moving parts!);
hence, #$GasolineFuel or #$AntiFreeze are not subsets
of #$PhysicalDevice.")))

(defconcept Physical-Event
  :is-primitive (:and Spatial-Thing Event)
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each element of #$PhysicalEvent is an event which involves the interaction of some number of physical objects. (For contrast, see #$MentalEvent or, a collection of much more common occurrences, #$CompositePhysicalAndMentalEvent.)")))

(defconcept Physical-Feature-Describing-Predicate
  :is-primitive Predicate
  :annotations (Relation-Type
                (documentation "A collection of predicates.  Each element of #$PhysicalFeatureDescribingPredicate is a predicate used in assertions that describe spatiophysical aspects of individual objects.  Examples: #$above-Directly, #$physicallyContains, #$touchesDirectly, #$colorOfObject, #$temperatureOfObject, #$spans-Bridgelike.")))

(defconcept Physically-Attacking-An-Agent
  :is-primitive (:and Hostile-Social-Action Action-On-Object)
  :annotations (Script-Type
                (documentation "The collection of events in which one #$Agent (or a small group of #$Agents) physically attacks another #$Agent (or small group of #$Agents.)  Each assassination attempt is an example of such an event.")))

(defconcept Physical-Part-Predicate
  :is-primitive (:and Cotemporal-Predicate Part-Predicate)
  :annotations (Predicate-Category
                (documentation "A collection of predicates. Instances of #$PhysicalPartPredicate are used to describe the relationship between a #$PartiallyTangible and its #$physicalParts.")))

(defconcept Physical-Series
  :is-primitive (:and Series Group Partially-Tangible)
  :annotations (Existing-Object-Type
                (documentation "Each #$PhysicalSeries is a #$Group of #$PartiallyTangibles which is ordered in a linear fashion, most likely according to some spatial relationship.  For example, a group of people in line at a ticket booth, or the vertebrae in one person's spine.")))

(defconcept Physical-State-Change-Event
  :is-primitive (:and Intrinsic-State-Change-Event Physical-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "#$PhysicalStateChangeEvent is the collection of events in which some piece of matter changes from one of the physical states of matter to another.  Such changes of state can be induced by changes in temperature (or the equivalent in the manipulation of kinetic energy).  Each particular instance of #$Boiling, #$Freezing, #$Evaporating, #$Condensing, #$Melting, etc. is an instance of #$PhysicalStateChangeEvent.  

Note: Most Cyc microtheories distinguish four states of matter, namely, #$SolidStateOfMatter, #$SemiSolidStateOfMatter, #$LiquidStateOfMatter, #$GaseousStateOfMatter.  See #$StateOfMatter-SolidLiquidGaseous and its individual state constants.")))

(defconcept Physical-Structural-Attribute
  :is-primitive Attribute-Value
  :annotations (Unordered-Attribute-Type
                (documentation "A collection of attributes.  Each element of #$PhysicalStructuralAttribute is a physical attribute that determines or describes the structure of a tangible object.  These attributes are qualitative, not measurable; in that way, they are unlike those described by the elements of #$Density, #$Mass, #$Elasticity, #$ThermalConductivity, and other attributes which belong to #$ScalarInterval.  Examples of #$PhysicalStructuralAttribute: #$Granular, #$Powdery, #$Paste-Form, #$Brittle, #$Collapsible, #$Hollow, #$Woven, #$Burnt.   An individual object's #$PhysicalStructuralAttributes are indicated with the predicate #$physicalStructuralAttributes.")))

(defconcept Physical-Urge-Type
  :is-primitive Sensory-Reaction-Type
  :annotations (Primitive-Attribute-Type
                (documentation "A collection of collections, and also a subset of #$SensoryReactionType (qv). Its elements are distinct from #$SensoryReactionType because they necessarily have a value on #$urgeTypeSatisfied.  An element of #$PhysicalUrgeType is an #$AttributeType that describes one class of urges (to do something) that animals have. The elements of #$PhysicalUrgeType are rather earthy; some examples are: #$UrgeToYawn, #$UrgeToScratch, #$UrgeToVomit, #$UrgeToUrinate, etc. ")))

(defconcept Physiological-Attribute
  :is-primitive Attribute-Value
  :annotations (Unordered-Attribute-Type
                (documentation "The collection of attributes related to a plant or animal organism's physiological characteristics.  Some examples include #$Flexed, #$Deaf, #$Injured, #$Fertile, #$Swollen, #$AcidIndigestion, etc.")))

(defconcept Physiological-Condition
  :is-primitive Biological-Event
  :annotations (Script-Type
                (documentation "The collection of #$Events in which an organism undergoes (as #$bodilyDoer) some physiological state or process, which may be normal or abnormal.  An instance of #$PhysiologicalCondition is, especially, a dynamic physiological state that (1) has important temporal aspects, such as a developmental condition or a progressive disease, and/or (2) affects the organism's physiological condition for a significant period of time, such that (a) the condition may be thought of as an `episode' in the life of the organism or even (b) a permanent aspect of the organism's ongoing life.  #$PhysiologicalCondition is the most general collection of such states.  In representing particular cases, one of the various subsets of #$PhysiologicalCondition is likely to be more useful; these include: #$Pregnancy, #$Pneumonia, #$Cancer, #$KidneyStoneCondition, #$HeartAttack, #$AllergicReaction, #$Phobia, #$ChronicCondition, #$Asthma, etc.")))

(defconcept Physiological-Condition-Type
  :is-primitive Script-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each #$PhysiologicalConditionType is a coherent set of #$PhysiologicalConditions characterizing some non-instantaneous aspect of an organism.  Some sample elements are: #$Menopause, #$SickleCellAnemia, #$Infection, #$Malnutrition, etc.")))

(defconcept Physiological-Function
  :is-primitive Physiological-Process
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of those #$PhysiologicalProcesses that serve some end for their doers, which may be cells, tissues, or whole organisms; for example, #$Photosynthesis.")))

(defconcept Physiological-Process
  :is-primitive Biological-Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of events in which an organism does (typically unconsciously) some process which involves alteration of that agent's physiological state.  A #$PhysiologicalProcess is normally one that is done by organisms (or parts of organisms) in the course of living.  A large subset of #$PhysiologicalProcess is #$BodilyFunctionEvent, including its subsets #$Respiration, #$DigestingInStomach, and #$Heartbeating.  (Compare this collection with #$PhysiologicalCondition, whose elements are more episodic than process-like.) ")))

(defconcept Piece-Of-Free-Space
  :is-primitive (:and Partially-Tangible Pure-Space Air)
  :annotations (Existing-Stuff-Type
                (documentation "Elements of #$PieceOfFreeSpace are contiguous regions of ``empty'' yet tangible space, such as the interior of a room or sky above a city.  Typically (but not necessarily), a #$PieceOfFreeSpace is associated with a geographical region or some physical boundaries that define its edges.")))

(defconcept Pipe--Generic-Conduit
  :is-primitive (:and Solid-Tangible-Thing Flow-Path)
  :annotations (Existing-Object-Type
                (documentation "The collection of all enclosed tubular fluid conduits with openings at both ends.  #$Pipe-GenericConduit encompasses both human-made pipes as well as natural pipes, found naturally occurring in the environment, or found in an organism's body, like #$BloodVessels.")))

(defconcept Pipe-End-To-Cavity-Junction
  :is-primitive (:and Portal Configuration)
  :annotations (Region-Type
                (documentation "The collection of junctions, in each of which some #$Pipe-GenericConduit ends at a #$Cavity of larger diameter than the pipe, allowing flow or access between them.  The flange where a water pipe enters a water tank is one example, as is the junction of the esophagus and the stomach in animals.  See also the predicate #$pipeEndsAtCavity.")))

(defconcept Pity
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "Feeling sorry for another agent on account of the undesirable state of affairs s/he is in.  This is a collection; for an explanation of a typical #$FeelingAttributeType, see #$Happiness.")))

(defconcept Place
  :is-primitive Partially-Tangible
  :annotations (Existing-Object-Type
                (documentation "The collection of #$SpatialThings that have a relatively permanent location. Thus, every #$Place is stationary in the frame of reference of the current microtheory.")))

(defconcept Planet
  :is-primitive (:and Heavenly-Body Geographical-Region)
  :annotations (Existing-Object-Type
                (documentation "A collection of heavenly bodies.  Each element of #$Planet is a planet either in Earth's solar system or elsewhere in the universe.  Examples: #$PlanetJupiter, #$PlanetVenus.")))

(defconcept Plant
  :is-primitive (:and Plant-Blo Organism--Whole Vegetable-Matter)
  :annotations (Biological-Kingdom
                (documentation "#$Plant is the collection of all plants; it is a member of the #$BiologicalKingdom and contains the primary subjects of #$Biology.  Plants are typically stationary, living, whole organisms; the cells of plants generally lack cholesterol and have cell walls that include substances of #$Cellulose.  Most, though not all, plants are capable of making sugars by #$Photosynthesis processes and have green parts.  Some example subsets of #$Plant are the collections #$RoseBush, #$SpruceTree, and #$Moss.")))

(defconcept Plant--Non-Woody
  :is-primitive Plant
  :annotations (Existing-Object-Type
                (documentation "The collection of non-woody, herbaceous #$Plants.  Those #$Plants such as grasses, herbs, wildflowers, etc. which are fairly low-growing, often annual, and don't grow woody stems.  Excludes large, hard bamboos, and Balsa.")))

(defconcept Plant--Woody
  :is-primitive (:and Terrestrial-Organism Plant)
  :annotations (Existing-Object-Type
                (documentation "The collection of #$Plants that have woody or hard trunks, stems or branches (and usually roots). includes large, hard bamboos, and balsa.")))

(defconcept Plant-Blo
  :is-primitive Biological-Living-Object
  :annotations (Existing-Object-Type
                (documentation "A subset of #$BiologicalLivingObject.  #$PlantBLO includes the elements of #$Plant and of #$PlantPart.")))

(defconcept Plant-Part
  :is-primitive (:and Organism-Part Plant-Blo)
  :annotations (Existing-Object-Type
                (documentation "The collection of all physical parts of #$Plants of all kinds.
In the traditional view, plant organs are of four types: leaves, stems, roots and flowers.  It seems useful to have a category for smaller plant parts which display a similar level of organization (they have vascular tissue, ground tissue, and an epidermis) but have not been included in the traditional view.")))

(defconcept Plant-Physiological-Attribute
  :is-primitive Physiological-Attribute
  :annotations (Attribute-Type
                (documentation "The collection of attributes referring to the physiological properties of plants.  At the very least, these include seasonal stages, physical properties, and plant health.  These attributes apply to entire #$Plants rather than just to certain parts of them.")))

(defconcept Plant-Product
  :is-primitive Vegetable-Matter
  :annotations (Product-Type
                Existing-Stuff-Type
                (documentation "The collection of #$Products that are plants or plant parts (individually or in bulk), or substances derived from plants, which are produced by people or countries and made available for use, sale or exchange.")))

(defconcept Plastic
  :is-primitive Artificial-Material
  :annotations (Tangible-Stuff-Composition-Type
                Product-Type
                (documentation "A collection of tangible things.  Each element of #$Plastic is a piece of some type of plastic.  This collection includes plastics of all kinds: artifical, mostly polymeric, inedible, organic moldable hydrocarbons.  Some common types are rayon, nylon, polyethylene, etc.")))

(defconcept Plumbing-Fixture
  :is-primitive (:and Part-Of-Building Physical-Device)
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A collection of physical devices.  An instance of #$PlumbingFixture is any object which is -- or was or will be or could be -- part of some plumbing system.  Types of #$PlumbingFixture include pipes, sinks, and toilets, as well as faucets and drain plugs.  It must be a functional part (so sewage doesn't count) and a significant part (so a label on a pipe doesn't count) and a specialized part (so an individual screw doesn't count, nor does an individual iron atom that's part of a faucet) and a relatively long-lived and localized part (so the water flowing through a pipe doesn't count.)")))

(defconcept Polar-Attribute-Type
  :is-primitive Primitive-Attribute-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections, a subset of #$PrimitiveAttributeType.
Each element of #$PolarAttributeType is a collection of 
attributes which can be possessed either to a positive or
to a negative degree. Thus, #$ElectricalCharge would be an
instance of this collection, whereas #$Wetness and #$BedSize
would not be.")))

(defconcept Polishing-Something
  :is-primitive (:and Transformation-Event
                      Cleaning
                      Voluntary-Body-Movement
                      Physical-Contact-Situation)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The subset of #$Cleaning processes in which something is polished by rubbing it.  For example, consider the event in which Aladdin polished his magic lamp for the first time.  Polishing can be done to leather, wood, metal, etc.  A #$PolishingSomething may be performed either by a person or by a machine.")))

(defconcept Political-Dispute
  :is-primitive Dispute-Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The class of all political disputes, including serious political controversies and skirmishes between individuals, organizations or countries.   Such a dispute involves some question of public policy, as opposed to purely personal or commercial issiues.")))

(defconcept Political-Organization
  :is-primitive Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  An element of #$PoliticalOrganization is an organization whose members share some common political, social, or economic values and goals, and the #$MainFunction of their organization is to achieve those goals by influencing governmental powers or by helping persons who favor their views and interests to win elections or otherwise obtain governmental power.  The collection #$PoliticalOrganization includes instances of #$PoliticalParty and also of #$PoliticalInterestGroup.
Note that governmental bodies (such as a #$CityCouncil) are not considered #$PoliticalOrganizations.  Although such governmental bodies often act in political arenas, that is not their primary function.")))

(defconcept Political-Party
  :is-primitive (:and Political-Organization Organization)
  :annotations (Existing-Object-Type
                (documentation "A collection of political organizations.  An element of #$PoliticalParty is an organization that primarily seeks to elect candidates to public office or have members continue holding public office, and which are identified as party affiliations by persons holding or seeking public office.")))

(defconcept Politician
  :is-primitive (:and Public-Sector-Employee Person)
  :annotations (Person-By-Activity-Type
                (documentation "A collection of persons.  Each element of #$Politician is a person who is involved in politics.  Subsets of #$Politician include #$HeadOfState, #$PresidentialCandidate, and #$HeadOfPoliticalParty.")))

(defconcept Porosity
  :is-primitive (:and Scalar-Interval Physical-Attribute)
  :annotations (Primitive-Attribute-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute.  Each element of #$Porosity represents a specific porosity of some physical object.  Different porosities may be represented using #$GenericValueFunctions.  Porosities of objects are indicated with the predicate #$porosityOfObject.")))

(defconcept Portable-Object
  :is-primitive Partially-Tangible
  :annotations (Existing-Object-Type
                (documentation "A collection of objects.  An 
instance of #$PortableObject is something that is not 
`fastened down' and which is light enough for an average human 
(or more to the point: for its average intended user) to move 
it easily.  For many #$PortableObjects, portability is 
important for them to fulfill their primary functions; 
for example, an article of clothing (a #$SomethingToWear), 
a hand-guided tool (a #HandTool), a coin or dollar bill (an instance of #$Currency), a flashlight (a #$Flashlight), etc. would be pretty useless if they weren't portable.  In other cases, making a device portable, or making a portable version of a device, simply provides a convenience, as with the subsets #$PortableTelevision and #$PortableStereoSystem.  Note that #$Tool is not a subset of #$PortableObject, since many tools are heavy and/or stationary.  A borderline example would be a heart/lung machine; although the beneficiary of its primary function is in no position to move it around, the physicians and nurses who also are `using' it can and do exactly that.  The same goes for a playpen; the kids in it had better NOT be able to move it around, but the adults who set it up and put them there can and do move it.   A borderline non-example would be a car; even though its user can make it move around, that is more a controlling action than a transporting action --- i.e., the car is doing the transporting in that case, not the driver.  A borderline example is a cat; even though it moves under its own power, it is light enough for its owner to pick it up and move around.  A borderline example is a bed or a dresser; though too heavy to lift, its owners can generally move it around (by sliding, disassembling and reassembling, etc.)")))

(defconcept Portal
  :is-primitive Cavity
  :annotations (Region-Type
                (documentation "The collection of all openings, as in a surface, through a tube, etc., with or without a covering.  This includes doors, mouths, doughnut-holes, etc.")))

(defconcept Portal-Covering
  :is-primitive (:and Sheet-Of-Some-Stuff Solid-Tangible-Thing)
  :annotations (Product-Type
                Existing-Object-Type
                (documentation "A collection of tangible objects.  Each element of #$PortalCovering is something that covers a portal (e.g., window, door, hatch).  Portal coverings may be either flexible or rigid; they may be either fixed in place or removable.  Examples include windows (in buildings or automobiles), doors, shutters, screens, draperies, window blinds, convertible tops, lids, corks.")))

(defconcept Position-Type
  :is-primitive Existing-Object-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$PositionType is a collection which represents a type of position filled by people within an organization.  Examples of #$PositionType: #$Mayor, #$Admiral, #$CampaignManager, #$Director-Movie, #$Chairman, #$Resident-Medical.")))

(defconcept Positive-Integer
  :is-primitive (:and Positive-Number Non-Negative-Integer)
  :annotations (Measurable-Attribute-Type
                Cyc_Collection
                (documentation "#$PositiveInteger is the subset of #$Integer that excludes the negative integers and zero.  Each element of #$PositiveInteger is a whole number greater than zero; thus, it includes 5, but not -5 or 0.")))

(defconcept Positive-Number
  :is-primitive Non-Negative-Number
  :annotations (Measurable-Attribute-Type
                (documentation "#$PositiveNumber is a subset of #$RealNumber.  Each instance of #$PositiveNumber is a #$RealNumber that is #$greaterThan zero; thus, it includes 42 and 0.17 but not 0 or -5.")))

(defconcept Postal-Code
  :is-primitive Id-String
  :annotations (Id-String-Type
                (documentation "A collection of character strings.  Each element of #$PostalCode is a string used by a postal service to designate a particular geographic area.  For example, the code used by the #$USPostalService for central downtown Austin, TX, is `78701'.")))

(defconcept Posture
  :is-primitive (:and Animal-Physiological-Attribute Body-Part-Position)
  :annotations (Unordered-Attribute-Type
                Sibling-Disjoint-Attribute-Type
                (documentation "The collection of postures, which are types of attributes that describe bodily configurations and/or orientations of #$Animals.  Some #$Postures are: #$UprightPosture, #$KneelingPosture, #$LyingOnBackPosture, #$PronePosture, #$LeaningOnKnucklesPosture, #$ForwardFlyingPosture.")))

(defconcept Powered-Device
  :is-primitive Physical-Device
  :annotations (Existing-Object-Type
                (documentation "A collection of physical devices.  An instance of #$PoweredDevice is any device which requires some power input in order to perform its function.  The power supplied may be muscle power, kinetic energy, fuel, electricity, etc.
This is much more general than #$ElectricalDevice (qv), which is one of its subsets. #$PoweredDevice and #$NonPoweredDevice partition #$PhysicalDevice.")))

(defconcept Precipitation-Cloud
  :is-primitive Cloud-In-Sky
  :annotations (Existing-Object-Type
                (documentation "The collection of clouds that emit #$PrecipitationParticles in instances of #$PrecipitationProcess.")))

(defconcept Precipitation-Particle
  :is-primitive (:and Water Particle)
  :annotations (Existing-Object-Type
                (documentation "The collection of particles of liquid or solid water emitted by clouds in instances of #$PrecipitationProcess.")))

(defconcept Precipitation-Process
  :is-primitive (:and Composite-Physical-And-Mental-Event
                      Emitting-An-Object
                      Movement--Translation-Process
                      Translation--Complete
                      Translation--Single-Path
                      Immediate-Weather-Process)
  :annotations (Temporal-Stuff-Type
                (documentation "A collection of physical processes; a subset of #$WeatherEvent.  Elements of #$PrecipitationProcess are meteorological processes in which atmospheric clouds precipitate rain, snow, or other forms of H2O precipitation.")))

(defconcept Predicate
  :is-primitive Function-The-Mathematical-Type
  :annotations (Cyc_Collection
                Object-Type
                (documentation "The set of all Cyc predicates.  Each element of #$Predicate is a truth-functional relationship in Cyc which takes some number of arguments; each of those arguments must be of some particular type.  For example, the predicate #$genls, which represents the subset/superset relation between collections, takes two arguments; each argument must be an element of #$Collection.  The numbers and types of arguments to particular predicates are specified by explicit assertions using #$arity, #$arg1Isa, #$arg2Isa, etc., #$arg1Genl, #$arg2Genl, etc.  Our example #$genls has #$arity 2, and both its #$arg1Isa and its #$arg2Isa have the value #$Collection.  







Informally, you can think of elements of #$Predicate as functions that always return either true or false.  More formally, when an element of #$Predicate is applied to the legal number and type of arguments, an expression is formed which is a well-formed formula (wff) in CycL.  Such expressions are called `atomic formulas' if they contain variables, and `gafs' (short for `ground atomic formulas') if they contain no variables.  







Note that in Cyc, relationships involving opaque contexts (such as modal contexts, propositional attitudes) are NOT included in #$Predicate; see #$ModalRelationship instead.  Quantifiers and logical operators are also excluded from #$Predicate; see #$Quantifier, #$LogicalConnective.











Currently (July 1996), the KB includes predicates of 1, 2, 3, 4, and 5 arguments; i.e., #$arity may have a value between 1 and 5, inclusive.  The KB also includes some predicates of variable arity (see #$VariableArityRelation).  Unary predicates, which take just one single argument (e.g., `-- is a person' or `-- is white', are usually represented in Cyc by elements of #$Collection or #$AttributeValue, rather than of #$Predicate; but see also #$UnaryPredicate.  Naming strings for elements of #$Predicate always begin with a lowercase letter.")))

(defconcept Predicate-Category
  :is-primitive Relation-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections; a subset of #$RelationType.  Each element of #$PredicateCategory is a collection of Cyc #$Predicates.  Examples: #$TemporalPartSlot, #$IntervalBasedQuantitySlot, #$FunctionalSlot, #$InterActorSlot, #$TransitiveBinaryPredicate, #$PropositionalAttitudeSlot.  See also the comment on #$Predicate.")))

(defconcept Pregnancy-Ending-Event
  :is-primitive (:and Biological-Event Intrinsic-State-Change-Event)
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "The collection of events which terminate a pregnancy, including birth, abortion, and miscarriage.")))

(defconcept Preparation-Attribute
  :is-primitive Attribute-Value
  :annotations (Unordered-Attribute-Type
                (documentation "A collection of attributes.  Each element of #$PreparationAttribute is a characteristic of a piece of material (e.g., food) indicating (1) a type of physical preparation which that stuff has already undergone, and (2) something about its current, resulting condition.  Examples of #$PreparationAttribute which are applicable to food include: #$Baked, #$Fried, #$Toasted, #$Fermented, #$Grilled, #$Frozen, #$Dried, #$Raw.")))

(defconcept Preparing-Food-Or-Drink
  :is-primitive (:and Handling-An-Object
                      Human-Activity
                      Intrinsic-State-Change-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each element of #$PreparingFoodOrDrink is an event in which a single instance of #$FoodAndDrink is made ready to eat.  Preparation may begin `from scratch', with raw ingredients, or may use semi-prepared or `convenience' products (such as cake mixes, margarita mixes, or frozen foods).  Typical #$subEvents in elements of #$PreparingFoodOrDrink include activities commonly performed by cooks and/or bartenders, including instances of #$ChoppingSomething, #$CookingFood, #$BakingFood, #$MixingAlcoholicDrinks, etc.  Each #$PreparingFoodOrDrink event ends when the item prepared is ready to eat.  This collection is NOT to include activities that a diner does with food at table (such as peeling, unwrapping, cutting into bitesized pieces), nor activities that a farmer does before food reaches market or kitchen (e.g., planting, harvesting).")))

(defconcept Preposition
  :is-primitive Speech-Part
  :annotations (Linguistic-Object-Type
                (documentation "The collection of all prepositions. Prepositions are function words which usually take a noun phrase complement. They usually express temporal, spatial, or other relations. Example: `at'.")))

(defconcept Prescriber
  :is-primitive Medical-Care-Professional
  :annotations (Occupation-Type
                (documentation "People who can prescribe medications.  Doctors are prescribers, as well as osteopaths and nurse-practitioners. ")))

(defconcept Prescription-Drug
  :is-primitive Drug-Product
  :annotations (Product-Type
                Existing-Stuff-Type
                (documentation "The collection of drugs that require a doctor's permission before obtaining or consuming them.")))

(defconcept Preservative--Food
  :is-primitive Food-Ingredient-Only
  :annotations (Product-Type
                Existing-Stuff-Type
                (documentation "Preservatives which are added to food to prevent spoilage.")))

(defconcept Preserving-Food
  :is-primitive (:and Human-Activity
                      Handling-An-Object
                      Intrinsic-State-Change-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each instance of #$PreservingFood is an
event in which a single item of food or drink (a member of the
collection #$FoodAndDrink) is acted on to prevent its #$Spoiling.")))

(defconcept President--Head-Of-Government-Or-Head-Of-State
  :is-primitive Head-Of-State
  :annotations (Occupation-Type
                (documentation "A collection of persons.  Each element of #$President-HeadOfGovernmentOrHeadOfState is a person who holds the title of president of some element of #$Country, whether that title belongs to a position which is #$HeadOfState or #$HeadOfGovernment (or both). Examples: Boris Yeltsin, #$BillClinton, Jiang Zemin, Lee Dung-Hui.")))

(defconcept Pressure
  :is-primitive (:and Scalar-Interval Physical-Attribute)
  :annotations (Derived-Numeric-Attribute-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute.  Each element of #$Pressure represents a specific measure of a force exerted on some surface.  Degrees of #$Pressure may be represented using #$GenericValueFunctions or with qualitative collections (e.g., #$BruisingPressure, #$FracturingPressure, #$ImperceptiblePressure).   Indicate the #$Pressure of a particular fluid with the predicate #$fluidPressure; indicate atmospheric pressure with #$barometricPressure.")))

(defconcept Pride
  :is-primitive (:and Approval Self-Confidence)
  :annotations (Feeling-Attribute-Type
                (documentation "Self-esteem based upon one's actions, possessions, or relationships.  #$Vanity is not necessarily entailed by #$Pride.  This is a collection; see #$Happiness.  More specialized #$FeelingAttributeTypes include #$PrideOfMembership, #$PrideOfAccomplishment, #$Vanity, #$Patriotism, etc. ")))

(defconcept Primate
  :is-primitive (:and Terrestrial-Organism Mammal)
  :annotations (Biological-Order
                (documentation "The collection of all primates.  The collection #$Primate includes the subsets #$Person, #$Ape, #$Monkey, etc.  #$Primate is an instance of #$BiologicalOrder in the #$BiologicalClass #$Mammal.")))

(defconcept Prime-Minister--Head-Of-Government
  :is-primitive Head-Of-Government
  :annotations (Occupation-Type
                (documentation "A collection of persons.  Each element of #$PrimeMinister-HeadOfGovernment is a person who holds the political office of Prime Minister in some element of #$Country.  Examples: John Major, Benjamin Netanyahu, Lien Chen, #$AndreasPapandreou.")))

(defconcept Primitive-Attribute-Type
  :is-primitive Attribute-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$PrimitiveAttributeType is a collection of `primitive' attributes such as mass, distance, charge, and others which have a single (total) ordering on (usually) a real line.  Note: #$PrimitiveAttributeType excludes the elements of #$UnorderedAttributeType (e.g., gender).  Cf. #$CompositeAttributeType.")))

(defconcept Primitive-Temporal-Relation
  :is-primitive Temporal-Relation
  :annotations (Predicate-Category
                (documentation "#$PrimitiveTemporalRelations specify temporal relations between #$TimePoints.  The only two binary predicates which are elements of this set are #$after and #$simultaneousWith.
Note: The predicate `before' is unnecessary since (before x y) would be the same thing as (#$after y x))")))

(defconcept Privately-Held-Corporation
  :is-primitive (:and Business Legal-Corporation)
  :annotations (Existing-Object-Type
                (documentation "An incorporated business whose stock, if it exists, is not

traded publicly on some stock exchange. Businesses that are traded publicly are instances of #$PubliclyHeldCorporation.")))

(defconcept Private-Sector-Employee
  :is-primitive Professional
  :annotations (Occupation-Type
                (documentation "A collection of persons; a subset of #$Professional.  Each element of #$PrivateSectorEmployee is a worker who is not paid a salary or wage by a governmental organization.  For example, employees of publicly traded corporations are elements of #$PrivateSectorEmployee.  Note: Private sector employees may contract with a government organization as consultants, however.")))

(defconcept Problem-Solving-Cntxt
  :is-primitive Microtheory
  :annotations (Cyc_Collection
                Microtheory-Type
                Object-Type
                (documentation "The collection of microtheories that are used in applications as a means to reason about particular situations.  Every original query takes place in some #$ProblemSolvingCntxt (as opposed to a #$GeneralMicrotheory) which has access --- via the #$genlMt relation --- to other relevant microtheories, all the way up to the most general one, the #$BaseKB.  A #$ProblemSolvingCntxt is ususally created temporarily for the problem at hand, and is discarded after the problem is dealt with (unlike a #$GeneralMicrotheory, which is created for lasting use).")))

(defconcept Process-Predicate
  :is-primitive Extensional-Representation-Predicate
  :annotations (Predicate-Category
                (documentation "A collection of predicates.  Each element of #$ProcessPredicate is a predicate used in assertions that describe processes.  For example, #$resourcesAvailable, #$amountOfEnergyUsed, #$signalState, #$toPossessor, #$primaryActivityType, #$exports, #$monetaryValue.")))

(defconcept Product
  :is-primitive Individual
  :annotations (Product-Type
                (documentation "A collection of things.  Elements of #$Product are individual goods, services, investments, etc.--basically, anything which is offered (or may be exchanged) for money or trade.  Examples: a Lexus sedan, a package of McDonald's french fries, a massage, a bouquet of flowers, a share in a money market fund, the services of a real estate agent, a research satellite.")))

(defconcept Product-Standard
  :is-primitive (:and Intangible-Existing-Thing Propositional-Information-Thing)
  :annotations (Object-Type
                (documentation "A collection of specifications.  Each element of #$ProductStandard is a precise description applied to the instances of a particular #$ProductType.  Manufacturers of that product type agree explicitly or in practice, or they may obey a government requirement, to make product designs following the specifications stated in the standard, so that products within the type will all have certain features in common.  For example, telephones and television sets fulfil certain product standards.  The resultant interchangeability allows compatibility with other devices and products, with public utilities, commercial trading expectations, governement purchasing requirements, etc.")))

(defconcept Product-Type
  :is-primitive Cyc_Collection
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$ProductType is a collection of things--i.e., some kind of substances, objects, actions--at least some of which are produced and/or performed and sold as products.  Not all elements in such a #$ProductType collection must be products, but some are.  Examples of #$ProductType: #$DairyProduct, #$HardDiskDrive, #$PlasticWrap, etc.  Note that #$ProductType is not a subset of either #$ObjectType or #$StuffType, because there are products of both kinds (e.g., #$Rice-Foodstuff is a #$ProductType but not an #$ObjectType).  *Many* of the collections which are elements of #$ProductType will, however, be an #$isa either #$ObjectType or #$StuffType.")))

(defconcept Professional
  :is-primitive Person
  :annotations (Existing-Object-Type
                (documentation "A set of agents.  Elements of #$Professional are agents who spend a significant part of their waking hours doing activities that are characteristic of some occupation, skilled or unskilled.  However, elements of #$Professional need not be working the entire duration of when they are a professional, such as a #$Professor on summer break, or someone who is temporarily unemployed.  The elements of #$Professional are persons, most of whom belong to at least one such collection during some portion of their lives.  Typically their actions are performed for pay, but not always (e.g., #$Artist-Visual).  What are colloquially considered professions or occupations are subsets of #$Professional; for example, #$LumberJack, #$Scientist, #$Lifeguard, #$StockBroker, #$Technician, #$CraftWorker, #$Housekeeper, #$SportsCoach, #$Athlete, #$LegalProfessional, #$Publicist, #$CrewMemberOnShip, #$SelfEmployedWorker (and many more).  Additionally, other subsets of #$Professional classify workers according to other features of their working life besides skills; e.g., #$SelfEmployedWorker, #$DeskWorker.   Subsets may be general (e.g., #$DeskWorker, #$Doctor-Medical) or specialized (e.g., #$ContinuingEdProgramCoordinator, #$PediatricNeuroSurgeon).  Elements of #$Professional are people: #$MaryShepherd (#$HumanCyclist), #$MichaelJordan (#$Athlete), #$AlfredNorthWhitehead (#$Philosopher), #$Michelangelo (#$Sculptor, #$PainterFineArtist), #$BillClinton (#$UnitedStatesPresident), etc.")))

(defconcept Professional-Office
  :is-primitive Local-Customer-Contact-Point
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  Every element of #$ProfessionalOffice is a #$SingleSiteOrganization comprising one or more professionals (physicians, dentists, lawyers, accountants, etc.) and their support staff.")))

(defconcept Prokaryotic-Cell
  :is-primitive (:and Single-Cell-Organism Cell)
  :annotations (Existing-Object-Type
                (documentation "The subset of #$SingleCellOrganism whose members are single-celled but lack nuclei and mitochondria.  The members of the #$MoneraKingdom all belong to the collection #$ProkaryoticCell, which includes the subsets #$Bacterium and #$BlueGreenAlgae.  #$ProkaryoticCell excludes viruses, protista, prions, and rickettsia.  Unlike the elements of #$EukaryoticCell, prokaryotic cells are never assembled into multicellular organisms.")))

(defconcept Promise
  :is-primitive Illocutionary-Force
  :annotations (Object-Type
                (documentation "A collection of illocutionary forces.  Each instance of #$Promise consists of a piece of information contained (perhaps implicitly) in a communication, and which expresses the speaker's intention of assuring the listener that s/he, the speaker, will in the future perform the action described in that utterance and/or bring about the situation described therein.  A promise, unlike an offer, is not conditional on the acceptance of the listener.   `Speaker' and `listener' are broadly interpreted to mean, respectively, any #$senderOfInfo and #$recipientOfInfo.  See also #$IllocutionaryForce, #$MakingAPromise.")))

(defconcept Pronoun
  :is-primitive Speech-Part
  :annotations (Linguistic-Object-Type
                (documentation "The collection of all pronouns. Pronouns are indexicals which can replace nouns. Example: `she'.")))

(defconcept Proper-Name-String
  :is-primitive Id-String
  :annotations (Id-String-Type
                (documentation "The collection of all proper names, considered as character strings.  This includes, as elements, city names such as ``Dallas'', people's names such as ``Douglas'', company names such as ``Apple'', conference names, book titles, etc.")))

(defconcept Proper-Noun
  :is-primitive Speech-Part
  :annotations (Linguistic-Object-Type
                (documentation "The collection of all proper nouns. Proper nouns are usually capitalized, and they usually denote some particular person, place, or thing.  Many proper nouns cannot be preceded by a determiner, and many have no plural form.  Example: `Dallas'.")))

(defconcept Proposal
  :is-primitive Agreement
  :annotations (Microtheory-Type
                (documentation "A collection of agreements.  Each element of #$Proposal is an agreement to which only one party (namely, the proposer) has agreed.  Proposals are usually part of some #$Negotiating process.  If a proposal is accepted by all parties, they all then become #$agreeingAgents in an agreement based on that proposal.  For example, an instance of #$BidOnSale states the terms at which a potential seller will supply goods to the agent who requested bids.  If a particular seller's bid is accepted, then some instance of #$SalesContract is drawn up to which both parties agree; it includes the terms of the bid, along with any additions such as information about how or when the buyer will pay.")))

(defconcept Cyc_Proposition
  :is-primitive (:and Computational-Object Abstract-Information)
  :annotations (Object-Type
                (documentation "A collection of computational objects.  Each element of #$Proposition is an abstract propositional claim that has some truth value in some world.  An abstract proposition is assumed to be representable by a statement in some logical language, and usually in one or more natural languages.  Most formal languages (such as predicate calculus) and natural languages (such as English) are capable of composing propositions from fragments that are other propositions.  Elements of the subset #$CycFormula (q.v.) are statements in such a language.")))

(defconcept Propositional-Attitude-Slot
  :is-primitive (:and Binary-Predicate
                      Intangible-Object-Predicate
                      Modal-Relationship)
  :annotations (Predicate-Category
                (documentation "The collection of #$BinaryPredicates in Cyc which represent the various propositional attitudes.  Examples include #$beliefs, #$desires, #$biases, #$knows, #$opinions, #$expects, #$intends, #$goals, #$notices, etc.")))

(defconcept Propositional-Information-Thing
  :is-primitive (:and Microtheory Mental-Object)
  :annotations (Object-Type
                Microtheory-Type
                (documentation "A collection of intangible objects.  Each element of #$PropositionalInformationThing is a chunk of abstract propositional information (`a PIT' abbreviates `a propositional information thing').  Such a chunk of information may consist of one or more propositions.  The propositional content of a PIT is not intrinsically encoded in any particular language, but it may be representable in many languages.  PITs are used to represent the meaningful contents of information bearing things.  Physical things--objects or events--which are elements of #$InformationBearingThing are linked to the abstract PIT contents they embody, by using the predicate #$containsInformation (q.v.).  An element of #$PropositionalInformationThing may be something as simple as the information content of a command to stop one's vehicle, expressed verbally or symbolically in a road sign or in a traffic officer's gesture; or a PIT may be something as complex as the entire contemporary knowledge of #$Mathematics, which is embodied in many and various sources.  More examples: the story embodied in a showing of the movie `Citizen Kane', the information in my resume, the content of a conversation in American Sign Language, and the information contained in the #$CycKB, may all be represented as PITs.
Note that the collection #$PropositionalInformationThing is a subset of #$Microtheory, which makes the Cyc inference mechanisms for handling microtheories available to manage the propositional content of information bearing things.  See also #$Microtheory and #$ist-Information.")))

(defconcept Protective-Attire
  :is-primitive (:and Sheet-Of-Some-Stuff Something-To-Wear)
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A collection of objects.  Each element of #$ProtectiveAttire is something to wear that is designed for protection from the elements or from injury.  Some subsets of #$ProtectiveAttire include the collections #$SnowGoggles, #$SurgicalGlove, #$WeldingMask, #$Helmet, #$BoxingHeadGear, #$FaceMaskForCatcher, #$FirefightersCoat, #$RainGear.")))

(defconcept Prothetic-Slot
  :is-primitive Binary-Predicate
  :annotations (Predicate-Category
                (documentation "A collection of predicates.  Each element of #$ProtheticSlot is a binary predicate whose range of values, for any particular element in its domain, must form at least a partial ordering.  Examples: #$arity, #$latitude, #$pathGrade, #$faxNumberPrefix, #$streetOfAddress.")))

(defconcept Protista-Kingdom
  :is-primitive loom:thing
  :annotations (Biological-Kingdom
                (documentation "A #$BiologicalKingdom proposed to include primarily single-celled, eukaryotic organisms such as #$Algae, $#Protozoans, and #$SlimeMolds.")))

(defconcept Proton
  :is-primitive Nucleon
  :annotations (Existing-Object-Type
                (documentation "A collection of objects; a subset of #$Nucleon.  Each instance of #$Proton is a nucleon which has an #$ElectricalCharge of +1.")))

(defconcept Protozoan
  :is-primitive (:and Eukaryotic-Cell Single-Cell-Organism)
  :annotations (Biological-Subkingdom
                (documentation "The collection of protozoa; a subset of #$SingleCellOrganism.  Elements of #$Protozoan are also elements of #$EukaryoticCell.  Subsets include #$Amoeba and many others.  Protozoa lack cell walls made of cellulose.  Many protozoa are motile, using pseudopoda, cilia, or flagella to move.  Some cause diseases in larger organisms.  The class #$Protozoan is an instance of #$BiologicalSubkingdom in many classification systems, sometimes placed under the #$ProtistaKingdom.")))

(defconcept Psychological-Ailment
  :is-primitive Ailment-Condition
  :annotations (Physiological-Condition-Type
                (documentation "The collection of ailments that are classified as psychological due to their origin and/or manifestation in the mind of the sufferer rather than (or at least in addition to, and perhaps causing) manifestations in the sufferer's body.  Having a brain tumor is not an element of this collection, but imagining that you have one is an element of #$PsychologicalAilment, and so is the deep case of depression you fall into once you believe (rightly or wrongly) that you have a brain tumor.  Some subsets of this collection are the collections #$Phobia, #$Depression-PsychologicalCondition, and #$PanicAttack.")))

(defconcept Public-Event
  :is-primitive Social-Occurrence
  :annotations (Temporal-Object-Type
                (documentation "The collection of #$Events which occur in front of, or in the contemporaneous awareness of, a large number of #$Persons -- #$ThePublic.  Usually these are intended to be public events, such as the Olympics, a public beheading, etc.")))

(defconcept Publicly-Held-Corporation
  :is-primitive (:and Legal-Corporation Business)
  :annotations (Existing-Object-Type
                (documentation "A collection of businesses; a subset of #$LegalCorporation.  An element of #$PubliclyHeldCorporation is an incorporated business whose #$Stock is traded publicly on some stock exchange or another public securities market.  Businesses that are not traded publicly are instances of #$PrivatelyHeldCorporation.")))

(defconcept Public-Official
  :is-primitive Public-Sector-Employee
  :annotations (Position-Type
                (documentation "A collection of persons; a subset of #$PublicSectorEmployee.  Each element of #$PublicOfficial is a person who holds a position that is directly involved with some aspect of governing a country (or a sub-region of it).  Many public offices in democratically governed countries are filled by election; some are filled by appointment.  In other countries, public offices are sometimes filled by succession or by military decree.
Note: Cyc represents a public office, such as #$Mayor or #$UnitedStatesPresident, as the collection of officials who have held that office, together with axioms describing their responsibilities.  #$PublicOfficial is a #$PositionType.")))

(defconcept Public-Sector-Employee
  :is-primitive Professional
  :annotations (Occupation-Type
                (documentation "A collection of persons; a subset of #$Professional.  Each element of #$PublicSectorEmployee is a person who is employed by a local, state (or provincial), or national government.  This collection includes both those who are employed directly in government administration (e.g., elected and appointed officials, tax officers, police and military personnel, other regulatory agents) and those who are employed in support services wholly funded by the government (e.g., postal employees, public school teachers, firefighters, unionized government workers, etc.).")))

(defconcept Published-Material
  :is-primitive Information-Bearing-Object
  :annotations (Existing-Object-Type
                (documentation "A collection of information bearing objects (IBOs).  Each element of #$PublishedMaterial is an IBO that belongs to a set of multiple copies which have identical information contents, embodied in similar physical form, and which have been produced for distribution.  #$PublishedMaterial includes the published elements of #$TextualMaterial (e.g., books and magazines); software duplicated for sale or distribution; and mass-produced elements of #$RecordedSoundProduct.  Periodicals, advertisements, commercial films, annual business reports, tax schedules, all are sub-classes of #$PublishedMaterial.  Examples of #$PublishedMaterial: Cycorp's copy of `The New York Times' for July 4, 1996; my paperback copy of the novel `Parade's End'; Bill's copy of OS/2; Lisa's copy of `The White Album'.  See also #$SpecifiedInformationBearingThingType.")))

(defconcept Pulverization-Event
  :is-primitive (:and Composite-Physical-And-Mental-Event
                      Separation--Complete
                      Destruction-Event)
  :annotations (Default-Disjoint-Script-Type
                (documentation "A collection of events.  In each #$PulverizationEvent, some #$SolidTangibleThing is turned into #$Powder or a #$LiquidStateOfMatter through the application of a force.")))

(defconcept Pure-Compound
  :is-primitive (:and Tangible-Thing Inanimate-Thing)
  :annotations (Tangible-Stuff-Composition-Type
                (documentation "A collection of tangible stuffs.  Each instance of #$PureCompound is a chemically pure portion of stuff belonging to some particular #$ChemicalCompoundType (e.g., #$Carbon, #$Water, #$Cellulose).  `Chemically pure' applies to a piece of stuff which has no sub-portions which fail to conform to the chemical composition of its (single) #$ChemicalCompoundType.  Since this kind of purity is relative to specified chemical composition only, #$PureCompound (and #$PureFn) does not pertain to mixtures in Cyc (such as #$Air).  Cf. #$Mixture, #$ChemicalCompoundType.")))

(defconcept Pure-Compound-Type
  :is-primitive Tangible-Stuff-Composition-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Every instance of #$PureCompoundType is a collection which is a subset of both #$PureCompound and of some particular #$ChemicalCompoundType (e.g., #$Carbon, #$Water, #$Cellulose).  Each instance of #$PureCompoundType is defined ONLY by the properties of its #$ChemicalCompoundType, and of #$PureCompound (q.v.).  For example, (#$PureFn #$Fructose) is an instance of #$PureCompoundType, but the subsets of #$Fructose, such as (say) `pure fructose derived from honey' would not be instances of #$PureCompoundType.")))

(defconcept Pure-Space
  :is-primitive Spatial-Thing
  :annotations (Stuff-Type
                (documentation "The collection of all portions, regions, or quantities of empty space (whether connected in one piece or unconnected, in multiple pieces).  The meaning of `empty' depends on context. A high energy physics microtheory might define `empty' as containing no particles, thus an element of #$PureSpace would be a complete vacuum.  But an element of #$PureSpace in #$AmbientConditionsMt would be a piece of #$Atmosphere.  An undersea context could treat #$PureSpace as seawater.  Elements of #$PureSpace are not committed to tangibility, so elements may be intangible or abstract pieces of space.")))

(defconcept Pure-Time
  :is-primitive Intangible-Individual
  :annotations (Stuff-Type
                (documentation "Abstract time itself, including all time from the past, present and future, irrespective of any defining (relevant) #$Events, or containing no (relevant) #$Events.   Elements are always intangible, abstract featureless times, either all of time or some temporal event-free or relevant-event-free subpart thereof.  An instance of #$PureTime need not have any starting or ending points, either defined or implicit.  #$PureTime is 'empty' of relevant or salient #$Events;  what is relevant or salient depends on the context.   In a physics context, the background buzz of atoms may be relevant events, whereas that would not be relevant during a non-state-change of an electronic device, or a boring wait for a train.  See also #$TimeInterval.")))

(defconcept Purposeful-Action
  :is-primitive (:and Action Mental-Activity)
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "#$PurposefulAction is the collection of actions in which at least one actor is consciously, volitionally, purposefully doing the action (i.e., there is one or more #$deliberateActors (q.v.)).")))

(defconcept Putting-On-A-Clothing-Item
  :is-primitive (:and Handling-An-Object Human-Activity)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each element of #$PuttingOnAClothingItem is an event in which some wearable item is donned.  Such an event may be performed either by the wearer or by someone else (e.g., putting on a horse's bridle or a child's mittens).  After an element of #$PuttingOnAClothingItem occurs, there exists an element of #$WearingSomething (q.v.), i.e., the situation in which the item donned is #$wornOn the body of the wearer.")))

(defconcept Qualitative-Time-Of-Day
  :is-primitive Event
  :annotations (Temporal-Object-Type
                (documentation "Instances of #$QualitativeTimeOfDay are #$Events, not just #$TimeIntervals.  They are celestial events such as instances of #$Dawn, #$Morning, #$Evening, etc.   On #$PlanetEarth, each of these is of course synchronized with the daily cycle of the calendar, but its absolute timing (#$startingPoint and #$endingPoint) depends on the season and the observer's location on the planet's surface.")))

(defconcept Quantifier
  :is-primitive Relationship
  :annotations (Relation-Type
                (documentation "A collection of mathematical objects.  Each element of #$Quantifier represents a relationship between a variable and a formula.  In Cyc, a quantifier binds the variable found in its first argument within the formula that appears as its second argument.  Elements of #$Quantifier in CycL include #$forAll, #$thereExists, #$thereExistExactly, #$thereExistAtLeast, #$thereExistAtMost.")))

(defconcept Quantity-Slot
  :is-primitive Prothetic-Slot
  :annotations (Predicate-Category
                (documentation "A collection of predicates.  Each element of #$QuantitySlot is a binary predicate that takes a quantity as the value of its second argument.  In Cyc, those quantities are elements of #$ScalarInterval (q.v.).  Examples of #$QuantitySlot: #$distanceTranslated, #$spatialExtent, #$densityOfObject.  See also #$IntervalBasedQuantitySlot.")))

(defconcept Quasi-Ordered-Set
  :is-primitive Set-With-Structure
  :annotations (Object-Type
                (documentation "The collection of all quasiordered sets (also called quasiorders, semiorders, quosets or pseudo-ordered sets), each being a #$SetWithStructure consisting of a set together with a quasiordering relation on that set.   Mathematical #$PartiallyOrderedSets, including directed chains, trees, forests, and lattices, are special cases of #$QuasiOrderedSet, but unlike the former, #$QuasiOrderedSets can have relational cycles.  The quasiordering relation is defined on the associated set, and is transitive on that set and reflexive on that set (it need not be antisymmetric, asymmetric or symmetric on that set).   Sometimes the members of the #$QuasiOrderedSet are called its nodes, and the non-redundant (transitively reduced) pairwise relations between the nodes are called its links.  A #$QuasiOrderedSet may be finite or infinite, and connected or unconnected.  (Note: A #$QuasiOrderedSet is not a #$SetOrCollection, rather it is a #$SetWithStructure that has an associated #$SetOrCollection.)")))

(defconcept Quaternary-Predicate
  :is-primitive Predicate
  :annotations (Relation-Type
                Cyc_Collection
                (documentation "#$QuaternaryPredicate is the collection of all Cyc predicates which take four arguments.")))

(defconcept Query
  :is-primitive Illocutionary-Force
  :annotations (Object-Type
                (documentation "A collection of illocutionary forces.  Each instance of #$Query consists of a piece of information contained (perhaps implicitly) in a communication, and which expresses the speaker's intention of asking the listener whether the state of affairs described in the utterance in fact holds.  The speaker's ultimate goal may be either to learn the information or to test the knowledge of the agent queried.   `Speaker' and `listener' are broadly interpreted to mean, respectively, any #$senderOfInfo and #$recipientOfInfo.  See also #$IllocutionaryForce, #$RequestingInformation.")))

(defconcept Quintary-Predicate
  :is-primitive Predicate
  :annotations (Cyc_Collection
                Relation-Type
                (documentation "#$QuintaryPredicate is the collection of all Cyc predicates which take five arguments.")))

(defconcept Radially-Symmetric-Object
  :is-primitive Spatial-Thing
  :annotations (Existing-Object-Type
                (documentation "The collection of objects which are radially symmetric, such as wheels, starfish, etc.")))

(defconcept Radiation-Resistance
  :is-primitive (:and Physical-Attribute Scalar-Interval)
  :annotations (Primitive-Attribute-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute.  Each element of #$RadiationResistance represents a specific capacity of a tangible object to resist radiation.  Degrees of #$RadiationResistance may be represented using #$GenericValueFunctions.  Indicate a particular object's #$RadiationResistance with the predicate #$resistanceToRadiation.")))

(defconcept Radio-Wave
  :is-primitive Electromagnetic-Radiation
  :annotations (Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events; a subset of #$ElectromagneticRadiation. Each element of #$RadioWave is an instance of electromagnetic radiation having a wavelength in the range from approximately 1 centimeters (1x10^8 #$Angstrom) to 3,000,000 meters (3x10^18 #$Angstrom), and a frequency of approximately 10^8 #$Hertz to 10^2 #$Hertz.  This includes the spectrum for RadioWave-UHF, RadioWave-VHF, RadioWave-FM, RadioWave-AM, and several other types of common use #$ElectromagneticRadiation.")))

(defconcept Railroad-Station--Physical
  :is-primitive Building
  :annotations (Existing-Object-Type
                (documentation "The collection of all railroad stations (train station buildings).  These are buildings located near railroad tracks and their primary purpose is to be a place where trains discharge and receive passengers (and possibly freight).")))

(defconcept Railway
  :is-primitive Path-For-Wheeled-Vehicles
  :annotations (Existing-Object-Type
                (documentation "The collection of all pathways made of RailroadTracks and used for train transportation.  It includes main lines and sidings.")))

(defconcept Raindrop
  :is-primitive (:and Precipitation-Particle |(liquid-fn Water)|)
  :annotations (Existing-Object-Type
                (documentation "The collection of drops of liquid water emitted by clouds in instances of #$RainProcess.")))

(defconcept Raininess
  :is-primitive (:and Physical-Attribute Scalar-Interval Weather-Attribute)
  :annotations (Primitive-Attribute-Type
                (documentation "A collection of attributes; a subset of #$ScalarInterval.  Each element of #$Raininess describes the intensity with which it is raining at an #$OutdoorLocation.  (At the low extreme, it is not raining at all.)  Degrees of raininess may be represented qualitatively (e.g., #$Rainy), or using #$GenericValueFunctions.  The raininess of a location is indicated with the predicate #$raininessOfRegion.")))

(defconcept Rain-Process
  :is-primitive Precipitation-Process
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of events in which the condensed liquid water in clouds forms droplets (or ice cystals which subsequently melt) substantial enough to fall to the surface of the earth.")))

(defconcept Rate
  :is-primitive Scalar-Interval
  :annotations (Attribute-Type
                (documentation "A subset of #$ScalarInterval, whose elements are an amount of some property, taken with respect to some unit of time.  Elements of #$Rate include, for example, the instances of #$Speed (e.g., 55 mph), #$Frequency (e.g., 55 kHz), #$MonetaryFlowRate (e.g., 55 cents per minute).  See #$UnitOfRate for the units used by Cyc to measure rates (e.g., #$DollarsPerYear, #$MetersPerSecond).")))

(defconcept Rate-Of-Rotation
  :is-primitive (:and Physical-Attribute Scalar-Interval)
  :annotations (Measurable-Attribute-Type
                (documentation "A collection of scalar rates of rotation.")))

(defconcept Cyc_Rational-Number
  :is-primitive Real-Number
  :annotations (Measurable-Attribute-Type
                (documentation "The collection of all rational numbers; a subset of #$RealNumber.  Each element of #$RationalNumber is a number that can be expressed as the quotient of two integers, i.e., a ratio.  For example, 3/4, 2 1/8, 0.3333333..., 11/5.")))

(defconcept Reading
  :is-primitive (:and Perceiving Accessing-An-Ibt)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of acts of reading #$TextualMaterial.  These may be for extracting some sort of information from the text, for entertainment, for prurient stimulation, or to test reading skills.")))

(defconcept Real-Estate
  :is-primitive Solid-Tangible-Product
  :annotations (Product-Type
                Existing-Object-Type
                (documentation "A collection of tangible objects.  Each element of #$RealEstate is either a parcel of land or a land-based property that can be bought, sold, or rented.  This includes buildings and parts of buildings such as office suites or condominiums, as well as parcels of land.  Some prominent examples: #$GuantanamoNavalBase, #$NewYorkHiltonAtBroadway, #$WorldTradeCenter.")))

(defconcept Real-Number
  :is-primitive (:and Number--General
                      Interval-On-Number-Line
                      Scalar-Point-Value)
  :annotations (Measurable-Attribute-Type
                Cyc_Collection
                (documentation "The collection of all the minimal intervals (i.e., points) on the number line; a subset of #$IntervalOnNumberLine.  Each element of #$RealNumber is a single point on the real number line, from #$MinusInfinity to #$PlusInfinity.  Subsets of #$RealNumber include #$Integer, #$RationalNumber, #$NegativeNumber, #$PrimeNumber, and others. 
Note: Real numbers, like other elements of #$IntervalOnNumberLine, are measured along a single number `line'; but complex numbers, quaternions, etc., are n-tuples of numbers, and therefore are elements of #$NTupleInterval. For example, #$ComplexNumber is a subset of #$NTupleInterval")))

(defconcept Receiving
  :is-primitive Transfer-In
  :annotations (Temporal-Object-Type
                (documentation "A collection of events; a subset of #$GeneralizedTransfer.  Each element of #$Receiving is an event in which something `comes in' to an object.  Typically, a receiving has associated with it an element of #$Translocation; a particular receiving and its associated translocation(s) are related by the predicate #$transferInSubEvent.  If the thing which `comes in' is an instance of #$PartiallyTangible (such as a baseball, or a SCUD missile), then its reception belongs to the specialized subset, #$ReceivingAnObject (q.v.).  If the translocation associated with the receiving is an instance of #$WavePropagation (such as a radio broadcast, or heat radiation from the Sun), then the receiving belongs to the subset #$ReceivingAWave (q.v.).")))

(defconcept Receiving-An-Object
  :is-primitive Receiving
  :annotations (Temporal-Object-Type
                (documentation "A collection of events, #$ReceivingAnObject is a subset of the collection #$Receiving.  An instance of #$ReceivingAnObject is an event in which there is some #$PartiallyTangible which is the #$objectMoving, i.e., the thing which `comes in' to the receiver (the #$toLocation).  For example, the #$objectMoving on an occasion when Lynn Swann received a pass from Terry Bradshaw during a Steelers' game would be a football (i.e., some instance of #$Football-American) and the passing/receiving event itself would be a #$ReceivingAnObject.")))

(defconcept Receiving-A-Wave
  :is-primitive Receiving
  :annotations (Temporal-Stuff-Type
                (documentation "A collection of events; a subset of #$Receiving.  Each element of #$ReceivingAWave is an event in which an instance of #$WavePropagation is received at a #$toLocation.  For example, my CD player receiving an infrared signal from the remote control; hearing a sound of distant thunder; a radio telescope receiving signals from a celestial body. See also #$WavePropagation.")))

(defconcept Recorded-Sound-Product
  :is-primitive (:and Published-Material Partially-Tangible-Product)
  :annotations (Product-Type
                Existing-Object-Type
                (documentation "A collection of information bearing objects (IBOs); a subset of #$PublishedMaterial.  Each element of #$RecordedSoundProduct is a sound recording which is one of a class of similar recordings with the same information content.  Typically, #$RecordedSoundProduct includes audio recordings (on audio cassettes, CDs, vinyl records) prepared and duplicated for sale as a product.  See also #$AudioRecordedObject.")))

(defconcept Recorded-Video-Product
  :is-primitive (:and Partially-Tangible-Product Published-Material)
  :annotations (Product-Type
                Existing-Object-Type
                (documentation "A collection of information bearing objects (IBOs); a subset of #$PublishedMaterial.  Each element of #$RecordedVideoProduct is a video recording which is one of a class of similar recordings with the same information content.  Typically, #$RecordedVideoProduct includes video recordings (on videotape, laserdiscs, etc.) prepared and duplicated for sale as a product.  See also #$VideoRecording.")))

(defconcept Recovering-From-Ailment
  :is-primitive (:and Physical-Event Intrinsic-State-Change-Event)
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  In an instance of #$RecoveringFromAilment, some member of #$BiologicalLivingObject recovers from an #$AilmentCondition it has at the beginning of this recovery period.")))

(defconcept Reference-Work
  :is-primitive Textual-Material
  :annotations (Existing-Object-Type
                (documentation "The set of all documents that provide a more or less non-speculative, `fact-oriented,' comprehensive description of some knowledge domain.")))

(defconcept Reflexive-Binary-Predicate
  :is-primitive Binary-Predicate
  :annotations (Predicate-Category
                Cyc_Collection
                (documentation "The collection of all binary predicates ?pred such that  (#$implies (#$and (#$isa ?PRED #$ReflexiveBinaryPredicate) (#$arg1Isa ?PRED ?ARG1) (#$arg2Isa ?PRED ?ARG2) (#$isa ?OBJ ?ARG1) (#$isa ?OBJ ?ARG2)) (?PRED ?OBJ ?OBJ)).")))

(defconcept Regional-Government
  :is-primitive Legal-Government-Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of government organizations; a subset of #$LegalGovernmentOrganization.  An element of #$RegionalGovernment is a government organization which controls a particular geopolitical region (e.g., a country, state, city, county, etc).  The #$subOrganizations of an element of #$RegionalGovernment may include such function-specific #$Departments (q.v.) as legislatures, cabinets, police departments, Boards of Education, and miscellaneous regulatory agencies (which are also #$LegalGovernmentOrganizations).  The #$subOrganizations of a #$RegionalGovernment do not include other #$RegionalGovernments.")))

(defconcept Region-Type
  :is-primitive Existing-Object-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$RegionType is a collection of spatial regions.Such collections have elements that are identifiable subregions of objects, but that are not themselves independent objects.  Collections that are elements of #$RegionType include #$PalmOfHand, #$Doorway, #$Wall-GenericBarrier, #$WorkSurface, #$Handle, and many others.")))

(defconcept Reifiable-Function
  :is-primitive Non-Predicate-Function
  :annotations (Cyc_Collection
                Relation-Type
                (documentation "The collection of all Cyc functions whose values can be reified and treated like Cyc constants.  Using reifiable functions allow us to add to the KB efficiently; e.g., (#$GovernmentFn #$France) can be treated more or less the same as if we had created a new constant term called `GovernmentOfFrance', and #$GovernmentFn can be applied to any element of #$GeopoliticalEntity to produce such a reified term representing the region's government.  On the other hand, it is not desirable to reify every non-atomic term; for example, all the measurable quantities, such as (#$Inch 5), and the numbers which result from using elements of #$FunctionFromQuantitiesToQuantities (e.g., #$PlusFn).  Thus, #$IndividualDenotingFunction does not and should NOT have #$ReifiableFunction as a #$genls, because #$IndividualDenotingFunction includes the elements of #$UnitOfMeasure and other functions whose uses we don't want to reify.  See also #$NonPredicateFunction, #$ReifiableTerm.")))

(defconcept Reifiable-Term
  :is-primitive Cyc-Indexed-Term
  :annotations (Cyc_Collection
                Reifiable-Term
                (documentation "A collection of Cyc terms.  All CycL constants are elements of #$ReifiableTerms, as is any NAT (non-atomic term; see #$NonPredicateFunction) whose function is an instance of #$ReifiableFunction.  E.g., since #$GovernmentFn is an instance of #$ReifiableFunction, it is true that (#$GovernmentFn #$France) is a #$ReifiableTerm.





[Implementation-level Footnote:   At the present time, all assertions of the form (#$isa TERM #$ReifiableTerm) are recorded and checked specially, as compared to other sorts of assertions; see #$defnIff.]")))

(defconcept Relationship
  :is-primitive (:and Individual Mathematical-Object)
  :annotations (Cyc_Collection
                Relation-Type
                (documentation "A collection of abstract objects.  Each element of #$Relationship represents some kind of relation.  Some elements of #$Relationship are truth-valued, that is, when applied to arguments, they yield statements which are true or false.  That includes elements of the following subsets of #$Relationship: #$Predicate, #$LogicalConnective, and #$Quantifier.  Other elements of #$Relationship yield new terms, rather than just true or false -- among them are all the members of #$NonPredicateFunction.  Syntactically, elements of #$Relationship are Cyc constants that can legally appear in the `zero-th' argument place of a CycL expression, i.e., immediately after the opening parenthesis in a CycL expression.")))

(defconcept Relationship-Predicate
  :is-primitive Intangible-Object-Predicate
  :annotations (Predicate-Category
                (documentation "A collection of predicates.  Each element of #$RelationshipPredicate is a predicate used to describe relationships between intangible or abstract objects.  Examples: #$subEquations, #$subFunctions, #$maxQuantValue, #$meanQuantValue, #$expectedValue, #$derivativesOfFunction, #$rangeOfDistribution, #$inverseFunc, #$lessLikelyThan.")))

(defconcept Relation-Type
  :is-primitive Object-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$RelationType is a collection of relations used in Cyc, including predicates, lambda functions, mathematical functions, non-atomic terms, and other types.  Examples: #$UnaryFunction, #$LogicalConnective, #$IndividualDenotingFunction, #$GenericTimePredicate, #$LanguageDescribingPredicate, #$ModalRelationship.")))

(defconcept Relative-Humidity
  :is-primitive (:and Physical-Attribute Scalar-Interval)
  :annotations (Primitive-Attribute-Type
                (documentation "A collection of attributes; a subset of #$ScalarInterval.  The elements of #$RelativeHumidity represent the extent to which the atmosphere at a location approaches total saturation with water vapor.  The relative humidity of a location is indicated with the predicate #$ambientRelativeHumidity.")))

(defconcept Relaxed--Emotion
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "The feeling of being emotionally relaxed, of having no pressing troubles or duties weighing on one, of being at ease and untroubled.  This is a #$Collection --- for an explanation of that, see #$Happiness.  A related #$FeelingAttributeType is #$Calm.")))

(defconcept Relief--The-Emotion
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "Emotion aroused by the removal or lightening of something oppressive, distressing, or painful.  This is a collection; for an explanation of a typical #$FeelingAttributeType, see #$Happiness.")))

(defconcept Religion
  :is-primitive Belief-System
  :annotations (Belief-System-Type
                (documentation "The collection of all religions or equivalent sets of beliefs that answer the `big questions' about creation, existence, etc.  Some elements of this are: #$AnimistReligion, #$Catholicism, #$Atheism, etc.")))

(defconcept Religious-Holiday
  :is-primitive Holiday
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "Each #$ReligiousHoliday is a #$Holiday which is specified by some religious tradition.  Note that individuals may observe or otherwise participate in a #$ReligiousHoliday without being members of the associated #$Religion.")))

(defconcept Religious-Organization
  :is-primitive Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  An element of #$ReligiousOrganization is a #$BeliefSystemFocusGroup whose members share religious beliefs, together with meetings, rituals, or practices related to those beliefs.  The collection #$ReligiousOrganization includes elements of #$LocalReligiousCongregation such as local churches, temples, mosques and shrines (qua organizations), as well as worldwide religious organizations such as #$TheRomanCatholicChurch.")))

(defconcept Removing-Something
  :is-primitive (:and Causing-Another-Objects-Translational-Motion
                      Translation--Location-Change
                      Translation--Complete)
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  During an instance of #$RemovingSomething, the #$objectRemoved is separated from an object or configuration to which it belonged prior to the removal event.  In different types of removals, either the #$objectRemoved or the thing it was associated with may be destroyed; or both may survive.  Examples of #$RemovingSomething include: someone unwrapping a present, undressing, digging up a root, removing an appendix, and stripping wax off a floor.")))

(defconcept Renting
  :is-primitive (:and Purposeful-Action
                      Monetary-Exchange-Of-User-Rights
                      Commercial-Activity
                      Making-Something-Available
                      Transferring-Possession
                      Temporary-Change-Of-User-Rights
                      Money-Transaction)
  :annotations (Temporal-Object-Type
                Default-Disjoint-Script-Type
                (documentation "A collection of events; a subset of #$MonetaryExchangeOfUserRights (among other supersets).  Each element of #$Renting is an event during which one agent grants to another agent the use of an object (owned or controlled by the first agent) in exchange for some remuneration.  The schedule of payment may vary, depending upon the rental period, type of object involved, type of usage granted, and/or other considerations.  The agent providing the object to rent is called the #$fromPossessor; the agent paying to use the object is called the #$toPossessor.  Those agents enter into an #$Agreement (q.v.).  Examples of #$Renting might include:  Fred renting a particular apartment last year; Jane renting a car all this week; Jack renting a canoe on Saturday morning. See also #$PrimaryRoleUseRights.")))

(defconcept Reproductive-System
  :is-primitive Animal-Body-Part
  :annotations (Animal-Body-Part-Type
                (documentation "The collection of all animals' reproductive systems.  A #$ReproductiveSystem is a system of organs used by the #$Animal for reproduction; i.e., for creating an offspring, a new member of that species.  
Note:  Strictly speaking, it might be more accurate to describe a #$ReproductiveSystem as containing the above sorts of systems for a mated male and female of a sexual species, as only that combined system is capable of actually producing an offspring.  But most of the things one wants to say about a #$ReproductiveSystem really do only make sense for one single animal at a time.  So think of reproduction as a cooperative activity, such as having a conversation, where we still refer to each animal's incomplete reproductive system as a #$ReproductiveSystem.")))

(defconcept Reptile
  :is-primitive (:and Non-Person-Animal Vertebrate)
  :annotations (Biological-Class
                (documentation "The collection of reptiles; a subset of #$Vertebrate.  Each element of #$Reptile is an air-breathing, cold-blooded animal which has a body covered by scales or bony plates.  The collection #$Reptile includes the subsets #$Snake, #$Turtle, #$Lizard, etc.  Members of most species of #$Reptile lay eggs; none has milk, hair, feathers, or postembryonic gills.  #$Reptile is an instance of #$BiologicalClass.")))

(defconcept Request
  :is-primitive Illocutionary-Force
  :annotations (Object-Type
                (documentation "A collection of illocutionary forces.  Each instance of #$Request consists of a piece of information contained (usually implicitly) in a communication, and which expresses the speaker's intention to ask the listener to perform the action(s) described in his/her utterance.  If the listener responds positively, s/he places him/herself under an obligation to do the indicated action.  `Speaker' and `listener' are broadly interpreted to mean, respectively, any #$senderOfInfo and #$recipientOfInfo.  See also #$IllocutionaryForce.")))

(defconcept Requesting--Communication-Act
  :is-primitive Communication-Act--Single
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of communication acts in which one agent requests something of another.  Requests are typically followed by a response.")))

(defconcept Requesting-Information
  :is-primitive Requesting--Communication-Act
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of actions, many of which are speech acts.
In each element of this collection, somebody asks
a question or requests some information. See also the #$IllocutionaryForce
associated with this action, #$Query.")))

(defconcept Research
  :is-primitive Human-Activity
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "What some members of ResearchOrganizations do")))

(defconcept Researcher
  :is-primitive Professional
  :annotations (Occupation-Type
                (documentation "A collection of persons; a subset of #$Professional.  Each element of #$Researcher is a person who performs research as his or her main occupation.  This collection includes academicians, clinical investigators, experimental physicists, market researchers, industrial researchers, etc.")))

(defconcept Research-Organization
  :is-primitive Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  An element of #$ResearchOrganization is an organization that carries out basic or applied research as its #$MainFunction (or one of its #$MainFunctions).  It may or may not be a commercial, or a governmental, organization.  For example, #$UnitedStatesSpaceProgram, Thomas J. Watson Research Laboratory at #$IBMInc, and the Hoover Institute.")))

(defconcept Resentment
  :is-primitive (:and Feeling-Attribute Contempt Dislike)
  :annotations (Feeling-Attribute-Type
                (documentation "Indignation, displeasure, and ill will felt about something regarded as a slight, affront, insult, or indignity.  This is a collection; for an explanation of a typical #$FeelingAttributeType, see #$Happiness.  More specialized #$FeelingAttributeTypes than #$Resentment are #$Jealousy and #$Envy.")))

(defconcept Respect
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "A feeling of just regard, consideration, or appreciation for the worth of someone or something.
Note:   #$Admiration (qv) is different than, or rather a more specialized form of, respect.  To feel #$Respect towards someone is just to feel that s/he should be treated with politeness and consideration, as having dignity; #$Admiration and #$Wonder-Admiration implies all of that, but also implies that the target of the #$Respect actually did something special or has some special quality that sets them apart from others (or at least from the respecter).  #$Respect is a #$Collection --- for an explanation of that, see #$Happiness.  Some more specialized #$FeelingAttributeTypes than #$Respect are #$Reverence, #$Wonder-Admiration, #$Adulation, #$Awe, etc. ")))

(defconcept Respiration
  :is-primitive Bodily-Function-Event--Involuntary
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The subset of #$PhysiologicalProcesses in which an organism performs respiration; i.e., it exchanges carbon dioxide for #$Oxygen which is used to oxygenate (in #$Vertebrates) hemoglobin, an oxygen carrier in the #$Blood distributed to all of the organism's cells.  #$Respiration concerns the exchange of #$Oxygen and waste gasses with the environment.  Circulation concerns distributing the oxygenated #$Blood to the cells.  The oxygen carrier (hemoglobin) releases the oxygen to the cells, allowing chemical reactions necessary to sustain the cell life, which in turn sustains the life of the breather.")))

(defconcept Respiratory-System
  :is-primitive (:and Animal-Body-Part Biological-Living-Object)
  :annotations (Animal-Body-Part-Type
                Unique-Anatomical-Part-Type
                (documentation "The collection of all animals' respiratory systems.  A #$RespiratorySystem is composed of body parts (such as the lungs) of the animal, which together function so as to enable it to breathe.
Note: it is generally required that the #$RespiratorySystem (of a #$Vertebrate) work together with the #$CirculatorySystem (qv), as the air is used to supply needed substances to the blood and to remove waste products from the blood.")))

(defconcept Restaurant
  :is-primitive (:and Local-Customer-Contact-Point
                      Business
                      Food-Service-Organization
                      Service-Establishment
                      Single-Site-Organization)
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations; a subset of both #$FoodServiceOrganization and #$ServiceEstablishment.  Every element of #$Restaurant has particular locations (one or more) which serve meals in exchange for money.  Subsets of #$Restaurant include #$FineRestaurant and #$FastFoodRestaurant, among others.")))

(defconcept Resting--Relaxing
  :is-primitive Bodily-Function-Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of events in which an animal abstains from strenuous physical activity.")))

(defconcept Restlessness
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "The feeling of being troubled, restless, concerned about something, or in emotional turmoil.  This is a #$Collection --- for an explanation of that, see #$Happiness.")))

(defconcept Retail-Organization
  :is-primitive (:and Commercial-Organization Selling-Organization)
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  Each element of #$RetailOrganization is an enterprise that engages primarily in selling goods to end-users or consumers, rather than to wholesale customers.  Examples: #$SearsTheCompany, #$WaldenBooksTheCompany, #$StudtmanPhoto.")))

(defconcept Retail-Store
  :is-primitive (:and Organization-With-Individual-Customers
                      Local-Customer-Contact-Point
                      Retail-Organization
                      Single-Site-Organization)
  :annotations (Existing-Object-Type
                (documentation "A collection of retail organizations.  Every element of #$RetailStore is a #$SingleSiteOrganization (but not necessarily a stand-alone business) which sells goods directly to consumers at store's #$physicalQuarters.  Note that the Niemann-Marcus store at the Galleria is an instance of #$RetailStore, but the Niemann-Marcus company as a whole is not, because it is a #$RetailStore-ParentCompany (with multiple outlets); both are #$RetailOrganizations.")))

(defconcept Right-Object
  :is-primitive Partially-Tangible
  :annotations (Existing-Object-Type
                (documentation "The collection of objects that are meant for, or are found on and distinctively structured for, the right side of some larger entity or ensemble of parts.  Examples include right hands, right shoes, right automobile turning signals.")))

(defconcept Rigidity
  :is-primitive (:and Scalar-Interval Physical-Attribute)
  :annotations (Primitive-Attribute-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute.  Each element of #$Rigidity is a property of rigidity belonging to physical objects.  Rigidities in Cyc are measured using a #$GenericValueFunction.  Rigidities of objects are reported using the predicate #$rigidityOfObject.")))

(defconcept Ritual
  :is-primitive Purposeful-Action
  :annotations (Script-Type
                (documentation "The collection of highly stylized or formalized actions (or series of actions) performed by #$Persons (alone or in groups), usually performed with some solemnity.  
Note: as further explained in the comment for #$SocialRitual, a #$WeddingCeremony or #$Inauguration is `more than' just a #$Ritual, but following the `script' for such a ceremony, and actually carrying it out, is a #$Ritual.")))

(defconcept River
  :is-primitive Stream
  :annotations (Existing-Object-Type
                (documentation "A collection of topographical features.  Each element of #$River is a natural stream of water, normally of a large volume.  Cf. #$Creek.  Examples of #$River include the #$ColoradoRiverOfArizona, the #$AmazonRiver, the #$ChangJiangRiver, the #$ThamesRiver.")))

(defconcept Cyc_Role
  :is-primitive Intangible-Individual
  :annotations (Relation-Type
                (documentation "Instances of #$Role express relations between a #$Situation and the things involved in it.  #$ActorSlots (the relationships between #$Events and the #$SomethingExistings that act in them) are a special type of #$Role.")))

(defconcept Roof-Of-A-Construction
  :is-primitive (:and Part-Of-Building Surface-On-Tangible-Object)
  :annotations (Existing-Object-Type
                (documentation "The collection of all roofs of structures which are instances of #$HumanShelterConstruction.  Like instances of #$Wall-Vertical, instances of #$RoofOfAConstruction may be considered as having one or two sides; the 'inner' side of a roof may or may not qualify as a #$CeilingOfARoom.  It is understood that one and only one side of a #$RoofOfAConstruction is 'exposed to the elements.'")))

(defconcept Room-In-A-Construction
  :is-primitive Space-In-A-Hoc
  :annotations (Existing-Object-Type
                (documentation "The set of rooms in ConstructionArtifacts")))

(defconcept Rotation--Non-Periodic
  :is-primitive (:and Movement--Rotation Movement--Non-Periodic)
  :annotations (Temporal-Object-Type
                (documentation "The set of all rotational movements in which rotation occurs in a nonperiodic fashion; e.g., the turning of a knob on a kitchen appliance or a radio dial, or movements of a trackball.  See also #$Rotation-Periodic for the context-sensitive nature of this dichotomy.")))

(defconcept Rotation--Periodic
  :is-primitive (:and Movement--Rotation Movement--Periodic)
  :annotations (Temporal-Object-Type
                (documentation "A collection of rotational movements; a subset of #$Movement-Rotation.  In any instance of #$Rotation-Periodic, either partial rotation (e.g., rocking) or full rotation (e.g., spinning) occurs periodically.  Examples include the swinging of a clock pendulum and the rotation of the Earth on its axis.  Note that the accuracy and duration of the periodic rotation is context-dependent.  E.g., in a context spanning a long enough period of time, and/or if measured sufficiently accurately, the Earth's rotation does not have a fixed period.  In a context short enough, and `approximate' enough, a spinning Olympic ice skater is performing a #$Rotation-Periodic event, even though a few seconds later they slow down and stop rotating.")))

(defconcept Rst-Relation
  :is-primitive Intangible-Object-Predicate
  :annotations (Predicate-Category
                (documentation "A set of predicates describing possible relations between text constituents. These predicates are roughly adopted from work in Rhetorical Structure Theory (Mann & Thompson) and the SENSUS ontology (Hovy). Typically, these relations serve as necessary coherence links between segments of a text.")))

(defconcept Rude-Action
  :is-primitive (:and Social-Occurrence Action)
  :annotations (Default-Disjoint-Script-Type
                (documentation "The collection of behaviors that go against the social conventions of politeness.  This will be a different set of behaviors in different circumstances (contexts).  In an office, e.g., it might be rude to make a loud noise, but at a football game it might be rude to not do so.")))

(defconcept Rule-Macro-Predicate
  :is-primitive Predicate
  :annotations (Predicate-Category
                (documentation "Instances of #$RuleMacroPredicate are predicates that have, implicit in their definition, the schema for a class of quantified formulas.  A ground assertion (GAF) using one of these predicates is in fact shorthand for a rule fitting this schema.  For example, #$genls is a #$RuleMacroPredicate and its implicit schema would be (#$implies (#$isa ?X ARG1) (#$isa ?X ARG2)).  Therefore, (#$genls #$Poodle #$Dog) is shorthand for the rule (#$implies (#$isa ?X #$Poodle) (#$isa ?X #$Dog)).  #$RuleMacroPredicates may be supported by system code, as is #$genls, or they may be defined with an #$expansionAxiom.  In general, one should only introduce a new RuleMacroPredicate if 1) there is a plan to eventually provide code support for efficient reasoning with its uses, and/or 2) using it enables useful type-level reasoning.")))

(defconcept Sadness
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "Emotion felt when one is unhappy or low-spirited. This is a collection; for more details, see #$Happiness.  Some more specialized #$FeelingAttributeTypes are #$Remorse, #$Gloominess, #$Disappointment, #$Depression-Emotion, #$Grief, #$Misery, #$Despair, #$Anguish, etc.")))

(defconcept Safeness
  :is-primitive Script-Performance-Attribute
  :annotations (Script-Performance-Attribute-Type
                (documentation "#$Safeness is the #$ScriptPerformanceAttributeType for describing actions in which the performer acts without endangering itself or others.")))

(defconcept Sale-By-Check
  :is-primitive Buying
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "Sales in which the payment tendered is a check.")))

(defconcept Sale-By-Credit-Card
  :is-primitive Buying
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "A collection of events; a subset of #$Buying.  An instance of #$SaleByCreditCard is a purchase in which the #$buyer makes payment using some element of #$CreditCard (the set of all credit cards).
Note: This is different from instances of #$CreditSale (q.v.), in which the #$seller (rather than the credit card company) extends credit to the customer.")))

(defconcept Sales-Activity
  :is-primitive (:and Business-Event Commercial-Activity Purposeful-Action)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each element of #$SalesActivity is an event which the performing agent does in an effort to achieve a subsequent sale to a second agent.  Types (i.e., subsets) of #$SalesActivity include #$Advertising, telemarketing, showing sample and/or actual products to customers in a show room or a store.  Elements of #$SalesActivity which are successful lead to corresponding elements of #$Buying.  Note: #$SalesActivity does NOT include manufacturing, accounting, and other such ancillary business activities.")))

(defconcept Sales-Agreement
  :is-primitive Agreement
  :annotations (Existing-Object-Type
                (documentation "A collection of agreements.  Each element of #$SalesAgreement is an agreement which governs aspects of some #$Buying activity.  This includes bidding activities (in the subset #$SalesBidOrContract), as well as the instances of #$SalesContract.")))

(defconcept Sales-Person
  :is-primitive (:and Professional Business-Person)
  :annotations (Occupation-Type
                (documentation "A collection of persons; a subset of #$Professional.  Each element of #$SalesPerson is someone whose principal job activity is negotiating with potential buyers, finding out what they want, describing what is available, taking orders, etc.  This collection includes door-to-door salespeople, Avon reprentatives, new and used car salespeople, sales representatives for the product lines of large industrial companies, and store clerks working on a sales commission.")))

(defconcept Salting-Food
  :is-primitive Preserving-Food
  :annotations (Script-Type
                (documentation "Soaking food in salt to prevent it from rotting.")))

(defconcept Satisfaction
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "Feeling of appeasement, not only of one's desires or longings but also of his needs or requirements.  This is a collection; for an explanation of a typical #$FeelingAttributeType, see #$Happiness.   Some more specialized #$FeelingAttributeTypes than #$Satisfaction are:  #$Approval, #$Pride, #$Triumph-TheFeeling, etc. ")))

(defconcept Scalar-Interval
  :is-primitive (:and Attribute-Value N-Tuple-Interval)
  :annotations (Cyc_Collection
                Object-Type
                (documentation "A collection of mathematical objects; a subset of #$NTupleInterval.  For a measurable quantity, the ordered sequence of possible values may be thought of as a line.  Each element of #$ScalarInterval is a line segment (or point) on such a line, representing a range of consecutive values.  The most common case is where the line is just the real number line, and the scalar interval is either a a contiguous set of points there (i.e., a range of numbers) or just a single point there (i.e., a number).  Another common case is where the line has some unit of measure marked off, such as meters.  In relation to the latter kind of interval, see also #$UnitOfMeasure.")))

(defconcept Scalar-Point-Value
  :is-primitive Scalar-Interval
  :annotations (Cyc_Collection
                Object-Type
                (documentation "The collection of minimal scalar intervals.  That is, each element of #$ScalarPointValue is a scalar interval which has no `width'.  Scalar intervals include both pure numbers, such as 3.14, and linear measurements such as 3.14 meters, which in CycL would be written `(#$Meter 3.14)'.")))

(defconcept School-Institution--K-Through-12
  :is-primitive Educational-Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of school organizations.  An element of #$SchoolInstitution-KThrough12 is an educational institution which provides instruction in all or some of the grades from kindergarten (K) through high school (12th-grade) education.  Commonly, individual schools teach some subset of those grades; see also the specializations #$ElementarySchoolInstitution, #$MiddleSchoolInstitution, and #$HighSchoolInstitution.")))

(defconcept Scientific-Field-Of-Study
  :is-primitive Field-Of-Study
  :annotations (Object-Type
                (documentation "A collection of fields of study.  Each element of #$ScientificFieldOfStudy is a specialized body of knowledge, theory, hypothesis, observations, and problems, which are the propositional contents of the systematic endeavor to explain the natural world by rational (and frequently, quantifiable) methods, including induction, falsifiable hypotheses tested by repeatable physical experiments, and deductive proof.  #$ScientificFieldOfStudy includes the traditional hard sciences (e.g., #$Physics, #$Chemistry), the life sciences (e.g., #$Biology, #$Genetics, #$Toxicology), and #$Mathematics.")))

(defconcept Scientist
  :is-primitive Professional
  :annotations (Occupation-Type
                (documentation "A set of persons; a subset of #$Professional.  Each element of #$Scientist is a person who is educated and employed in one (or more) of the natural or abstract sciences.  Elements of #$Scientist include members of its subsets #$Astronomer, #$Chemist, #$Linguist, #$Mathematician, #$Geneticist, #$CulturalAnthropologist, etc.  Examples of #$Scientist: #$CharlesDarwin, #$RichardFeynman, Noam #$Chomsky.")))

(defconcept Script-Performance-Attribute
  :is-primitive Attribute-Value
  :annotations (Attribute-Type
                (documentation "The most general type of attribute describing the manner in which an actor performs an action; specializations of this include #$CorrectnessOfPosture, #$Competence, #$Precision, #$Dexterity, #$Gracefulness, #$Creativity, etc.  The elements of #$Precision, e.g., represent the various qualitative levels such as high precision, low precision, etc.")))

(defconcept Script-Performance-Attribute-Type
  :is-primitive Primitive-Attribute-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each #$ScriptPerformanceAttributeType is a type of attribute that can be used to describe the manner in which actions are performed.  Examples include: #$Competence, #$Precision, #$Dexterity, #$Gracefulness, #$Creativity, etc.  So, e.g., one may run a race with some measure of #$Gracefulness, some measure of #$Competence, etc.")))

(defconcept Script-Type
  :is-primitive (:and Cyc_Collection Situation-Type)
  :annotations (Cyc_Collection
                (documentation "#$ScriptType is the collection of subsets of #$Event.  Classifying events and (especially) actions by type allows Cyc to reason about the general characteristics of different kinds of occurrences.")))

(defconcept Sculpture
  :is-primitive (:and Visual-Information-Source Art-Object Artifact)
  :annotations (Existing-Object-Type
                (documentation "A collection of art objects.  Each element of #$Sculpture is a tangible three-dimensional work of art; buildings are NOT included, even though sculptural features of buildings (such as friezes) are.  Types of #$Sculpture include stone statues, friezes, wood carvings, pipes welded into abstract art sculptures, etc.  Examples: the #$StatueOfLiberty, the #$MountRushmoreMonument, Michelangelo's David, the friezes on the Parthenon, the Buddhas at Longan.")))

(defconcept Sea
  :is-primitive (:and Body-Of-Water Water--Saline Sea-Water)
  :annotations (Existing-Object-Type
                (documentation "A collection of topographical features.  Each element of #$Sea is a body of salt water as large or larger than a lake.  #$Ocean is a subset of this collection.  Examples of #$Sea: #$PacificOcean, #$IonianSea, #$GulfOfCorinth, #$EastChinaSea, #$BlackSea.")))

(defconcept Season-Of-Year
  :is-primitive Weather-Event
  :annotations (Temporal-Object-Type
                (documentation "A collection of events -- specifically, the seasons that occur as #$subEvents of an #$AnnualClimateCycle.  For example, the elements of #$WinterSeason are all instances of #$SeasonOfYear.")))

(defconcept Seating-Device
  :is-primitive Physical-Device
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A set of physical objects.  An instance of #$SeatingDevice is a device whose #$primaryFunction is to serve as a sitting place for people.  Types of seating devices include sofas, chairs, benches, camp and stadium stools, theatre seats, swings, bicycle seats, saddles, and more.")))

(defconcept Sea-Water
  :is-primitive |(liquid-fn Water--Saline)|
  :annotations (Tangible-Stuff-State-Type
                (documentation "A collection of tangible things; a subset of both #$LiquidTangibleThing and #$Water-Saline.  Each element of #$SeaWater is a portion of salt water with the kind of mineral concentrations found in oceans--including the oceans themselves.")))

(defconcept Secretion--Bodily
  :is-primitive Natural-Tangible-Stuff
  :annotations (Tangible-Stuff-Composition-Type
                (documentation "The collection of all #$NaturalTangibleStuff secreted by an organism's body.  There are a wide variety of bodily secretions, including #$Hormones, #$Mucus, #$InsulinTheSecretion, and #$Semen.  Secretions may be deposited either within the body (e.g., #$BileTheSecretion) or outside of it (e.g., #$Sweat). 
Note: Secretions are different from #$ExcretionSubstance in that secretions are not necessarily waste products.  E.g., they may be a release of pheromones to attract a mate, a layer of sweat to cool off the organism, a layer of nectar to attract bees, etc.  Some subsets of #$Secretion-Bodily, such as #$Sweat, are also subsets of #$ExcretionSubstance (i.e., wastes).")))

(defconcept Secretion-Event
  :is-primitive (:and Emitting-An-Object Biological-Production-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events; a subset of #$BiologicalProductionEvent.  Each element of #$SecretionEvent is an event in which a living animal or plant secretes a substance.")))

(defconcept Seed
  :is-primitive (:and Plant-Blo Biological-Stage-Of-Development)
  :annotations (Existing-Object-Type
                (documentation "The collection of all plant seeds: small nodules or granules consisting of young angiosperms and their protective containers during early (zygotic and embryonic stages) of development.  Seeds, if planted, may grow into adult plants.")))

(defconcept Self-Confidence
  :is-primitive Confidence
  :annotations (Feeling-Attribute-Type
                (documentation "Faith in oneself and one's powers without any suggestion of conceit or arrogance.   If one has a large portion of #$SelfConfidence, their state of mind is often marked by ease and freedom from uncertainty, diffidence, or embarrassment.  This is a collection; for an explanation of a typical #$FeelingAttributeType, see #$Happiness.  A typical more specialized #$FeelingAttributeType than #$SelfConfidence is #$Vanity.")))

(defconcept Self-Employed-Worker
  :is-primitive Professional
  :annotations (Occupation-Type
                (documentation "A collection of persons; a subset of #$Professional.  Each element of #$SelfEmployedWorker is a worker who earns a living from funds paid directly to him/her by customers, or who is paid by a company s/he owns.  An instance of #$SelfEmployedWorker has no boss but him/herself.")))

(defconcept Self-Powered-Device
  :is-primitive (:and Powered-Device Mechanical-Device)
  :annotations (Existing-Object-Type
                (documentation "A collection of #$MechanicalDevices, classified by the main way of supplying the force needed to operate them.  #$SelfPoweredDevice is a subset of #$PoweredDevice.  An instance of #$SelfPoweredDevice has an `on-board' part which converts some kind of potential energy into force.  That may be a battery and motor to convert electricity stored in the battery into kinetic energy (as in a cordless electric drill); other examples are the elements of #$Automobile, which (typically) convert gasoline and battery power to get the energy to move the vehicle.  Some muscle power is involved in operating both a cordless drill and an automobile, but not the main part of the power, in either case.  Negative exemplars of a #$SelfPoweredDevice include a #$Bicycle (powered by the person that rides it) a Cable Car (pulled along by cabled embedded in the street) and subway train (often powered by an electrified `third rail').")))

(defconcept Selling-Organization
  :is-primitive Commercial-Service-Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  Each element of #$SellingOrganization is an organization whose main function is to sell things by conducting sales activities.  Examples: sales departments (e.g., the sales department of #$ToyotaTheCompany); advertising agencies; and retailers (e.g., #$WaldenBooksTheCompany, #$KMartCompany).")))

(defconcept Semiconductor-Stuff
  :is-primitive Tangible-Thing
  :annotations (Existing-Stuff-Type
                (documentation "The collection of those elements of #$TangibleThing that can, under varying electrical fields, behave as an electrical insulator at times and an electrical conductor at other times.")))

(defconcept Semi-Solid-Tangible-Thing
  :is-primitive Tangible-Thing
  :annotations (Tangible-Stuff-State-Type
                (documentation "A collection of tangible things.  Each element of #$SemiSolidTangibleThing is a tangible thing that is intrinsically in a semisolid state.  Some semisolids are pourable (e.g., sand) and some are not (e.g., jello).  When a force is first applied to a semisolid, the object moves or deforms substantially and does not break or crack.  Semisolids are stirrable (thus, rubber is probably not a semisolid).  A semisolid can be deformed into any shape that does not require some dimension of the object to be smaller than all dimensions of the granule size of that stuff; e.g., a #$Mob of hailstones cannot form a paper-thin sheet.  The granules of a #$Pourable semisolid, such as sand, may themselves belong to #$SolidTangibleThing.")))

(defconcept Sending-Something
  :is-primitive (:and Human-Activity
                      Causing-Another-Objects-Translational-Motion
                      Losing-User-Rights
                      Directed-Translation)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of events in which an #$Agent intends to have an object (other than itself) delivered to some other #$Agent. This involves at least a temporary loss of some user rights to the object by the sender.  If successful, an instance of #$SendingSomething is also an instance of #$TransferringPossession.")))

(defconcept Sensor
  :is-primitive Tangible-Thing
  :annotations (Existing-Object-Type
                (documentation "The collection of devices, biological or artificial, that gather information.  
Note:  If a well-known named part of such an entity does the data-gathering, then generally only those parts are considered sensors, not the whole entity.  E.g., even though a person gathers information, we generally do not consider them to be a sensor, but rather the sensors are their eyes, ears, skin, etc.  In a context such as an ophthalmology convention, `well-known part' has a different binding, and they would consider just certain parts of the eye to be sensors.")))

(defconcept Sensory-Attribute
  :is-primitive (:and Attribute-Value
                      |(meaning-in-system-fn sensus--information-1997 SENSE-AND-MEASURE-QUALITY)|)
  :annotations (Unordered-Attribute-Type
                (documentation "A collection of attributes.  Each element of #$SensoryAttribute is a sensory datum detectable by sentient beings.  #$SensoryAttribute includes colors, odors, tastes, sounds, and feels, as well as the various feelings represented by its subset #$InternalSensoryAttribute.  Examples of #$SensoryAttribute: #$Rough, #$Smooth, #$Slimy, #$GoldenColor, #$VeryBrightLightIntensity, (#$HighAmountFn #$NoiseLevelAttribute).")))

(defconcept Sensory-Information
  :is-primitive Mental-Information
  :annotations (Stuff-Type
                (documentation "A collection of mental information.  Each element of #$SensoryInformation is the propositional content of a mental state in which the nervous system of an animal or other sentient perceives something.  For example, if I perceive that my office is hot, the information is that my [the perceiver's] office is hot; if you perceive that my eyes are brown, the information is that Deborah's eyes are brown.")))

(defconcept Sensory-Reaction-Type
  :is-primitive (:and Attribute-Type Primitive-Attribute-Type)
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$SensoryReactionType is an #$AttributeType, describing one natural kind of sensation (e.g., pain, pressure, pleasure, warmth, etc.) that may be felt by #$PerceptualAgents.  Some examples of #$SensoryReactionType are #$LevelOfDizziness, #$LevelOfSoreness, #$LevelOfColdSensation, etc.")))

(defconcept Separating-A-Mixture
  :is-primitive (:and Destruction-Event Separation--Complete)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events.  In each instance of this collection, a #$Mixture is separated into two or more #$constituents.")))

(defconcept Separation--Complete
  :is-primitive (:and Physical-Event Separation-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of physical separation events.  In each #$Separation-Complete, one object is separated into two or more distinct pieces.")))

(defconcept Separation-Event
  :is-primitive Physical-Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  In each #$SeparationEvent, an object is cut, scraped, broken, cracked or pulverized, so that part of the object is no longer attached where it once was.  That part has not necessarily completely separated; it may still be attached in places.  See #$Separation-Complete for the complete case.")))

(defconcept September
  :is-primitive Calendar-Month
  :annotations (Month-Of-Year-Type))

(defconcept Series
  :is-primitive Situation
  :annotations (Cyc_Collection
                (documentation "The collection of situations in which 2 or more ''parts'' or ''members'' are ordered in some linear fashion.  For example, the line of people at a ticket booth, an alphabetized set of words, or the series of pitches in a baseball game.")))

(defconcept Service-Establishment
  :is-primitive (:and Business
                      Commercial-Service-Organization
                      Local-Customer-Contact-Point)
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  Each element of #$ServiceEstablishment is a local service organization at a single physical location.  What an individual retail store or outlet is for tangible products, a service establishment is for services.  Examples: #$Threadgills restaurant; #$DaytonaSpeedway; Brake Check store at 35th and Lamar Blvd., Capital Medical Clinic in Medical Park Towers, and the U.S. Post Office on West 6th Street in Austin, TX.")))

(defconcept Service-Event
  :is-primitive (:and Purposeful-Action Composite-Physical-And-Mental-Event)
  :annotations (Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each element of #$ServiceEvent is an event in which one agent (or set of agents) does something for another agent (or set of agents).  The former is the #$providerOfService; the latter is the #$recipientOfService.  A service event may involve maintenance, repair, or refurbishing of some object belonging to the #$recipientOfService (including care of his/her person); a service event may involve gathering or transmitting information, providing advice, entertainment, transportation, etc.  Service events may or may not be done for payment.")))

(defconcept Service-Organization
  :is-primitive Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  Each element of #$ServiceOrganization is an organization whose main function is to provide some set of services, i.e., to perform certain service events.  A service organization may be a subsidiary, a department, or an independent organization.  A service organization may or may not be a for-profit organization; see the subset #$CommercialServiceOrganization.  Examples: #$FederalExpress; the mail department at MCC; #$NewYorkHospital; the #$USMedicareAdministration; the Jiffy Lube at Guadalupe and 38th St; #$Threadgills restaurant; KEYE-TV in Austin, TX.")))

(defconcept Serving-Food-Or-Drink
  :is-primitive (:and Directed-Translation
                      Transportation-Event
                      Handling-An-Object
                      Human-Activity
                      Service-Event)
  :annotations (Temporal-Object-Type
                Default-Disjoint-Script-Type
                (documentation "A collection of events.  Each element of #$ServingFoodOrDrink is an event in which an item of food or drink is served.  It starts when the server picks up the food or drink from a preparation or pickup area and ends when it is deposited at the location where the people being served may eat or drink it.  Such events are typically part of the job of any restaurant server who waits on tables, and they may be performed also by a host or servant at a dinner party or banquet, or by a family member at a home meal.  Note: this collection does not include placing a `serving' of food from a common dish onto a diner's plate.")))

(defconcept Set--Mathematical
  :is-primitive Set-Or-Collection
  :annotations (Cyc_Collection
                (documentation "The collection of mathematical sets.  An element of #$Set-Mathematical can be any arbitrary set, including sets whose members have nothing in common.  In contrast, the members of an instance of #$Set-Mathematical's sibling #$Collection (q.v.) all have some important, natural properties in common.  Sets and collections also differ in that there cannot exist two distinct sets that have exactly the same elements.  A third point of contrast between sets and collections is that rarely will it be desirable to create a new constant to refer to a set.  Instead, a set will either be intensionally specified by a defining property, using #$TheSetOf, as in (#$TheSetOf ?X (#$likesAsFriend Lenat ?X)), or extensionally specified by listing its elements, using #$TheSet, as in (#$TheSet 3 4 5).  (In certain cases, a set will be extensionally specified by means of one of the more specialized functions #$ThePartition or #$TheCovering.  See #$partitionedInto and #$covering.)")))

(defconcept Set-Or-Collection
  :is-primitive Mathematical-Or-Computational-Thing
  :annotations (Cyc_Collection
                (documentation "The collection of all mathematical sets and all collections.  Instances of #$Set-Mathematical and instances of #$Collection share some basic common features.  They are both abstract entities, lacking spatial and temporal properties.  More specifically, they (can) have elements, and hence may stand to one another in set-theoretic relations such as #$subsetOf and #$disjointWith.  Nevertheless, sets and collections differ in two important respects.  Every collection is associated with an intensional criterion for membership -- a more or less natural property or group of properties possessed by its members.  (The criterion for membership need not, and often will not, be precisely definable in any language.)  Collections are thus akin to kinds.  In contrast, the elements of a set are not required to be homogeneous in any respect; any things whatsoever may together comprise the members of a set.  The second major difference between sets and collections is that no two distinct sets can be co-extensional (be such that every element of one is an element of the other and conversely).  Sets are, so to speak, identified on the basis of their extensions.  Collections, on the other hand, are identified by their intensional criteria for membership.  So collections which have exactly the same elements may be distinct, differing in their respective membership criteria.")))

(defconcept Set-With-Structure
  :is-primitive (:and Mathematical-Object Situation)
  :annotations (Object-Type
                (documentation "The collection of all mathematical structures each consisting of a set with structuring relations (e.g., a #$BinaryPredicateOnSets) on that set (and, optionally, one or more functions and/or selected other sets, individuals or subsets for that set).  Examples include #$PartiallyOrderedSets, #$MultiGraphs, etc.  Sometimes mathematicians specify these using a #$Tuple of sets, relations, functions, and/or individuals, as specifications.")))

(defconcept Shaft
  :is-primitive (:and Artifact Solid-Tangible-Thing)
  :annotations (Existing-Object-Type
                (documentation "A collection of artifacts.  An instance of #$Shaft is an object which is long, straight, and cylindrical.  A shaft may be made of wood, metal, etc.")))

(defconcept Shame
  :is-primitive Embarrassment
  :annotations (Feeling-Attribute-Type
                (documentation "Painful self-conscious feeling of guilt, shortcoming, or impropriety.  #$Shame often accompanies social disgrace or disrepute.  It often leads to #$Remorse.  This is a collection; for an explanation of a typical #$FeelingAttributeType, see #$Happiness.")))

(defconcept Shape-Describing-Predicate
  :is-primitive (:and Physical-Feature-Describing-Predicate
                      Extensional-Representation-Predicate)
  :annotations (Predicate-Category
                (documentation "A collection of predicates.  Each element of #$ShapeDescribingPredicate is a predicate used in assertions about abstract shapes and shape-like configurations, such as posture.  Examples: #$shape, #$xyCrossSectionShape, #$yzCrossSectionShapeType, #$continuouslyConnectedTo, #$postureOfAnimal.")))

(defconcept Shape-Function
  :is-primitive Non-Predicate-Function
  :annotations (Relation-Type
                (documentation "A collection of Cyc functions.  Each element of #$ShapeFunction is a function which returns an element of #$AbstractShape, an abstract physical region with a specific shape and dimensions.  Elements of #$ShapeFunction include #$RectangleFn, #$EllipseFn, #$CircleFn, #$RectangularSolidFn, #$CylinderFn, etc.  Each shape function takes as argument(s) the dimension(s) of #$Distance needed to determine a geometric shape of that kind, then returns a shape which has those dimensions.  For example, (#$CylinderFn L D) denotes an abstract cylinder of length L and diameter D.")))

(defconcept Shape-Type
  :is-primitive (:and Situation-Type Attribute-Type)
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$ShapeType is a collection of abstract physical shapes.  These are shapes which, for example, a physical object can have when considered `in outline', as occupying a region of space which has certain dimensions and geometrical characteristics.  Elements of #$ShapeType include #$ThreeDimensionalShape, #$TwoDimensionalShape, #$Polygon, #$Square, #$Circle, #$SphereShape, #$CylinderShape, #$PyramidShape, etc.")))

(defconcept Shaping-Something
  :is-primitive (:and Intrinsic-State-Change-Event Handling-An-Object)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events.  In each #$ShapingSomething, something (usually a more or less `plastic' object) is given a definite shape.  In many, but not all, cases (e.g., #$MakingPottery), an instance of #$ShapingSomething is also a #$CreationEvent,   Normally, elements of #$ShapingSomething are concerned with the basic, overall shape of an object.  Thus, a #$PolishingSomething event, which doesn't affect the basic shape of the #$objectOfStateChange, is not a #$ShapingSomething.")))

(defconcept Shared-Note
  :is-primitive (:and Individual Text-Group)
  :annotations (Cyc_Collection
                Object-Type
                (documentation "#$SharedNote is an element of the Cyc collection #$DocumentationConstant.  Each instance of #$SharedNote is a constant which contain only documentation (usually a #$comment) about two or more constants (not including that documentation constant).  See #$sharedNotes for more information.")))

(defconcept Sharing
  :is-primitive (:and Temporary-Change-Of-User-Rights
                      Gaining-User-Rights
                      Making-Something-Available)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events; a subset of #$MakingSomethingAvailable (among other supersets).  In an instance of #$Sharing, one #$Agent receives #$PrimaryRoleUseRights over an object for a limited time from another #$Agent, who doesn't give up his or her own right to use it, too (but does give up exclusive right to it).  Cf. #$BorrowingSomething.")))

(defconcept Shattering-Event
  :is-primitive (:and Destruction-Event Separation-Event Separation--Complete)
  :annotations (Script-Type
                (documentation "A collection of events.  In each #$ShatteringEvent, something is destroyed by being broken into a mob of pieces. [A `mob' means `a large but indeterminate number']   Since the salient parts of the #$inputsDestroyed must be #$Brittle in order for this to happen, fluids (such as liquid water) and elastic stuff (such as rubber at room temperature) will generally not undergo any #$ShatteringEvents.  Items which can be an #$objectActedOn in shattering events are typically made of glass, pottery, bone, plaster, etc.  Many substances, particularly solid metals and alloys, are extremely difficult to shatter.")))

(defconcept Shaving-Something
  :is-primitive (:and Handling-A-Device
                      Separation--Complete
                      Intrinsic-State-Change-Event
                      Movement-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events.  In each #$ShavingSomething event, thin pieces of material on an object's surface are removed.  An example would be someone whittling a wooden spoon, someone using a lathe to make a table leg, someone scraping the top layer of mold and cheese off a brick of cheese that was left in the refrigerator just a little too long, etc.  
WARNING: an event in which someone ``shaves'' their body hair (a #$ShavingBody event) from one's face, legs, etc. with a shaver or razor is NOT a  #$ShavingSomething event; rather, it is an element of the collection #$CuttingSomething.  If one uses a depilatory such as Nair, then one could actually ``shave'' (genuinely a #$ShavingSomething event) the resultant coating of depilatory and separated hair ends away. ")))

(defconcept Shear-Strength
  :is-primitive (:and Scalar-Interval Physical-Attribute)
  :annotations (Primitive-Attribute-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute.  Each element of #$ShearStrength represents a specific capacity of some physical object to resist the slipping of one segment in relation to another.  Shear strengths are designated using a #$GenericValueFunction; higher value means more resistance to slippage.  Shear strengths of objects are indicated with the predicate #$shearStrengthOfObject.")))

(defconcept Sheet-Of-Some-Stuff
  :is-primitive Partially-Tangible
  :annotations (Existing-Object-Type
                (documentation "A collection of tangible stuff.  Each element of #$SheetOfSomeStuff is a substance which (in its `intrinsic' shape) is continuous and, when flattened, uncrumpled, unfurled, etc, has one dimension which is significantly smaller than the other two dimensions.  The requirement of being a continuous sheet does not preclude some type of penetrability, as in instances of #$Screen, #$Netting, or #$LaceCloth.  Belonging to this collection implies nothing about the current configuration of the object; in particular, elements of #$SheetOfSomeStuff need not be lying flat.  Aluminum foil on a roll or a bedspread crumpled up on a bed are instances of #$SheetOfSomeStuff. Cf. #$SheetShaped, #$TwoDimensionalShape.")))

(defconcept Shell--Animal-Body-Part
  :is-primitive (:and Skeletal-System Biological-Living-Object)
  :annotations (Animal-Body-Part-Type
                Unique-Anatomical-Part-Type
                (documentation "The collection of all animal shells.  An animal's shell is one of its #$AnimalBodyParts, and functions as a hard protective outer covering for the animal.")))

(defconcept Shelter-Construction
  :is-primitive Artifact
  :annotations (Existing-Object-Type
                (documentation "A collection of artificial tangible objects.  Each element of #$ShelterConstruction is an artifact built by some entity or creature, including but not limited to humans, and intended for use as a shelter.  Elements of #$ShelterConstruction include bird nests, termite mounds, beaver dams, the #$SydneyOperaHouse, the #$PalaceOfFineArts-SanFrancisco, and the #$NewYorkHiltonAtBroadway.")))

(defconcept Shipping
  :is-primitive (:and Sending-Something Service-Event Transporting-Goods)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "Shipping of objects from one physical location to another. Shipping from the perspective of being done as a dedicated service, such as what UPS, the US Postal Service, or Dominoes Pizza Delivery might do.")))

(defconcept Shipping-Location
  :is-primitive (:and Humanly-Occupied-Spatial-Object Mailing-Location)
  :annotations (Contact-Location-Type
                Conventional-Classification-Type
                (documentation "A collection of places; a subset of #$ContactLocation.  Each element of #$ShippingLocation is a location to which merchandise is physically delivered, e.g., a house, an office, a corporate mailroom, a post office box.")))

(defconcept Shirt
  :is-primitive Clothing-Item
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A collection of objects.  Every element of #$Shirt is a clothing item that is worn to cover the upper part of the human torso, with openings for the neck and lower body, and either openings for, or sleeves encircling, the arms.  Subsets include #$LongSleeveShirt, #$Blouse, and #$TankTop.")))

(defconcept Shoe
  :is-primitive Clothing-Item
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A collection of objects.  Every element of #$Shoe is a shoe or shoelike thing worn on the feet.  Important subsets include #$Boot-Footwear, #$Sandal, #$Slipper, and #$CasualShoe.  Elements of the collection #$Shoe are single shoes.  Pairs of shoes are elements of the collection denoted by (#$PairFn #$Shoe).")))

(defconcept Short-Pants
  :is-primitive Pants
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A collection of objects; a subset of #$Pants.  Every element of #$ShortPants has pantlegs that cover only the upper part of the wearer's legs, being typically knee-length or shorter.")))

(defconcept Shredding-Event
  :is-primitive (:and Destruction-Event Separation-Event)
  :annotations (Script-Type
                (documentation "A collection of events.  In each #$ShreddingEvent, the #$inputsDestroyed are destroyed by a large number of #$Ripping #$subEvents.")))

(defconcept Sibling-Disjoint-Attribute-Type
  :is-primitive (:and Cyc_Collection Attribute-Type)
  :annotations (Sibling-Disjoint-Collection
                (documentation "A collection of collections.  Each element of #$SiblingDisjointAttributeType is a collection of attributes.  If COL is such a collection, then nothing can have two instances of COL as attributes unless those two instances are related in a #$genlAttributes relationship to each other.  For example, #$MaritalStatusOfPeople is an element of #$SiblingDisjointAttributeType; no person can have (at the same time) the #$maritalStatus #$Married and the #$maritalStatus #$Single.  However, a person could have both the status #$Single and the status #$Divorced, if #$Single is a #$genlAttributes of #$Divorced.  See also #$SiblingDisjointCollection.")))

(defconcept Sibling-Disjoint-Collection
  :is-primitive Cyc_Collection
  :annotations (Cyc_Collection
                (documentation "#$SiblingDisjointCollection captures a very important concept, but one that is rarely given a name.  There are many sets of sets for which any two member sets either will be disjoint (i.e., have no intersection) or else one will be a subset of the other.  For instance, consider the various types (i.e., sets) of animals in the usual Linnaean taxonomy:  Vertebrate, Bird, Dog, Mammal, Invertebrate, Person, etc.; Vertebrates and Invertebrates are mutually disjoint, while Bird, Mammal, Dog, and Person are all subsets of Vertebrate.  Dog and Person are disjoint with each other, but each of them is a subset of Vertebrate.  All of the Linnaean sets, or collections, of animals can be grouped together into one set, or collection, of sets, which in turn is an instance of #$SiblingDisjointCollection.   
It turns out that the real situation --- and the real definition of #$SiblingDisjointCollection --- is slightly more complicated than that.  Consider types of appliances: toasters, cars, shavers, clocks, etc.  Is the set of such appliance-types a #$SiblingDisjointCollection, the way we defined it above, for types of animals?  Almost, but not quite.  One could have an appliance-type `ClockRadio', which would be the set of all clock radios, and clearly each clock radio is both a clock and a radio, yet neither #$Clock nor #$RadioReceiver is a subset of the other.  So if we have some item that purports to be both a clock and radio, that is okay if one of the following three conditions is met:
(1) the collection #$Clock is known to be a subset of #$RadioReceiver;
(2) the collection #$RadioReceiver is known to be a subset of #$Clock;
(3) there is already defined a collection X which is a subset of both #$Clock and #$RadioReceiver.
More formally, the axiom that defines #$SiblingDisjointCollection is as follows: SIB is an element of #$SiblingDisjointCollection if and only if:
(#$implies
   (#$and 
       (#$isa C1 SIB) 
       (#$isa C2 SIB) (#$isa C1-EL C1)
       (#$different C1 C2))
   (#$or 
       (#$not (#$isa C1-EL C2)) 
       (#$thereExists C3 (#$and (#$genls C3 C2) (#$genls C3 C1) (#$isa C1-EL C3)))))
That axiom, together with the minimization of #$genls, gives us the following characterization of our concept:  If we have a collection SIB that is an element of #$SiblingDisjointCollection, and if we take two elements C1 and C2 of that collection SIB, then each element of C1 which is not an element of a common specialization (C3) of C1 and C2, MUST NOT BE an element of C2.
In cases where there are a few exceptions --- that is, a couple of elements of SIB might have some overlap --- but it is undesirable to explicitly create a new reified constant (like `ClockRadio', above) for that intersection, Cyc allows you to use an explicit mechanism to override the #$SiblingDisjointCollection constraints for a particular C1 and C2; namely, you would assert to Cyc (#$siblingDisjointExceptions C1 C2).  See also #$siblingDisjointExceptions.")))

(defconcept Side
  :is-primitive Surface--Physical
  :annotations (Region-Type
                (documentation "Elements are portions of some #$Surface-Physical which constitute a boundary between the inside and outside of a tangible object.")))

(defconcept Sign-The-Display
  :is-primitive (:and Hardcopy-Information-Bearing-Object
                      Visual-Information-Source)
  :annotations (Existing-Object-Type
                (documentation "A collection of information bearing objects (IBOs); a subset of #$VisualInformationSource.  Each element of #$SignTheDisplay is a tangible object typically posted where people can see it so that they can obtain information from it.  Uses of signs include identification of objects (e.g., street signs, name tags, species labels at zoos); advertising (e.g., billboards, neon signs, posters for garage sales); warnings (e.g., signs for road hazards or road construction, `No Trespassing' postings, printed tape marking off a police line).")))

(defconcept Simple-Graph--Graph-Theoretic
  :is-primitive (:and Simple-Path-System Multi-Graph)
  :annotations (Cyc_Collection
                (documentation "The collection of all #$PathSystems that are instances of both #$SimplePathSystem and #$MultiGraph.  Each instance of #$SimpleGraph-GraphTheoretic is a 'graph', as studied in graph theory, in which there are neither loops nor multiple links between the same pair of nodes.")))

(defconcept Simple-Noun
  :is-primitive Speech-Part
  :annotations (Linguistic-Object-Type
                (documentation "The collection of all simple nouns, also called common nouns. Simple nouns can typically be preceded by a determiner, and in English they inflect for number. Example: 'dog'.")))

(defconcept Simple-Path-System
  :is-primitive Cyc_Thing
  :annotations (Cyc_Collection
                (documentation "An instance of #$PathSystemType and the collection of #$PathSystems without loops or parallel links.  This collection includes #$SimpleGraph-GraphTheoretic when there are no non-node points along links.")))

(defconcept Simple-Repairing
  :is-primitive (:and Purposeful-Action
                      Action-On-Object
                      Human-Activity
                      Intrinsic-State-Change-Event)
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "The collection of events in which something gets fixed.")))

(defconcept Simple-Segment-Of-Path
  :is-primitive Path--Generic
  :annotations (Object-Type
                (documentation "The collection of all segments of #$Path-Generics each of which has no path junctions between its ends.  The two ends of such a segment may or may not coincide at the same location (i.e. a #$SimpleSegmentOfPath may form a loop.  See also #$SimpleUnloopedSegmentOfPath).  The only access to something located along a #$SimpleSegmentOfPath is via the #$endsOfPathSegment locations for that #SimpleSegmentOfPath.  When the segment is part of a specified #$PathSystem (as opposed to a mere #$CustomarySystemOfLinks), the predicate #$linkInSystem (or else #$loopInSystem) applies to it and the system.")))

(defconcept Simple-Whole-Body-Movement
  :is-primitive Body-Movement-Event
  :annotations (Temporal-Stuff-Type
                Script-Type
                (documentation "A collection of common bodily movements (e.g., walking, jumping) in which the whole body is involved in the movement.")))

(defconcept Single-Cell-Organism
  :is-primitive (:and Cell Organism--Whole)
  :annotations (Existing-Object-Type
                (documentation "The collection of living things which are all elements of both #$Organism-Whole and #$Cell.  Each element of #$SingleCellOrganism is an organism consisting of one self-reproducing living cell.")))

(defconcept Single-Doer-Action
  :is-primitive Action
  :annotations (Script-Type
                (documentation "A collection of actions.  Each element of #$SingleDoerAction is an action which can have only one `doer' (i.e., only one agent `doing' it).  Such events may be intentional or not.  Most bodily functions belong to subsets of this collection, because the only agent of a normal bodily function is the agent whose body it is  (e.g., #$Heartbeating, #$Bleeding).  For a type of action to be a subset of #$SingleDoerAction, it must be inconsistent to assert, for any member of the subset, both (#$doneBy ACT X) and (#$doneBy ACT Y), where X and Y are different.  In contrast, #$CarryingWhileLocomoting is NOT a subset of #$SingleDoerAction.  For, although an action of that kind might often be done by only one performer, it is also common for two or more people to cooperate in carrying something.")))

(defconcept Single-Residence-Unit
  :is-primitive Modern-Human-Residence
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A collection of human residences.  Each element of #$SingleResidenceUnit is either a modern-style detached house, an apartment, or another instance of #$ModernHumanResidence designed to accomodate either a single person or a single family (i.e., instance of #$FamilyCohabitationUnit).  Usually, each element of #$SingleResidenceUnit has a unique mailing address.")))

(defconcept Single-Site-Organization
  :is-primitive Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  An instance of #$SingleSiteOrganization is an organization which has a single location as its #$physicalQuarters.  For example, the #$KMartStore at Parmer Lane, Simon & David at the Arboretum, and Great Hills #$FireStation Number 2 would be positive instances.  But the #$KMartCompany, #$TomThumbTheCompany, and the Austin City Fire Department are negative examples, since those `parent' organizations have several sites as their #$physicalQuarters.")))

(defconcept Situation
  :is-primitive Individual
  :annotations (Cyc_Collection
                (documentation "#$Situation is the collection of situations.  A situation is a state of affairs; it identifies roles played by objects involved in the situation, and it articulates the relationships between those roles.  One important partitioning of #$Situation is:

(1) #$Event --- the dynamic situations.
(2) #$StaticSituation. --- they exist in time, but are not dynamic, more a set of relationships among objects.  E.g., consider the situation of Bill Clinton sitting in his easy chair on the evening of 7/4/96.   There are participant objects such as Bill and the chair, there are relationships such as the seat of the chair supporting his bottom and his weight being off his feet, etc.  There is a fuzzy line between #$Events and #$StaticSituations: one could think of Bill as `carrying out the process of sitting' while he's in his easy chair.  
(3) atemporal situations.  There are some abstract, non-spatial, non-temporal instances of #$Situation.  This is not very common, though; most situations of interest have (dynamic or static) temporal properties, and are instances of #$TemporalThing.  ")))

(defconcept Situation-Type
  :is-primitive Cyc_Collection
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  #$SituationType is the collection of subsets of #$Situation.")))

(defconcept Skeletal-System
  :is-primitive (:and Animal-Body-Part Biological-Living-Object)
  :annotations (Animal-Body-Part-Type
                Unique-Anatomical-Part-Type
                (documentation "The collection of all animals' skeletal systems.  A #$SkeletalSystem is a system of body parts used to support, separate, and protect the other parts of the body, especially the torso and the soft, vulnerable internal organs of the animal.  It can be an external #$Exoskeleton (see also: #$Shell-AnimalBodyPart) or an internal interlinking of numerous parts composed of #$Bone-BodyPart and #$Cartilage.")))

(defconcept Skin
  :is-primitive (:and Animal-Body-Part
                      Sheet-Of-Some-Stuff
                      Vibration-Through-Amedium-Sensor
                      Tactile-Sensor
                      Solid-Tangible-Thing)
  :annotations (Animal-Body-Part-Type
                (documentation "A (piece of) skin serves as outer protective and tactile sensory covering for (part of) an animal's body.  This is the collection of all pieces of skin.  Some examples include TheGoldenFleece (an entire skin) and YulBrynnersScalp (a small portion of his skin).")))

(defconcept Skirt
  :is-primitive (:and Clothing-Item Womens-Clothing)
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "The collection of all skirts, a category of women's clothing intended to cover the lower part of the body")))

(defconcept Skolem-Func-N
  :is-primitive Skolem-Function
  :annotations (Cyc_Collection))

(defconcept Skolem-Function
  :is-primitive Reifiable-Function
  :annotations (Relation-Type
                Cyc_Collection
                (documentation "#$SkolemFunction is a collection of Cyc system-generated functions that implement existential quantifications in Cyc.  Whenever someone asserts to Cyc an expression that contains a `#$thereExists', Cyc automatically creates a new element of #$SkolemFunction and rewrites the assertion using that skolem function, as described in what follows.  (Most Cyc users don't need to know the following details, which are supplied only for the curious.)







Suppose we tell Cyc that every animal has a birth date; i.e., for each animal, there exists a date such that the animal was born on that date --- in CycL, (#$implies (#$isa ?x #$Animal)(#$thereExists ?y (#$birthDate ?x ?y))).  In response to that CycL formula, Cyc would create a new element of #$SkolemFunction -- we might call it the `BirthDateFn' -- whose single argument would be an animal and whose resultant value would be a date, namely, that animal's date of birth.  Subsequently, Cyc would automatically use the `BirthDateFn' in asserting our rule, eliminating the need for a `#$thereExists'.  Our formula would thus be rewritten by the system, as follows:







(#$implies 

   (#$and

     (#$isa ?x #$Animal)

     (#$termOfUnit ?y (`BirthDateFn' ?x)))

   (#$birthDate ?x ?y)).





See also #$termOfUnit. 





Note: Although our example uses the name 'BirthDateFn' for our skolem function, at this time (4/97), skolem functions are automatically named by the Cyc system using the prefix `SKF-' followed by a number.  The system-generated name can be replaced by re-naming, though that is rarely done in practice.")))

(defconcept Sleeping
  :is-primitive (:and Resting--Relaxing Bodily-Function-Event--Involuntary)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of all #$Sleeping events, i.e., natural processes in which an #$Animal engages in some unconscious mental activity coupled with physical rest.  #$Sleeping is a subset of #$BodilyFunctionEvent-Involuntary; the process of #$Sleeping is essential for the health of sentient animals.")))

(defconcept Smell-Perception
  :is-primitive Perceiving
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of sensory #$Perceivings in which a #$PerceptualAgent #$smells something and thereby acquires information about it.")))

(defconcept Smoking-Food
  :is-primitive Preserving-Food
  :annotations (Script-Type
                (documentation "A kind of cooking in which the food is exposed to smoke.  This adds nitrates to the food to prevent rotting.")))

(defconcept Snow-Flake
  :is-primitive (:and Precipitation-Particle |(solid-fn Water)|)
  :annotations (Existing-Object-Type
                (documentation "The collection of frozen water crystals emitted by clouds in instances of #$SnowProcess.")))

(defconcept Snow-Process
  :is-primitive Precipitation-Process
  :annotations (Default-Disjoint-Script-Type
                (documentation "The collection of events in which the condensed liquid water in clouds freezes into ice crystals which become substantial enough to fall to the earth as snow.")))

(defconcept Sociability-Based-Action
  :is-primitive Social-Occurrence
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of socially based actions, those performed mostly for the sake of sociability, in which considerations of socially acceptable interactions with others are important.")))

(defconcept Social-Attribute-Type
  :is-primitive Attribute-Type
  :annotations (Cyc_Collection
                (documentation "This is a collection of collections.  Each #$SocialAttributeType is itself a coherent collection of attributes that pertain to human behavior.  This definition is very broad, and embraces attributes of behavior (personal and social) one might read about in a sociology, psychology, cultural anthropology, economics, political science, or social philosophy course -- in short, in the (human) `behavioral' sciences.  A more specialized concept is #$SocialStatusAttributeType, which limits the focus to status-related attributes.  This is a superset of that, much more general collection which includes, as elements, #$AcquaintanceAttribute, #$InterAgentRelationAttribute, etc., as well as all the elements of #$SocialStatusAttributeType (qv).")))

(defconcept Social-Being
  :is-primitive Intelligent-Agent
  :annotations (Existing-Object-Type
                (documentation "The collection of beings whose existence is accepted by some social system.  (Thus, the elements of #$SocialBeing will vary with social contexts.)  Social beings are entities able to perform social roles in the system that recognizes them.  #$SocialBeing includes elements of #$Organization (e.g., the #$QueensGuard) as well as the elements of #$LegalAgent (in that system), so, for example, in modern industrial social systems, the elements of #$LegalCorporation and #$Person are instances of #$SocialBeing. ")))

(defconcept Social-Class--Lifestyle
  :is-primitive (:and Social-Status-Attribute Scalar-Interval)
  :annotations (Social-Attribute-Type
                (documentation "The collection of attributes that indicate a person's social class, as determined by the person's general lifestyle, quality of life, and relative access to the (material and security oriented) desiderata of life.  It may depend on a cultural non-material system of social rank, based on birth, office, manners, vocal accent or other factors.  Members of this collection include #$LowerMiddleClass, #$UpperClass, etc.")))

(defconcept Social-Gathering
  :is-primitive (:and Social-Occurrence Purposeful-Action Human-Activity)
  :annotations (Script-Type
                (documentation "The collection of intentional social gatherings of people who have the same or similar purposes in attending, and in which there is communication between the participants.  E.g., a party, a conference, a wedding, etc.
Note:  A group of people waiting to board an elevator is not typically a #$SocialGathering, even though they share a common purpose, since they are not expected to talk to each other.")))

(defconcept Social-Occurrence
  :is-primitive (:and Human-Activity Composite-Physical-And-Mental-Event)
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "A collection of events; a subset of #$CompositePhysicalAndMentalEvent.  Each element of #$SocialOccurrence is an event in which two or more agents (and often many more than two) take part.  Often, elements of #$SocialOccurrence involve communication among the participating agents.   Usually there are some social occurrences in every culture that have very elaborate role structures (e.g., a lawsuit or a wedding), and some that are fairly simple (e.g., belching at the dinner table).  See also: #$socialParticipants.")))

(defconcept Social-Ritual
  :is-primitive (:and Ritual Social-Gathering)
  :annotations (Script-Type
                (documentation "The collection of social events in which some kind of ritual is performed.  E.g., a wedding, an awards ceremony, a baptism, an inauguration, a graduation ceremony, etc.
Note: In Cyc's ontology, the collection #$Inauguration is not exactly a subset of #$SocialRitual; e.g., it is not true that (#$isa The1992InaugurationOfGeorgeBushAsPresidentOfTheUSA  #$SocialRitual).  This is because there are many aspects to an #$Inauguration, besides the social ritual aspects.  E.g., there is the political aspect, namely the legitimate change of chief executive of a nation.  The carrying out of the `script' for an inauguration (i.e., the ceremony itself) is an element of the collection #$SocialRitual. ")))

(defconcept Social-Status-Attribute
  :is-primitive Attribute-Value
  :annotations (Social-Status-Attribute-Type
                Composite-Attribute-Type
                (documentation "The collection of #$AttributeValues that pertain to human social status; role or rank (formal or informal) in the surrounding culture.  Most assertions should be made in terms of some specialization of this collection (or an instance of some specialization of this collection).  Members of this collection include: #$LowerMiddleClass, #$GoodLooking, #$FourthGradeLevel, etc.")))

(defconcept Social-Status-Attribute-Type
  :is-primitive Social-Attribute-Type
  :annotations (Cyc_Collection
                (documentation "This is a collection of collections.  Each #$SocialStatusAttributeType is itself a coherent collection of attributes that pertain to rank/status along some particular `dimension' related somehow to `status in society.'  Some sample elements of #$SocialStatusAttributeType are: #$SocialStatusAttribute, #$Glamor, #$SocialPower, #$Credibility, #$EducationLevelAttribute, etc. ")))

(defconcept Solar-Powered-Device
  :is-primitive Powered-Device
  :annotations (Existing-Object-Type
                (documentation "A collection of physical devices; a subset of #$PoweredDevice.  An instance of #$SolarPoweredDevice is a device which is powered by energy from sunlight.  Examples include solar-powered calculators and solar heating systems.")))

(defconcept Soldier
  :is-primitive (:and Professional Military-Person)
  :annotations (Occupation-Type
                (documentation "A person having as a profession a branch of Soldiering")))

(defconcept Sole-Proprietorship
  :is-primitive (:and Business
                      Organization
                      Unincorporated-Organization
                      Legal-Agent)
  :annotations (Existing-Object-Type
                (documentation "A collection of unincorporated businesses organizations.  An element of #$SoleProprietorship is a business in which an individual #$Person (or a married couple) owns, operates, and assumes liability for the business.   A #$SoleProprietorship may or may not have employees.  It has no shareholders or partners.")))

(defconcept Solid-Tangible-Product
  :is-primitive (:and Tangible-Product Solid-Tangible-Thing)
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A collection of tangible products.  Each element of #$SolidTangibleProduct is a tangible product that is a solid, either a solid object (e.g., an automobile) or a stuff in solid form (e.g., lumber).")))

(defconcept Solid-Tangible-Thing
  :is-primitive Tangible-Thing
  :annotations (Tangible-Stuff-State-Type
                (documentation "A collection of tangible stuff.  Each element of #$SolidTangibleThing is a substance that is intrinsically in a #$SolidStateOfMatter.  For example, #$AyersRock, the quarter-dollar coin I put in the parking meter, the ice cubes in my lemonade, a paper bag and the bagel inside it.  Collections containing the solid phase of any type of stuff can be created using #$SolidFn (q.v.).")))

(defconcept Solubility
  :is-primitive (:and Physical-Attribute Scalar-Interval)
  :annotations (Measurable-Attribute-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute.  Each element of #$Solubility describes how readily some tangible substance dissolves in some kind of liquid.  Different levels of #$Solubility may be represented with #$GenericValueFunctions or qualitatively (e.g., #$WillDissolve, #$Insoluble).")))

(defconcept Solution
  :is-primitive Mixture
  :annotations (Existing-Stuff-Type
                (documentation "A collection of tangible stuffs; a subset of #$Mixture.  Each instance of #$Solution is a #$Mixture of two or more chemically distinct substances.  #$Solutions are homogeneous, meaning that the composition at any one point in the #$Mixture is the same as that at any other point.  In contrast, a #$Suspension is a #$Mixture in which small discontinuous particles are surrounded by a continuous fluid.  Under normal conditions, the #$solvent of every #$Solution has the #$stateOfMatter #$LiquidStateOfMatter.  Thus #$Solutions also normally exhibit the properties of a liquid, since #$solvents are #$mainConstituents.  Exceptions to this include #$Gels, in which 'solid-like' properties of the #$Solution arise from the highly structured orientation of the #$solute.  Examples of #$Solutions: a cup of coffee, a tincture of iodine, some vanilla extract.")))

(defconcept Something-Existing
  :is-primitive Temporal-Thing
  :annotations (Temporal-Stuff-Type
                (documentation "#$SomethingExisting is the subset of #$TemporalThing whose elements are more or less static, at least compared to the highly dynamic elements of #$Event.   The clearest examples of #$SomethingExisting are tangible things, like people, lakes, stars, the Earth's ionosphere, etc.  Some elements of #$Intangible, such as agreements and obligations, also exist stably in time over their lifetime (rather than `happening'), and thus both #$Agreement and #$Obligation are subsets of (i.e., have the #$genls) #$SomethingExisting).")))

(defconcept Something-To-Wear
  :is-primitive (:and Tangible-Product
                      Portable-Object
                      Personal-Product
                      Non-Powered-Device)
  :annotations (Existing-Object-Type
                (documentation "A collection of tangible objects.  Each instance of #$SomethingToWear is an object that an animal (usually a person) wears on its body, i.e., in a #$WearingSomething event.  It is worth remarking that, in such an event, the wearer doesn't have to exert any intentional effort to continue wearing the object.  For example, shirts remain on people's torsos, hats stay on heads, rings on fingers; once in place, dog collars stay on dogs, saddles stay on horses.  By contrast, a hula hoop is NOT an example of #$SomethingToWear.  A borderline case is a #$Purse, which at first blush seems to be something to wear, yet requires carrying by the performer, hence is not a member of this collection.  Similarly, a briefcase is not an #$SomethingToWear.")))

(defconcept Sound
  :is-primitive Wave-Propagation
  :annotations (Wave-Propagation-Type
                (documentation "A collection of events; a subset of #$WavePropagation.  Each element of #$Sound is an instance of wave propagation in which longitudinal pressure waves travel through matter.  Includes the elements of #$AudibleSound, #$UltraSound, and temblors.")))

(defconcept Sound-Information-Bearing-Thing
  :is-primitive (:and Audible-Sound
                      Information-Bearing-Wave-Propagation
                      Information-Bearing-Thing)
  :annotations (Temporal-Stuff-Type
                (documentation "A collection of information bearing things (IBTs); a subset of #$InformationBearingWavePropagation.  Each element of #$SoundInformationBearingThing is an audible sound that contains information: a spoken utterance, the performance of a sonata, a Morse code message tapped out on a prison wall, etc.")))

(defconcept Space-In-A-Hoc
  :is-primitive (:and Human-Occupation-Construct Cavity)
  :annotations (Existing-Object-Type
                (documentation "A collection of open spatial regions.  Each element of #$SpaceInAHOC is a space found inside some instance of #$HumanOccupationConstruct (= HOC).  Elements include all major spaces inside any #$HumanOccupationConstruct, including not only rooms (elements of #$RoomInAConstruction), but halls, elevator shafts, attics, stairwells, and the spaces inside trains, cars, and airplanes that are designed for human occupation.  Other building parts which are not open spatial regions (e.g., walls, plumbing, etc.) are NOT included in this collection; cf. #$PartOfBuilding.  #$SpaceInAHOC is #$disjointWith the collection #$OutdoorLocation.")))

(defconcept Space-Point
  :is-primitive Geometric-Thing
  :annotations (Existing-Object-Type
                (documentation "A collection of geometrical things. Each #$SpacePoint is an extensionless geometrical point, and thus exists in zero dimensions.")))

(defconcept Space-Transportation-Event
  :is-primitive Transportation-Event
  :annotations (Temporal-Object-Type
                (documentation "The collection of all space transportation event.")))

(defconcept Spatially-Disjoint-Region-Type
  :is-primitive Region-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections; a subset of #$RegionType.  Each element of #$SpatiallyDisjointRegionType is a collection of geographical regions, none of whose elements spatially intersects another.  For example, the collection #$State-UnitedStates is an element of #$SpatiallyDisjointRegionType, because the territories of U.S. states do not overlap.  Other examples of collections that are elements of #$SpatiallyDisjointRegionType: #$CanadianProvince, #$IndependentCountry, #$City, and #$Colony.  A non-example is #$EcologicalRegion, since ecological regions can overlap.")))

(defconcept Spatial-Predicate
  :is-primitive (:and Cotemporal-Predicate Predicate)
  :annotations (Relation-Type
                (documentation "The collection predicates about spatial relationships.  Note that when an element of #$SpatialPredicate has an instance of #$Group as one of its arguments, the predicate applies to all the members of that group.")))

(defconcept Spatial-Thing
  :is-primitive Individual
  :annotations (Object-Type
                (documentation "The collection of all things that have a spatial extent or location relative to some other #$SpatialThing.  Note well that to say that an entity is a member of this collection is to remain agnostic about two issues.  First, a #$SpatialThing may be #$PartiallyTangible, like #$Texas-State or wholly #$Intangible, like the #$ArcticCircle or a line or a plane referenced in a geometric theorem.  Second, although we do insist on location relative to another #$SpatialThing, a #$SpatialThing may or may not be located in the physically observable universe.  It is far from clear that all #$SpatialThings are so located:  eg, a trajectory through the phase space of some physical system.  If the intent is to imply location in the empirically observable cosmos, the user should employ this collection's spec, #$SpatialThing-Localized.")))

(defconcept Speaking
  :is-primitive (:and Ibt-Generation Making-An-Oral-Sound)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of actions generating 
#$Utterances which are speech. A subset of #$Talking: hence,
#$Speaking normally includes
only those #$Utterances using #$Language as a communication convention, unlike
other #$Utterances, such as #$Booing and #$Cheering.")))

(defconcept Specified-Information-Bearing-Thing-Type
  :is-primitive Existing-Object-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$SpecifiedInformationBearingThingType is a subset of #$InformationBearingThing, all of whose instances have in common all (or nearly all) of their information content and their primary media form.  For example, the collection specified by `the book War and Peace' is an element of #$SpecifiedInformationBearingThingType; so is the collection described by `the movie Jaws' (even though both the novel `War and Peace' and the film `Jaws' were issued in slightly different variants).  Heterogeneous collections, however, such as those defined by `books written by Mark Twain', or by `the Jaws story in all its forms [movie, book, comic book, tape]', are NOT elements of #$SpecifiedInformationBearingThingType, although they are subsets of #$InformationBearingThing.  Examples of #$SpecifiedInformationBearingThingType: #$AdventuresOfHuckleberryFinnTheBook, #$OS-2, #$Lotus123, #$PeloponnesianWarHistoryByThucydides-TheBook, #$CitizenKane-TheMovie.")))

(defconcept Speech-Part
  :is-primitive Nonlexical-Linguistic-Object
  :annotations (Linguistic-Object-Type
                (documentation "The collection of all parts of speech.  Subsets of #$SpeechPart include #$Preposition, #$Adverb, #$SimpleNoun, #$Determiner, #$QuantifyingIndexical, #$Punctuation-SP, #$Pronoun).  To link a specific word with the parts of speech for which it has forms, see #$posForms; e.g., #$You-TheWord has a#$Pronoun form, #$And-TheWord has a #$CoordinatingConjunction form, #$Hit-TheWord has both #$SimpleNoun and #$Verb forms.")))

(defconcept Speed
  :is-primitive (:and Rate Physical-Attribute Scalar-Interval)
  :annotations (Derived-Numeric-Attribute-Type
                (documentation "A subset of #$Rate.  Each element of #$Speed is a rate of change in position (of an object, wave front, etc.).  Elements of #$Speed may be either fixed amounts, such as (#$MilesPerHour 55), or a range, such as #$WalkingSpeed or #$Calm-WindSpeed.  See #$UnitOfSpeed for the units used by Cyc to measure speeds.")))

(defconcept Sperm-Cell
  :is-primitive (:and Animal-Blo Eukaryotic-Cell)
  :annotations (Existing-Object-Type
                (documentation "A subset of #$Cell.  #$SpermCell is the collection of specialized gamete cells which are produced by meiosis in the reproductive tract of male animals.  Each sperm cell usually has half the number of chromosomes that regular body cells do, and when it fertilizes an ovum, the ovum becomes a zygote and continues to develop into a mature individual.  See also #$MaleAnimal, #$SexualReproductionEvent.")))

(defconcept Spoken-Communicating
  :is-primitive (:and Human-Activity Audio-Communicating)
  :annotations (Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of information transfer events; a subset of #$AudioCommunicating.  Each element of #$SpokenCommunicating is a transmission of sound-borne verbal information by spoken words between two (or more) agents.  The communication may be one-way or two-way (or multi-way); see #$Communicating.  Examples of #$SpokenCommunicating: a telephone conversation, a classroom discussion, the #$GettysburgAddress-Speech.  Note that the collection #$Speaking contains events in which a person generates spoken language but doesn't necessarily communicate it; e.g., a person practicing a speech alone.  If someone who is speaking is also communicating, then her speaking is a #$subEvents of some element of #$SpokenCommunicating.  Every element of #$SpokenCommunicating has at least one #$communicationToken which is an element of #$Utterance.")))

(defconcept Sports-Event
  :is-primitive Athletic-Activity
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of individual sports events, such as a single game of baseball, an individual 100M race, etc.  An entire sandlot baseball game would be a #$SportsEvent, but one inning wouldn't be.  A double-header could be viewed as a single #$SportsEvent, though, even though each half of it was also a #$SportsEvent.  Several #$SportsEvents can be organized into a #$SportsFormalCompetition.  One single double-header evening of baseball would not be a #$SportsFormalCompetition, nor one single tennis match, etc.  
note:  The collection #$SportsEvent does not include every #$AthleticActivity; e.g., Rocky training for his boxing match, a group of kids racing to the bus stop, a person skiing for pleasure, etc. are not instances of #$SportsEvent.")))

(defconcept Spreadsheet
  :is-primitive (:and Information-Bearing-Object Structured-Information-Source)
  :annotations (Existing-Object-Type
                (documentation "A collection of information bearing objects (IBOs); a subset of #$StructuredInformationSource.  Each element of #$Spreadsheet is an IBO that presents (usually numeric) data in a two-dimensional matrix of cells that are organized into rows and columns.  A spreadsheet may be produced by hand with pencil and paper or generated by a computer #$SpreadsheetProgram such as #$Lotus123.  Associated with every spreadsheet are mathematical definitions of some of its cells as a function of other cells in that spreadsheet.")))

(defconcept Spring-Season
  :is-primitive Season-Of-Year
  :annotations (Temporal-Object-Type
                (documentation "The collection of Spring seasons.  In the #$TemperateClimateCycle, Spring is the time ice melts, the average temperature starts to increase, the days get longer, plants begin to put forth buds, etc.  #$SpringSeason represents the climatic aspects of spring; see #$CalendarSpring for the purely temporal aspects of spring.")))

(defconcept Standard-Unit-Of-Measure
  :is-primitive Unit-Of-Measure
  :annotations (Relation-Type
                (documentation "#$StandardUnitOfMeasure is a subset of #$UnitOfMeasure, the collection of units used to measure quantifiable properties.  #$StandardUnitOfMeasure contains those units which are considered the #$standardUnit for the property they measure.  Some examples: the standard #$UnitOfVolume is the #$Liter; the standard #$UnitOfTemperature is the #$DegreeKelvin; the standard #$UnitOfMass is the Kilogram.  Every unit type has one unit designated as the standard unit for that type.")))

(defconcept Starvation
  :is-primitive (:and Destruction-Event Single-Doer-Action)
  :annotations (Temporal-Stuff-Type
                Script-Type
                (documentation "A collection of events.  Each instance of #$Starvation is an event in which
an #$Animal is so hungry as to be #$Starving.  If prolonged, it results in death.  NB:  Note that this is a #$SingleDoerAction (q.v.), so it doesn't cover cases wherein one creature withholds food from another.")))

(defconcept State--Geopolitical
  :is-primitive (:and Geopolitical-Entity Country-Subsidiary)
  :annotations (Existing-Object-Type
                (documentation "A collection of geopolitical entities which are sub-divisions of countries.  An element of #$State-Geopolitical is a ``state-equivalent,'' i.e., a region whose political government is at the very next administrative level down from the national level.  In different countries, such a main geopolitical subdivision may be called variously a `region', a `state', a `province', a `prefecture', a `department', a `parish', or something else.  In the U.S.A., it is called a `state'.  See also #$Province.")))

(defconcept State--United-States
  :is-primitive State--Geopolitical
  :annotations (Spatially-Disjoint-Region-Type
                (documentation "A collection of geopolitical sub-regions.  Each of the (currently 50) elements of #$State-UnitedStates is a State in the #$UnitedStatesOfAmerica; i.e., #$Alabama-State, #$Alaska-State, #$Arizona-State, #$Arkansas-State, etc.")))

(defconcept State-Capital
  :is-primitive (:and City Capital-City-Of-Region)
  :annotations (Existing-Object-Type
                (documentation "A collection of cities.  Each element of #$StateCapital is a city that is the capital city of the geopolitical state in which it is located.  Note that this collection is for capitals of all the elements in #$State-Geopolitical (q.v.), not just members of the subset #$State-UnitedStates.  Examples: #$CityOfJuneauAK, #$CityOfLansingMI, #$CityOfAnnapolisMD, Quebec City, Edmonton, Perth (Austr.), Xian, Guangzhou, Lahore.")))

(defconcept State-Of-Matter--Solid-Liquid-Gaseous
  :is-primitive (:and Physical-Attribute Scalar-Interval)
  :annotations (Primitive-Attribute-Type
                (documentation "#$StateOfMatter-SolidLiquidGaseous is the collection of attributes which describe the basic physical states that pieces of matter can be in.  Elements of this collection are #$SolidStateOfMatter, #$SemiSolidStateOfMatter, #$LiquidStateOfMatter, and #$GaseousStateOfMatter.  Although the chemical composition of a substance does not change when its basic physical state changes, many of its intrinsic physical properties do change--including its density, viscosity, brittleness, color, size, etc.  In addition, changing the basic state of pieces of certain compounds may alter their chemical composition (e.g., using distillation to separate alcohol from other fluids) and as a result may effect toxicity and other biological factors.")))

(defconcept Static-Situation
  :is-primitive (:and Situation Something-Existing)
  :annotations (Temporal-Stuff-Type
                (documentation "#$StaticSituations are states of affairs between two or more things, persisting statically over some time interval. #$StaticSituations always have a temporal extent; they usually have a tangible and spatial extent.   As an example, consider the situation of Bill Clinton sitting in his easy chair on the evening of 7/4/96.   There are participant objects such as Bill and the chair, there are relationships such as the seat of the chair supporting his bottom and his weight being off his feet, etc.   It happens at a particular time and place, but there is no active, dynamic #$Event that is going on. ")))

(defconcept Stealing--Generic
  :is-primitive (:and Taking-Something
                      Transferring-Possession
                      Unintended-Loss-Of-User-Rights)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events; a subset of #$TakingSomething.  In an instance of #$Stealing-Generic, one #$Agent takes a possession of another agent's without the owner's permission (and possibly without the owner's knowledge).  Stealing is commonly considered criminal in most contexts.
Note:  It is not the case that every use of another's things without explicit permission is categorized as an instance of #$Stealing-Generic.  An informal agreement or `understanding' may exist between #$Agents that would cover casual `borrowing' (and excuse it from being stealing); the closer the relationship the more expensive and personal the items that fall into such an exclusion.  E.g., even if I am in a perfect stranger's office, and they have left for a minute, I feel it is not stealing to take one of their Kleenexes if I am about to sneeze.")))

(defconcept Steaming-Food
  :is-primitive Cooking-Food
  :annotations (Default-Disjoint-Script-Type
                (documentation "cooking food by surrounding it in steam.")))

(defconcept Steppe-Climate-Cycle
  :is-primitive Temperate-Climate-Cycle
  :annotations (Climate-Cycle-Type
                (documentation "A collection of annual climate cycles.  Each element of #$SteppeClimateCycle is a year-long event consisting of weather occurring (typically) on the steppes (i.e., temperate zone semiarid plains).  Characteristics of a steppe climate include: little precipitation, but wetter than a desert; wide temperature extremes, from very hot in the day to cold at night.")))

(defconcept Stock
  :is-primitive (:and Authorized-Agreement Sales-Agreement)
  :annotations (Existing-Object-Type
                (documentation "A collection consisting of all shares of stock.  An element of #$Stock is a share of ownership in some instance of #$LegalCorporation; its owner is an #$Agent who is recorded as a shareholder in the official records of that corporation.  A company may have several classes of #$Stock, such as Common, Preferred, Class A, Class B, etc.")))

(defconcept Stock-Certificate
  :is-primitive (:and Id-Document Official-Document)
  :annotations (Existing-Object-Type
                (documentation "A collection of official documents.  Each element of #$StockCertificate is a document issued by a company to one of its shareholders, certifying the shareholder's ownership of some number of shares of stock in that corporation.")))

(defconcept Stock-Holdings
  :is-primitive Financial-Asset-Holdings
  :annotations (Existing-Object-Type
                (documentation "A collection of partially tangibles; a subset of #$FinancialAssetHoldings.  Each instance of #$StockHoldings is a group of #$Stock shares owned by an #$Agent.  It may consist of shares in only one company or different groups of shares in multiple companies.")))

(defconcept Stock-Type
  :is-primitive Existing-Object-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  An instance of #$StockType is a collection of all shares of stock of a particular type in a particular corporation.  For example, ``General Motors Class E Stock''.")))

(defconcept Stomach
  :is-primitive Organ
  :annotations (Unique-Anatomical-Part-Type
                Animal-Body-Part-Type
                (documentation "The collection of all stomachs.  An individual #$Stomach is an #$Organ which is part of the #$DigestiveSystem that churns and digests #$Food.")))

(defconcept Stone-Stuff
  :is-primitive (:and |(solid-fn Earth-Stuff)| Structural-Support-Stuff)
  :annotations (Tangible-Stuff-Composition-Type
                (documentation "A collection of tangible things; a subset of #$EarthStuff.  Each element of #$StoneStuff is a piece or portion of rock or stone; e.g., #$MountRushmoreMonument.")))

(defconcept Stream
  :is-primitive Body-Of-Water
  :annotations (Existing-Object-Type
                (documentation "#$Stream is the generic collection for natural, flowing bodies of water, including everything from great rivers to tiny creeks.  Every stream flows in (see #$in-ContOpen) some conduit (see #$FluidConduit) such as a streambed or riverbed. Examples: #$AmazonRiver, #$LittleMissouriRiver, #$WoundedKnee-Creek.  Cf. #$River, #$Creek.  Note that riverbanks are not streams nor are they part of streams, but rather mark the edge of a stream.")))

(defconcept Street--Generic
  :is-primitive (:and Path-For-Wheeled-Vehicles Urban-Area)
  :annotations (Existing-Object-Type
                (documentation "The subcollection of #$PathForWheeledVehicles thatcontains all streets inside of cities and towns.")))

(defconcept Street-Address
  :is-primitive Address--Location-Designator
  :annotations (Object-Type
                (documentation "A collection of strings. Each element of #$StreetAddress is a string that denotes a street number and street name.  For example, `3721 Executive Center Drive', the street address of #$Cycorp.")))

(defconcept Strength
  :is-primitive (:and Script-Performance-Attribute
                      Scalar-Interval
                      Animal-Physiological-Attribute)
  :annotations (Script-Performance-Attribute-Type
                (documentation "#$Strength is the #$ScriptPerformanceAttributeType for describing actions performed by exerting nontrival force at the times it is necessary.")))

(defconcept Structural-Support-Stuff
  :is-primitive Solid-Tangible-Thing
  :annotations (Existing-Stuff-Type
                (documentation "A collection of tangibles. Each element of #$StructuralSupportStuff is a hard, rigid substance typically used for structural support.  For example, the instances of #$Wood, #$BoneTheStuff, #$StoneStuff.")))

(defconcept Structured-Information-Source
  :is-primitive Information-Bearing-Thing
  :annotations (Object-Type
                Temporal-Stuff-Type
                (documentation "A collection of information bearing things (IBTs).  Each element of #$StructuredInformationSource is an information bearing object or event in which bits of information are represented as related in a systematic way that is easily characterized by some type of formal structure, including spatial or architectural terms (used metaphorically).  Examples include: a database organized in fields and values; a spreadsheet organized in rows and columns with entries; an organizational tree diagram with nodes and branches; a topographical map.")))

(defconcept Student
  :is-primitive Person
  :annotations (Occupation-Type
                (documentation "A collection of persons.  Each element of #$Student is someone who studies at an academic institution.  This collection includes students at all levels of study in all types of educational institutions.")))

(defconcept Student-Status-Attribute
  :is-primitive Attribute-Value
  :annotations (Attribute-Type
                (documentation "A collection of attributes.  Each #$StudentStatusAttribute indicates the currency or bureaucratic phase of processing a student's participation in an educational course or institution; elements of this collection include #$Graduate, #$Enrolled, etc.")))

(defconcept Stuff-Type
  :is-primitive Cyc_Collection
  :annotations (Cyc_Collection
                (documentation "A collection of collections.   Every element of #$StuffType is a collection of substances which have the following logical property: such a substance may be subdivided, spatially or temporally, and the resultant portions will also be instances of the #$StuffType collection to which the original substance belonged.  Elements of #$StuffType may be collections of any kind of stuff, tangible or intangible, temporal or atemporal, which has that property.  (The notion of #$StuffType corresponds roughly to that of a mass noun in English.)   Thus, if COL is some collection that is an element of #$StuffType, and ITEM is an element of COL, then if ITEM is divided into two (or more) segments, each segment is also an element of COL.  Examples of #$StuffType: #$Water (the collection of all portions of water, whose spatial sub-portions are also water); #$Breathing (the collection of all events wherein someone breathes for any amount of time, whose temporal sub-events are also instances of #$Breathing).  Note that `taking a complete breath' would NOT be stufflike, since not every temporal interval of breathing would be a complete breath from start to finish; cf. #$ObjectType.  See also these four collections: #$StuffType, #$ObjectType, #$ExistingStuffType, and #$ExistingObjectType.")))

(defconcept Sub-Atomic-Particle
  :is-primitive Microscopic-Scale-Object
  :annotations (Existing-Object-Type
                (documentation "A collection of objects; a subset of #$MicroscopicScaleObject.  Every instance of #$SubAtomicParticle is a physical particle smaller than an atom.  Major subsets of #$SubAtomicParticle include #$Electron, #$Proton, and #$Neutron.")))

(defconcept Sub-Process-Slot
  :is-primitive (:and Temporal-Part-Slot Cyc_Role)
  :annotations (Predicate-Category
                (documentation "A collection of predicates.  Each element of #$SubProcessSlot is a binary predicate that relates one instance of #$Event to a second event that is in some way a part of the first.  Examples: #$subEvents, #$inPreparationFor, #$manufacturingSteps, #$outboundLegOfRoundTrip.")))

(defconcept Subway
  :is-primitive Railway
  :annotations (Existing-Object-Type
                (documentation "The collection of all underground #$Railways, under the surfaces of major cities.  Some parts of Subways may be in trenches, on bridges or on elevated tracks, but most of a Subway is in underground tunnels.")))

(defconcept Subway-Station
  :is-primitive Human-Occupation-Construct
  :annotations (Existing-Object-Type
                (documentation "The collection of all subway (underground railroad) stations.  These are usually located at least partly underground, on subway tracks, and their primary purpose is to be a place where subway trains discharge and receive passengers.")))

(defconcept Summer-Season
  :is-primitive Season-Of-Year
  :annotations (Temporal-Object-Type
                (documentation "The collection of Summer seasons.  In the #$TemperateClimateCycle, Summer is generally the time of greatest warmth.  #$SummerSeason represents the climatic aspects of summer.  For its purely temporal aspects, see #$CalendarSummer.")))

(defconcept Sunrise
  :is-primitive Qualitative-Time-Of-Day
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "Each #$Sunrise is an #$Event where, at a given location, the #$Sun appears to clear the horizon as it `rises'.  This event is construed to occur regardless of the visibility of the #$Sun due to obscuring objects such as clouds.  Every #$Sunrise is #$contiguousAfter a #$Dawn, and every #$DaytimeHours is #$temporallyStartedBy a #$Sunrise.")))

(defconcept Sunset
  :is-primitive Qualitative-Time-Of-Day
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "Each #$Sunset is an #$Event where, at a given location, the #$Sun occludes the horizon as it appears to set.  This event is construed to occur regardless of the visibility of the #$Sun due to obscuring objects such as clouds.  There is a #$Dusk which is #$contiguousAfter each #$Sunset.  Every #$DaytimeHours is #$temporallyFinishedBy a #$Sunset, as is every #$Afternoon.")))

(defconcept Supply-Company
  :is-primitive Organization-With-Business-Customers
  :annotations (Existing-Object-Type
                (documentation "A collection of commercial organizations.  An element of #$SupplyCompany is a company whose #$MainFunction is selling supplies to other companies.  For example, elements of #$ElectricalSupplyCompany or grocery #$Wholesalers.")))

(defconcept Supposed-To-Be-Microtheory
  :is-primitive Microtheory
  :annotations (Microtheory-Type
                (documentation "The collection of microtheories that describe how things are 'supposed to be' according to some agent or agents.  This technique can be used to represent things like the policies of a company, the laws of a country, the tenets of a religion, the rules of proper conduct for employees of a particular corporation, etc.  The assertions in a #$SupposedToBeMicrotheory may or may not describe the world as it actually is.  Examples: #$BasicWesternLegalConceptsMt, #$SportsRulesOf-BoxingSportsEvent, #$CycStaffCalendar, and #$OfficeCodeOfConductMt.")))

(defconcept Surface--Abstract
  :is-primitive (:and Abstract-Shape Surface--Generic)
  :annotations (Object-Type
                (documentation "The collection of all abstract mathematical surfaces - not real physical ones that we can touch.")))

(defconcept Surface--Generic
  :is-primitive Spatial-Thing
  :annotations (Object-Type
                (documentation "The collection of all surfaces (including #$Surface-Abstract and #$Surface-Physical); each is a #$SpatialThing that has extent in at least two dimensions, but either does not have a thickness (i.e. a two dimensional object) or has an insignificant thickness compared with its length and width (Note: if the object is a closed surface, e.g. an apple skin, any significant sub region must have insignificant thickness compared to its length and width).  Surfaces may be two or three dimensional, tangible or intangible.  Such a surface may be curved, folded, crumpled, or flat.  Thus a Euclidian two dimensional disc, a dinner plate, a crumpled sheet of paper, the top of a desk, a ribbon, and a basket ball's skin are exemplars of a #$Surface-Generic.  They may be spatially connected or not spatially connected.  Thus, both a frisbee and the Milky Way galaxy (as it appears in the sky) are exemples.  Negative exemplars include an entire basket ball (i.e. its skin plus the cavity inside), a planet, and a euclidian solid sphere. All of these are negative exemplars because thickness is not significantly smaller than length and width.  If an object has an #$areaOfObject it must be a #$Surface-Generic.  If the object `has two sides' (e.g. a sheet of paper, a frisbee, but not #$Texas-State or an #$InsideSurface of a cave or room.  (See #$OneSidedVsTwoSidedObjectNote.) The areas on either side of a #$Surface-Generic are equal.")))

(defconcept Surface--Physical
  :is-primitive (:and Partially-Tangible Surface--Generic)
  :annotations (Existing-Object-Type
                (documentation "The collection of all of real physical (hence technically three-dimensional) surfaces.  The thickness of a #$Surface-Physical is much less than its average length or width, but it is not of zero thickness.  A Surface-Physical may have holes, tears, and may be unconnected, in multiple pieces.")))

(defconcept Surface-On-Tangible-Object
  :is-primitive (:and Surface--Physical Sheet-Of-Some-Stuff)
  :annotations (Region-Type
                (documentation "The collection of all physical surfaces (or portions or patches of surfaces) of #$TangibleThings.")))

(defconcept Surgery
  :is-primitive Medical-Care-Event
  :annotations (Product-Type
                Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of actions.  An instance of #$Surgery is a medical care event in which a medical professional cuts a part of the living body, either to examine what's inside (a diagnostic, exploratory surgery) or to treat an ailment (a #$MedicalTreatmentEvent).  Examples of surgeries which are medical treatments include: removal of a foreign body, cancer, an organ that's causing trouble, etc.; insertion of a medical device (e.g, a pacemaker); or repair of some internal structure.")))

(defconcept Surprise
  :is-primitive Feeling-Attribute
  :annotations (Feeling-Attribute-Type
                (documentation "Impression due to something unexpected, unanticipated, or startling.  This is a collection; for an explanation of a typical #$FeelingAttributeType, see #$Happiness.  Some more specialized #$FeelingAttributeTypes than #$Surprise are #$Disappointment and #$Wonder-Admiration.")))

(defconcept Suspension
  :is-primitive Mixture
  :annotations (Existing-Stuff-Type
                (documentation "A collection of tangible stuffs; a subset of #$Mixture.  Each instance of #$Suspension is a mixture which has exactly one #$suspendingFluid and at least one kind of #$suspendedPart.  Each of the #$suspendedParts is an instance of #$Particle, and there are a mob of them.  Some suspensions are fairly stable (e.g., mayonnaise), while others tend to separate quickly (e.g., sugar stirred into cold lemonade).  Other examples of #$Suspension: a cloud, a spray of aerosol deodorant.")))

(defconcept Swallowing
  :is-primitive (:and Bodily-Function-Event
                      Biological-Intake-Event
                      Body-Movement-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of actions in which an #$Animal moves a solid or a liquid from its #$Mouth to its #$Stomach.  A type of #$BodilyFunctionEvent as well as a type of #$BodyMovementEvent.")))

(defconcept Symbolic-Object
  :is-primitive Information-Bearing-Object
  :annotations (Existing-Object-Type
                (documentation "A collection of objects.  Each element of #$SymbolicObject by convention symbolizes some thing or event or achievement, without describing it propositionally in any detail.  Examples include national flags, military medals and ribbons, school colors, an Oscar, a Crucifix, a caduceus, trademark logos of commercial brands.  Elements of #$SymbolicObject need not have propositional information contents; probably most do not.  Rather, symbolic objects are typically associated (by an informed interpreter) with the particular entities that originated or appropriated them.  To emotional interpreters, such as humans, symbolic objects are often evocative of certain attitudes associated with the entities symbolized--such as nationalism, respect, school spirit, hatred, reverence, etc.  Only some elements of #$SymbolicObject have the #$primaryFunction of serving as symbols (e.g., national flags, war memorials); others are symbolic in a secondary capacity (e.g., a gravestone symbolizes death but its primary function is as a marker).  Some objects are created to serve a symbolic function (primary or secondary), while others acquire symbolic associations in the course of their `lifetimes' (e.g., San Juan Hill, Ellis Island).  Examples of #$SymbolicObject: the #$ArcDeTriomphe, the #$StatueOfLiberty, the #$PyramidOfCheops, the #$UnitedStatesCapitolBuilding (and other capitol buildings); a hangman's noose, a Menorah, a white dove, a black armband.")))

(defconcept Symmetric-Anatomical-Part-Type
  :is-primitive (:and Existing-Object-Type Animal-Body-Part-Type)
  :annotations (Sibling-Disjoint-Collection
                (documentation "A collection of collections.  Instances are types of #$anatomicalParts of bilaterally symmetrical organisms (#$Organism-Whole) which occur in bilaterally symmetric pairs.  This is not intended to include broader categories like #$Tooth, #$Rib-AnimalBodyPart, or #$Finger, but the specific parts of which the organism only has two (EyeTooth, FifthRib, or #$RingFinger).")))

(defconcept Symmetric-Binary-Predicate
  :is-primitive (:and Commutative-Relation Binary-Predicate)
  :annotations (Cyc_Collection
                Predicate-Category
                (documentation "A collection of predicates; the subset of #$BinaryPredicate whose elements are all symmetric relations.  A predicate F is an element of #$SymmetricBinaryPredicate if and only if F is binary and (P X Y) implies (P Y X).  Examples: #$siblings, #$teammates, #$connectedTo, #$bordersOn.")))

(defconcept Symmetry-Member-Function
  :is-primitive loom:thing
  :annotations (Relation-Type
                (documentation "The class of functions which return one member of a symmetric relation.  This class consists of #$LeftFn and #$RightFn.")))

(defconcept System-Of-Government
  :is-primitive Attribute-Value
  :annotations (Unordered-Attribute-Type
                (documentation "A collection of attributes.  Each element of #$SystemOfGovernment is an attribute describing a type of government that a country might have.  Used with #$governmentType.  Examples: #$DemocraticGovernment, #$Monarchy, #$SocialistGovernment, #$MilitaryGovernment.")))

(defconcept Tactile-Sensor
  :is-primitive Sensor
  :annotations (Existing-Object-Type
                (documentation "A subset of #$Sensor, namely those sensors that operate by coming into physical contact with the object being perceived.  #$TactileSensors are capable of perceiving properties such as texture, hardness, roughness, etc.")))

(defconcept Taking-Custody-Of-Animal
  :is-primitive (:and Taking-Something Transferring-Possession)
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "A collection of events.  In an instance of #$TakingCustodyOfAnimal, an #$Agent takes physical control of a (human or non-human) animal.  This collection includes trapping animals, kidnapping people (or animals), and also what the police do after they arrest a person for a crime.  The animal may or may not be taken alive.")))

(defconcept Taking-Off-A-Clothing-Item
  :is-primitive (:and Handling-An-Object Human-Activity Removing-Something)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each element of #$TakingOffAClothingItem is an event in which something being worn is removed, either by the wearer or by someone else (e.g., removing a child's boots or a horse's saddle).  After an element of #$TakingOffAClothingItem occurs, the situation (an element of #$WearingSomething) in which the item was being #$wornOn the body is over.")))

(defconcept Taking-Something
  :is-primitive (:and Animal-Activity Gaining-User-Rights)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events; a subset of #$GainingUserRights.  In an instance of #$TakingSomething, an #$Agent takes an object, in the sense of taking it away or using or exercising access to it.  The agent may or may not have any legal right or authorization to use that object.  In an instance of #$TakingSomething, the taker (the #$toPossessor) must intend and actively (attempt to) acquire the #$objectOfPossessionTransfer, so the taking event is intentional and thus, strictly speaking, #$performedBy the taker.")))

(defconcept Tangible-Object-Predicate
  :is-primitive Process-Predicate
  :annotations (Predicate-Category
                (documentation "A collection of predicates.  Each element of #$TangibleObjectPredicate is a predicate used in assertions which describe the properties of tangible objects.  Examples: #$viscosityOfSubstance, #$colorOfObject, #$porosityOfObject, #$physicalBuild.")))

(defconcept Tangible-Product
  :is-primitive (:and Partially-Tangible-Product Product Tangible-Thing)
  :annotations (Product-Type
                Existing-Stuff-Type
                (documentation "A collection of tangible stuff.  Each element of #$TangibleProduct is a tangible object or tangible material that is exchanged for money or trade.  Tangible products are purely tangible and do not have an intangible component (cf. #$PartiallyTangibleProduct, #$PartiallyTangible).   #$TangibleProduct is the most general class of tangible products--everything from cotton swabs to coconut oil to F-16s belongs to this collection.")))

(defconcept Tangible-Stuff-Composition-Type
  :is-primitive Existing-Stuff-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Instances are collections of #$TangibleThing whose membership is based only on the physical and/or chemical composition of the elements, and not on any other property.  Thus #$TangibleStuffCompositionType does not have as elements any collections whose instances are determined by the physical state they are in.  For example, the collection #$Water is an instance of #$TangibleStuffCompositionType: instances of #$Water are all pieces of substance with the chemical composition H20.   On the other hand , the collection of all pieces of ice [i.e., (#$SolidFn #$Water)] is not a #$TangibleStuffCompositionType, because membership in the collection of ice depends not solely on the substance's composition, but also on its physical state.  More sample instances of #$TangibleStuffCompositionType:  the collections #$Nylon, #$GasolineFuel, #$CottageCheese, #$FattyTissue, #$BabyPowder, #$Nitrogen, and #$Glass.")))

(defconcept Tangible-Stuff-State-Type
  :is-primitive Existing-Stuff-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$TangibleStuffStateType is a collection of all pieces of tangible stuff that are associated with only a single physical state (i.e., structural phase).  This includes collections both (1) of substances which exist only in one state (e.g., #$Diamond) and (2) of stuff which by definition has a certain state (e.g., ice, or gels of any composition).  Thus, ice, water vapor, and liquid water--i.e., (#$LiquidFn #$Water)--would be represented by a #$TangibleStuffStateType.  Water itself, however, can exist in all three states; thus, the collection #$Water, which includes all instances of water regardless of state, is NOT a #$TangibleStuffStateType.  Elements of #$TangibleStuffStateType include the collections #$SolidTangibleThing, #$Air, #$Powder, #$Gel, #$Paste, and many others.  Any of the Cyc functions #$SolidFn, #$LiquidFn, or #$GaseousFn can be used to create a collection which #$isa #$TangibleStuffStateType.")))

(defconcept Tangible-Substance-Predicate
  :is-primitive Tangible-Object-Predicate
  :annotations (Predicate-Category
                (documentation "A collection of predicates.  Each element of #$TangibleSubstancePredicate is a predicate that is used to specify or describe the properties (usually physical properties) of tangible substances.  Examples: #$stateOfMatter, #$freezingPoint, #$physicalStructuralIntegrity, #$solubleIn.")))

(defconcept Tangible-Thing
  :is-primitive Partially-Tangible
  :annotations (Existing-Object-Type
                (documentation "The collection of things which are made of some sort of matter and whose nature is primarily material--in the sense that they do not have important non-physical properties (such as encoded information).  (Compare #$PartiallyTangible.)  #$TangibleThing includes chemical compounds, natural objects (and their parts), tangible artifacts and man-made materials (but see #$InformationBearingObject).  Collections that are specializations of #$TangibleThing may be elements of #$ExistingObjectType or #$ExistingStuffType (qq.v.), or of neither.  
Note: #$TangibleThing has the genls #$PartiallyTangible in the #$BaseKB, so its elements are NOT generally excluded from having intangible aspects; however, material things which do have important non-physical aspects should be elements of #$PartiallyTangible instead.  Moreover, note that in some contexts, all instances of this collection must be 100% tangible and have no intangible aspects (i.e., it is #$disjointWith #$PartiallyTangible).")))

(defconcept Taste-Perception
  :is-primitive Perceiving
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of sensory #$Perceivings in which a #$PerceptualAgent #$tastes some object, by means of the appropriate #$Sensor, and thereby acquires information about it.")))

(defconcept Taxonomic-Slot
  :is-primitive Binary-Predicate
  :annotations (Predicate-Category
                (documentation "A collection of predicates.  Each element of #$TaxonomicSlot is a binary predicate used in assertions indicating the position of a Cyc constant in one of Cyc's taxonomies (for #$Collections, #$Events, etc.).  Examples: #$isa, #$genls, #$partitionedInto, #$coExtensional, #$disjointWith, #$hasMembers, #$subBeliefSystem, #$subGoals.")))

(defconcept Taxonomic-Slot-For-Any-Unit
  :is-primitive Taxonomic-Slot
  :annotations (Predicate-Category
                (documentation "A collection of predicates; a subset of #$TaxonomicSlot.  Each element of #$TaxonomicSlotForAnyUnit is a binary predicate that may be used to define the taxonomy of instances; i.e., the collection of binary predicates applicable to any term.  Examples: #$isa, #$generalizations.")))

(defconcept Taxonomic-Slot-For-Collections
  :is-primitive Taxonomic-Slot
  :annotations (Predicate-Category
                (documentation "A collection of predicates; a subset of #$TaxonomicSlot. Each element of #$TaxonomicSlotForCollections is a binary predicate used to form assertions that define the taxonomy of #$Collections.  Examples: #$genls, #$partitionedInto, #$coExtensional, #$covering, #$disjointWith.")))

(defconcept Teaching
  :is-primitive (:and Service-Event Communicating Animal-Activity)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "One agent imparting learned knowledge to another.  This may have #$subEvents of the student asking or responding to questions, but the teacher is the primary performer.")))

(defconcept Teeth-Cleaning
  :is-primitive (:and Single-Doer-Action
                      Cleaning
                      Diagnosing-And-Repairing-Something
                      Medical-Care-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  In each #$TeethCleaning event, an animal's teeth are cleaned.  In order to distinguish, e.g., professional teeth cleaning by a dental technician from daily personal care, different microtheories are used.  Consider just the frequencies of performing this action: in the #$HumanActivitiesMt, where a person brushes their own teeth as a subevent of #$DailyPersonalCleaning, this occurs once or twice per day.  In the #$ProviderOfServicePerspectiveMt, that is from the dental hygienist's point of view, it occurs about ten times per day.  In the #$RecipientOfServicePerspectiveMt, that is from the point of view of someone going to get their teeth cleaned at a dentist's office, it happens a couple times per year.")))

(defconcept Temperate-Climate-Cycle
  :is-primitive Annual-Climate-Cycle
  :annotations (Climate-Cycle-Type
                (documentation "A collection of annual climate cycles.  Each element of #$TemperateClimateCycle is a year-long event consisting of weather occurring (typically) in terrestrial regions between (roughly) the Tropic of Cancer and the Arctic Circle in the Northern Hemisphere, and between the Tropic of Capricorn and the Antarctic Circle in the Southern Hemisphere.  Characteristics of a temperate climate include: four distinguishable seasons, Spring, Summer, Fall, and Winter, with variations in temperature and precipitation; overall moderate precipitation.")))

(defconcept Temperature
  :is-primitive (:and Physical-Attribute Scalar-Interval)
  :annotations (Fundamental-Numeric-Attribute-Type
                (documentation "A collection of physical attributes.  Each element of #$Temperature is an amount of heat in a particular instance of #$PartiallyTangible.  Elements of #$Temperature may be either a fixed interval, such as 98.6 degrees Fahrenheit, or a range, such as #$HumanHabitableTemperature.  See #$UnitOfTemperature for the units used by Cyc to measure temperatures.")))

(defconcept Temperature-Changing-Process
  :is-primitive (:and Composite-Physical-And-Mental-Event
                      Intrinsic-State-Change-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events.  Each #$TemperatureChangingProcess is an #$Event which has, as one of its significant effects, changing the #$Temperature of some object.  E.g., #$CookingFood is a subset of this collection.  A particular event in which somone uses a soldering iron to connect a resistor to a circuit board would be an element of this collection.  Note that a change in temperature is one of the kinds of intrinsic change which an object can undergo; i.e., #$TemperatureChangingProcess is a subset of #$IntrinsicStateChangeEvent.")))

(defconcept Temporally-Disjoint-Interval-Type
  :is-primitive Temporal-Object-Type
  :annotations (Cyc_Collection
                (documentation "(#$isa ?X #$TemporallyDisjointIntervalType) means that any two distinct instances of ?X are #$temporallyDisjoint.  It is true that (#$isa #$Wednesday #$TemporallyDisjointIntervalType because no Wednesday can temporally intersect any other (distinct) Wednesday.  [See also #$MutuallyDisjointIntervalCollection.]")))

(defconcept Temporal-Object-Type
  :is-primitive Object-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of each element of #$TemporalObjectType is temporally object-like.  Take an element of #$TemporalObjectType -- say COL.  Take an element of that -- say OBJ.  Imagine making a videotape of OBJ.  Now play back just a small piece of that videotape.  It won't be an element of COL.  E.g., COL could be the set of events in which an orange is cut into quarters.  Say a videotape of that has been made of one such event, which lasted thirty seconds.  Now imagine some 5-second excerpt of that videotape.  That, in turn, is not a videotape of someone cutting up an orange into four pieces.  So the collection of all orange-quartering events is itself an element of #$TemporalObjectType; it is NOT an element of #$TemporalStuffType (q.v.).



If a collection COL #$isa #$TemporalObjectType, it is reasonable to state axioms about temporally extrinsic properties of COL's instances -- properties such as duration, distance, cost, etc.  E.g., it makes sense to talk about the #$duration of a particular #$Event in which an orange is quartered.")))

(defconcept Temporal-Part-Slot
  :is-primitive (:and Non-Physical-Part-Predicate Binary-Predicate)
  :annotations (Predicate-Category
                (documentation "A collection of predicates.  Each element of #$TemporalPartSlot is a binary predicate used to relate two things which have temporal extent, asserting either that one thing is a temporal part of the second thing, or that one thing is a temporal composite that includes the second thing.  Examples: #$developmentalStages, #$subEvents, #$firstSubEvents, #$subAbstrac, #$manufacturingSteps, #$beforeActors, #$afterActors.")))

(defconcept Temporal-Relation
  :is-primitive (:and Binary-Predicate Extensional-Representation-Predicate)
  :annotations (Predicate-Category
                (documentation "#$TemporalRelations specify relative positions of #$TemporalThings in #$Time.  #$PrimitiveTemporalRelations (such as #$after) interrelate time points, and #$ComplexTemporalRelations (such as #$postEvents and #$laterSubAbstractions) interrelate more complicated temporal objects such as a pair of events, a pair of tangible objects, etc.")))

(defconcept Temporal-Stuff-Type
  :is-primitive Stuff-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of each element of #$TemporalStuffType is temporally substance-like.  Consider, e.g., #$AnimalWalkingProcess, the set of all walking events.  Consider a particular walking event.  Videotape it.  Play back a few seconds of that videotape, showing one of many #$timeSlices of the original walking event.  That shorter video is still clearly going to be a video of a walking event.  So the collection #$AnimalWalkingProcess (the set of all walking events) is an element of #$TemporalStuffType; it is NOT an element of #$TemporalObjectType (q.v.).



Of course, there is a #$granuleOfTime for #$AnimalWalkingProcess, namely, #$TakingAStep, such that any #$timeSlices shorter than that are likely not to be considered real walking events.   This is analogous to granule-size for physical substance types such as peanut butter (the granules there are a peanut piece, a glob of peanut oil, etc.) or wood (the granule there is an individual plant cell).



More esoterically, consider a time slice of a person.   `Albert Einstein while at Princeton' was still a person.  So #$Person (the set of all people) is an element of #$TemporalStuffType.  All tangible objects are temporally stuff-like in this fashion.



If a collection COL #$isa #$TemporalStuffType, it is reasonable to state axioms about the temporally intrinsic properties of COL's instances --- properties such as rate of speed, cost per pound, kinds of actors, etc.")))

(defconcept Temporal-Thing
  :is-primitive Individual
  :annotations (Cyc_Collection
                Temporal-Stuff-Type
                (documentation "#$TemporalThing is the collection of all things which have a particular temporal extent, things about which one might sensibly ask `When?'.  #$TemporalThing therefore includes many things, such as actions, tangible objects, agreements, and abstract pieces of time. Some things are NOT instances of #$TemporalThing because they are abstract, timeless, etc. -- such as a mathematical set, an attribute, an integer, etc.")))

(defconcept Temporary-Change-Of-User-Rights
  :is-primitive (:and Transaction Change-In-User-Rights)
  :annotations (Default-Disjoint-Script-Type
                (documentation "A collection of events; a subset of #$ChangeInUserRights.  In an instance of #$TemporaryChangeOfUserRights, one agent temporarily gives up user rights over some object (see #$UserRightsAttribute), while another agent temporarily gains some user rights over that object.  This occurs in renting, loaning, or sharing of things.")))

(defconcept Tender-Object
  :is-primitive (:and Composite-Tangible-And-Intangible-Object Liquid-Asset)
  :annotations (Existing-Object-Type
                (documentation "A collection of  objects.  Each element of #$TenderObject is an item presented  by an agent in instances of #$Paying or #$Spending.  Typical examples include cash, checks, credit cards, travellers's checks.  Unusual but possible tender objects could be gold, goats, or golf balls.")))

(defconcept Tensile-Strength
  :is-primitive (:and Physical-Attribute Scalar-Interval)
  :annotations (Derived-Numeric-Attribute-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute.  Each element of #$TensileStrength describes a specific capacity of a physical object to be deformed.  The higher the deformability, the lower the force required to deform the object.  Different tensile strengths may be represented using a #$GenericValueFunction.  Tensile strengths of objects are indicated with the predicate #$tensileStrengthOfSubstance.")))

(defconcept Terminal-Physiological-Condition
  :is-primitive Life-Threatening-Condition
  :annotations (Physiological-Condition-Type
                (documentation "A collection of ailments which are distinguished by the shared characteristic that if left untreated, those ailments will certainly cause a patient to die -- and may eventually do so despite treatment.  Subsets of this collection include: #$Diabetes, #$Cancer, #$Botulism, and #$Rabies.
Note that this does not mean: `are 100% likely to lead to death if untreated'.  It does not mean `the organism will not seek treatment elsewhere,.  Also note that this is somewhat context dependent.")))

(defconcept Ternary-Predicate
  :is-primitive Predicate
  :annotations (Cyc_Collection
                Relation-Type
                (documentation "#$TernaryPredicate is the collection of all Cyc predicates which take three arguments.")))

(defconcept Terrain-Attribute
  :is-primitive Attribute-Value
  :annotations (Attribute-Type
                (documentation "A collection of attributes.  Each element of #$TerrainAttribute is an attribute used for describing the terrain in a geographic region.  Examples: #$Rocky, #$Sandy, #$RuggedTerrain, #$Desertlike, #$SnowCovered, #$Mountainous.")))

(defconcept Terrestrial-Direction
  :is-primitive Unit-Vector-Interval
  :annotations (Object-Type
                (documentation "The collection of directions used to describe the orientation of objects on or near the surface of the Earth.  Includes terrestrial directions related to compass points (e.g., #$East-Directly) and to the gravitational vector (e.g., #$Down-Directly, #$VerticalDirection).  Note that assertions in different terrestrial contexts can be inconsistent in a neutral context: East in China points in a different direction than East in New York!")))

(defconcept Terrestrial-Organism
  :is-primitive Organism--Whole
  :annotations (Organism-Type-By-Habitat
                (documentation "The collection of organisms adapted to life on land, out of water.  Elements of #$TerrestrialOrganism spend all or most of their time out of the water, in air, either on the land surface or under it.  #$TerrestrialOrganism includes, for example, members of its subsets #$Elephant, #$Ladybug, #$Bird, #$Person, etc.")))

(defconcept Territory
  :is-primitive (:and Country-Subsidiary Controlled-Land)
  :annotations (Existing-Object-Type
                (documentation "A collection of geopolitical entities.  Each element of #$Territory is a geopolitical region which is distinct from, but dependent on and controlled by, another geopolitical entity.  Examples: #$PuertoRico, #$BritishAntarcticTerritory, #$GalapagosIslands, #$RyukyuIslands.")))

(defconcept Text-Group
  :is-primitive Character-String
  :annotations (Object-Type
                (documentation "A collection of #$CharacterStrings. Each element of #$TextGroup is a #$CharacterString which forms a 'natural' or meaningful group, above the  level of a word. Thus, 'er#q2' would be a character string, but not a text group, whereas the sentence you are now reading is a text group, as is a paragraph, etc. Note that a TextGroup is the abstract sequence of symbols, not the tangible encoding of them.")))

(defconcept Textile-Product
  :is-primitive (:and Solid-Tangible-Product Artifact)
  :annotations (Product-Type
                Existing-Object-Type
                (documentation "A collection of tangible products.  Each element of #$TextileProduct is a product made by spinning, weaving, knitting, wrapping, pressing, or other processes used to form fibers into usable materials such as cloth or line.   Examples include elements of the subsets #$Yarn, #$Rope, and #$CottonCloth.")))

(defconcept Text-Microtheory
  :is-primitive Propositional-Information-Thing
  :annotations (Microtheory-Type
                Object-Type
                (documentation "The collection of Microtheories each of which contains assertions that convey the information content of a particular text.  The propositional content of a text is a #$PropositionalInformationThing, and it forms a #$TextMicrotheory.")))

(defconcept Textual-Material
  :is-primitive Information-Bearing-Thing
  :annotations (Existing-Object-Type
                (documentation "A collection of information bearing things (IBTs).  Each element of #$TextualMaterial is an IBT whose informational content is encoded in some instance of #$CommunicationConvention which is a linear symbolic language; e.g., a newspaper printed in English written with the Roman alphabet; a book printed in English using Braille; or a poster written in Chinese using characters.  Textual material always includes some physical representation of one or more elements of #$CharacterString (which are abstract).  Textual materials may be tangible objects, such as newspapers, but also may include intangibles such as patterns of light projecting words onto a wall.  The subsets of #$TextualMaterial are multifarious, including, e.g., #$GroceryList, #$W2-form, #$RestaurantMenu, #$GrantProposal, #$WillAndTestament, #$BusinessCard, #$MusicalText, #$BalanceSheet-Document.")))

(defconcept Thermal-Conductivity
  :is-primitive (:and Scalar-Interval Physical-Attribute)
  :annotations (Primitive-Attribute-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute.  Each element of #$ThermalConductivity represents a specific ability of some physical object to conduct heat; e.g., #$ConductsHeatPoorly, #$ConductsSomeHeat, #$ConductsHeatWell.  An individual object's #$ThermalConductivity is indicated with the predicate #$thermalConductivityOfObject.")))

(defconcept The-Term
  :is-primitive Cyc_Thing
  :annotations (Cyc_Collection
                (documentation "A special kind of term that allows back-reference to any individual thing that satisfies the constraints on the #$TheTerm.  E.g., 'Suppose a cat walks into a fish store.  The cat is likely to get into a lot of trouble.'  'The cat' in the second sentence refers back to 'a cat' in the first; i.e., any cat that walks into a fish store.  In Cyc, the constraints for a #$TheTerm in a given context are given by use of the predicate #$theTermConstraints on the unit representing that context.  In lifting assertions out of that context, the constraints are added as antecedents.")))

(defconcept Cyc_Thing
  :is-primitive loom:thing
  :annotations (Cyc_Collection
                (documentation "#$Thing is the universal set:  the collection of everything!  Every Cyc constant in the Knowledge Base is a member of this collection; in the prefix notation of the language CycL, we express that fact as (#$isa CONST #$Thing).  Thus, too, every collection in the Knowledge Base is a subset of the collection #$Thing; in CycL, we express that fact as (#$genls COL #$Thing).  See #$isa and #$genls for further explanation of those relationships.  



Note:  There are even a few collections, such as #$CharacterString and #$Integer, which have a #$defnSufficient that recognizes non-constants (such as strings and numbers) as instances of #$Thing.")))

(defconcept Thinking
  :is-primitive Mental-Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events; a subset of #$MentalEvent.  Each element of #$Thinking is a mental process in the most general sense, involving the acquisition, modification, and/or synthesis of ideas.  Theorizing, remembering, inventing something, free associating, and dreaming are all examples of #$Thinking.")))

(defconcept Three-Dimensional-Shape
  :is-primitive Geometric-Thing
  :annotations (Shape-Type
                (documentation "A collection of shapes 
that exist in 3 (but not less than 3) dimensions. Some
elements of this are basic geometrical shapes, e.g.,
instances of #$SphereShape and #$ConeShape, but can also
include irregular shapes, such as the region from the
surface of Russia extending 2 miles up.")))

(defconcept Three-Dimensional-Shape-Type
  :is-primitive Shape-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each element of #$ThreeDimensionalShapeType is a collection of things which are subsets of #$ThreeDimensionalShape.  Examples: #$CylinderShape, #$Rectangular3DShape, #$HumanlikeBodyShape.")))

(defconcept Three-Story-Building
  :is-primitive Building
  :annotations (Existing-Object-Type
                (documentation "Collection of all three story buildings.")))

(defconcept Time--Quantity
  :is-primitive (:and Physical-Attribute Scalar-Interval)
  :annotations (Fundamental-Numeric-Attribute-Type
                Cyc_Collection
                (documentation "#$Time-Quantity is a physical 
quantity possessed by #$TemporalThings.  An #$Event transpires 
over a certain amount of #$Time-Quantity, a #$SomethingExisting 
exists for a lifetime which is a certain amount of #$Time-Quantity,
 and of course an abstract #$TimeInterval has a duration which 
is a certain amount of #$Time-Quantity.   The standard unit of 
#$Time-Quantity in Cyc is #$SecondsDuration (qv) but there can 
be and are many other ways to specify an amount of time; e.g., 
with other #$UnitOfMeasure instances such as #$WeeksDuration 
and #$YearsDuration, and with reified quantities of (instances 
of) #$Time-Quantity such as #$LongTime, #$Immediately, 
#$AFewDecadesDuration, etc.")))

(defconcept Time-Interval
  :is-primitive (:and Temporal-Thing Intangible-Individual)
  :annotations (Temporal-Stuff-Type
                (documentation "#$TimeInterval is a subset of #$TemporalThing.  Each #$TimeInterval can be characterized fully just by specifying its temporal attributes.  Anything which has a temporal extent is an instance of #$TemporalThing, but if that is essentially ALL that it has, then it is also a #$TimeInterval.  For example, `the year 1967' is a just a #$TimeInterval: although many interesting things happened during that year, the year itself is completely defined by its temporal extent.  `Neil Armstrong Walking on the Moon' is an #$Event, not a #$TimeInterval, since it would be defined by many non-temporal assertions. And of course, `Neil Armstrong' is a #$SomethingExisting, not a #$TimeInterval, but like all instances of #$SomethingExisting, he does have temporal extent and is therefore a #$TemporalThing.  One could, in principle, separately reify (name) the #$TimeInterval which is the period of existence of any #$SomethingExisting, or the period of time during which any #$Event occurred, but in practice that is rarely useful.  Since they all have an implicit #$TimeInterval associated with them, any predicates which one might apply to time intervals can also be applied to a football game, a football, etc.  E.g., we can talk about the #$startingPoint of a football game, or for that matter the #$startingPoint of the football itself (the moment of its creation).")))

(defconcept Time-Of-Day
  :is-primitive Time-Interval
  :annotations (Temporal-Object-Type
                (documentation "The collection of all temporal intervals marking times of the day.  This includes the twenty-four clock hours, and also longer and shorter pieces of time.")))

(defconcept Time-Of-Day--Am
  :is-primitive Time-Of-Day
  :annotations (Time-Of-Day-Type
                (documentation "The collection of half-days from Midnight to Noon.  See #$CalendarDay.")))

(defconcept Time-Of-Day--Pm
  :is-primitive Time-Of-Day
  :annotations (Time-Of-Day-Type
                (documentation "The collection of half-days from Noon to Midnight.  See #$CalendarDay.")))

(defconcept Time-Of-Day-Type
  :is-primitive (:and Temporal-Object-Type Conventional-Classification-Type)
  :annotations (Cyc_Collection
                (documentation "A collection of collections, whose elements are some class of time of day, such as #$TimeOfDay-PM, #$TimeOfDay-9AM, #$TimeOfDay-MidnightHour, and so on.")))

(defconcept Time-Point
  :is-primitive Time-Interval
  :annotations (Temporal-Object-Type
                (documentation "A #$TimePoint is a piece of time which has an infinitely small duration.  In Cyc's basic representation of time, all time is like an infinite straight line, and any #$TimePoint is like a point on that line.  Many temporal attributes of a #$TemporalThing may be described in terms of time points; e.g., its #$startingPoint.  A #$TimePoint can also be contextual, such as #$Now.")))

(defconcept Title
  :is-primitive Linguistic-Object
  :annotations (Linguistic-Object-Type
                (documentation "The collection of all titles: proper nouns (noun phrases) that relate to a person's status and/or function/role in an organization.  E.g., #$SeniorVicePresident-Title, #$MemberOfTechnicalStaff-Title, #$Reverend-Title, #$Father-Title, #$Miss, etc.  Note that this concept is not (closely) related to the title of a book or work of art, nor to the nicknames for a place, etc.")))

(defconcept Tool
  :is-primitive (:and Physical-Device Solid-Tangible-Thing)
  :annotations (Existing-Object-Type
                (documentation "A collection of devices; a subset of 
#$PhysicalDevice.  An instance of 
#$Tool is a device which is used by people to 
manipulate and/or alter other objects or the immediate
environment in some way (hence, it does not include
#$PomPoms). #$Tools are also typically guided by
their user during use (see #$Device-UserGuided)
and can be used more than once (and is thus 
disjoint with the collection #$Device-OneTimeUse).
#$Tool includes 
devices used in many different activities.  
A sampling of subsets shows some of that variety: 
#$WoodworkingTool, #$CarpentryTool, #$PlumbingTool, 
#$MedicalTool, #$CleaningImplement, #$WritingImplement.")))

(defconcept Topographical-Feature
  :is-primitive (:and Surface-On-Tangible-Object Outdoor-Location)
  :annotations (Existing-Object-Type
                (documentation "A collection of geographical regions.  Each element of #$TopographicalFeature is a three dimensional feature of a planet's surface, typically with boundaries defined by formations of rock, dirt, water, etc., or by significant changes in elevation.  Some important subsets include the collections #$Mountain, #$MountainRange, #$Peninsula, #$Harbor, #$Shoreline, #$Arroyo.  Collections of regions defined by the presence of human artifacts (e.g., #$CitySkyline) or ecological characteristics (e.g., #$Forest-Wild) do NOT belong among the subsets of #$TopographicalFeature.  Examples of #$TopographicalFeature: #$KyushuIsland-Japan, #$SaintThomas-Island, #$LakeErie, #$VictoriaFalls, #$MalayPeninsula.")))

(defconcept Top-Side
  :is-primitive Side
  :annotations (Region-Type
                (documentation "The collection of all the entire top sides (as conventionally understood) of all objects that have distinct #$Sides, one of which faces up.")))

(defconcept Torso
  :is-primitive (:and Animal-Body-Part Biological-Living-Object)
  :annotations (Animal-Body-Part-Type
                Unique-Anatomical-Part-Type
                (documentation "The collection of all animal torsos.  A torso is the main portion of the animal's body, generally located centrally,
and one can conceive of an animal as a torso to which are connected the head and various appendages which together make up the entire animal.")))

(defconcept Totally-Ordered-Set
  :is-primitive Partially-Ordered-Set
  :annotations (Object-Type
                (documentation "The collection of all totally ordered sets (also called linearly ordered sets, strict linear orders, or directed chains), each being a #$SetWithStructure consisting of a set together with an ordering relation on that set.   Mathematical lists, directed chains, finite sequences, infinite series, and number lines are special cases of #$TotallyOrderedSet.  The ordering relation is defined on the associated set, and is transitive on that set, irreflexive on that set, and asymmetric on that set.   Sometimes the members of the #$TotallyOrderedSet are called its nodes, and, for the discrete case, the pairwise relations between the adjacent nodes are called the links.  A #$TotallyOrderedSet may be finite or infinite, and if infinite, it may or may not have a starting end.  (Note: A #$TotallyOrderedSet is not a #$SetOrCollection, rather it is a #$SetWithStructure that has an associated #$SetOrCollection.)")))

(defconcept Touch-Perception
  :is-primitive (:and Physical-Contact-Situation Perceiving)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of sensory-perceptual events (#$Perceivings) in which a #$PerceptualAgent perceives (acquires information) by touch.")))

(defconcept Transaction
  :is-primitive (:and Social-Occurrence Purposeful-Action)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "Transaction is the collection of events performed by #$Agents cooperating (willingly) under some #$Agreement, each performing actions in exchange for the actions of the other. 
Note:  Attack/counterattack in warfare is not a #$Transaction.  Neither is fortuitous cooperation without agreement, such as a set of investors who, unknown to each other, all buy the same stock almost at once, and end up driving its price up.  On the other hand, if you see agents acting to mutual benefit, it's not a bad strategy to guess that there is some agreement between them.
Note: The word 'transaction' often means an exchange of user rights (to goods and/or money) between agents; see #$ExchangeOfUserRights for that concept.  #$Transaction is a more general concept, and is a superset of #$ExchangeOfUserRights.")))

(defconcept Transfer-In
  :is-primitive Generalized-Transfer
  :annotations (Temporal-Object-Type
                (documentation "A collection of events.  #$TransferIn includes all #$GeneralizedTransfers for which there is a well-defined #$to-Generic, but not necessarily a #$from-Generic.  This includes, among other things, #$CollectionEvent, #$GainingUserRights, and #$AccessingAnIBT.  At the end of a #$TransferIn, #$transferredThing is 'loccated' at the #$to-Generic.  Some negative examples of #$TransferOut are #$AbandoningSomething (when there is no prospective owner) and #$IBTGeneration (when the information may go to various unspecified locations.")))

(defconcept Transfer-Out
  :is-primitive Generalized-Transfer
  :annotations (Temporal-Object-Type
                (documentation "A collection of events.  #$TransferOut includes all #$GeneralizedTransfers for which there is a well-defined #$from-Generic, but not necessarily a #$to-Generic.  This includes, among other things, #$Emission, #$LosingUserRights, and #$DistributionEvent.  At the start of a #$TransferOut, #$transferredThing is 'loccated' at the #$from-Generic.  Some negative examples of #$TransferOut are #$AppropriatingSomething (when there is no previous owner) and #$Hearing (when the sounds may come from various unspecified locations.")))

(defconcept Transferring-Ownership
  :is-primitive Transferring-Possession
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events; a subset of #$TransferringPossession.  In an instance of #$TransferringOwnership, a transfer of ownership occurs.  This means that in such an event there is a transfer from one #$Agent to another of #$FullUseRights and #$ExclusiveUserRights (over the #$objectOfPossessionTransfer).  Often there is some `consideration' for this transfer, of course --- see #$ExchangeOfUserRights.")))

(defconcept Transferring-Possession
  :is-primitive (:and Losing-User-Rights Gaining-User-Rights Social-Occurrence)
  :annotations (Temporal-Object-Type
                Default-Disjoint-Script-Type
                (documentation "A collection of events.  In an instance of #$TransferringPossession, the possession of a single object (i.e., the #$objectOfPossessionTransfer) is transferred from one #$Agent to another.  Thus, a #$TransferringPossession event alters the rights of TWO different agents to use the object in question; one agent loses some #$UserRightsAttribute over it, while the other agent gains some #$UserRightsAttribute over it.  Each #$TransferringPossession event is both a #$LosingUserRights event and a #$GainingUserRights event.
Note:  In #$Buying events, #$Bartering events, #$Renting events, TWO such #$TransferringPossessions occur, because there are TWO objects which transfer possession.  For example, in buying a car, the right to use the buyer's money is transferred to the auto seller, while the ownership of the car is transferred to the buyer.  Both of the #$TransferringPossession events (one for each object) are #$subEvents of the instance of #$Buying, #$Renting, etc.  See #$ExchangeOfUserRights.")))

(defconcept Transformation-Event
  :is-primitive (:and Physical-Event Creation-Event Destruction-Event)
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "A collection of events.  In each element of #$TransformationEvent, at least one thing ceases to exist and at least one thing comes into existence.  Usually at least some portion of the thing(s) destroyed becomes incorporated into the thing(s) that are created.

Note:  this collection is a superset of, but NOT coextensional with, #$TransformationProcess (q.v.).")))

(defconcept Transformation-Process
  :is-primitive Transformation-Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of #$TransformationEvents that also are elements of #$TemporalStuffType.  That is, each of their temporal parts is also a #$TransformationEvent, in which something is destroyed and something created.  
Note:  It is often the case that a #$TransformationEvent is NOT a #$TransformationProcess --- e.g., there may be several preparation stages, and then at the end everything is brought together and the foaming starts, or the butterfly emerges, or whatever transformation occurs.  So #$TransformationProcess is a small subset of #$TransformationEvent (qv).")))

(defconcept Transitive-Binary-Predicate
  :is-primitive Binary-Predicate
  :annotations (Cyc_Collection
                Predicate-Category
                (documentation "A collection of predicates; the subset of #$BinaryPredicate whose elements are all transitive.  A predicate F is an element of #$TransitiveBinaryPredicate if and only if F is a binary predicate and (F X Y) and (F Y Z) together imply (F X Z).  Examples: #$greaterThan, #$eastOf, #$geographicalSubRegions, #$cotemporal.")))

(defconcept Translation--Complete
  :is-primitive Movement--Translation-Event
  :annotations (Temporal-Object-Type
                (documentation "A collection of translational motion events; hence a subset of #$Movement-TranslationEvent.  In any element of #$Translation-Complete, the whole #$objectMoving moves in its entirety from the origin (#$fromLocation) to the destination (#$toLocation).  That is, the object completely leaves the origin and relocates at the destination.  The #$objectMoving may be either a #$NonFluidlike object or a #$FluidTangibleThing all of which moves from one place to another; e.g., a baseball or the gasoline used to fill a gas tank.  Another example: a single molecule of water flowing from point A to B in a river.  Negative example: a river flowing from A to B  (the river itself is not relocated); a rubber band stretching.  A borderline case:  a spider spins a web, leaving part of itself, in effect, extended out behind it.  In most contexts that would still be considered a #$Translation-Complete event.
Note:  #$Translation-Complete is noncommittal as to whether net movement has occurred, so round-trip events qualify as complete translations.  (For contrast, see #$Translation-LocationChange).")))

(defconcept Translation--Flow
  :is-primitive Movement--Translation-Event
  :annotations (Temporal-Stuff-Type
                Script-Type
                (documentation "A collection of translational motion events; hence a subset of #$Movement-TranslationEvent. In any element of #$Translation-Flow, the #$objectMoving is a #$FluidTangibleThing (i.e., a portion of some fluid, such as a quart of milk) rather than a discrete solid object.  At least some of the #$objectMoving leaves the #$fromLocation and some arrives at the #$toLocation; but it is not necessary that all of the #$objectMoving go from the origin (#$fromLocation) to the destination (#$toLocation).  Such fluid flows include rivers flowing or winds blowing or air filling your lungs when you take a breath.
Note: also intended to be included here are flows of ``fluids'' such as sand, drifting snow, etc., which are composed of multiple solid particles.  So a borderline case would be using a bulldozer to spread out a pile of rocks and gravel over a parking lock; depending on one's context (sensors, purposes, etc.) that might or might not be considered a #$Translation-Flow event.")))

(defconcept Translation--Location-Change
  :is-primitive Movement--Translation-Event
  :annotations (Temporal-Object-Type
                (documentation "A collection of translational motion events; a subset of #$Movement-TranslationEvent.  In each element of #$Translation-LocationChange, the #$objectMoving ends up in a different place than it started; i.e., the #$fromLocation cannot be the same as the #$toLocation.  Thus, a round trip travel event (#$Translation-RoundTrip) is NOT an instance of this collection.  See also #$Translation-NoLocationChange.")))

(defconcept Translation--Multi-Path
  :is-primitive Movement--Translation-Event
  :annotations (Temporal-Object-Type
                (documentation "A collection of translational motion events; a subset of #$Movement-TranslationEvent.  In any element of #$Translation-MultiPath, motion may occur simultaneously along two or more instances of #$Path-Generic (which are not related by subpath/superpath relationships.)  Therefore, there must be at least two #$objectMovings in such an event.  There may be more than one #$fromLocation and/or more than one #$toLocation.  Elements of #$Translation-MultiPath include scattering, distributing, and collecting things.  E.g., all of the following exhibit multi-pathway translation movements: a rainshower or snowfall; an exploding firework; water being ejected from a sprinkling system; the surrounding objects being sucked up by a tornado; participants running a 100K footrace; pool balls during the opening break.  For non-examples of this, see #$Translation-SinglePath.")))

(defconcept Translation--No-Location-Change
  :is-primitive Movement--Translation-Event
  :annotations (Temporal-Object-Type
                (documentation "A collection of translational motion events; hence a subset of #$Movement-TranslationEvent.  In any instance of #$Translation-NoLocationChange, the #$objectMoving undergoes translational motion but ends up where it started --- i.e., there is no NET movement; i.e., its #$fromLocation and #$toLocation are the same.  Between the beginning and the end of a #$Translation-NoLocationChange, the #$objectMoving may visit the #$toLocation and the #$fromLocation any number of times.   E.g., consider the motion of a person who is born in, and 80 years later dies in, the very same hospital, and has been there a few times in between for operations, visiting patients, etc.  A less dramatic example is the motion of your car on a particular day, as it gets moved around, crosses its own path a few times, etc., but ends the day in the same place it started.   Elements of #$Translation-NoLocationChange may be periodic or nonperiodic movements.  An important subset of #$Translation-NoLocationChange is #$Translation-RoundTrip.")))

(defconcept Translation--Non-Periodic
  :is-primitive (:and Movement--Non-Periodic Movement--Translation-Event)
  :annotations (Temporal-Object-Type
                (documentation "The collection of all non-periodic translational movement
events, i.e., the intersection of #$Movement-NonPeriodic and
#$Movement-TranslationEvent.  In each instance of
#$Translation-NonPeriodic, the #$objectMoving is in translational
motion and does not move back the same position on the regular
temporal basis (it can visit the same location multiple times, just not regularly).")))

(defconcept Translation--Periodic
  :is-primitive (:and Movement--Periodic Movement--Translation-Event)
  :annotations (Temporal-Object-Type
                (documentation "A collection of periodic movement events; hence a subset of #$Movement-Periodic (q.v.)   In any element of #$Translation-Periodic, the periodic motion of the #$objectMoving is translational motion (as opposed, e.g., to rotation).  E.g., a ball bouncing in place translates periodically; so does a planet revolving around a star.  But not: a planet rotating on its axis, a top spinning in place.")))

(defconcept Translation--Round-Trip
  :is-primitive Translation--No-Location-Change
  :annotations (Temporal-Object-Type
                (documentation "A collection of events, #$Translation-RoundTrip is a subset of #$Translation-NoLocationChange.  Each element of #$Translation-RoundTrip represents one round trip event.  That is, an instance of #$Translation-RoundTrip is a complete translational movement that begins and ends in the same place (thus, the #$fromLocation and #$toLocation are identical).  However, a round trip is usually a discontinuous motion (cf. #$Movement-TranslationProcess).  In the simplest case, it has exactly one #$outboundLegOfRoundTrip and exactly one #$inboundLegOfRoundTrip, and the trip breaks at the #$destination-RoundTrip, which is the place that the traveller visits in between the two legs of the journey.  Thus, in addition to a #$fromLocation and #$toLocation, an instance of #$Translation-RoundTrip also has an #$origin-RoundTrip and #$destination-RoundTrip.  The #$origin-RoundTrip is just the same as the #$fromLocation and #$toLocation. 
For example, in Doug and Mary's trip to Antarctica, the #$origin-RoundTrip was #$CityOfAustinTX, the #$destination-RoundTrip was the #$ContinentOfAntarctica.  Thus, the #$CityOfAustinTX was both the #$fromLocation and the #$toLocation of the WHOLE (round) trip, and it was also the #$toLocation of the homeward leg of their trip (#$inboundLegOfRoundTrip).   The #$ContinentOfAntarctica was the #$toLocation for their #$outboundLegOfRoundTrip and the #$fromLocation of their homeward leg (i.e., their #$inboundLegOfRoundTrip).
Note: to describe a multi-stop `round trip',  instead of using #$Translation-RoundTrip one can represent it as a circuit composed of a series of one-way legs.")))

(defconcept Translation--Single-Path
  :is-primitive Movement--Translation-Event
  :annotations (Temporal-Object-Type
                (documentation "A subset of #$Movement-TranslationEvent.  Each element of #$Translation-SinglePath is a translational movement which involves exactly one #$pathway-Complete.  One or more items may have the role of #$objectMoving in such an event.  Note that although there is a single #$pathway-Complete, it does not follow that there is a unique #$fromLocation and a unique #$toLocation because that depends on our descriptions of locations.  (A single-pathed movement can be described as from TX to PA, or from Austin to Pittsburgh, or even from Northwest in Austin to Oakland in Pittsburgh.)  However, the single #$pathway-Complete connects #$fromLocation and #$toLocation.  Consider a translational motion performed by a whole group; it is likely to be a #$Translation-SinglePath ---  e.g., a flock of birds flying together, or a snarl of rush-hour traffic on the Beltway.  Negative examples (see #$Translation-MultiPath) would be: a set of billiard balls during the opening break, a group of water droplets that come together into one big drop.")))

(defconcept Translocation
  :is-primitive Generalized-Transfer
  :annotations (Temporal-Object-Type
                (documentation "A collection of events; a subset of #$GeneralizedTransfer.  Each element of #$Translocation is a transfer of something across a distance.  Translocations may have a #$toLocation and a #$fromLocation.  #$Translocation is the common generalization of (i.e., a superset of) both #$WavePropagation and #$Movement-TranslationEvent (q.v.). ")))

(defconcept Transparency
  :is-primitive (:and Scalar-Interval Physical-Attribute)
  :annotations (Measurable-Attribute-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute.  Each element of #$Transparency represents a capacity of some tangible object to transmit light.  Degrees of #$Transparency may be represented qualitatively (e.g., #$Translucent, #$Transparent, #$Murky, #$Opaque), or using #$GenericValueFunctions.  Indicate a particular object's #$Transparency with the predicate #$transparencyOfObject.")))

(defconcept Transportation-Company
  :is-primitive (:and Business Commercial-Service-Organization)
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations; a subset of #$ServiceOrganizations.  An element of #$TransportationCompany is an organization that provide transportation (of goods or persons) to customers for a fee.")))

(defconcept Transportation-Event
  :is-primitive (:and Causing-Another-Objects-Translational-Motion
                      Translation--Single-Path
                      Translation--Complete
                      Translation--Location-Change)
  :annotations (Temporal-Object-Type
                (documentation "A collection of events.  An instance of #$TransportationEvent is an event in which one object (in the role of #$transporter) aids in the translational movement of another object (having the role of #$transportees), so that both objects move together along the same #$pathway-Complete.  Optionally, one of these objects, or some third object moving along with them, provides the force to make the movement happen (#$providerOfMotiveForce).  Examples of transportation events include automobile transporation, dogs pulling goods on a sled, a wagon with groceries rolling down a hill, a person carrying a suitcase down the street, etc.  In that last case, note that the #$transporter is the suitcase, not the person.  Things which are NOT #$TransportationEvents (as defined above): a river conveying some flotsam, the wind blowing a leaf, a conveyor belt moving a widget to the next person on the assembly line, or a walking beast of burden without #$transportees on it.  In the first 3 of those, the would-be #$transporter doesn't actually change its overall location; in the fourth case, the unburdened beast has no #$transportees.  
Note:  This is a good example, by the way, of how Cyc concepts must be, and are, less ambiguous than words in English or any other natural language.  The cost of this is a larger vocabulary that must be used carefully, but the benefits are the ability to share knowledge in un-preconceived ways with others who subscribe to the same set of terms and intended meanings.")))

(defconcept Transporting-Goods
  :is-primitive (:and Transportation-Event Human-Activity Handling-An-Object)
  :annotations (Temporal-Stuff-Type
                Default-Disjoint-Script-Type
                (documentation "Moving some kind of material from one point to another.  Different from just mixing stuff or putting stuff with other stuff.")))

(defconcept Transporting-People
  :is-primitive (:and Transportation-Event Human-Activity)
  :annotations (Temporal-Stuff-Type
                Default-Disjoint-Script-Type
                (documentation "The subcollection of #$TransportationEvent in each ofwhich instances of #$Person, i.e., human beings are the #$mainTransportees or among the #$mainTransportees.  Surely human beingsare usually not the only #$transportees in these instances of #$TransportationEvents (for example, some of these people'spersonal belongings are also among the #$transportees), andone may even think that in most instances of #$TransportationEvent, humanbeings are involved as #$transportees (for example, even adriver can be considered among the #$transportees).  The maindifference between this collection and the collection#$TransportingGoods is that there are human beings as #$mainTransportees in instances of #$TransportingPeople, while thereare no human beings as #$mainTransportees in instances of#$TransportingGoods.")))

(defconcept Trapping
  :is-primitive Taking-Custody-Of-Animal
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "A collection of events.  In an instance of #$Trapping, an animal is taken into custody by using a device that physically captures the body of the animal.  The animal may or may not be killed in the event.")))

(defconcept Tree--The-Plant
  :is-primitive Plant--Woody
  :annotations (Existing-Object-Type
                (documentation "A collection of plants; a subset of #$Plant-Woody.  Each element of #$Tree-ThePlant is a tree, i.e., a tall woody plant that is usually taller than a person or a bush, generally having a branching form overall, and with roots in the ground, a trunk, and the branches having numerous leaves exposed to the sky.  Cf. #$Bush.")))

(defconcept Tree-Ordered-Set
  :is-primitive Partially-Ordered-Set
  :annotations (Object-Type
                (documentation "The collection of all sets with abstract rooted tree structures, in which there is a single root-element and all other elements are reachable along branches from the root-element via a 'successor' ordering relation, such that one element may have multiple successors, but no two elements have the same successor.  A #$TreeOrderedSet is a special case of #$PartiallyOrderedSet in which no element has multiple 'parent' nodes.  There are no cycles of relations in a #$TreeOrderedSet: from every element, there is exactly one path to the root-element.  Many, but not all, taxonomic hierarchies are #$TreeOrderedSets.  The end or 'bottom' nodes are sometime called 'leaf nodes'.  A #$TotallyOrderedSet or directed chain is a special case of a #$TreeOrderedSet that happens to have no branchings.  (Note that #$TreeOrderedSet requires a single root node and therefore excludes mathematical 'forests' consisting of multiple, disconnected #$TreeOrderedSets.)")))

(defconcept Trial
  :is-primitive Hostile-Social-Action
  :annotations (Temporal-Object-Type
                Script-Type
                (documentation "The collection of legal conflicts that are heard and decided by a court.")))

(defconcept Truth-Value
  :is-primitive Mathematical-Object
  :annotations (Object-Type
                (documentation "#$TruthValue is a collection of mathematical objects; it contains the abstract, logical objects #$True and #$False.")))

(defconcept Tube-Shape
  :is-primitive (:and Abstract-Shape Three-Dimensional-Shape)
  :annotations (Abstract-Shape-Type
                Three-Dimensional-Shape-Type
                (documentation "The collection of all tube-like shapes: long, thin, hollow cylinders.  Pipes, hoses, smokestacks, etc.")))

(defconcept Tumor
  :is-primitive Biological-Living-Object
  :annotations (Existing-Object-Type
                (documentation "Each element of this collection is an abnormal tissue mass found in an animal.  Instances of #$Tumor include both malignant (cancerous -- see #$Cancer) and benign (non-cancerous) growths which have no normal physiological cause or function within the animal's body.")))

(defconcept Tuple
  :is-primitive (:and Situation Mathematical-Object)
  :annotations (Object-Type
                (documentation "A collection of mathematical objects.  Each element of #$Tuple is a complex which contains some number (greater than or equal to 1) of ordered (or otherwise indexed) components (it might be a pair, a triple, etc., or there may be a function from column names into their value domains).  For example, #$BloodPressureReading is a specialized subset of #$Tuple; each element of #$BloodPressureReading is an ordered or column-indexed pair (of numbers), in which the first is the systolic reading, the second the diastolic reading.  Components of tuples need not be restricted to numbers; for example, the entries in a data base (e.g., my address book) also qualify as tuples, whose components are name, address, phone, email address, etc.   A significant subset of #$Tuple is #$NTupleInterval (q.v.), whose elements are tuples consisting of intervals only; e.g., complex numbers, physical vectors.  Technically, if the index set for the #$Tuple is the counting numbers in their usual order, then the implied order alone can be used to pick a member of the tuple, and the tuple is in fact a #$List-Sequence.  In the general case, any index set (distinct column names, for example, in a relational database) may be used to index the members of a tuple, not just their order-postion numbers.")))

(defconcept Turning-Off-Powered-Device
  :is-primitive Changing-Device-State
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of actions in which the #$DeviceState of a #$PhysicalDevice changes from #$DeviceOn to #$DeviceOff.")))

(defconcept Turning-On-Powered-Device
  :is-primitive Changing-Device-State
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of actions in which the #$DeviceState of a #$PhysicalDevice changes from #$DeviceOff to #$DeviceOn.")))

(defconcept Twilight
  :is-primitive Qualitative-Time-Of-Day
  :annotations (Temporal-Object-Type
                (documentation "The union of the two collections of time intervals #$Dawn and #$Dusk.  Each #$Twilight is a situation where the sky is indirectly illuminated by the #$Sun, either just before a #$Sunrise or just after a #$Sunset.")))

(defconcept Two-Dimensional-Shape
  :is-primitive Geometric-Thing
  :annotations (Shape-Type
                (documentation "A collection of geometrical 
things.  Each element of #$TwoDimensionalShape is a 
physical shapes that exist in two (and not less than two) 
dimensions. Some are basic geometrical shapes,
such as instances of #$Oval, but others can be irregular.")))

(defconcept Two-Dimensional-Shape-Type
  :is-primitive Shape-Type
  :annotations (Cyc_Collection
                (documentation "A collection of collections.  Each instance of #$TwoDimensionalShapeType is a collection of things which are subsets of #$TwoDimensionalShape.")))

(defconcept Two-Story-Building
  :is-primitive Building
  :annotations (Existing-Object-Type
                (documentation "Collection of all two story buildings.")))

(defconcept Type-Predicate
  :is-primitive Predicate
  :annotations (Relation-Type
                (documentation "A collection of predicates.  Each element of #$TypePredicate is a predicate used in asserting relations between #$Collections, or between #$Individuals and #$Collections, which in turn imply further assertions involving instances of the #$Collections.  Examples: #$primaryActivityType, #$insuredEventTypes, #$anatomicalPartTypeAffected, #$frequencyOfActionType, #$objectTypesCollected.")))

(defconcept Ultra-Sound
  :is-primitive Sound
  :annotations (Wave-Propagation-Type
                (documentation "A collection of events; a subset of #$Sound.  Each element of #$UltraSound is a sound wave having a #$Frequency greater than 20,000 cycles per second, which is above the range of human hearing.")))

(defconcept Unalloyed-Metal
  :is-primitive (:and Metal Element-Stuff)
  :annotations (Tangible-Stuff-Composition-Type
                (documentation "A collection of tangible stuffs; a subset of #$Metal.  Every instance of #$UnalloyedMetal is a metal which is also an element, i.e., a substance of unmixed chemical type.  Thus, each subset of #$UnalloyedMetal is a subset of both #$Metal and #$ElementStuff.  Examples of #$UnalloyedMetal include the instances of #$Gold, #$Iron, #$Uranium, #$Antimony, #$Titanium, and many more.")))

(defconcept Unary-Predicate
  :is-primitive Predicate
  :annotations (Cyc_Collection
                Predicate-Category
                (documentation "#$UnaryPredicate is the subset of #$Predicate whose elements take only a single argument.  Note, however, that most unary properties are implemented in Cyc as elements of #$Collection or of #$AttributeValue, rather than of #$UnaryPredicate.  So there should not be very many instances of this collection.")))

(defconcept Unary-Type-Predicate
  :is-primitive (:and Inference-Related-Bookkeeping-Predicate Unary-Predicate)
  :annotations (Cyc_Collection
                (documentation "redundant `typing' predicates created for inference efficiency")))

(defconcept Unemployed-Person
  :is-primitive Person
  :annotations (Person-By-Activity-Type
                (documentation "A collection of persons.  Each instance of #$UnemployedPerson is a worker who is unemployed.  An unemployed worker is someone who either has worked previously and could still do so (if s/he had a job), or someone who is qualified to work (e.g., a recent graduate) but has not yet worked.")))

(defconcept Unincorporated-Organization
  :is-primitive Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of organizations.  An element of #$UnincorporatedOrganization is an organization that is constituted by one or more people but is not formally incorporated by a government charter.  It may be called an association.  In many legal jurisdictions, the organization itself is not a #$LegalAgent (q.v.); only its participants are.  Typically, an element of #$UnincorporatedOrganization (and thus its participants) are not protected by the limits on liability which are extended to a #$LegalCorporation (q.v.).")))

(defconcept Unintended-Loss-Of-User-Rights
  :is-primitive Losing-User-Rights
  :annotations (Temporal-Object-Type
                (documentation "Nondeliberate loss of some #$UserRightsAttribute; for example, when something is stolen, appropriated, or, in some cases, simply lost.")))

(defconcept Unique-Anatomical-Part-Type
  :is-primitive Existing-Object-Type
  :annotations (Sibling-Disjoint-Collection
                (documentation "A collection of collections.  Instances are types of #$OrganismParts that occur uniquely in the organisms (#$Organism-Whole) that have them.  For example, #$Head-AnimalBodyPart.")))

(defconcept United-States-Person
  :is-primitive Person
  :annotations (Nationality
                (documentation "A collection of persons.  Each element of #$UnitedStatesPerson is a person who either was born in the #$UnitedStatesOfAmerica or is currently among that country's #$citizens.")))

(defconcept United-States-President
  :is-primitive (:and United-States-Person
                      President--Head-Of-Government-Or-Head-Of-State
                      Public-Official
                      Politician)
  :annotations (Occupation-Type
                (documentation "A collection of persons.  Each element of #$UnitedStatesPresident is a person who holds the office of #$UnitedStatesPresident.  Examples: #$BillClinton from January 1993 till the present (November 1996); #$RichardNixon from January 1969 till his resignation in 1974; #$LyndonJohnson from Novemeber 1963 till January 1969.  Note that ex-U.S. Presidents have, in recent journalistic practice, tended to retain the title `President', although those individuals are no longer members of the collection #$UnitedStatesPresident after they leave office.")))

(defconcept Unit-Of-Acceleration
  :is-primitive Unit-Of-Measure
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of Acceleration.  For example, the value of the function #$MetersPerSecondPerSecond applied to the real number 9.8 -- (#$MetersPerSecondPerSecond 9.8) -- is 9.8 meters per second squared.")))

(defconcept Unit-Of-Angular-Acceleration
  :is-primitive Unit-Of-Measure
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of #$AngularAccelerationRate (i.e., the rate of change in the #$RateOfRotation).")))

(defconcept Unit-Of-Angular-Distance
  :is-primitive Unit-Of-Measure
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of #$AngularDistance.  E.g., (#$Radian 5) denotes 5 radians.")))

(defconcept Unit-Of-Angular-Speed
  :is-primitive (:and Unit-Of-Rate Unit-Of-Measure)
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of #$RateOfRotation.  E.g., (#$RadiansPerSecond 5) denotes a change of 5 radians in angular distance per second.")))

(defconcept Unit-Of-Area
  :is-primitive Unit-Of-Measure
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of #$Area; e.g., (#$SquareYard 4) returns an area of 4 square yards.")))

(defconcept Unit-Of-Capacitance
  :is-primitive Unit-Of-Measure
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of #$ElectricalCapacitance.  E.g., (#$Farad 20) denotes an electrical capacitance of 20 farads.")))

(defconcept Unit-Of-Charge
  :is-primitive Unit-Of-Measure
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of #$ElectricalCharge.  E.g., (#$Coulomb 3) denotes an electrical charge of 3 coulombs.")))

(defconcept Unit-Of-Concentration
  :is-primitive Unit-Of-Measure
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of #$ConcentrationStrength-Generic (i.e., mass of some element of #$ExistingStuffType per unit of #$Volume).  E.g., (#$GramsPerMilliliter 0.1) denotes a concentration of 0.1 grams per milliliter of one substance within another.")))

(defconcept Unit-Of-Current
  :is-primitive Unit-Of-Measure
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of #$ElectricalCurrent.  E.g., (#$Ampere 2) denotes an instance of #$ElectricalCurrent that would measure two amps.")))

(defconcept Unit-Of-Distance
  :is-primitive Unit-Of-Measure
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of #$Distance; e.g., (#$Mile 26.2) denotes 26.2 miles.")))

(defconcept Unit-Of-Energy
  :is-primitive Unit-Of-Measure
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of #$EnergyAsAQuantity.  E.g., (#$Joule 5) denotes 5 joules.")))

(defconcept Unit-Of-Flow-Rate
  :is-primitive (:and Unit-Of-Rate Unit-Of-Measure)
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of #$FlowRate (i.e.,volume of stuff passing a point per unit of time).  E.g., (#$CubicMeter 2000) denotes a #$FlowRate of 2000 cubic meters per second.")))

(defconcept Unit-Of-Frequency
  :is-primitive (:and Unit-Of-Rate Unit-Of-Measure)
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which are used for expressing how often something occurs during an interval of time, i.e., functions which return an element of #$Frequency.  E.g., (#$MegaHertz 89.5) returns a frequency of 89.5 MHz.")))

(defconcept Unit-Of-Mass
  :is-primitive Unit-Of-Measure
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of #$Mass.  E.g. (#$Kilogram 5) denotes 5 kilograms.")))

(defconcept Unit-Of-Measure
  :is-primitive (:and Variable-Arity-Relation
                      Non-Predicate-Function
                      Individual-Denoting-Function)
  :annotations (Cyc_Collection
                Relation-Type
                (documentation "#$UnitOfMeasure is the collection of all functions which return elements of #$ScalarInterval that describe physical quantities such as #$Speed, #$Volume, etc.  Those functions are usually grouped into subsets depending on what they measure (e.g., #$UnitOfSpeed,#$UnitOfVolume).  Functions which belong to #$UnitOfMeasure are variable-arity relations that take either one or two arguments, both of which must be elements of #$CycSystemRealNumber. If only one argument is given (e.g. (#$Meter 5)), the expression stands for a precise quantity (here, 5 meters); see also #$ScalarPointValue.  If two arguments are given (e.g. (#$Meter 5 10)), the expression stands for a closed interval and the arguments are interpreted as the interval's mininum and maximum, respectively. Following are a few example uses of some elements of #$UnitOfMeasure:







     `10 years': (#$YearsDuration 10) 



     `2 feet': (#$Foot-UnitOfMeasure 2) 



     `50 dollars and 2 cents': (#$Dollar-UnitedStates 50.02) 



     `between 1 and 50 pounds per square inch, inclusive': (#$PoundsPerSquareInch 1 50) 



     `dimensionless quantity between 3 and 4.1, inclusive': (#$Unity 3 4.1).")))

(defconcept Unit-Of-Measure-No-Prefix
  :is-primitive Unit-Of-Measure
  :annotations (Cyc_Collection
                (documentation "Please see the #$SharedNote #$NoteForUnitOfMeasureWithPrefixAndNoPrefix.")))

(defconcept Unit-Of-Measure-With-Prefix
  :is-primitive Unit-Of-Measure
  :annotations (Cyc_Collection
                (documentation "Please see the #$SharedNote #$NoteForUnitOfMeasureWithPrefixAndNoPrefix.")))

(defconcept Unit-Of-Monetary-Flow-Rate
  :is-primitive (:and Unit-Of-Rate Unit-Of-Measure)
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of #$MonetaryFlowRate (i.e. transfer of money per unit of time).  E.g., (#$DollarsPerHour 10) denotes a #$MonetaryFlowRate of $10 per hour.")))

(defconcept Unit-Of-Money
  :is-primitive Unit-Of-Measure
  :annotations (Interconvertible-Unit-Type
                (documentation "A collection of Cyc functions.  #$Dollar-UnitedStates, #$Peso-Mexico, and #$Yen-Japan are each elements of this collection (along with functions for many other nations's monetary units).  Each of these is a function which, given real numbers as arguments, returns an instance of the collection #$Money (q.v.).  For example, (#$Dollar-UnitedStates 5.99) denotes an element of #$Money whose size, or amount, is five dollars and 99 cents, expressed in the `unit of measure' US dollars; in short, (#$Dollar-UnitedStates 5.99) denotes $5.99.  

Note: The monetary values associated with the members of #$UnitOfMoney, and the exchange rates between them, fluctuate (sometimes widely) over very short periods of time -- daily, even hourly.  In being heavily time-dependent, #$UnitOfMoney is unlike most other subsets of #$UnitOfMeasure.")))

(defconcept Unit-Of-Power
  :is-primitive Unit-Of-Measure
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of #$EnergyAsAQuantity.  E.g., (#$Watt 5) denotes 5 watts.")))

(defconcept Unit-Of-Pressure
  :is-primitive Unit-Of-Measure
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of #$Pressure (i.e., force per unit #$Area) or #$Elasticity.  E.g., (#$Pascal-UnitOfPressure 175) denotes a #$Pressure of 175 pascals.")))

(defconcept Unit-Of-Rate
  :is-primitive Unit-Of-Measure
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of #$Rate.  This includes any measurement function (see #$UnitOfMeasure) whose #$unitOfMeasureExpansions list includes the factor (-1 #$UnitOfTime).  For example, (#$DollarsPerDay 1000) denotes $1000 per day.")))

(defconcept Unit-Of-Speed
  :is-primitive (:and Unit-Of-Measure Unit-Of-Rate)
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of Speed.  For example, the value of the function #$MilesPerHour applied to the number five -- (#$MilesPerHour 5) -- is five miles per hour.")))

(defconcept Unit-Of-Temperature
  :is-primitive Unit-Of-Measure
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of #$Temperature.  E.g., (#$DegreeFahrenheit 451) denotes a #$Temperature of 451 F.")))

(defconcept Unit-Of-Time
  :is-primitive Unit-Of-Measure
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of #$Time; e.g., (#$YearsDuration 100) returns a time period equal to a century.")))

(defconcept Unit-Of-Voltage
  :is-primitive Unit-Of-Measure
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of #$Voltage.  E.g., (#$Volt 120) denotes an electrical voltage of 120 volts.")))

(defconcept Unit-Of-Volume
  :is-primitive Unit-Of-Measure
  :annotations (Interconvertible-Unit-Type
                (documentation "The collection of functions which return elements of #$Volume.  E.g., (#$Liter 5) denotes 5 liters.")))

(defconcept Unit-Vector--Precise
  :is-primitive (:and Unit-Vector-Interval Vector--Precise)
  :annotations (Object-Type
                (documentation "The collection #$UnitVector-Precise is a subset of #$Vector-Precise and of #$UnitVectorInterval.  Each element of #$UnitVector-Precise is a vector interval with a magnitude of 1 and a precisely specified direction (e.g., due North, straight down).  Thus, one precise unit vector differs from another only in direction, since each vector consists of a magnitude and a direction (in a space of n > 1 dimensions).  So elements of #$UnitVector-Precise in effect indicate different directions such as `straight up' or `due East'.")))

(defconcept Unit-Vector-Interval
  :is-primitive Vector-Interval
  :annotations (Object-Type
                (documentation "The collection #$UnitVectorInterval is a subset of #$VectorInterval.  Each element of #$UnitVectorInterval is a vector interval with a magnitude of 1.  Thus, one unit vector differs from another only in direction, since each vector consists of a magnitude and a direction (in a space of n > 1 dimensions).   An element of #$UnitVectorInterval may specify either a precise unit vector or a generalized range of directions such as `in front of'.  See also #$UnitVector-Precise. ")))

(defconcept University
  :is-primitive (:and Research-Organization Educational-Organization)
  :annotations (Existing-Object-Type
                (documentation "A collection of educational organizations.  An element of #$University is an organization, usually (but not always) called `University', which does university-level teaching and/or research.  Some universities comprise multiple `colleges' and professional schools.")))

(defconcept Unordered-Attribute-Type
  :is-primitive Attribute-Type
  :annotations (Sibling-Disjoint-Collection
                (documentation "A collection of collections.  Each element of #$UnorderedAttributeType is a collection of attributes whose values are not ordered over their whole range of possible values.  A collection belonging to #$UnorderedAttributeType contains values that are incommensurable with one another.  For example, the `suit' attribute of playing cards (unlike the number or face value of the cards) is an unordered attribute in card games where no suit is considered higher than another.  The `gender' attribute of animals is an #$UnorderedAttributeType, as well.  By contrast, see #$PrimitiveAttributeType.")))

(defconcept Urban-Area
  :is-primitive Human-Residence-Area
  :annotations (Existing-Object-Type
                (documentation "A collection of geographical regions; a subset of #$HumanResidenceArea.  Each element of #$UrbanArea is a region that has urban features.  Elements of #$UrbanArea can be as small as an urban neighborhood, or as big as, say, the New York City Metropolitan Area.  By default, urbanness is an intrinsic property of such areas; i.e., every subregion of an element of #$UrbanArea is also an instance of #$UrbanArea.  Examples: #$UTAustinCampus, #$WestlakeHills, #$CityOfAustinTX, #$CityOfToulouseFrance, #$CityOfMurmanskUSSR, #$CityOfTaipeiTaiwan, #$ResearchTrianglePark.")))

(defconcept Urge-To-Scratch
  :is-primitive (:and Animal-Physiological-Attribute Internal-Sensory-Attribute)
  :annotations (Physical-Urge-Type
                (documentation "This is a #$Collection of physical urges of a certain type, namely the urges that animals have to scratch an itch (and their accompanying internal sensations.)")))

(defconcept Urge-To-Sneeze
  :is-primitive (:and Animal-Physiological-Attribute Internal-Sensory-Attribute)
  :annotations (Physical-Urge-Type
                (documentation "This is a #$Collection of physical urges of a certain type, namely the urges that animals have to sneeze (and their accompanying internal sensations.)")))

(defconcept Us-City
  :is-primitive City
  :annotations (Spatially-Disjoint-Region-Type
                (documentation "A collection of cities.  Each element of #$USCity is a city in the #$UnitedStatesOfAmerica.  Note that #$City (q.v.) is widely construed to include towns and villages.  Examples of #$USCity: #$CityOfAustinTX, #$CityOfGainesvilleFL, #$CityOfLongBeachCA, #$CityOfArmonkNewYork, #$CityOfEssexJunctionVermont, #$CityOfCambridgeMA, #$CityOfPaloAltoCA, #$CityOfRedmondWA.")))

(defconcept User-Rights-Attribute
  :is-primitive Attribute-Value
  :annotations (Unordered-Attribute-Type
                (documentation "A collection of attributes.  An instance of #$UserRightsAttribute describes what right an agent has to use something.  For example, the rights of an owner of a house can be distinguished from the rights of a renter by specifying the appropriate #$UserRightsAttributes.  Elements of #$UserRightsAttributes include: #$FullUseRights (the agent can do whatever s/he wants with it), #$ExclusiveUserRights (the agent is the only authorized user), #$PrimaryUserRights (this agent's uses take priority over everyone else's), #$GroupUserRightsAttribute (the agent's right to use something depends on membership in a group), and more.")))

(defconcept Us-Federal-Government-Organization
  :is-primitive Legal-Government-Organization
  :annotations (Existing-Object-Type
                (documentation "A collection of government organizations.  An instance of #$USFederalGovernmentOrganization is an element of #$LegalGovernmentOrganization which is part of the #$UnitedStatesFederalGovernment.  This collection includes the U.S. military, Federal courts, U.S. Congress, U.S. territorial governments, Federal departments and independent agencies, and the city of Washington, D.C.; it does NOT include U.S. states, interstate compacts, and cities (other than Washington, D.C.).")))

(defconcept Utterance
  :is-primitive (:and Animal-Sound Information-Bearing-Wave-Propagation)
  :annotations (Temporal-Stuff-Type
                Object-Type
                (documentation "A collection of information bearing things (IBTs); a subset of #$AnimalSound.  Each element of #$Utterance is a sound which was initially generated by someone speaking or making some sound with the mouth.  If such IBTs are recorded and played back, the sound generated is still considered an element of #$Utterance.  Examples: your spouse saying `Good morning' today; Ed McMahon saying `Here's Johnny' (on almost innumerable occasions); a child screaming at a playmate; Humphrey Bogart saying `Here's looking at you' on the set of `Casablanca'.")))

(defconcept Variable-Arity-Relation
  :is-primitive Relationship
  :annotations (Cyc_Collection
                Relation-Type
                (documentation "A collection of relationships.  Each element of #$VariableArityRelation is a relationship that can take a variable number of arguments, making it unlike most relationships, which have a fixed number of argument places.  Examples of #$VariableArityRelation include conjunction (#$and) and functions such as addition (#$PlusFn) that accept a variable number of arguments.")))

(defconcept Vector--Precise
  :is-primitive Vector-Interval
  :annotations (Object-Type
                (documentation "A collection of vectors; a subset of #$VectorInterval.  Each element of #$Vector-Precise is an exactly indicated (i.e., point) vector, such as `5 feet due West'.  Both direction and distance are precise.  Thus, #$Vector-Precise is to #$VectorInterval what #$ScalarPointValue is to #$ScalarInterval.  #$Vector-Precise includes all the instances of #$UnitVector-Precise.")))

(defconcept Vector-Interval
  :is-primitive (:and Attribute-Value N-Tuple-Interval)
  :annotations (Object-Type
                (documentation "The collection #$VectorInterval is a subset of #$NTupleInterval.  Each element of #$VectorInterval is an n-tuple of intervals (where n > 1), one of which is a direction.  Like the elements of #$ScalarInterval, the intervals in an element of #$VectorInterval may be point-valued or cover a range of values.  The minimal interval (i.e., point-valued) type of vector interval is exemplified by a vector such as `10 meters due east'.   Vectors may also cover a range of values; e.g., `at least 10 feet away and in a horizontal direction'; `between ten to twelve miles NNW'.")))

(defconcept Vegetable--Food
  :is-primitive (:and Food Vegetable-Matter)
  :annotations (Existing-Stuff-Type
                Default-Disjoint-Food-Type
                (documentation "A collection of edible stuff.  Each element of #$Vegetable-Food is a foodstuff which is derived from a plant and is ordinarily considered a vegetable; e.g., a carrot (an instance of #$Carrot-Foodstuff), a potato (an instance of #$Potato-Foodstuff), a lima bean (a #$Bean-Foodstuff), a tomato (a #$Tomato-Foodstuff).

Note: #$Vegetable-Food includes certain plant parts that are technically classified as fruits by botanists, but which are treated as vegetables in food classification -- such as tomatoes.  These would, e.g., be found in the vegetables section of a supermarket, and they satisfy more of the axioms about vegetables than those about fruits (e.g., sweetness.)")))

(defconcept Vegetable--Plant
  :is-primitive Plant--Non-Woody
  :annotations (Existing-Object-Type
                (documentation "A collection of plants that play a special role in human nutrition.  Each element of #$Vegetable-Plant is a plant that produces the edible things that we normally call `vegetables' (which can include fruits, seeds, stalks, leaves, or other parts, or even the whole plant).  The elements of #$Vegetable-Plant grow in gardens and produce the vegetables that are eaten; vegetable plants are not necessarily also elements of #$Food.  See #$Vegetable-Food for the collection of vegetables--plants or (more usually) plant parts--that are eaten by humans.")))

(defconcept Vegetable-Matter
  :is-primitive (:and Organic-Stuff Natural-Tangible-Stuff)
  :annotations (Existing-Stuff-Type
                (documentation "A collection of tangible stuff.  Each element of #$VegetableMatter is a piece of stuff (solid, liquid, or, improbably but conceivably, gaseous) which is a piece of vegetable material.  This includes all instances of #$PlantProduct (such as elements of its subsets #$VegetableOil, #$TobaccoLeaf, #$Jute-Fiber, #$VanillaExtract, etc.), as well as naturally occurring pieces of vegetable matter (e.g., a clod of peat in a bog, an apple hanging on a tree, a mushroom growing wild in a forest).")))

(defconcept Verb
  :is-primitive Speech-Part
  :annotations (Linguistic-Object-Type
                (documentation "The collection of all verbs. Verbs usually denote events, states, or processes. Verbs can be conjugated. Example: `eat'.")))

(defconcept Vermin
  :is-primitive Non-Person-Animal
  :annotations (Existing-Object-Type
                (documentation "A collection of animals considered undesirable to find living in human habitation buildings or other facilities. ")))

(defconcept Vertebrate
  :is-primitive Animal
  :annotations (Biological-Taxon
                (documentation "A collection of animals; one of the #$taxonMembers of the #$ChordataPhylum.   Each element of #$Vertebrate is an animal that has a backbone or spine made of bony or cartilaginous vertebrae, which may be separate or fused.  #$Vertebrate includes the most familiar animals, viz., the instances of #$Mammal, #$Reptile, #$Bird, #$Fish.  Some biologists class the 'Vertebrata' as a sub-phylum of the #$ChordataPhylum.  #$Vertebrate excludes Amphioxus.")))

(defconcept Veterinary-Hospital
  :is-primitive (:and Medical-Care-Organization Local-Customer-Contact-Point)
  :annotations (Existing-Object-Type
                (documentation "The collection of all local organizations that provide professional medical care to non-human animals.  Note that this is not a specialization of Hospital.  The names may be the same, but hospitals provide medical care to persons only.")))

(defconcept Vibration-Through-Amedium-Sensor
  :is-primitive Sensor
  :annotations (Existing-Object-Type
                (documentation "A subset of #$Sensor, namely those sensors that detect amplitude and frequency of vibrations through a physical medium.  This includes ears, skin, and also artificial devices such as microphones, seismographs, etc.  
Note:  #$Eyes are not #$VibrationThroughAMediumSensors because there need not be any physical medium for electromagnetic wave propagation.  This is a somewhat close call, and indeed in past centuries most people believed that light propagated through aether, but what it comes down to is this:  consider all the axioms that apply only to the structure, function, and operation, failure, etc. of a #$VibrationThroughAMediumSensor, and of that set how many hold true for eyes --- and the answer is No, most of them don't.  So parsimony dictates that #$Eye not be a subset of #$VibrationThroughAMediumSensor.")))

(defconcept Vine--Plant
  :is-primitive (:and Terrestrial-Organism Plant)
  :annotations (Existing-Object-Type
                (documentation "The collection of vine plants, #$Plants that are in the form (gross form and habit) of long tendrils or long, narrow, flexible ropy strands.")))

(defconcept Virus
  :is-primitive (:and Biological-Living-Object Organism--Whole)
  :annotations (Organism-Classification-Type
                (documentation "The collection of tiny microbes called viruses, each consisting mainly of a capsid (capsule chamber) containing viral DNA or RNA.  Viruses have no cells, but reproduce by inserting into living cells the viral DNA or RNA, which then uses cellular mechanisms to create new viruses.  Viruses cause many diseases in all other organisms; some can infect elements of #$Bacterium.  #$Virus excludes prions, bacteria, rickettsia, and protists.")))

(defconcept Visa--Permit
  :is-primitive (:and Legal-Agreement Permission Credential)
  :annotations (Existing-Object-Type
                (documentation "A collection of permissions.  Each element of #$Visa-Permit is an authorization issued by the government of some country to one (or more) person(s), stating that s/he is allowed to enter that country and remain for a certain period of time while engaging in certain specified activities (e.g., study, travel, work).  Examples: (United States) #$H1WorkVisa, #$F1WorkVisa, #$GreenCard.")))

(defconcept Viscosity
  :is-primitive (:and Scalar-Interval Physical-Attribute)
  :annotations (Measurable-Attribute-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute.  Each element of #$Viscosity represents a specific viscosity (i.e., `runniness') of some #$LiquidTangibleThing.  The lower the viscosity of a liquid, the more easily it flows or spreads out.  Different viscosities may be represented with a #$GenericValueFunction (q.v.), or by using some common substance as a reference (e.g., #$ViscousAsWater, #$ViscousAsHoney).  Vicosities of objects are indicated with the predicate #$viscosityOfSubstance.")))

(defconcept Visibility
  :is-primitive (:and Scalar-Interval Physical-Attribute)
  :annotations (Primitive-Attribute-Type
                (documentation "A collection of attributes; a subset of #$ScalarInterval.  Each element of #$Visibility is a characterization of how clear the ambient fluid at a location is.  Higher values indicate one can see farther (than one could have at lower values at the same location).  Different degrees of visibility may be designated using a #$GenericValueFunction.  Visibility at a location is expressed with the predicate #$ambientVisibility.")))

(defconcept Visible-Light
  :is-primitive Electromagnetic-Radiation
  :annotations (Wave-Propagation-Type
                (documentation "A collection of events; a subset of #$ElectromagneticRadiation.  Each element of #$VisibleLight is an instance of electromagnetic radiation having a wavelength approximately between 3800 and 7750 #$Angstroms, i.e., light visible to human eyes.")))

(defconcept Visiting-Someone
  :is-primitive (:and Sociability-Based-Action
                      Translation--Location-Change
                      Translation--Single-Path
                      Directed-Translation)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of actions.  In a #$VisitingSomeone event, one #$Agent travels or moves to the vicinity of another #$Agent for the purpose of meeting with that other #$Agent.  Each #$VisitingSomeone is purposeful, at least on the part of the #$Agent doing the travelling, and that #$Agent is typically a #$Person, and the purpose is often social in nature.")))

(defconcept Visual-Communicating
  :is-primitive Communicating
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of information transfer events; a subset of #$Communicating.  Each element of #$VisualCommunicating is an action in which information is transmitted by visual media.  Every element of #$VisualCommunicating has at least one #$communicationToken which is an instance of #$VisualInformationSource.  Examples of #$VisualCommunicating: a performance by mime Marcel Marceau; Seiji Ozawa conducting the Boston Symphony Orchestra; a policeman directing traffic; shaking a fist at someone in anger; sending a message with flags, light pulses, or smoke signals.")))

(defconcept Visual-Image
  :is-primitive (:and Visible-Light Information-Bearing-Wave-Propagation)
  :annotations (Temporal-Stuff-Type
                (documentation "A collection of information bearing things (IBTs); a subset of #$InformationBearingWavePropagation.  Each element of #$VisualImage is a pattern of visible light which contains information for an observer familiar with the interpretive conventions.  An observer sees the pattern.  Visual images may be produced by illuminating some instance of #$VisualInformationSource, which is a tangible object (e.g., a photograph, movie film, or page of print), or by direct manipulation of light(s) to produce a pattern (e.g., nautical code lights).  Visual images may be instantaneous or extended in time.  Visual images may be classified by features of their appearance (e.g., #$ColorImage, #$BlackAndWhiteImage), by their origin (e.g., #$XRayImage, #$PenOrPencilDrawing, #$SatelliteImage), their content (e.g., #$LandscapeImage), and other distinctions.")))

(defconcept Visual-Information-Conveying-Act
  :is-primitive Ibt-Generation--Original
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of actions that express (transmit) visual information.")))

(defconcept Visual-Information-Source
  :is-primitive Information-Bearing-Thing
  :annotations (Temporal-Stuff-Type
                (documentation "A collection of information bearing things (IBTs).  Each element of #$VisualInformationSource is an IBT from which information is extracted by viewing it (with the appropriate interpretive conventions).  Examples of #$VisualInformationSource include handwritten letters; newspapers and other print media objects; paintings, sculpture, and other visual art objects; projected images, neon signs, etc.  The information content of instances of #$VisualInformationSource may or may not be propositional in nature.")))

(defconcept Visual-Mark
  :is-primitive Visual-Information-Source
  :annotations (Existing-Stuff-Type
                (documentation "A collection of information bearing things (IBTs); a subset of #$VisualInformationSource.  Each element of #$VisualMark is a visible marking on some object.  Visual markings may be applied to an object using ink, paint, or pencil; they may be engraved into or molded out of the object's material; they may be made of other objects affixed to or resting on the object (e.g., a plaque bearing a house number); or they may consist of contrasting areas of color or light level (e.g., markings on a computer screen).")))

(defconcept Visual-Perception
  :is-primitive Perceiving
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "The collection of sensory #$Perceivings in which a #$PerceptualAgent #$sees something by means of an #$ElectroMagneticRadiationSensor detecting wavelengths of visible light, and thereby acquires information about it.
Note:  one eye is sufficient for #$VisualPerception, and limited short-distance #$DepthPerception, but `true' long-distance #$DepthPerception requires two eyes.")))

(defconcept Visual-Representation-Microtheory
  :is-primitive Propositional-Information-Thing
  :annotations (Microtheory-Type
                (documentation "A collection of microtheories.  Each element of #$VisualRepresentationMicrotheory is a context in which to state the propositional content of a particular visual representation.  Visual representations include paintings, photographs, digitized images, moving pictures, statues, etc.  For example, a visual representation microtheory of the #$StatueOfLiberty would include such assertions as `a woman holds up a torch in her right hand', `the woman is dressed in a neo-Classical robe', etc.; it would NOT include such information as, e.g., the #$StatueOfLiberty is made of copper or the #$StatueOfLiberty is in New York harbor.")))

(defconcept Volatility
  :is-primitive (:and Scalar-Interval Physical-Attribute)
  :annotations (Measurable-Attribute-Type
                (documentation "A collection of attributes; a subset of #$PhysicalAttribute.  Each element of #$Volatility represents the specific readiness of some liquid to evaporate.  Higher volatility indicates a faster rate of evaporation.  Volatilities of substances are indicated with the predicate #$volatilityOfSubstance.")))

(defconcept Volume
  :is-primitive (:and Physical-Attribute Scalar-Interval)
  :annotations (Derived-Numeric-Attribute-Type
                (documentation "A collection of physical attributes.  Each element of #$Volume is an amount of three-dimensional space occupied by one or more three-dimensional objects.  Elements of #$Volume may be either a fixed interval, such as the volume of a five-gallon aquarium, or a range, such as 'fits in a bread box'.  See #$UnitOfVolume for the units used by Cyc to measure volumes.")))

(defconcept Voluntary-Body-Movement
  :is-primitive Body-Movement-Event
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of acts concerned with an agent's intentionally moving one part of its body relative to another part of its body.  The energy source is the agent's own body, not some external force.  Each instance of #$WavingAHand is an instance of #$VoluntaryBodyMovement --- the focus of that action is on the hand moving relative to the body.  By way of constrast, an instance of #$OpeningADrawer is probably not going to be an instance of #$VoluntaryBodyMovement, even though the person opening the drawer probably does move their hand relative to their body, because the focus of the #$OpeningADrawer action is not on the hand moving, but rather on the drawer opening.")))

(defconcept Waging-War
  :is-primitive Human-Activity
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The fighting of two or more armies through the use of weapons.  The same as doing battle.")))

(defconcept Waking-Up-From-Sleep
  :is-primitive (:and Animal-Activity
                      Single-Doer-Action
                      Intrinsic-State-Change-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of events in which an #$Animal goes from the state of being asleep to being in a waking state.")))

(defconcept Wall-Of-A-Construction
  :is-primitive Construction-Artifact
  :annotations (Existing-Object-Type
                (documentation "Any wall which is a part of a #$HumanShelterConstruction.  This includes includes the walls on the outside of the building as well as those on the inside such as the wall separating two rooms in a house.")))

(defconcept Warranty
  :is-primitive Authorized-Agreement
  :annotations (Existing-Object-Type
                (documentation "A collection of agreements; a subset of #$AuthorizedAgreement.  Each element of #$Warranty is an agreement between the seller (and/or manufacturer) and the purchaser of some object or service.  In a warranty, the seller/manufacturer promises that the object or service will be satisfactory in some indicated way (e.g., free of defects, effective, etc.).  Usually a warranty specifies what compensation an unsatisfied purchaser is entitled to (e.g., free repairs, a refund), and how s/he can claim it.")))

(defconcept Washing
  :is-primitive Cleaning
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events, and a subset of #$Cleaning.  In a #$Washing event, some #$Water is being employed in the cleaning, typically with some surfactant such as soap dissolved in the water.  If only water (i.e., no soap) is used in a #$Washing, then the event also belongs to a particular subset of #$Washing, namely #$Rinsing.")))

(defconcept Watching-Something
  :is-primitive (:and Purposeful-Action Visual-Perception Single-Doer-Action)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events involving the deliberate direction of #$VisualPerception
on the part of an #$Agent.")))

(defconcept Water
  :is-primitive Oxide
  :annotations (Chemical-Compound-Type
                Object-Type
                (documentation "A collection of tangible things; a subset of #$Oxide.  Each instance of #$Water is one piece of all the portions of the chemical compound H2O.  Those instances may be in a gaseous, liquid, or solid  #$stateOfMatter; they may be salty, not salty, drinkable, or not drinkable.  Examples of #$Water include portions of the ocean, such as the #$BayOfBiscay and the #$BayOfBengal (see also #$SeaWater); bodies of fresh water, such as #$NiagaraFalls or the #$GangesRiver; quantities of chlorinated water (see #$PoolWater); and the contents of bottles of tonic water (see #$SeltzerWater).  Things that have one or more important properties different from water's, but consist mostly of water, don't belong to the collection #$Water but have an element of #$Water as their #$mainConstituent; e.g., urine, coffee, lemonade.")))

(defconcept Water--Saline
  :is-primitive Water
  :annotations (Tangible-Stuff-Composition-Type
                (documentation "A collection of tangible things; a subset of #$Water.  Each element of #$Water-Saline is a portion of water with some substantial concentration of salt mixed into it.  For example, the #$RedSea, #$GreatSaltLake, or the salt water I mix up for gargling.")))

(defconcept Wave-Propagation
  :is-primitive (:and Translocation Physical-Event)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "A collection of events.  Each element of #$WavePropagation is an event in which a wavelike disturbance propagates through space, with or without a medium.  A wave propagation is like a translational movement in that it can have a #$fromLocation and a #$toLocation, but differs in that there is no #$objectMoving. #$Sound and #$ElectromagneticRadiation are types of #$WavePropagation.  Elements of #$WavePropagation include the sounds from exploding firecrackers at Penn State's Homecoming celebration in 1989; the light shining from my desk lamp right now; the X-rays generated in the dentist's office last Tuesday, for examining my teeth.")))

(defconcept Wave-Propagation-Type
  :is-primitive (:and Cyc_Collection Temporal-Stuff-Type)
  :annotations (Sibling-Disjoint-Collection
                (documentation "A collection of collections.  Each element of #$WavePropagationType is itself a collection, containing one type of #$WavePropagation events.  Examples include the collections #$ElectromagneticRadiation, #$Sound, #$VisibleLight, and #$XRay.")))

(defconcept Weapon
  :is-primitive (:and Solid-Tangible-Product Physical-Device)
  :annotations (Existing-Object-Type
                (documentation "A collection of physical devices.  An instance of #$Weapon is a device primarily designed for destructive action against animals (often against other sentient beings, most often humans) and/or their habitats (or, more rarely, some class of possessions of theirs.)  This collection includes weapons as traditionally defined (e.g., instances of #$Sword, instances of #$Gun-Portable, #$Bombs, etc.) and also miscellaneous military vehicles and hardware used to kill, to destroy, to immobilize, etc. in military operations (such as the elements of #$Warplane, #$ModernNavalShip, #$Tank-Vehicle, etc.)
Note that in the case of missile weapons, both the launcher and the ammunition are considered #$Weapons in this sense.  E.g., a bow, an arrow, a missile launcher, an ICBM missile, a gun, a bullet.  This may seem odd at first glance, but in many contexts most of the same axioms apply to both.  Even in our linguistic utterances this carries over; e.g., if asked what killed JFK we can say a rifle, or a bullet from a rifle.  Of course there are specializations (subsets) of #$Weapon that limit themselves to `the real weapon itself' and to `ammunition for missile weapons.'")))

(defconcept Wearing-Something
  :is-primitive (:and Configuration Physical-Contact-Situation)
  :annotations (Situation-Type
                (documentation "A collection of situations; a subset of #$Configuration.  Such a configuration has a temporal as well as a spatial extent, but activity is not implied.  Each element of #$WearingSomething is an arrangement of tangible objects, one of which is wearing the other(s).  Typically the wearer is a living person or animal, although surrogates are possible (e.g., mannequins, dolls, or corpses).  Objects worn are elements of #$SomethingToWear.  See also #$wearer, #$wearsClothing.")))

(defconcept Weather-Attribute
  :is-primitive Attribute-Value
  :annotations (Unordered-Attribute-Type
                (documentation "A collection of attributes.  Each element of #$WeatherAttribute is an attribute that can be used to describe the weather occurring in a geographic region.  Examples: #$Snowy, #$Foggy.  See also #$weatherAttributes.")))

(defconcept Weather-Event
  :is-primitive (:and Physical-Event
                      |(meaning-in-system-fn sensus--information-1997 AMBIENT-PROCESS)|)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "A collection of events.  Each element of #$WeatherEvent is a meteorological event of some duration, occurring over some spatial region.  Some weather events are almost instantaneous (e.g., elements of the collection #$LightningEvent); others encompass an entire #$AnnualClimateCycle.  Spatially, weather events may cover a small locality or a large portion of a continent.  Weather events are regional weather (in the short term) and are, or partially constitute, the annual climate of a region (in the long term).")))

(defconcept Weekly-Event-Type
  :is-primitive Temporal-Object-Type
  :annotations (Cyc_Collection
                (documentation "The collection of event-types that occur weekly.  Each #$WeeklyEventType is a collection of events, all of which are synchronized with the calendar and which occur once a week.  E.g., once instance #$WeeklyEventType is #$CycStaffMeeting, since there is an instance of #$CycStaffMeeting once a week.")))

(defconcept Wild-Animal
  :is-primitive Non-Person-Animal
  :annotations (Existing-Object-Type
                (documentation "The collection of all animals that are not domesticated or tame.  Note that a captive animal may still be a wild animal, e.g., zoo animals that are not tame or domesticated.  Cf. #$CaptiveAnimal, #$DomesticatedAnimal.")))

(defconcept Window-Pane
  :is-primitive Solid-Tangible-Product
  :annotations (Existing-Object-Type
                (documentation "Each individual pane in a window. A window may only have one window pane.")))

(defconcept Window-Portal
  :is-primitive (:and Part-Of-Building Portal)
  :annotations (Region-Type
                (documentation "Windows are one kind of portal found in a human occupation construct.  They are usually covered by #$WindowThePortalCovering, which is the physical object made primarily of glass through which one can see.")))

(defconcept Window-The-Portal-Covering
  :is-primitive (:and Part-Of-Building Portal-Covering)
  :annotations (Existing-Object-Type
                (documentation "The physical object which 'covers' or fills in the #$WindowPortal. It is a physical barrier, but because it is made primarily of glass, it allows light to enter.")))

(defconcept Wind-Powered-Device
  :is-primitive Kinetic-Energy-Powered-Device
  :annotations (Existing-Object-Type
                (documentation "The subset of #$KineticEnergyPoweredDevice (q.v.) whose elements are powered by the wind.  For example, instances of the collection #$Windmill.")))

(defconcept Wind-Process
  :is-primitive (:and Immediate-Weather-Process Translation--Flow)
  :annotations (Temporal-Stuff-Type
                (documentation "The collection of events in which the ambient air at a #$GeographicalRegion (or some significant part of the total air mass) is in motion.")))

(defconcept Winter-Season
  :is-primitive Season-Of-Year
  :annotations (Temporal-Object-Type
                (documentation "The collection of Winter seasons.  In the #$TemperateClimateCycle, generally a time of cold and dormancy.  #$WinterSeason represents the climatic aspects of Winter; for its purely temporal aspects, see #$CalendarWinter.")))

(defconcept Womens-Clothing
  :is-primitive (:and Something-To-Wear Sheet-Of-Some-Stuff)
  :annotations (Existing-Object-Type
                Product-Type
                (documentation "A collection of objects.  Each element of #$WomensClothing is a clothing item worn usually by women, i.e., items normally found in the women's section of department stores.  Subsets include #$Skirts and #$HairPins.")))

(defconcept Wood
  :is-primitive (:and Structural-Support-Stuff
                      Plant-Product
                      Solid-Tangible-Thing
                      Organic-Stuff)
  :annotations (Tangible-Stuff-Composition-Type
                (documentation "A collection of tangible things.  Each element of #$Wood is a piece of solid, rigid, fibrous organic substance in or #$derivedFrom the inside of the trunks and limbs of trees.  For example, any pieces of wooden furniture, doors, boards, fences, firewood, wooden spoons, etc.  Use the Cyc function #$WoodFn with a collection of trees of one species, to designate the collection of all pieces of wood from a particular species of tree; e.g., (#$WoodFn #$OakTree).  Note: cork and amber are NOT included in the collection #$Wood.")))

(defconcept Work-Agreement
  :is-primitive Agreement
  :annotations (Existing-Object-Type
                (documentation "A collection of intangible objects; a subset of #$Agreement.  Every element of #$WorkAgreement is an agreement between an employer and an employee, regarding the duties and remuneration which pertain to that worker's job for that employer.  Elements of #$WorkAgreement consist of various #$subAgreements, typically including elements of #$JobDescription, #$CompensationPackage, and some #$CodeOfConduct.")))

(defconcept Workplace
  :is-primitive (:and Humanly-Occupied-Spatial-Object Physical-Contact-Location)
  :annotations (Contact-Location-Type
                (documentation "The collection of places where people customarily work (not the employing organizations).  #$Workplace includes offices, restaurant buildings, construction sites, agricultural sites, the #$SpaceNeedle, etc.  Some places may be #$Workplaces only during a small part of their existence (a piece of residential property while the house is being built, perhaps); some may almost always be #$Workplaces (grocery store buildings, office buildings, smithies, hospitals, etc.).")))

(defconcept Work-Status
  :is-primitive Composite-Attribute
  :annotations (Attribute-Type
                (documentation "A collection of attributes.  Each element of #$WorkStatus is a classification commonly used by human resources departments to describe the status of workers on the company payroll.  Note that these attributes describe a person's status in a job, rather than the position itself.  Examples of #$WorkStatus include #$Commissioned, #$HourlyWork, #$FullTime, #$PartTime, #$TemporaryWork. Also see #$employeeStatus.")))

(defconcept Writing
  :is-primitive (:and Making-Something
                      Visual-Information-Conveying-Act
                      Ibo-Creation)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Object-Type
                (documentation "The collection of actions in which text is produced, either via writing by hand, with a typewriter, with a computer, etc.  Could be a single episode of writing, or a discontinuous set of episodes (as when one writes a letter over a few days).  #$Writing is not a #$Communicating, because there is not necessarily a successful transfer of information to some other agent.  Of course, instances of #$Writing can be #$subEvents of such transfers.")))

(defconcept Writing-By-Hand
  :is-primitive (:and Marking-On-A-Surface Handling-A-Device Writing)
  :annotations (Default-Disjoint-Script-Type
                Temporal-Stuff-Type
                (documentation "Writing is the formation of characters or symbols on a suitable surface for transmitting information.")))

(defconcept Writing-Implement
  :is-primitive (:and Hand-Tool Shaft)
  :annotations (Existing-Object-Type
                (documentation "A collection of tools.  An instance of #$WritingImplement is a hand-held tool which is intended to be primarily used, by a person, for writing.  Subsets include the collections #$Chalk and #$WritingPen (but not #$Typewriter).  
Note: A marginal example is a PDA, such as an Apple Newton, with a stylus; both items, the PDA and the stylus, can be held in one's hands and used to record one's handwritten notes.  Another marginal positive example is a stylus designed to held in the mouth by a quadraplegic person; i.e., `hand-held' is not an absolutely hard and fast constraint here.  A close NON-example is a handheld calculator.")))

(defconcept X-Ray
  :is-primitive Electromagnetic-Radiation
  :annotations (Wave-Propagation-Type
                (documentation "A collection of events; a subset of #$ElectromagneticRadiation.  Each element of #$XRay is an instance of electromagnetic radiation that has a #$wavelength range from about 1 #$Angstrom to 1x10^-3 #$Angstroms.  Includes X-rays produced both naturally and artificially.")))

(defconcept |(gaseous-fn Water)|
  :is-primitive (:and Gaseous-Tangible-Thing Water)
  :annotations (Tangible-Stuff-State-Type))

(defconcept |(group-fn Currency)|
  :is-primitive (:and Group Spatial-Thing)
  :annotations (Object-Type))

(defconcept |(group-fn Event)|
  :is-primitive (:and Group Event)
  :annotations (Object-Type))

(defconcept |(group-fn Intelligent-Agent)|
  :is-primitive (:and Spatial-Thing Group)
  :annotations (Object-Type))

(defconcept |(group-fn Spatial-Thing)|
  :is-primitive (:and Group Spatial-Thing)
  :annotations (Object-Type))

(defconcept |(juvenile-fn Person)|
  :is-primitive (:and Juvenile-Animal Person)
  :annotations (Existing-Object-Type))

(defconcept |(liquid-fn Water)|
  :is-primitive (:and Liquid-Tangible-Thing Water)
  :annotations (Tangible-Stuff-State-Type))

(defconcept |(liquid-fn Water--Saline)|
  :is-primitive (:and Liquid-Tangible-Thing Water--Saline)
  :annotations (Tangible-Stuff-State-Type))

(defconcept |(making-fn Visual-Image)|
  :is-primitive Making-Something
  :annotations (Script-Type Temporal-Object-Type))

(defconcept |(meaning-in-system-fn sensus--information-1997
 ADDRESSEE-ORIENTED-VERBAL-PROCESS)|
  :is-primitive Communicating
  :annotations (Cyc_Thing Temporal-Stuff-Type Script-Type Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997
 NON-ADDRESSEE-ORIENTED-VERBAL-PROCESS)|
  :is-primitive Communicating
  :annotations (Cyc_Thing Temporal-Stuff-Type Script-Type))

(defconcept |(meaning-in-system-fn sensus--information-1997 ABSTRACT-OBJECT)|
  :is-primitive Individual
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 AMBIENT-PROCESS)|
  :is-primitive Physical-Event
  :annotations (Cyc_Thing Script-Type))

(defconcept |(meaning-in-system-fn sensus--information-1997 DECOMPOSABLE-OBJECT)|
  :is-primitive Cyc_Thing
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 DIRECTED-ACTION)|
  :is-primitive Physical-Event
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 GAS-MATERIAL)|
  :is-primitive loom:thing
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 INTENSIVE)|
  :is-primitive loom:thing
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 INTERPERSONAL-THING)|
  :is-primitive Intangible-Individual
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 LANGUAGE)|
  :is-primitive Communication-Convention
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 LANGUAGE-RELATED-OBJECT)|
  :is-primitive Communication-Convention
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 LIQUID-MATERIAL)|
  :is-primitive loom:thing
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 MISC-STUFF)|
  :is-primitive Cyc_Thing
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 NAMED-OBJECT)|
  :is-primitive Something-Existing
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 NON-CONSCIOUS-BEING)|
  :is-primitive Partially-Tangible
  :annotations (Cyc_Thing Existing-Object-Type))

(defconcept |(meaning-in-system-fn sensus--information-1997 NON-DIRECTED-ACTION)|
  :is-primitive Physical-Event
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 NONDECOMPOSABLE-OBJECT)|
  :is-primitive Individual
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 ONE-OR-TWO-D-LOCATION)|
  :is-primitive Geometric-Thing
  :annotations (Cyc_Thing Shape-Type Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 ORDERED-SET)|
  :is-primitive loom:thing
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 ORDERING-RELATION)|
  :is-primitive Binary-Predicate
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 PHYSICAL-MATERIAL)|
  :is-primitive loom:thing
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 REPRESENTATIONAL-OBJECT)|
  :is-primitive loom:thing
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 SENSE-AND-MEASURE-QUALITY)|
  :is-primitive Attribute-Value
  :annotations (Cyc_Thing Attribute-Type))

(defconcept |(meaning-in-system-fn sensus--information-1997 SEPARABLE-ENTITY)|
  :is-primitive Something-Existing
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 SET)|
  :is-primitive loom:thing
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 SIZE)|
  :is-primitive Physical-Attribute
  :annotations (Cyc_Thing Measurable-Attribute-Type))

(defconcept |(meaning-in-system-fn sensus--information-1997 SOLID-MATERIAL)|
  :is-primitive loom:thing
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 STRIVING)|
  :is-primitive Intangible-Individual
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(meaning-in-system-fn sensus--information-1997 TIME-INTERVAL)|
  :is-primitive Time-Interval
  :annotations (Cyc_Thing Cyc_Collection))

(defconcept |(mob-fn Mountain)|
  :is-primitive Mob
  :annotations (Existing-Stuff-Type Cyc_Collection))

(defconcept |(mob-fn Particle)|
  :is-primitive Mob
  :annotations (Existing-Stuff-Type Cyc_Collection))

(defconcept |(mob-fn Precipitation-Particle)|
  :is-primitive Mob
  :annotations (Existing-Stuff-Type Cyc_Collection))

(defconcept |(solid-fn Concrete)|
  :is-primitive (:and Solid-Tangible-Thing Concrete)
  :annotations (Tangible-Stuff-State-Type))

(defconcept |(solid-fn Earth-Stuff)|
  :is-primitive (:and Solid-Tangible-Thing Earth-Stuff)
  :annotations (Tangible-Stuff-State-Type))

(defconcept |(solid-fn Glass)|
  :is-primitive (:and Solid-Tangible-Thing Glass)
  :annotations (Tangible-Stuff-State-Type))

(defconcept |(solid-fn Metal)|
  :is-primitive (:and Solid-Tangible-Thing Metal)
  :annotations (Tangible-Stuff-State-Type))

(defconcept |(solid-fn Plastic)|
  :is-primitive (:and Solid-Tangible-Thing Plastic)
  :annotations (Tangible-Stuff-State-Type))

(defconcept |(solid-fn Water)|
  :is-primitive (:and Solid-Tangible-Thing Water)
  :annotations (Tangible-Stuff-State-Type))

(defconcept |(transport-fn Gaseous-Tangible-Thing)|
  :is-primitive Transporting-Goods
  :annotations (Script-Type))

(defconcept |(transport-fn Liquid-Tangible-Thing)|
  :is-primitive Transporting-Goods
  :annotations (Script-Type))

(defconcept |(transport-fn Person)|
  :is-primitive Transporting-Goods
  :annotations (Script-Type))

(defconcept |(transport-fn Semi-Solid-Tangible-Thing)|
  :is-primitive Transporting-Goods
  :annotations (Script-Type))

(defconcept |(transport-fn Solid-Tangible-Thing)|
  :is-primitive Transporting-Goods
  :annotations (Script-Type))

(defconcept |(transport-via-fn Animal)|
  :is-primitive (:and Purposeful-Action Transportation-Event)
  :annotations (Script-Type
                Temporal-Stuff-Type
                (documentation "Transportation in which an animal provides the force for movement.  Includes horses and other animals carrying people and objects, people carrying objects and other people, etc.")))

(defconcept |(transport-via-fn Device--User-Powered)|
  :is-primitive (:and Exercising Transportation-Event)
  :annotations (Script-Type Temporal-Stuff-Type))

(defconcept |(wave-emission-fn Audible-Sound)|
  :is-primitive Emitting-A-Wave
  :annotations (Temporal-Stuff-Type Script-Type))

(defconcept |(wave-emission-fn Visible-Light)|
  :is-primitive Emitting-A-Wave
  :annotations (Temporal-Stuff-Type
                Script-Type
                (documentation "A collection of events; a subset of #$EmittingAWave. Each element of (#$WaveEmissionFn #$VisibleLight) is an event in which an instance of #$VisibleLight is emitted from some #$waveSource. Examples: the burning of a candle; the shining of a light bulb; a firefly's glowing. Almost every instance of (#$WaveEmissionFn #$VisibleLight) will also emit instances of other types of #$ElectromagneticRadiation other than #$VisibleLight.")))



;;; ******************** FUNCTIONS AND RELATIONS ********************

(defrelation abnormal
  :arity 2
  :domain Cyc-System-List
  :range Assertion
  :annotations (Binary-Predicate
                Default-Monotonic-Predicate
                (documentation "Every default rule in our system

  P(x1,...,xn) => Q(x1,...,xn)

is implicitly treated as

  (not(abnormal(x1,...,xn)) and P(x1,...,xn) => Q(x1,...,xn)

This allows rules without exceptions to never have to incur the
overhead of default reasoning.

Exceptions to rules are written like so:

  (#$exceptWhen R(x1,...,xn) Rule001)

and get canonicalized into rules concluding abnormal like so:

  R(x1,...,xn) => (#$abnormal(x1,....,xn) Rule001)

Since a different 'abnormality' predicte is needed for every default
rule in the system, we instead handle this uniqueness requirement by
having a single #$abnormal predicate which takes the rule in question
as an argument.

Also, the variables over which abnormality is computed is given as a
single list.  This allows #$abnormal to be binary rather than
arbitrary arity. ")))

(defrelation above--directly
  :arity 2
  :is-primitive above--generally
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Asymmetric-Binary-Predicate
                Physical-Feature-Describing-Predicate
                (documentation "(#$above-Directly ABOVE BELOW) means either (1) the volumetric center of ABOVE is directly above some point of BELOW, if ABOVE is smaller than BELOW; or (2) otherwise, it means that some point of ABOVE is directly above the volumetric center of BELOW.")))

(defrelation above--generally
  :arity 2
  :is-primitive above--higher
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Asymmetric-Binary-Predicate
                Physical-Feature-Describing-Predicate
                (documentation "(#$above-Higher OBJ1 OBJ2)
means that OBJ1 is more or less above OBJ2. To be more 
precise: if OBJ1 would be within a cone-shaped set of 
vectors within about 45 degrees of #$Up-Directly 
pointing up from OBJ2 (see #$Up-Generally), then 
(#$above-Higher OBJ1 OBJ2). This
is a wider predicate than #$above-Directly, but narrower
than #$above-Higher. It probably most closely conforms to
the English word 'above.'")))

(defrelation above--higher
  :arity 2
  :is-primitive cotemporal
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Spatial-Predicate
                Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Cotemporal-Objects-Slot
                (documentation "(#$above-Higher ?OBJ-A ?OBJ-B) means that ?OBJ-A is ``higher up'' than ?OBJ-B.  Since most contexts are terrestrial (see #$TerrestrialFrameOfReferenceMt) ``higher up'' typically means that the #$altitudeAboveGround of ?OBJ-A is greater than that of ?OBJ-B.")))

(defrelation above--overhead
  :arity 2
  :is-primitive (:and above--directly above--generally)
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Spatial-Predicate
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$above-Overhead ABOVE BELOW) means that ABOVE is directly above BELOW, all points of ABOVE are higher than all points of BELOW, and they do NOT touch.  Examples: a bomb falling directly above a bunker; a street lamp shining directly above a person standing below.")))

(defrelation above--touching
  :arity 2
  :is-primitive (:and touches above--generally above--directly)
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Spatial-Predicate
                (documentation "(#$above-Touching ABOVE BELOW) means that ABOVE is located over BELOW and they are touching.  More precisely, it implies both (#$above-Directly ABOVE BELOW) and that ABOVE #$touches BELOW.  Examples: a person sitting on a chair; coffee in a cup; a boat on water; a hat on a head. (Note that not every point of ABOVE must be higher than every point of BELOW.)")))

(defrelation absolute-value-fn
  :arity 2
  :domain Scalar-Interval
  :range Scalar-Interval
  :annotations (Function-From-Quantities-To-Quantities
                (documentation "#$AbsoluteValueFn is the unary mathematical function that returns the absolute value of its argument; e.g., (#$AbsoluteValueFn -2) returns 2, and (#$AbsoluteValueFn 2) returns 2.")))

(defrelation account-administrator
  :arity 2
  :domain Account
  :range Agent
  :annotations (Binary-Predicate
                (documentation "The predicate #$accountAdministrator identifies the agent who administers a particular account.  (#$accountAdministrator ACCT AGENT) means that the #$Account ACCT is administered by the individual or organization AGENT.")))

(defrelation account-balance
  :arity 2
  :domain Financial-Account
  :range Money
  :annotations (Interval-Based-Quantity-Slot
                (documentation "The predicate #$accountBalance is used to indicate the balance of a particular account.  (#$accountBalance ACCT BAL) means that the #$FinancialAccount ACCT has the balance BAL; BAL is the amount of #$Money either owed by, or available to, the #$accountHolder (depending upon the type of account).")))

(defrelation account-holder
  :arity 2
  :domain Account
  :range Agent
  :annotations (Binary-Predicate
                (documentation "The predicate #$accountHolder identifies the holder of a particular account.  (#$accountHolder ACCT AGENT) means that the #$Account ACCT is held by the individual or organization AGENT; thus, money (or some other valuable) is owed to or from AGENT, in the amount shown in the account (see #$accountBalance).")))

(defrelation account-status
  :arity 2
  :domain Account
  :range Account-Status-Attribute
  :annotations (Binary-Predicate
                (documentation "The predicate #$accountStatus indicates whether a particular account is paid up, overdue, delinquent, etc.  (#$accountStatus ACCT STATUS) means that the #$Account ACCT has the attribute STATUS (see also #$AccountStatusAttribute).")))

(defrelation acknowledged-act
  :arity 2
  :is-primitive starts-after-ending-of
  :domain Acknowledging--Communication-Act
  :range Communication-Act--Single
  :annotations (Anti-Transitive-Binary-Predicate
                Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                (documentation "(#$acknowledgedAct ?ACKACT ?COMACT) means that the #$CommunicationAct-Single ?COMACT is acknowledged and replied-to by the responsive #$Acknowledging-CommunicationAct ?ACKACT.   Particular acceptances or rejections of a particular project proposal would involve examples of this predicate, as would a person responding to a wedding invitation, or a court responding to a motion.  See also #$responseTo which refers to the abstarct content of the communication.")))

(defrelation acquaintances
  :arity 3
  :domains (Person Agent)
  :range Acquaintance-Attribute
  :annotations (Ternary-Predicate
                (documentation "(#$acquaintances X Y HOW) means that X is acquainted with Y,  at least in the way (and/or to the degree) specified by HOW.  Note that Y must be an #$Agent, so this is not the predicate to use to express the fact that Fred `is acquainted with' drag racing.  Note that, depending on the value for HOW, there may or may not be some way in which Y is acquainted with X.  E.g., (#$acquaintances #$Lenat Madonna #$TrueFanAcquaintance) but there is no Z such that (#$acquaintances Madonna #$Lenat Z).
Note that X and Y should rarely be instances of #$Entity.  In fact, Doug has only been acqainted with Madonna since 1983, so we should write (#$holdsIn (#$TimeIntervalFromFn (#$YearFn 1983) #$Now) (#$acquaintances #$Lenat Madonna #$TrueFanAcquaintance)).")))

(defrelation acquainted-with
  :arity 2
  :is-primitive cotemporal
  :domain Individual-Agent
  :range Individual-Agent
  :annotations (Symmetric-Binary-Predicate
                Reflexive-Binary-Predicate
                Cotemporal-Objects-Slot
                (documentation "(#$acquaintedWith AGENT1 AGENT2) means the #$IndividualAgent AGENT1 is acquainted with the #$IndividualAgent AGENT2 (in the minimal sense that AGENT1 has come into physical or conversational contact with AGENT2, or that they have somehow knowingly communicated with each other).  This typically means that each #$IndividualAgent is aware of some facts about the other.  In cases where one of the #$IndividualAgents is sentient, this typically includes the ability of this agent to recognize the other by appearance, voice, scent, or some other physical attribute.")))

(defrelation action-expresses-feeling
  :arity 2
  :domain Action
  :range (:and Feeling-Attribute-Type
               (:filled-by superrelations Feeling-Attribute))
  :annotations (Binary-Predicate
                (documentation "(#$actionExpressesFeeling ACT EMOTYPE) means that the particular action ACT expresses the doer's feeling of EMOTYPE.
Note: additional complications arise in using this in inference, as people can `fake' actions such as laughing, crying, etc., to mislead other people.")))

(defrelation actor-capacity
  :arity 3
  :domains (Something-Existing Situation)
  :range Capacity-Attribute
  :annotations (Ternary-Predicate
                (documentation "The predicate #$actorCapacity is used to indicate the capacity in which some entity participates in a particular event or situation.  (#$actorCapacity ENTITY SIT CAP) means that ENTITY has an (unspecified) role in SIT with the #$CapacityAttribute CAP.  An important use of #$actorCapacity is with the capacity attributes #$MainFunction or #$IntendedFunction to state that a device is serving its #$primaryFunction or intended function (i.e., #$intendedBehaviorCapable) in a certain situation.")))

(defrelation actor-parts-affected
  :arity 2
  :is-primitive (:and object-acted-on non-deliberate-actors)
  :domain Event
  :range (:and Animal-Body-Part Organism-Part)
  :annotations (Actor-Slot
                (documentation "(#$actorPartsAffected ACT PART) means that PART is an #$objectActedOn in ACT, and it is one of the #$anatomicalParts of the organism which is #$bodilyActedOn in ACT.  For example, during a man's morning shave, his #$Beard is an #$actorPartsAffected, but the hand with which he shaves is not, because his beard is changed, but his hand is not changed (`acted on') in any significant way.")))

(defrelation actor-parts-involved
  :arity 2
  :is-primitive (:and pre-actors non-deliberate-actors)
  :domain Event
  :range Organism-Part
  :annotations (Actor-Slot
                (documentation "(#$actorPartsInvolved ACT PART) means that PART is one of the #$anatomicalParts of an organism who has an active role in the event ACT, and, moreover, that PART is somehow involved in the action.  Note that the organism to which PART belongs either performs or does ACT; it is not merely an #$objectActedOn.  Some examples of #$actorPartsInvolved  include: the eyes of someone who is sneezing (or crying); the left foot of someone playing in a football game; the right hand of someone who is shaking hands; the claws of a cat who is scratching someone.  As a negative example, consider your hair while you are getting a haircut.  It is not an #$actorPartsInvolved, because you are passive in that event; it is, though, an #$actorPartsAffected in that event.")))

(defrelation actors
  :arity 2
  :is-primitive temporally-intersects
  :domain Event
  :range Something-Existing
  :annotations (Actor-Slot
                (documentation "The predicate #$actors is the most general instance of #$ActorSlot.  All other actor slots are specializations of this predicate.  Thus, #$actors is a broad concept which includes any entity which is involved in an action.  (#$actors EVENT ACTOR) means that ACTOR is somehow meaningfully (directly or indirectly) involved in EVENT during EVENT.  Mere cotemporality of objects (somewhere in the universe) with a particular event is not enough `involvement' to make those objects #$actors of that event.  Nor is a representation of an event among the #$actors of that event, unless the representation affects the event.")))

(defrelation acts-in-capacity
  :arity 4
  :domains (Agent Actor-Slot Script-Type)
  :range Capacity-Attribute
  :annotations (Quaternary-Predicate
                (documentation "The predicate #$actsInCapacity indicates the capacity in which an agent participates in certain kinds of actions.  (#$actsInCapacity AGENT ROLE SCRIPT-TYPE CAP) means that the agent AGENT plays the role ROLE in instances of SCRIPT-TYPE, and s/he does that role in the capacity CAP.  CAP is a #$CapacityAttribute (q.v.) which describes the AGENT's mode of participation--e.g., as a job, hobby, main function, support function, etc.  Contrast three cases of acts of #$GreetingSomeone, when #$performedBy: (1) instances of #$Receptionist, in their #$JobCapacity and as their #$MainFunction; (2) instances of #$FlightAttendant, in their #$JobCapacity but as a #$SupportFunction; and (3) instances of #$TrainEngineer, in a #$HobbyCapacity (though they do it while working, it's not part of their job).")))

(defrelation address-text
  :arity 2
  :domain Contact-Location
  :range Address--Location-Designator
  :annotations (Functional-Slot
                (documentation "The predicate #$addressText maps a particular element of #$ContactLocation to its #$Address-LocationDesignator, ADDRESS.  (#$addressText LOC ADDRESS) means that the #$ContactLocation LOC has the address ADDRESS.  For example, the #$addressText of the Cycorp #$MailingLocation is `Cycorp, 3721 Executive Center Dr., Ste. 100, Austin, TX 78731-1615.'  See also #$ContactLocation.")))

(defrelation adjacent-paths-at-junction
  :arity 2
  :is-primitive (:and connected-to
                      physical-decompositions
                      cotemporal
                      on-path--generic)
  :domain Junction-Of-Paths
  :range Path--Generic
  :annotations (Spatial-Predicate
                Connection-Predicate
                Cotemporal-Objects-Slot
                (documentation "(adjacentPathsAtJunction JUNCT PATH) means that the #$JunctionOfPaths JUNCT has PATH as one of the paths joining it. A junction may connect many paths (it must connect more than one), and a path may pass through many junctions, and may end at a junction.  Examples: all the streets meeting at a certain intersection, or the particular trachea and both primary bronchi meeting at  the #$TracheobronchialJunction between a certain person's lungs.  Within a specified #$PathSystem, a node is the end of all the links to that node; this is established with #$linkBetweenInSystem or #$pathBetweenInSystem.")))

(defrelation adjacent-to
  :arity 2
  :is-primitive touches
  :domain Spatial-Thing
  :range Spatial-Thing
  :annotations (Inter-Existing-Object-Slot
                Symmetric-Binary-Predicate
                Physical-Feature-Describing-Predicate
                Spatial-Predicate
                (documentation "arg1 and arg2 are touching such that their region of contact is a line (i.e. not a point).  Also arg1 is neither above nor below arg2.")))

(defrelation affiliated-with
  :arity 2
  :is-primitive cotemporal
  :domain Agent
  :range Agent
  :annotations (Cotemporal-Objects-Slot
                Symmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$affiliatedWith AGENT1 AGENT2) means #$Agents AGENT1 and AGENT2 are somehow affiliated.  This is a broad relation, but it involves at least the voluntary entry into an understood relationship, with rights and obligations, by at least one of the affiliated #$Agents; i.e., they may be business partners, kin, employer/employee, one (say a person) may be a member of the other (say an organization), parent-company/subsidiary, etc.")))

(defrelation after
  :arity 2
  :domain Time-Point
  :range Time-Point
  :annotations (Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Primitive-Temporal-Relation
                Irreflexive-Binary-Predicate
                (documentation "(#$after ?X ?Y) means #$TimePoint ?X is after (occurs later in time than) #$TimePoint ?Y.   
Note:  Individual #$TimePoints are seldom mentioned in axioms; rather, the axiom is likely to use some #$ComplexTemporalRelation, such as #$startsAfterEndingOf, which holds between two #$TemporalThing.   These #$ComplexTemporalRelations are themselves usually defined in terms of #$PrimitiveTemporalRelations, such as #$after and #$simultaneousWith, which relate one #$TimePoint to another.")))

(defrelation after-adding
  :arity 2
  :domain Predicate
  :range Cyc-System-Symbol
  :annotations (Binary-Predicate
                Inference-Related-Bookkeeping-Predicate
                (documentation "Whenever a source is added to a gaf use of a predicate, each of that predicate's #$afterAdding functions is called on that source.")))

(defrelation after-removing
  :arity 2
  :domain Predicate
  :range Cyc-System-Symbol
  :annotations (Binary-Predicate
                Inference-Related-Bookkeeping-Predicate
                (documentation "Whenever a source is removed from a gaf use of a predicate, each of that predicate's #$afterRemoving functions is called on that source.")))

(defrelation age
  :arity 2
  :domain Something-Existing
  :range Time--Quantity
  :annotations (Interval-Based-Quantity-Slot
                (documentation "(age THING TIME) means that the thing THING
has the age TIME, where thing can be a person, a galaxy, or
anything else with temporal extent, e.g., (age MaryShepherd 
       (YearsDuration 40)). The previous assertion is not quite right, however:
notice that one can talk about the #$birthDate of a person quite safely, but whenever one makes a statement about the AGE of a person that statement will only be true `for a while' -- i.e., in some temporal context.  Therefore it would be a mistake to simply assert to Cyc that (#$age #$Lenat (#$YearsDuration 45)), because that would be true in some contexts and false in others.  So what one does is to assert an expression of the form  (#$holdsIn ?X (#$age ?Y ?Z)) to indicate that during time interval ?X, the thing ?Y has age ?Z.  For example, (#$holdsIn (#$QuarterFn 2 (#$YearFn 1996)) (#$age #$Lenat (#$YearsDuration 45)), which means that Doug is a 45-year-old during the entire second quarter of 1996.  It is seldom correct to use #$age outside of some temporal qualification.")))

(defrelation agreeing-agents
  :arity 2
  :domain Agreement
  :range Agent
  :annotations (Inter-Actor-Slot
                (documentation "The predicate #$agreeingAgents relates a particular agreement to the agents who are making the agreement.  (#$agreeingAgents AGR PARTY) means that the #$Agreement AGR has the #$Agent PARTY among its agreeing parties.  #$agreeingAgents may have specialized roles, such as #$agreeingBuyer or #$agreeingSeller, #$insuringAgent or #$policyHolder, #$employedAgent or #$employingAgent.  The #$agreeingAgents will be mentioned in their agreement.")))

(defrelation agreement-forbids
  :arity 3
  :domains (Agreement Agent)
  :range Script-Type
  :annotations (Ternary-Predicate
                (documentation "The predicate #$agreementForbids is used to indicate types of actions that a particular agent is forbidden from performing under the terms of a particular agreement.  (#$agreementForbids AGR AGENT ACT-TYPE) means that the #$Agreement AGR forbids the #$Agent AGENT from ACT-TYPE activities.  For example, an instance of #$PeaceAccord #$agreementForbids the governments who signed it from #$WagingWar against one another; or, a business contract may forbid one agent from competing with another after s/he sells rights to a product, design, or practice to the second agent.")))

(defrelation agreement-period
  :arity 2
  :domain Agreement
  :range Time-Interval
  :annotations (Binary-Predicate
                (documentation "The predicate #$agreementPeriod is used to indicate the period of time during which a particular agreement is in force.  (#$agreementPeriod AGR TIME) means that the #$Agreement AGR holds during the #$TimeInterval TIME; i.e., TIME is the period during which the assertions made in AGR are supposed to be true.  TIME may or may not begin at the moment that AGR is created; e.g., I may sign an employment contract on the very day I begin working or several weeks before, to begin on a specified future date.  Or an #$agreementPeriod could begin before the agreement was made, e.g., when an agent agreed to pay disputed royalties retroactively.")))

(defrelation alertness-level
  :arity 2
  :domain Individual-Agent
  :range Alertness
  :annotations (Interval-Based-Quantity-Slot
                (documentation "Predicate (#$alertnessLevel SENTIENT_BEING LEVEL) indicates how alert SENTIENT_BEING is in the period in which the predicate holds.  The major levels are #$Unconscious and #$Awake, but more specific attributes such as #$Asleep and #$VeryAlert exist as well.")))

(defrelation ambient-relative-humidity
  :arity 2
  :is-primitive has-attributes
  :domain Geographical-Region
  :range Relative-Humidity
  :annotations (Interval-Based-Quantity-Slot
                (documentation "(#$ambientRelativeHumidity LOC DEGREE) indicates the DEGREE to which the water vapor content of the air at LOC approaches the total possible saturation (at that temperature).")))

(defrelation ambient-temperature
  :arity 2
  :domain Partially-Tangible
  :range Temperature
  :annotations (Interval-Based-Quantity-Slot
                (documentation "The predicate #$ambientTemperature is used to indicate the average temperature in the free space around a particular object.  (#$ambientTemperature OBJ TEMP) means that the space around the tangible object OBJ is at the #$Temperature TEMP.  Used with #$holdsIn (q.v.), #$ambientTemperature expresses the surrounding temperature for a given object at some point in time.  For the temperature of the object itself, use #$temperatureOfObject (q.v.).")))

(defrelation ambient-visibility
  :arity 2
  :is-primitive has-attributes
  :domain Geographical-Region
  :range Visibility
  :annotations (Interval-Based-Quantity-Slot
                (documentation "(#$ambientVisibility LOC DEGREE) indicates how clear the ambient fluid is at the location LOC.  Higher values of DEGREE mean one can see farther (than one could have at lower values).")))

(defrelation amount-of-sales-by-to-during
  :arity 5
  :domains (Agent
            Agent
            Time-Interval
            (:and Product-Type (:filled-by superrelations Product)))
  :range Money
  :annotations (Quintary-Predicate
                Functional-Predicate
                (documentation "The predicate #$amountOfSalesByToDuring is used to indicate how much of a certain product was sold by a particular seller to a particular buyer.  (#$amountOfSalesByToDuring SELLER BUYER TIMEPD PRODTYPE REVENUE) means that, during the #$TimeInterval TIMEPD, SELLER (an #$Agent) sold to BUYER (another #$Agent) some amount of the #$ProductType PRODTYPE, worth the total amount of #$Money REVENUE.  For example, to say that a restaurant, #$Threadgills, sold $3000 worth of their pumpkin pies to a local grocery store in November, we would say: (#$amountOfSalesByToDuring #$Threadgills HEBAt2222 (#$MonthFn #$November (#$YearFn 1996)) #$PumpkinPie (#$Dollar-UnitedStates 3000)).")))

(defrelation ampere
  :annotations (Unit-Of-Measure-No-Prefix
                Unit-Of-Current
                Mks-Unit-Of-Measure
                Standard-Unit-Of-Measure
                (documentation "The standard unit of measure of electrical current, equivalent to a 1-#$Coulomb flow of current, or 1 #$Volt across a resistance of 1 #$Ohm.")))

(defrelation amplitude-of-signal
  :arity 2
  :domain Wave-Propagation
  :range Distance
  :annotations (Interval-Based-Quantity-Slot
                (documentation "(#$amplitudeOfSignal ?WAVE ?AMP) means the distance from the average to the extremes of the signal ?WAVE is ?AMP.")))

(defrelation analogous-feelings
  :arity 2
  :domain (:and Feeling-Attribute-Type
                (:filled-by superrelations Feeling-Attribute))
  :range (:and Feeling-Attribute-Type
               (:filled-by superrelations Feeling-Attribute))
  :annotations (Symmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                Intensional-Representation-Predicate
                (documentation "(#$analogousFeelings EMOTYPE1 EMOTYPE2) means that a feeling of the type EMOTYPE1 is analogous to a feeling of the type EMOTYPE2.  In part, this means that there is a high probability that an agent having an emotion of one type is also feeling an emotion of the other type.  Often the two feelings differ only in degree, context, etc.  E.g., (#$analogousFeelings #$Irritation #$Anger) and (#$analogousFeelings #$Irritation #$Impatience).")))

(defrelation anatomically-capable-of
  :arity 3
  :domains (Animal (:and Cyc_Collection (:filled-by superrelations Situation)))
  :range Cyc_Role
  :annotations (Ternary-Predicate
                (documentation "The predicate #$anatomicallyCapableOf indicates that an agent is anatomically able to take a certain role in a certain type of situation or event.  (#$anatomicallyCapableOf AGENT SIT-TYPE ROLE) means that an individual #$Animal AGENT has the anatomical prerequisites (natural or prosthetic) to act in this ROLE in normal instances of SIT-TYPE.  For example, to express that Karen is capable of walking, Cyc would say (#$anatomicallyCapableOf Karen #$BipedWalking #$performedBy).  AGENT may or may not have the skills (or other prerequisites) for actually doing a SIT-TYPE.  #$anatomicallyCapableOf entails that AGENT satisfies the relevant #$anatomicalResourceRequired constraint--e.g., for Karen's #$BipedWalking, that she has two legs (natural or prosthetic).  As a default, Cyc concludes that animals who have the #$anatomicalParts needed for a certain kind of activity are #$anatomicallyCapableOf that activity--for example, that people who have arms and legs are #$anatomicallyCapableOf swimming; those conclusions would be overridden by the additional information that a person was paralyzed.")))

(defrelation anatomical-parts
  :arity 2
  :is-primitive (:and cotemporal physical-parts)
  :domain Organism--Whole
  :range Organism-Part
  :annotations (Cotemporal-Objects-Slot
                Physical-Part-Predicate
                (documentation "(#$anatomicalParts ORGM PART) means that PART is an anatomical part of the (whole) organism ORGM.  
Note that to represent the decomposition of parts of subparts --- for example, to say that a finger is part of a hand --- one should use the predicate #$physicalParts (qv), not #$anatomicalParts.")))

(defrelation anatomical-part-type-affected
  :arity 2
  :domain Animal-Activity
  :range (:and Existing-Object-Type
               (:filled-by superrelations Animal-Body-Part))
  :annotations (Type-Predicate
                Binary-Predicate
                (documentation "(#$anatomicalPartTypeAffected ACT BODYPARTTYPE) means that body parts of the #$AnimalBodyPartType BODYPARTTYPE are affected by the action ACT.  For example, if BRUSHING is a #$TeethCleaning event, then (#$anatomicalPartTypeAffected BRUSHING #$SetOfTeeth).")))

(defrelation anatomical-resource-required
  :arity 3
  :domains (Animal-Activity
            (:and Existing-Object-Type
             (:filled-by superrelations Animal-Body-Part)))
  :range Non-Negative-Integer
  :annotations (Ternary-Predicate
                (documentation "(#$anatomicalResourceRequired ACT BODYPARTTYPE NUM) means that the successful doer of ACT must have this many (NUM) of the #$AnimalBodyPartType BODYPARTTYPE.  For example, if VOLANT is an element of #$Flying-FlappingWings, then (#$anatomicalResourceRequired VOLANT #$Wing-AnimalBodyPart 2).")))

(defrelation ancestors
  :arity 2
  :is-primitive biological-relatives
  :domain Animal
  :range Animal
  :annotations (Irreflexive-Binary-Predicate
                Anti-Symmetric-Binary-Predicate
                Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                (documentation "(#$ancestors YOUNGER OLDER) means OLDER is one of the biological ancestors of YOUNGER.  OLDER could be one of YOUNGER's biological parents, biological grandparents, biological great-grandparents, etc.")))

(defrelation and
  :annotations (Variable-Arity-Relation
                Commutative-Relation
                Logical-Connective
                (documentation "The predicate #$and is the conjunction relation in Cyc.  #$and is a variable-arity predicate and takes any number of elements of #$CycFormula as its arguments.  (#$and P Q ... Z) is true if all of the formulas P, Q, ..., and Z are true in Cyc.")))

(defrelation angstrom
  :annotations (Unit-Of-Measure-With-Prefix
                Mks-Unit-Of-Measure
                Unit-Of-Distance
                (documentation "Extremely small unit of length, used especially for measuring the wavelength of light, derived by dividing a meter by 10,000,000,000.  Abbreviation: A (with a little circle on the top of the `A').  1 A = 1/10,000,000,000 (i.e., 10^-10) meter.")))

(defrelation angular-acceleration
  :arity 2
  :domain Physical-Event
  :range Angular-Acceleration-Rate
  :annotations (Physical-Attribute-Description-Slot
                (documentation "The rate at which the angle to an object is accelerating")))

(defrelation anterior-region-fn
  :arity 2
  :domain Animal-Body-Region
  :range Animal-Body-Region
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "The function (AnteriorRegionFn REGOROBJ), applied to a region or object REGOROBJ, means the region consisting of the front half or section, or the anterior main portion, of REGOROBJ.  It applies only when REGOROBJ itself has an intrinsic front/back orientation, or is a (non-backward-facing) part of a larger region or object that has a front/back orientation.")))

(defrelation appropriate-emotion
  :arity 4
  :domains (Situation
            Cyc_Role
            (:and Feeling-Attribute-Type
             (:filled-by superrelations Feeling-Attribute)))
  :range Generic-Attribute
  :annotations (Quaternary-Predicate
                (documentation "(#$appropriateEmotion SIT ROLE EMOTYPE DEGREE) means that in the #$Situation SIT, an intelligent agent filling the #$Role ROLE would be expected to feel an emotion of #$FeelingAttributeType EMOTYPE with the intensity DEGREE.  If such an agent did not feel that emotion, s/he would generally be considered rude or strange. E.g., a #$High degree of #$Grief is an #$appropriateEmotion for someone in the audience at a funeral (but not for the workers, the deceased, etc.)")))

(defrelation approximate-pay
  :arity 2
  :domain (:and Occupation-Type (:filled-by superrelations Professional))
  :range Monetary-Flow-Rate
  :annotations (Interval-Based-Quantity-Slot
                (documentation "The predicate #$approximatePay is used to estimate a typical amount of pay offered to workers in a specific occupation.  (#$approximatePay JOBTYPE RATE) means that a person working in the #$OccupationType JOBTYPE makes approximately the #$MonetaryFlowRate RATE, as earned income.  RATE might be expressed in, e.g., #$DollarsPerHour, pounds-per-week, or yen-per-year.  RATE refers to average pay for the occupation JOBTYPE, excluding any unearned pay (such as matching 401K contributions) and the value of other employee benefits.")))

(defrelation area-of-object
  :arity 2
  :is-primitive |(meaning-in-system-fn sensus--information-1997 AREA)|
  :domain Partially-Tangible
  :range Area
  :annotations (Physical-Amount-Slot
                Physical-Attribute-Description-Slot
                (documentation "A general slot to denote the area of some object.  This could be the area of a #$GeographicalRegion, a desk top, or a cross-section of wire.")))

(defrelation area-of-region
  :arity 2
  :is-primitive (:and area-of-object
                      |(meaning-in-system-fn sensus--information-1997 AREA)|)
  :domain Geographical-Region
  :range Area
  :annotations (Tangible-Object-Predicate
                Interval-Based-Quantity-Slot
                (documentation "The predicate #$areaOfRegion is used to indicate the physical area of a particular region.  (#$areaOfRegion REGION AREA) means that the physical size of the #$GeographicalRegion REGION is the #$Area AREA.  Examples: (#$areaOfRegion #$LakeErie (#$SquareMile 9940)), (#$areaOfRegion #$Elba-Island-Italy (#$SquareMile 86)), (#$areaOfRegion #$VaticanCity (#$SquareMile 0.17)), (#$areaOfRegion #$China-PeoplesRepublic (#$SquareMile 3705390)).  See #$Area for ways of representing areas.")))

(defrelation areas-of-origin
  :arity 2
  :domain Ethnic-Group-Type
  :range Geographical-Region
  :annotations (Intensional-Representation-Predicate
                Binary-Predicate
                (documentation "The predicate #$areasOfOrigin relates an ethnic group to a particular region in which its members originated.  (#$areasOfOrigin GROUP REGION) means that the #$EthnicGroupType GROUP originated in the #$GeographicalRegion REGION.  For example, to indicate that Circassians originated in Asia, we would say (#$areasOfOrigin #$EthnicGroupOfCircassians #$ContinentOfAsia).  Ethnic groups may have originated in several different areas; e.g., the #$EthnicGroupOfHutu is native to #$Rwanda, #$Burundi, #$Tanzania, and #$Uganda.")))

(defrelation arg-1-format
  :arity 2
  :domain Predicate
  :range Format
  :annotations (Meta-Predicate
                Binary-Predicate
                (documentation "(#$arg1Format PRED FORMAT) means that FORMAT tells how many different first arguments there can be to PRED, given some fixed set of other arguments.  See #$Format for a description of the possible values for FORMAT.")))

(defrelation arg-1-genl
  :arity 2
  :domain Relationship
  :range Cyc_Collection
  :annotations (Binary-Predicate
                Intangible-Object-Predicate
                Meta-Relation
                (documentation "(#$arg1Genl REL COL) means that the predicate or function, REL, accepts only first arguments that have the #$Collection COL among their #$genls.")))

(defrelation arg-1-isa
  :arity 2
  :domain Relationship
  :range Cyc_Collection
  :annotations (Binary-Predicate
                Default-Monotonic-Predicate
                Functional-Slot
                Intangible-Object-Predicate
                Meta-Relation
                (documentation "(#$arg1Isa REL COL) means that anything given as the first argument to the #$Relationship REL must be an element of the #$Collection COL.  Examples: (#$arg1Isa #$formsBorderBetween #$SpatialThing), (#$arg1Isa #$seriesOrderedBy #$Series), (#$arg1Isa #$uniquePartTypes #$ExistingObjectType).")))

(defrelation arg-2-format
  :arity 2
  :domain Predicate
  :range Format
  :annotations (Meta-Predicate
                Binary-Predicate
                (documentation "(#$arg2Format PRED FORMAT) means that FORMAT tells how many different second arguments there can be to PRED, given some fixed set of other arguments.  See #$Format for a description of the possible values for FORMAT.")))

(defrelation arg-2-genl
  :arity 2
  :domain Relationship
  :range Cyc_Collection
  :annotations (Binary-Predicate
                Meta-Relation
                (documentation "(#$arg2Genl REL COL) means that the predicate or function, REL, accepts only second arguments that have the #$Collection COL among their #$genls.")))

(defrelation arg-2-isa
  :arity 2
  :domain Relationship
  :range Cyc_Collection
  :annotations (Binary-Predicate
                Default-Monotonic-Predicate
                Functional-Slot
                Intangible-Object-Predicate
                Meta-Relation
                (documentation "(#$arg2Isa REL COL) means that anything given as the second argument to the #$Relationship REL must be an element of the #$Collection COL.  Examples: (#$arg2Isa #$sheetSurfaceConnected #$PartiallyTangible), (#$arg2Isa #$salutation #$CourtesyTitle), (#$arg2Isa #$mother #$FemaleAnimal).")))

(defrelation arg-3-format
  :arity 2
  :domain Predicate
  :range Format
  :annotations (Meta-Predicate
                Binary-Predicate
                (documentation "(#$arg3Format PRED FORMAT) means that FORMAT tells how many different third arguments there can be to PRED, given some fixed set of other arguments.  See #$Format for a description of the possible values for FORMAT.")))

(defrelation arg-3-genl
  :arity 2
  :domain Relationship
  :range Cyc_Collection
  :annotations (Binary-Predicate
                Meta-Relation
                (documentation "(#$arg3Genl REL COL) means that the predicate or function, REL, accepts only third arguments that have the #$Collection COL among their #$genls.")))

(defrelation arg-3-isa
  :arity 2
  :domain Relationship
  :range Cyc_Collection
  :annotations (Default-Monotonic-Predicate
                Binary-Predicate
                Functional-Slot
                Intangible-Object-Predicate
                Meta-Relation
                (documentation "(#$arg3Isa REL COL) means that anything given as the third argument to the #$Relationship REL must be an element of the #$Collection COL.")))

(defrelation arg-4-format
  :arity 2
  :domain Predicate
  :range Format
  :annotations (Binary-Predicate
                Meta-Predicate
                (documentation "(#$arg4Format PRED FORMAT) means that FORMAT tells how many different fourth arguments there can be to PRED, given some fixed set of other arguments.  See #$Format for a description of the possible values for FORMAT.")))

(defrelation arg-4-genl
  :arity 2
  :domain Relationship
  :range Cyc_Collection
  :annotations (Binary-Predicate
                Meta-Relation
                (documentation "(#$arg4Genl REL COL) means that the fourth argument to the #$Relationship (i.e., predicate or function) REL must be a subset of the #$Collection COL.")))

(defrelation arg-4-isa
  :arity 2
  :domain Relationship
  :range Cyc_Collection
  :annotations (Default-Monotonic-Predicate
                Binary-Predicate
                Functional-Slot
                Intangible-Object-Predicate
                Meta-Relation
                (documentation "(#$arg4Isa REL COL) means that anything given as the fourth argument to the #$Relationship REL must be an element of the #$Collection COL.")))

(defrelation arg-5-format
  :arity 2
  :domain Predicate
  :range Format
  :annotations (Binary-Predicate
                Meta-Predicate
                (documentation "(#$arg5Format PRED FORMAT) means that FORMAT tells how many different fifth arguments there can be to PRED, given some fixed set of other arguments.  See #$Format for a description of the possible values for FORMAT.")))

(defrelation arg-5-genl
  :arity 2
  :domain Relationship
  :range Cyc_Collection
  :annotations (Binary-Predicate
                Meta-Relation
                (documentation "(#$arg5Genl REL COL) means that the fifth argument to the #$Relationship (predicate or function) REL must be a subset of the #$Collection COL.")))

(defrelation arg-5-isa
  :arity 2
  :domain Relationship
  :range Cyc_Collection
  :annotations (Binary-Predicate
                Default-Monotonic-Predicate
                Functional-Slot
                Intangible-Object-Predicate
                Meta-Relation
                (documentation "(#$arg5Isa REL COL) means that anything given as the fifth argument to the #$Relationship REL must be an element of the #$Collection COL.")))

(defrelation args-genl
  :arity 2
  :domain Relationship
  :range Cyc_Collection
  :annotations (Binary-Predicate
                Meta-Relation
                (documentation "When a relation REL is an element of #$VariableArityRelation, i.e., it takes a variable number of arguments, then (#$argsGenl REL COL) means that all of those arguments must be subsets of COL.")))

(defrelation args-isa
  :arity 2
  :domain Relationship
  :range Cyc_Collection
  :annotations (Binary-Predicate
                Intangible-Object-Predicate
                Meta-Relation
                (documentation "The predicate #$argsIsa is used with elements of #$Relationship that take an indefinite number of arguments, in order to specify that the values of all the arguments used with that relation must be of a certain type.  E.g., to specify that all the arguments to Cyc's addition function, #$PlusFn, must be measurable quantities (i.e., elements of #$ScalarInterval), we assert: (#$argsIsa #$PlusFn #$ScalarInterval).  Additional examples: `paths branch only into other paths', i.e., (#$argsIsa #$branchesInto #$Path-Generic); `dinars are measured only in numbers', i.e., (#$argsIsa #$Dinar-Jordan #$CycSystemRealNumber).")))

(defrelation cyc_arity
  :arity 2
  :domain Relationship
  :range Cyc_Integer
  :annotations (Default-Monotonic-Predicate
                Binary-Predicate
                Functional-Slot
                Relationship-Predicate
                Meta-Relation
                (documentation "(#$arity REL NUMBER) means that the #$Relationship REL takes the number of arguments given by NUMBER.  For example, the #$arity of all instances of #$BinaryPredicate is 2.  In particular, (#$arity #$arity 2) since #$arity takes 2 arguments.")))

(defrelation assisting-agent
  :arity 2
  :is-primitive deliberate-actors
  :domain Event
  :range Agent
  :annotations (Actor-Slot
                (documentation "(#$assistingAgent ACT AGENT) means that AGENT is one of the agents assisting in the performance of ACT; AGENT itself may or may not also be performing ACT.  AGENT is doing some tasks related to ACT but which are not directly #$subEvents of performing the main or focus action.  Thus, `assisting' here means doing such supporting activities as fetching supplies or tools needed in ACT; helping to manipulate objects involved in ACT; gathering an audience, or booking the performer, if ACT is a public performance, and so forth.")))

(defrelation atom-fn
  :arity 2
  :domain (:and Element-Stuff-Type-By-Number-Of-Protons
                (:filled-by superrelations Element-Stuff))
  :range (:and Existing-Object-Type (:filled-by superrelations Atom))
  :annotations (Collection-Denoting-Function
                (documentation "#$AtomFn is a Cyc function, specifically a #$CollectionDenotingFunction.  It may be used to denote any subset of #$Atom which contains all the atoms of a particular element type.  #$AtomFn takes an instance of #$ElementStuffTypeByNumberOfProtons as its single argument and returns the collection of all atoms of that element.  Thus, for any E which is an #$ElementStuffTypeByNumberOfProtons, (#$AtomFn E) returns the subset of #$Atom which contains all the atoms of element type E.   Each atom in the collection (#$AtomFn E) has N protons in its atomic nucleus, where N is the #$atomicNumber of the element type E.  For example, (#$AtomFn #$Carbon) is the collection of carbon atoms, each of which has 6 protons in its nucleus.")))

(defrelation atomic-number
  :arity 2
  :domain (:and Element-Stuff-Type-By-Number-Of-Protons
                (:filled-by superrelations Element-Stuff))
  :range Positive-Integer
  :annotations (Interval-Based-Quantity-Slot
                (documentation "The predicate #$atomicNumber indicates the atomic number of a type of element.  (#$atomicNumber E N) means that E, a collection belonging to #$ElementStuffTypeByNumberOfProtons, has the positive integer N for its atomic number.  This means that any instance of (#$AtomFn E) must have N #$Protons in its #$AtomicNucleus.  For example, (#$atomicNumber #$Carbon 6), and every instance of (#$AtomFn #$Carbon) has six protons in its nucleus.")))

(defrelation attempting-fn
  :arity 2
  :domain (:and Temporal-Object-Type
                Script-Type
                (:filled-by superrelations Action))
  :range (:and Script-Type (:filled-by superrelations Purposeful-Action))
  :annotations (Collection-Denoting-Function
                (documentation "(#$AttemptingFn ACTION-TYPE) maps from the collection ACTION-TYPE (a subset of #$Action) to a collection of attempts to perform ACTION-TYPE.  Thus the result of (#$AttemptingFn #$Speaking) would be the collection of attempts at speaking, both those attempts which are successes (thus resulting in actual #$Speakings), and those which are failures.  #$AttemptingFn operates on the #$Collection level, and is used to talk about kinds of attempts that can occur.  To talk about the specific attempt that brought about an event which actually occurred, use #$SuccessfulAttemptFn.")))

(defrelation attitude-towards-event
  :arity 4
  :domains (Animal
            Event
            (:and Feeling-Attribute-Type
             (:filled-by superrelations Feeling-Attribute)))
  :range Generic-Attribute
  :annotations (Quaternary-Predicate
                (documentation "#$attitudeTowardsEvent(AGT EVT EMOTYPE DEGREE) means that the #$SentientAnimal AGT has the attitude EMOTYPE (see #$FeelingAttributeType) about the #$Event EVT with DEGREE of intensity.  By `attitude' we mean a feeling which may be latent and/or long-lasting.  To refer to feelings that AGT experiences immediately and consciously towards EVT, use #$feelsTowardsEvent.")))

(defrelation attitude-towards-object
  :arity 4
  :domains (Animal
            Individual
            (:and Feeling-Attribute-Type
             (:filled-by superrelations Feeling-Attribute)))
  :range Generic-Attribute
  :annotations (Functional-Predicate
                Quaternary-Predicate
                (documentation "#$attitudeTowardsObject(AGT OBJ EMOTYPE DEGREE) means that the #$SentientAnimal AGT has the attitude EMOTYPE (see #$FeelingAttributeType) about the #$Individual OBJ with DEGREE of intensity.  By `attitude' we mean a possibly latent and/or long-lasting feeling.  To refer to feelings that AGT experiences immediately and consciously towards OBJ, use #$feelsTowardsObject.")))

(defrelation axis-fn
  :arity 4
  :domains (Partially-Tangible
            (:and Region-Type (:filled-by superrelations Side))
            (:and Region-Type (:filled-by superrelations Side)))
  :range Intrinsic-Axis-Of-Object
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "(#$AxisFn OBJ REGIONTYP REGIONTYP) is a function that, applied to an individual object OBJ and two types of region of such an object, returns the axis through the object, determined by running the axis through the individual regions (of those types) of the object.  Thus #$AxisFn is an  #$IndividualDenotingFunction that returns a particular axis of an individual object. (#$AxisFn OBJ FROM-SIDE TO-SIDE) denotes a directional axis, pointing from FROM-SIDE to TO-SIDE of OBJ and extending through it. For example, (#$AxisFn `Chair37' #$BackSide #$FrontSide) would denote the back-to-front axis of Chair37. See also #$IntrinsicAxisOfObject.")))

(defrelation barometric-pressure
  :arity 2
  :domain Gaseous-Tangible-Thing
  :range Pressure
  :annotations (Interval-Based-Quantity-Slot
                Tangible-Substance-Predicate
                (documentation "(#$barometricPressure GAS PRESS) means that the instance of #$GaseousTangibleThing GAS has the #$Pressure PRESS.  Typically, GAS is a piece of atmosphere; #$barometricPressure indicates the atmospheric pressure in and around that `object'.")))

(defrelation basic-price
  :arity 2
  :domain Individual
  :range Money
  :annotations (Interval-Based-Quantity-Slot
                (documentation "The predicate #$basicPrice indicates the price of a particular item.  (#$basicPrice THING MONEY) means that the object or service, THING, has the basic price MONEY.  (MONEY can be an interval representing a range of prices.)  Note that #$basicPrice refers to the `ticket price' of an item when it is actually bought or offered for sale; #$basicPrice does NOT refer to appraised value (where that differs from an actual selling price).  Since prices are time-sensitive, assertions about #$basicPrice should be suitably qualified.  For example, the price of a fast-food #$HamburgerSandwich in 1996 is a magnitude greater than what it was in 1965.  For the total charge for purchase of an object, including tax, shipping, handling, etc., use #$totalCharge (q.v.).")))

(defrelation behavior-capable
  :arity 3
  :domains (Something-Existing
            (:and Cyc_Collection (:filled-by superrelations Situation)))
  :range Cyc_Role
  :annotations (Ternary-Predicate
                (documentation "The predicate #$behaviorCapable is used to describe a type of situation (and the role) in which an object can participate due to its intrinsic properties.  (#$behaviorCapable OBJ SIT-TYPE ROLE) means that the individual, OBJ, is able to act as a ROLE in a situation of type SIT-TYPE.  OBJ may or may not have been designed to function in that way (cf. #$primaryFunction, #$intendedBehaviorCapable).  Also, #$behaviorCapable does not imply that OBJ can unquestionably act in that way in every such situation, since extrinsic factors may prevent it; e.g., the object may be in the wrong location, operated by a person lacking the proper skills, certain legal preconditions may not be satisfied, etc.  Examples: (intended capability) a hammer is #$behaviorCapable of being the #$deviceUsed in instances of #$HammeringANail; (unintended capability) an inner tube is capable of being the #$deviceUsed in instances of people #$FloatingInLiquid.")))

(defrelation behind--directly
  :arity 2
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Spatial-Predicate
                Binary-Predicate
                (documentation "(#$behind-Directly AFT FORE) means that AFT is directly behind FORE.  More precisely, it implies both (#$behind-Generally AFT FORE) and that there is at least one line parallel to the backward pointing axis of FORE that intersects both AFT and FORE.  Note that FORE must have a back face.")))

(defrelation behind--generally
  :arity 2
  :is-primitive near
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Spatial-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$behind-Generally AFT FORE) means that AFT is behind FORE.  More precisely, a line originating at the center of FORE projecting away from the front side of FORE and parallel to the intrinsic front-to-back axis of FORE forms an angle of less than 45 degrees with a line intersecting both AFT and FORE.")))

(defrelation beliefs
  :arity 2
  :domain Agent
  :range Cyc-Formula
  :annotations (Propositional-Attitude-Slot
                (documentation "(#$beliefs AGT PROP) means that the #$Agent AGT subscribes to the truth of the proposition PROP (represented by a #$CycFormula).  PROP states something that AGT believes to be true, but of course PROP may or may not actually be true.  Another way to think of this is that PROP is true in the context whose epistemological status is `what AGT believes'.  Naturally, PROP may itself be a proposition about beliefs; one would use nested #$beliefs in this fashion to express a rule such as `most Canadians believe that most Americans believe Canada is a US State.'")))

(defrelation belief-statements
  :arity 2
  :domain Belief-System
  :range Cyc-Formula
  :annotations (Binary-Predicate
                (documentation "(#$beliefStatements BSYS PROP) indicates that a belief of the belief system BSYS is stated in the proposition PROP (represented by a #$CycFormula).  In other words, each #$BeliefSystems comprises a set of tenets, statements linked to it via this predicate.  
Note: This is NOT the predicate that ties a particular #$Agent to his/her/its beliefs; for that, see #$beliefs and #$hasBeliefSystems.")))

(defrelation beneficiary
  :arity 2
  :domain Event
  :range Agent
  :annotations (Binary-Predicate
                Cyc_Role
                (documentation "(#$beneficiary ACT AGT) means that the #$Agent AGT benefits from the performance of the action ACT.  Some desire or interest of AGT is served, enabled, helped, or satisfied by the performance of ACT.")))

(defrelation between
  :arity 3
  :domains (Partially-Tangible Partially-Tangible)
  :range Partially-Tangible
  :annotations (Ternary-Predicate
                (documentation "(#$between THIS THAT MID-OBJ) means that MID-OBJ is spatially directly between THIS and THAT.  Depending on the context, MID-OBJ may lie on a great circle between THIS and THAT, or on a true Euclidian straight line between them.  Note that #$between applies only to physical location.  To describe a relationship involving numbers or #$ScalarIntervals, use #$greaterThan or #$followingValue.  To describe a 'between' relationship along some particular physical path (like: Austin is between Dallas and San Antonio on Highway I-35), or on some trajectory, see #$betweenOnPath.")))

(defrelation between-on-path
  :arity 4
  :domains (Cyc_Thing Cyc_Thing Cyc_Thing)
  :range Path--Simple
  :annotations (Quaternary-Predicate
                (documentation "(#$betweenOnPath X Y Z PATH) means that X, Y and Z are points on the path PATH and X is between Y and Z.  Note that this gives no ordering of Y and Z; it just claims that X is between them.  Note: Given a #$Path-Customary PATH and points or places on PATH, #$betweenOnPath does not in general determine a linear order (#$TotallyOrderedSet) on the set of all points on PATH when PATH is not part of a specified #$PathSystem.  However, in a #$PathSystem SYS, #$betweenOnPath does determine a linear order on the set of all points on PATH in SYS.")))

(defrelation biases
  :arity 2
  :is-primitive beliefs
  :domain Intelligent-Agent
  :range Cyc-Formula
  :annotations (Propositional-Attitude-Slot
                (documentation "(#$biases AGT PROP) means that the #$Agent AGT has the unsubstantiated belief PROP (represented by a #$CycFormula).
Biases generally are so deeply rooted in the agent that the agent may not be consciously aware that PROP is rationally undersupported, and it may be concomittantly harder to change their mind about PROP.
Note:  PROP might or might not turn out to be true (in various contexts); often, PROP is some overgeneralization which is sometimes true but often false, or which once was true but now is usually false, etc.")))

(defrelation biological-father
  :arity 2
  :is-primitive (:and biological-parents father)
  :domain Animal
  :range Male-Animal
  :annotations (Inter-Existing-Object-Slot
                Functional-Slot
                Anti-Transitive-Binary-Predicate
                Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                (documentation "(#$biologicalFather OFFSPRING MALE) means that #$MaleAnimal MALE is the male biological parent of #$Animal OFFSPRING.")))

(defrelation biological-mother
  :arity 2
  :is-primitive (:and biological-parents mother)
  :domain Animal
  :range Female-Animal
  :annotations (Anti-Transitive-Binary-Predicate
                Functional-Slot
                Inter-Existing-Object-Slot
                Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                (documentation "(#$biologicalMother OFFSPRING FEMALE) means that #$FemaleAnimal FEMALE is the female biological parent of the #$Animal OFFSPRING.")))

(defrelation biological-parents
  :arity 2
  :is-primitive biological-relatives
  :domain Animal
  :range Animal
  :annotations (Inter-Existing-Object-Slot
                Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                (documentation "(#$biologicalParents OFFSPRING PARENT) means that PARENT is the biological parent of OFFSPRING.")))

(defrelation biological-relatives
  :arity 2
  :is-primitive relatives
  :domain Animal
  :range Animal
  :annotations (Symmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$biologicalRelatives ORG1 ORG2) means that ORG1 and ORG2 are biological relatives, related by birth.")))

(defrelation birth-child
  :arity 2
  :is-primitive (:and bodily-acted-on object-of-state-change)
  :domain Birth-Event
  :range Animal
  :annotations (Actor-Slot
                (documentation "(#$birthChild BIRTH ANIM) means that ANIM is the #$Animal that is born in the #$BirthEvent BIRTH.")))

(defrelation birth-date
  :arity 2
  :is-primitive starting-date
  :domain Entity
  :range Date
  :annotations (Binary-Predicate
                (documentation "(#$birthDate ?X ?Y) indicates that the #$Entity ?X came into existance during #$Date ?Y.  For people, this is the date at which they were born, hence the name of this predicate.  The first argument to this predicate must be an #$Entity, and not just any old #$SomethingExisting, because we don't want to talk about the #$birthDate or #$dateOfDeath of a subabstraction like AlbertEinsteinWhileAtPrinceton; in other words, proper subabstractions will have #$startingDates and #$endingDates, but only true #$Entitys will have a #$birthDate or #$dateOfDeath")))

(defrelation birth-parent
  :arity 2
  :is-primitive (:and bodily-doer object-of-state-change)
  :domain Birth-Event
  :range Animal
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$birthParent BIRTH PAR) means that PAR is the parent who is #$bodilyDoer in the #$BirthEvent BIRTH - typically this is also the #$femaleParentActor of the preceding #$BiologicalReproductionEvent.")))

(defrelation board-members
  :arity 2
  :is-primitive has-members
  :domain Organization
  :range Person
  :annotations (Extensional-Representation-Predicate
                Binary-Predicate
                (documentation "The predicate #$boardMembers relates a particular organization to the persons who serve on its board of directors.  (#$boardMembers ORG PERSON) means PERSON belongs to that instance of #$BoardOfDirectors which is responsible for oversight of the #$Organization ORG.  A member of the Board of Directors of an organization may or may not be an executive of the organization.")))

(defrelation bodily-acted-on
  :arity 2
  :is-primitive object-acted-on
  :domain Event
  :range Organism--Whole
  :annotations (Actor-Slot
                (documentation "The predicate #$bodilyActedOn is used to describe an event in which a living organism is acted on by some external agency.  (#$bodilyActedOn EVENT ORG) means that ORG is a living organism (i.e., an #$Organism-Whole) that is being affected in EVENT.  ORG itself may be intentionally participating in EVENT (e.g., a person voluntarily getting a haircut) or not (e.g., an animal hit by a car).  Either way, the organism ORG is not an active primary `doer' of EVENT.  This predicate is appropriately used to identify actors who undergo (instances of) #$DrugTherapy or #$IncurringAnInjury.
Note an important contrast with #$bodilyDoer (q.v.):  #$bodilyActedOn is for events that merely happen to the body, as opposed to actions the body does.  Because the body of an organism is an active `doer' in its instances of #$PhysiologicalCondition, including any #$InjuryCondition (which is the physical process of a body sustaining an injury and responding by healing or deteriorating), an organism is related to events of those kinds with #$bodilyDoer rather than #$bodilyActedOn.  By contrast, organisms involved in instances of #$DrugTherapy (which refers to the effect of a drug on the patient) or #$IncurringAnInjury (which refers to the event in which an organism gets injured, rather than the process of its being in an injured and hopefully healing state) should be related to events of those types with #$bodilyActedOn.")))

(defrelation bodily-doer
  :arity 2
  :is-primitive (:and done-by non-deliberate-actors)
  :domain Physical-Event
  :range Organism--Whole
  :annotations (Actor-Slot
                (documentation "The predicate #$bodilyDoer relates an event to an organism which does it non-deliberately, which in Cyc means without conscious intention or volition.  (#$bodilyDoer EVENT DOER) means that DOER does EVENT (i.e., DOER is not merely subjected to EVENT by external forces), but DOER does EVENT non-deliberately.  Note that for certain kinds of actions, considered as a class, organisms are necessarily merely #$bodilyDoers; for example, physical growth, peristalsis, and reflex actions.  For other actions, such as breathing, flinching, or shouting, an organism commonly (but not necessarily) acts as #$bodilyDoer; some cases of such events may be deliberately #$performedBy the doer.
Note: an organism which dies of natural causes (#$Dying) is the #$bodilyDoer of that event, because of the internal processes the body performs during #$Dying.  Also, in certain #$PhysiologicalConditions, including an #$AilmentCondition (such as #$Diabetes) or a healing process, organisms are considered to be #$bodilyDoers because their own bodily processes are creating or sustaining those conditions.  An organism killed by an external agent, however, is just the #$bodilyActedOn (q.v.) in that event; therefore, instances of #$Killing-Biological should use #$bodilyActedOn to refer to the organism killed.")))

(defrelation body-part-collection-fn
  :arity 3
  :domains (Animal
            (:and Animal-Body-Part-Type
             (:filled-by superrelations Animal-Body-Part)))
  :range (:and Existing-Object-Type
               (:filled-by superrelations Animal-Body-Part))
  :annotations (Collection-Denoting-Function
                (documentation "#$BodyPartCollectionFn is a #$CollectionDenotingFunction, that is, it is a Cyc function which `returns' (i.e., `has') a collection as its value.  Here is an example of what it does.  The expression (#$BodyPartCollectionFn #$AbrahamLincoln #$Fingernail) returns, as its value, a collection of ten elements, each of which represents one of the fingernails of Abraham Lincoln.  In cases where an animal is likely to only have one part of that type (e.g., head, heart, nose, nervous system), it makes more sense to use the function #$BodyPartFn (qv), rather than using this one, getting a singleton set back, and extracting its lone element.")))

(defrelation body-part-fn
  :arity 3
  :domains (Animal
            (:and Unique-Anatomical-Part-Type Animal-Body-Part-Type
             (:filled-by superrelations Animal-Body-Part)))
  :range Animal-Body-Part
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "#$BodyPartFn is an #$IndividualDenotingFunction, that is, it is a Cyc function which `returns' (i.e., `has') a single individual object as its value.  (#$BodyPartFn DeborahNichols #$Heart) represent's Deborah's one and only heart.  That nonatomic term can be used almost anywhere that the term DeborahNicholsHeart could have been used, but this way we needn't reify that other term, and so on.  Note that the second argument to this function --- i.e., the  #$AnimalBodyPartType --- must be a #$UniqueAnatomicalPartType, that is, a kind of part of which an animal can have only one.  If an animal can have multiple parts of that type, such as #$Finger, then use the function #$BodyPartCollectionFn instead of #$BodyPartFn.")))

(defrelation boiling-point
  :arity 2
  :domain Partially-Tangible
  :range Temperature
  :annotations (Tangible-Substance-Predicate
                Interval-Based-Quantity-Slot
                (documentation "(#$boilingPoint STUFF TEMP) means that TEMP is the temperature at which the substance STUFF changes from having the attribute #$LiquidStateOfMatter to #$GaseousStateOfMatter (when sufficient energy is input to raise STUFF's temperature through that point).  Note that the boiling point of most substances is context-dependent; on a mountaintop in Tibet the boiling point of water is much lower than it is in New York City.")))

(defrelation border-between-fn
  :arity 3
  :domains (Geographical-Region Geographical-Region)
  :range (:and Border Line)
  :annotations (Individual-Denoting-Function
                Commutative-Relation
                Reifiable-Function
                (documentation "(#$BorderBetweenFn REG1 REG2), applied to two individual #$GeographicalRegions REG1 REG2, returns the unique entire #$GeopoliticalBorder that separates them.   To identify arbitrarily large or small segments of borders see #$formsBorderPart.  The border returned by #$BorderBetweenFn may be discontinuous (such the border between France and Spain, interrupted by Andorra), or circular (such as the border between Italy and San Marino), or in abnormal cases it may even have multiple disconnected and nested cyclic fragments (the border between Belgium and Netherlands, due to the Baarle-Nassau and Baarle-Hartog enclaves), or move back and forth periodically (such as at the Isle des Faisans).  Nonetheless, (#$BorderBetweenFn REG1 REG2) must denote exactly one object since #$BorderBetweenFn is a function.  Reference to nonexistant borders such (#$BorderBetweenFn #$Albania #$UnitedStatesOfAmerica) should cause Cyc to realize that they are undefined.  For example, if Cyc concludes that (#$bordersOn #$UnitedStatesOfAmerica #$Albania) is not true, then it should conclude (#$undefined (#$BorderBetweenFn #$Albania #$UnitedStatesOfAmerica)).
 ")))

(defrelation borders-on
  :arity 2
  :is-primitive (:and touches-directly adjacent-to)
  :domain Geographical-Region
  :range Geographical-Region
  :annotations (Symmetric-Binary-Predicate
                (documentation "(#$bordersOn REGION-1 REGION-2) means that the #$GeographicalRegion REGION-1 and the #$GeographicalRegion REGION-2 are physically adjacent to each other.  Examples: (#$bordersOn #$CentralUSATimeZone #$MountainUSATimeZone), (#$bordersOn #$Nepal #$Tibet).")))

(defrelation boss
  :arity 2
  :is-primitive (:and acquainted-with cotemporal)
  :domain Person
  :range Person
  :annotations (Cotemporal-Objects-Slot
                Anti-Symmetric-Binary-Predicate
                (documentation "(#$boss PERSON1 PERSON2) means PERSON1 has PERSON2 for his or her immediate boss or supervisor.  
Note:  There can be more than one boss of a person, even cotemporally.
Note: (#$genlPreds #$boss #$acquaintedWith) means that if (#$boss x y), then (#$acquaintedWith x y), which in turn means (#$acquaintances x y #$SimpleContactAcquaintance).  I.e., a person and their direct boss are at least simple contact acquaintances.")))

(defrelation business-partners
  :arity 2
  :is-primitive positive-vested-interest
  :domain Agent
  :range Agent
  :annotations (Symmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "The predicate #$businessPartners indicates that two agents have jointly undertaken some business project; they are combining resources in some way to further their interests.  (#$businessPartners AGENT1 AGENT2) means AGENT1 is in partnership with AGENT2 to engage in business activities.  The partners are instances of #$Agent and may belong to either #$Person or #$Organization.  The partnership may be formally recognized (e.g., a #$Partnership or some other form of business) or informal.")))

(defrelation buyer
  :arity 2
  :is-primitive exchangers
  :domain Commercial-Activity
  :range Agent
  :annotations (Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "The predicate #$buyer relates an agent to a business activity.  (#$buyer EVENT AGENT) means that the #$Agent AGENT purchases the goods for sale in the #$CommercialActivity EVENT.")))

(defrelation buying-agent
  :arity 2
  :is-primitive (:and mediators buying-performer)
  :domain Commercial-Activity
  :range Legal-Agent
  :annotations (Functional-Slot
                Actor-Slot
                Asymmetric-Binary-Predicate
                Anti-Transitive-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "A buying agent acts on behalf of a would-be buyer to bring about a buying event involving his/her/its client as the buyer. ")))

(defrelation buying-performer
  :arity 2
  :is-primitive (:and social-participants performed-by)
  :domain Commercial-Activity
  :range Legal-Agent
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Anti-Transitive-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(buyingPerformer ?COM ?AGENT) means that ?AGENT is the #$Agent who actually pursues and attempts to obtain goods or services in a purchase, by performing an active role in the #$CommercialActivity ?COM.  Frequently this agent is the same as the #$buyer, but occasionally it is a #$buyingAgent representing the #$buyer.")))

(defrelation by-products
  :arity 2
  :is-primitive outputs
  :domain Creation-Or-Destruction-Event
  :range Partially-Tangible
  :annotations (Actor-Slot
                (documentation "(#$byProducts EV OBJ) means that OBJ is one of the outputs of EV, but not one of its intended outputs.  For intended outputs, see #$products.  For a particular EV and OBJ, it will not be true that both (#$products EV OBJ) and (#$byProducts EV OBJ).")))

(defrelation cancer-fn
  :arity 2
  :domain (:and Existing-Object-Type
                (:filled-by superrelations Animal-Body-Part))
  :range (:and Physiological-Condition-Type (:filled-by superrelations Cancer))
  :annotations (Collection-Denoting-Function
                (documentation "#$CancerFn is a Cyc function, and in particular a #$CollectionDenotingFunction.  It is used to describe cancers according to the part or region of the animal's body in which they are found.  (#$CancerFn REGION) denotes the collection of all cancers found in the region of the body, REGION.  For example, (#$CancerFn #$Throat) represents the set of all throat cancers, and is a subset of #$Cancer.")))

(defrelation can-contain-shapes
  :arity 2
  :domain Partially-Tangible
  :range Abstract-Shape
  :annotations (Binary-Predicate
                (documentation "The predicate #$canContainShapes is used to give an approximation of the internal size and shape of particular tangible objects, by relating an object to an abstract region of space described as a geometric shape with definite dimensions.  (#$canContainShapes OBJ SHAPE) gives an upper bound for the size of things that can be contained in the object OBJ, by specifying the dimensions of an abstract shape which OBJ can contain.  #$canContainShapes uses the elements of #$ShapeFunction (q.v.) for reference, especially the basic shapes generated by #$RectangularSolidFn, #$CylinderFn, and #$SphereFn.  For example, the trunk of my Honda Civic #$canContainShapes of (#$RectangularSolidFn (#$Meter 1) (#$Meter 0.5) (#$Meter 0.75)).  Cf. #$fitsIn.")))

(defrelation capable-of
  :arity 3
  :is-primitive (:and skill-capable-of
                      fiscally-capable-of
                      legally-capable-of
                      anatomically-capable-of)
  :domains (Agent (:and Cyc_Collection (:filled-by superrelations Situation)))
  :range Cyc_Role
  :annotations (Ternary-Predicate
                (documentation "The predicate #$capableOf indicates that an agent is fully able to carry out a certain role in a certain type of situation.  (#$capableOf AGT SIT-TYPE ROLE) means that the #$Agent AGT is able to act as described by ROLE in #$Situations of the type SIT-TYPE.  #$capableOf entails that AGT is qualified in ALL the relevant ways to fill that ROLE; e.g., AGT is #$anatomicallyCapableOf, #$fiscallyCapableOf, #$legallyCapableOf, and #$skillCapableOf playing that ROLE in SIT-TYPE.")))

(defrelation capital-city
  :arity 2
  :is-primitive (:and controls geographical-sub-regions)
  :domain Geopolitical-Entity
  :range Capital-City-Of-Region
  :annotations (Inter-Existing-Object-Slot
                Functional-Slot
                (documentation "The predicate #$capitalCity is used to indicate the capital of a country (only).  (#$capitalCity CNTRY CITY) means that CITY is the capital city of the #$Country CNTRY.  Examples: the #$capitalCity of the #$UnitedStatesOfAmerica is the #$CityOfWashingtonDC; the #$capitalCity of #$Armenia is Yerevan.  Note: for regional capitals, use #$capitalCityOfThisState.")))

(defrelation cyc_cardinality
  :arity 2
  :domain Set-Or-Collection
  :range Cyc_Integer
  :annotations (Functional-Slot
                Intensional-Representation-Predicate
                (documentation "(#$cardinality SETORCOL INTEGER)
means that the #$SetOrCollection SETORCOL has INTEGER number
of members. For instance, #$TheEmptySet has a #$cardinality
of 0.")))

(defrelation carries-infection-type
  :arity 2
  :domain Tangible-Thing
  :range (:and Infection-Type (:filled-by superrelations Infection))
  :annotations (Binary-Predicate
                (documentation "The predicate (#$carriesInfectionType OBJECT INFECT_TYPE) relates a particular organism or other object to a type of infection that it carries.  (#$carriesInfectionType OBJ INFTYP) means that the individual OBJ is a carrier of the #$InfectionType INFTYP.  For example, (#$carriesInfectionType TyphoidMary #$TyphoidFever) or (#$carriesInfectionType Needle0567 #$AIDS).")))

(defrelation catalyst
  :arity 2
  :is-primitive unchanged-actors
  :domain Chemical-Reaction
  :range Partially-Tangible
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "The predicate #$catalyst identifies the particular thing that acts as a catalyst in a particular chemical reaction.  (#$catalyst R X) means that the #$ChemicalReaction R has the particular quantity of substance X as a catalyst.  For example, every instance of #$Photosynthesis has some portion of #$Chlorophyll as a catalyst; an amount of #$Water may be a #$catalyst in some #$OxidationProcess of a #$Metal.")))

(defrelation caused-by
  :arity 2
  :is-primitive (:and |(meaning-in-system-fn sensus--information-1997 CAUSE-EFFECT)|
                      starts-after-starting-of)
  :domain Event
  :range Event
  :annotations (Inter-Existing-Object-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "#$causedBy is the predicate used for 
token-token event causation, i.e., causation between individual
events. (causedBy EVENT1 EVENT2) means that EVENT1 is causedBy
EVENT2.")))

(defrelation causes
  :arity 2
  :is-primitive |(meaning-in-system-fn sensus--information-1997 CAUSE-EFFECT)|
  :domain Cyc-Formula
  :range Cyc-Formula
  :annotations (Irreflexive-Binary-Predicate
                Transitive-Binary-Predicate
                (documentation "(#$causes p1 p2) means that p1 causes p2.  That is, the state of affairs described by proposition p1 causally leads to the state of affairs described by p2.  This is stronger than material implication; i.e., it must also be the case that (#$implies p1 p2).  Note that #$causes means more than #$implies, of course: there is a temporal ordering involved, there is a presumed mechanism of causation, etc.  Unlike #$implies, #$causes is not reflexive; one would not say that p1 causes p1, even though p1 implies p1.  Another difference between #$implies and #$causes is that #$causes is a predicate, not a logical connective.  Just because (#$causes p1 p2) is true that does NOT entail that (#$causes (#$not p2) (#$not p1)) is true.Note that (#$causes p1 p2) is generally a more accurate way of talking about causation than saying that some event e1 caused event e2 (which one can do in Cyc, using the predicate #$causedBy) since often there are a few key aspects of e1 that caused a few key aspects of e2, and the remaining details of e1 and e2 were, to first order, irrelevant.  Note that, similarly, (#$causes p1 p2) is generally a more accurate way of talking about causation than saying that some agent AGT caused something to be true (which one can do in Cyc, using the predicate #$causesProp) since often there is some specific aspect of the agent, or something they were involved in or did, that is the cause of the proposition's becoming satisfied.  Because this predicate is asymetric and since effect (p2) can not temporally precede cause (p1), #$causes may not be used to express mutual causation, e.g. feedback loops for which it may be said that two events (probably more process-like) cause each other.  We consider mutual causation to be a different form of causation and should be expressed using some as of yet (Dec 96) unreified relationship.")))

(defrelation causes-prop
  :arity 2
  :is-primitive |(meaning-in-system-fn sensus--information-1997 CAUSE-EFFECT)|
  :domain Temporal-Thing
  :range Cyc-Formula
  :annotations (Binary-Predicate
                (documentation "(#$causesProp INDIV PROP) means that the #$TemporalThing INDIV causes the proposition PROP to become true.  INDIV may be an #$Agent or an #$Event.  PROP is a #$CycFormula.  
Note:  A much simpler predicate is #$causedBy, in which both arguments are just #$Events.")))

(defrelation cavity-connected-along-path-side
  :arity 2
  :is-primitive (:and has-portal-to-region connected-to connected-to--rigidly)
  :domain Partially-Tangible
  :range (:and Path--Simple Partially-Tangible)
  :annotations (Binary-Predicate
                Connection-Predicate
                (documentation "(cavityConnectedAlongPathSide PATH CAVITY) means that there is a portal somewhere along the wall of the #$Path-Generic (which must also be #$PartiallyTangible) PATH which leads to the #$CavityOrContainer CAVITY. It does not apply if an end of PATH is the portal, nor to a branching of the path, nor a small hole in an otherwise dead end of the path. The portal is substantially smaller in width than the path, and instead of a smaller path connected there, the portal opens into a neighboring #$CavityOrContainer.  Example: an #$Alveolus attached to a #$RespiratoryBronchiole in the #$Lung is so connected.  Or, a room opening along the side of a hallway.")))

(defrelation cavity-has-wall
  :arity 2
  :is-primitive physical-parts
  :domain Cavity
  :range Solid-Tangible-Thing
  :annotations (Part-Predicate
                Asymmetric-Binary-Predicate
                (documentation "(cavityHasWall CAV WALL) means that the the #$Cavity CAV has WALL as one of its walls (or part of one of its walls), or partly-enclosing inner surfaces.  #$cavityHasWall is often used for describing the relationship between some space or part of a #$ConstructionArtifact and the substructures that bound or enclose it (e.g., the relationship between a room and its walls, floor(s), and ceiling(s)).")))

(defrelation cent--united-states
  :annotations (Unit-Of-Measure-With-Prefix
                Unit-Of-Money
                (documentation "An element of #$UnitOfMoney.  #$Cent-UnitedStates represents the smallest unit of money used officially in the United States of America; one-hundredth of a #$Dollar-UnitedStates.  See also #$UnitOfMeasure.")))

(defrelation centimeter
  :annotations (Cgs-Unit-Of-Measure
                Unit-Of-Measure-With-Prefix
                Unit-Of-Distance
                (documentation "The measurement function used in Cyc to represent the centimeter, a unit used within the Metric system to measure length.  See also #$CGSUnitOfMeasure, #$UnitOfMeasure.")))

(defrelation centimeters-per-second
  :annotations (Cgs-Unit-Of-Measure
                Unit-Of-Measure-With-Prefix
                Unit-Of-Speed
                (documentation "(#$CentimetersPerSecond NUMBER) returns a dimensionless rate or speed of NUMBER centimeters per second.  Notice that this result is not presently thought of as incorporating a vector, although it might be modified to do so at some point in the future if this should prove appropriate.")))

(defrelation chief-ports
  :arity 2
  :is-primitive geographical-sub-regions
  :domain Geopolitical-Entity
  :range Urban-Area
  :annotations (Inter-Existing-Object-Slot
                (documentation "This is a list of the chief ports for a given geographical region.")))

(defrelation children
  :arity 2
  :is-primitive (:and relatives cotemporal)
  :domain Animal
  :range Animal
  :annotations (Asymmetric-Binary-Predicate
                (documentation "(#$children PARENT CHILD) means that CHILD is the biological offspring of PARENT.")))

(defrelation circumference-of-object
  :arity 2
  :domain Partially-Tangible
  :range Distance
  :annotations (Interval-Based-Quantity-Slot
                Tangible-Object-Predicate
                Physical-Attribute-Description-Slot
                (documentation "The distance around a circular object")))

(defrelation citizens
  :arity 2
  :domain Geopolitical-Entity
  :range Person
  :annotations (Intensional-Representation-Predicate
                Binary-Predicate
                (documentation "The predicate #$citizens indicates that a particular person is a citizen of a particular country/state/... .  (#$citizens GEOPOL PERSON) means that GEOPOL is a #$GeopoliticalEntity in which the #$Person PERSON has full rights of citizenship (whatever those rights might consist of in GEOPOL).")))

(defrelation city-in-state
  :arity 2
  :domain Urban-Area
  :range Country-Subsidiary
  :annotations (Functional-Slot
                Non-Physical-Part-Predicate
                (documentation "(#$cityInState CITY STATE) means that the #$UrbanArea CITY is physically located in the geopolitical sub-region STATE.  Note that STATE may be an element of #$State-Geopolitical (q.v.), or it may be some other kind of #$CountrySubsidiary, such as #$Territory. Examples: the #$CityOfDurhamNC in a #$cityInState of #$NorthCarolina-State; Xiamen (Amoy) is a #$cityInState of Fujian.")))

(defrelation city-of-address
  :arity 2
  :is-primitive object-found-in-location
  :domain Contact-Location
  :range City
  :annotations (Functional-Slot
                (documentation "(#$cityOfAddress LOC CITY) means that the #$ContactLocation LOC is located in the #$City CITY.  For example, #$Cycorp's #$cityOfAddress is the #$CityOfAustinTX.  See also #$ContactLocation.")))

(defrelation clients
  :arity 2
  :is-primitive positive-vested-interest
  :domain Agent
  :range Agent
  :annotations (Irreflexive-Binary-Predicate
                (documentation "The predicate #$clients represents a relationship between two #$Agents.  (#$clients AGENT1 AGENT2) means that AGENT1 provides goods and/or services to AGENT2.  AGENT2 may or may not pay AGENT1 for the goods/services received.  The predicate #$clients can indicate either a one-time relationship or a more long-term relationship.  See also #$suppliers and #$customers.")))

(defrelation cloudiness-of-region
  :arity 2
  :is-primitive has-attributes
  :domain Outdoor-Location
  :range Cloudiness
  :annotations (Interval-Based-Quantity-Slot
                (documentation "(#$cloudinessOfRegion LOC DEGREE) means that the #$OutdoorLocation LOC has this DEGREE of cloud cover.")))

(defrelation co-extensional
  :arity 2
  :domain Cyc_Collection
  :range Cyc_Collection
  :annotations (Transitive-Binary-Predicate
                Reflexive-Binary-Predicate
                Symmetric-Binary-Predicate
                (documentation "the sets v1 which are such that ( x (u instances) (isa x v1))")))

(defrelation cohabitants
  :arity 2
  :is-primitive (:and cotemporal acquainted-with)
  :domain Animal
  :range Animal
  :annotations (Symmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                Cotemporal-Objects-Slot
                (documentation "(#$cohabitants X Y) means that X and Y live together in the same dwelling structure, nest, etc.  
Note: in some contexts (in the real Cyc knowledge base) the arguments to this predicate are restricted to being #$Persons.
Note: in many parts of the world, esp. in past centuries, people cohabit (have cohabitetd) with domesticated animals that are/were not pets.")))

(defrelation cohabiting-family-members
  :arity 2
  :is-primitive (:and positive-vested-interest cohabitants relatives)
  :domain Animal
  :range Animal
  :annotations (Symmetric-Binary-Predicate
                Family-Relation-Slot
                Irreflexive-Binary-Predicate
                (documentation "(#$cohabitingFamilyMembers X Y) means that X and Y are family members (relatives, spouses, in-laws) living with one another.  If the members of a family no longer live together, they are still members of a #$Family-SocialEntity, but they are no longer members of the same #$FamilyCohabitationUnit.
Note: In the #$HumanSocialLifeMt context, X and Y must be #$Persons.  In the #$NaiveBiologicalDescentMt context, they can be any #$Animals at all.")))

(defrelation cohesiveness-of-object
  :arity 2
  :domain Partially-Tangible
  :range Cohesiveness
  :annotations (Physical-Attribute-Description-Slot
                Tangible-Object-Predicate
                Interval-Based-Quantity-Slot
                (documentation "(#$cohesivenessOfObject OBJ DEGREE) indicates how tightly a tangible object OBJ coheres.  A higher value of DEGREE means that it is harder to separate away chunks from the object.")))

(defrelation color-of-object
  :arity 2
  :is-primitive has-attributes
  :domain Partially-Tangible
  :range Color
  :annotations (Physical-Attribute-Description-Slot
                Tangible-Object-Predicate
                (documentation "(#$colorOfObject OBJ COLOR) means that a significant fraction of some visible part of the tangible object OBJ has the #$Color COLOR.")))

(defrelation comment
  :arity 2
  :domain (:and Cyc-Indexed-Term Cyc_Thing)
  :range (:and Cyc-System-String Character-String Cyc-System-Atom)
  :annotations (Binary-Predicate
                Meta-Knowledge-Predicate
                Functional-Slot
                (documentation "#$comment is a predicate belonging to the Cyc collection #$DocumentationConstant.  #$comment is used to relate Cyc constants to (usually) brief English explanations of their meaning and use, as an aid to humans browsing through the Cyc Knowledge Base.  (#$comment CONST STRING) means that STRING is an instance of #$CycSystemString that contains an explanation of the Cyc constant CONST.  Example: what you are reading now.")))

(defrelation commits-for-future-uses
  :arity 2
  :is-primitive pre-actors
  :domain Event
  :range Partially-Tangible
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$commitsForFutureUses EVENT OBJECT) means that as a result of EVENT, OBJECT is subsequently put into a configuration and/or a form where it is serving some ongoing #$Role.  Things which are re-usable in their typical uses: a videocassette, a battery, a brick, an artist's canvas, a canvas tent.  Non-reusable things: paint, glue, mortar.  See also #$inputsCommitted, #$recyclableActors.   Consider a brick in a wall in a building.  It is `committed for future use' in the role of part-of-a-wall in the event of that building existing.  While the building is standing, it can't be part-of-a-wall in another building, though it could serve other roles such as an artistic accent, or to anchor a coat-hook.  After the building is torn down, that brick might still be intact, and could be used as part-of-a-wall in a future building.  Notice that the brick isn't necessarily transformed by being part of a wall.  However, so long as OBJECT serves the use to which it is `assigned' by EVENT, OBJECT is unavailable to be assigned the same #$Role by another event of the same type, at least an event that would temporally intersect with this committed use of OBJECT.  That is what is meant by it being `committed' for a particular future use.  An object may be re-used in a similar event, ONLY IF the #$Role to which it was assigned in EVENT either comes to its natural end or is given up (or thwarted), or in cases where EVENT is composed of discontinous pieces of time --- to illustrate that latter case, consider a tent that's used to shelter a certain group of workers on weekdays, but is used to shelter a different group in a different location on weekends.")))

(defrelation communication-target
  :arity 2
  :is-primitive pre-actors
  :domain Communication-Act--Single
  :range Partially-Tangible
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "The predicate #$communicationTarget is used to indicate the intended recipient in a communication.  (#$communicationTarget COMM OBJ) means that the agent who originates the #$CommunicationAct-Single COM intends the #$recipientOfInfo to be OBJ.  Normally, OBJ is an instance of #$Agent.")))

(defrelation communication-token
  :arity 2
  :domain Communicating
  :range Information-Bearing-Thing
  :annotations (Cyc_Role
                Binary-Predicate
                (documentation "The predicate #$communicationToken is used to indicate the particular IBT (i.e., element of #$InformationBearingThing) that is instrumental in a particular communication.  (#$communicationToken COM IBT) means that IBT is an #$InformationBearingThing that carries the information transferred in the #$Communicating COM.  A communication event transfers the information content of IBT from one agent to some other(s).  IBT may be a tangible object (e.g., a newspaper), a sound (e.g., a voice), an image (e.g., from a television broadcast), or even a touch (e.g., a staying hand).")))

(defrelation competing-agents
  :arity 2
  :is-primitive social-participants
  :domain Competition
  :range Agent
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$competingAgents COMPETITN AGT) means that the #$Agent AGT is a competitor in the contest or competition COMPETITN.  This excludes many participants of such events, such as referees, judges, and spectators.")))

(defrelation compressibility-of-object
  :arity 2
  :domain Partially-Tangible
  :range Compressibility
  :annotations (Interval-Based-Quantity-Slot
                Tangible-Object-Predicate
                Physical-Attribute-Description-Slot
                (documentation "(#$compressibilityOfObject OBJ DEGREE) indicates how readily the tangible object OBJ can be compressed to a smaller volume.  The higher the DEGREE of compressibility, the more easily the object can be compressed to a smaller volume.  A related concept is #$elasticityOfObject.")))

(defrelation connected-by-path-type
  :arity 3
  :domains (Cyc_Thing Partially-Tangible)
  :range Partially-Tangible
  :annotations (Spatial-Predicate
                Ternary-Predicate
                (documentation "(#$connectedByPathType PATHTYPE THING1 THING2) means that there is some path of PATHTYPE links connecting THING1 and THING2, where PATHTYPE is some type of linking object that can link two things, like a road, wire, tie-rod, tube, nerve, rope, etc.  This means that the two are connected somehow by one or more paths consisting of links of type PATHTYPE, and that there is no permanent barrier or gap preventing all forms of access along all of those paths.")))

(defrelation connected-to
  :arity 2
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Reflexive-Binary-Predicate
                Connection-Predicate
                Spatial-Predicate
                Symmetric-Binary-Predicate
                (documentation "(#$connectedTo OBJ1 OBJ2) means that OBJ1 and OBJ2 are configured in a way that allows only certain types of relative motion between them.  A hinged connection, for example, allows limited rotational motion between OBJ1 and OBJ2.  OBJ2 at least must be in a #$SolidStateOfMatter.  In many cases, being #$connectedTo implicitly involves a third object; e.g., a door frame that is #$connectedTo a door by a separate piece, a door hinge.")))

(defrelation connected-to--rigidly
  :arity 2
  :is-primitive (:and connected-to touches-directly)
  :domain Solid-Tangible-Thing
  :range Solid-Tangible-Thing
  :annotations (Symmetric-Binary-Predicate
                Connection-Predicate
                Spatial-Predicate
                Inter-Existing-Object-Slot
                (documentation "(#$connectedTo-Rigidly OBJ1 OBJ2) means that OBJ1 and OBJ2 are joined so that no relative motion between them can occur unless the connection is severed by breakage of some part of the connected objects or by disassembly of the connection.  Both of the connected objects are solid.")))

(defrelation connected-to--semi-rigidly
  :arity 2
  :is-primitive connected-to
  :domain Solid-Tangible-Thing
  :range Solid-Tangible-Thing
  :annotations (Spatial-Predicate
                Inter-Existing-Object-Slot
                Connection-Predicate
                Symmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$connectedTo-SemiRigidly OBJ1 OBJ2) means that there is a physical connection between OBJ1 and OBJ2 such that due to the flexibility of a connector, OBJ1, or OBJ2, limited movement around the point of connection is possible.  Positive exemplars include a book flap hinged to the spine of a book (see #$flapHingedTo), the #$GallBladder's attachment to the #$Liver.  Negative exemplars include a wheel and axle or a door hinged to a door frame because the degrees of freedom of the object arise out of geometrical/mechanical properties of the objects and their connectors, not out of the flexibity of said objects.  Note that all flexible connections have a limit to their relative motion.  An extreme example of such a limit is in the connection between a propeller and the fuselage of a rubber band powered airplane.")))

(defrelation connotes
  :arity 3
  :domains ((:and Spatial-Thing Individual) Cyc_Thing)
  :range Generic-Attribute
  :annotations (Ternary-Predicate
                Cotemporal-Predicate
                (documentation "(#$connotes OBJ-1 OBJ-2 DEGREE) means that as a consequence of perceiving one thing (OBJ-1), a typical sane intelligent perceiving agent would likely think of another thing (OBJ-2) with a strength of association indicated by DEGREE.  E.g., (#$connotes #$GermanNaziParty #$Prejudice #$High), (#$connotes #$Lenat #$Cyc #$High).  This predicate is sometimes symmetric, but often not.")))

(defrelation constituents
  :arity 2
  :is-primitive (:and physical-decompositions cotemporal)
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Cotemporal-Objects-Slot
                Transitive-Binary-Predicate
                Reflexive-Binary-Predicate
                Anti-Symmetric-Binary-Predicate
                Composition-Predicate
                (documentation "The predicate #$constituents is used to indicate a particular #$PartiallyTangible which makes up another (possibly non-distinct) #$PartiallyTangible thing.  (#$constituents WHL PART) means that the individual object WHL is partially constituted by PART, and PART is more or less uniformly distributed in WHL.  For example, the two teaspoons of chocolate syrup that I put in my milk become #$constituents of my glass of chocolate milk.  Note that #$constituents does not entail any special kind of association or bond among the constituents of a thing; they might be simply mixed, they might be chemically bonded, and they might be part of some complex structure.")))

(defrelation constraining-object
  :arity 2
  :is-primitive (:and pre-actors post-actors)
  :domain Movement-Event
  :range Partially-Tangible
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$constrainingObject MOTION OBJ) means that OBJ physically constrains the motion of some #$objectMoving in the #$MovementEvent MOTION.  The #$constrainingObject necessarily #$touches the #$objectMoving during at least part of MOTION.  Examples of #$constrainingObjects include: an axle constraining a wheel turning, a car or other #$transporter carrying passengers, and a railroad track guiding a train.  As these examples show, a #$constrainingObject may or may not be moving.  A road driven on by a car is a marginally negative example of a #$constrainingObject, because the car can drive off the road, though the road does facilitate its motion.")))

(defrelation consumes-portion
  :arity 2
  :is-primitive object-acted-on
  :domain Event
  :range Partially-Tangible
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                (documentation "(#$consumesPortion ?EV ?OBJ) means that a portion of the object ?OBJ is used up (consumed) in the event ?EV.  However, enough of ?OBJ remains at the end of ?EV for it to maintain its identity.  Thus #$consumesPortion would be appropriate for an apple that has a bite taken out of it in an eating event, but not for an apple that has been eaten to its core, since the latter is no longer an apple.")))

(defrelation contains-cavity
  :arity 2
  :is-primitive (:and physical-decompositions cotemporal)
  :domain Partially-Tangible
  :range Cavity
  :annotations (Cotemporal-Objects-Slot
                Physical-Part-Predicate
                Functional-Slot
                (documentation "(containsCavity OBJ CAV) means that the object OBJ contains the #$Cavity CAV somewhere in it or on its surface.  The cavity of a container could be, e.g., the interior of a box with its walls.")))

(defrelation contains-information
  :arity 2
  :domain Information-Bearing-Thing
  :range Abstract-Information
  :annotations (Non-Physical-Part-Predicate
                Inter-Existing-Object-Slot
                (documentation "(#$containsInformation ?IBT ?INFO) means that ?INFO is part of the information content of the #$InformationBearingThing, ?IBT.")))

(defrelation contains-portals
  :arity 2
  :is-primitive (:and contains-cavity physical-parts cotemporal)
  :domain Partially-Tangible
  :range (:and Partially-Tangible Portal)
  :annotations (Physical-Part-Predicate
                Cotemporal-Objects-Slot
                (documentation "The portals of this container.")))

(defrelation contiguous-after
  :arity 2
  :is-primitive starts-after-ending-of
  :domain Temporal-Thing
  :range Temporal-Thing
  :annotations (Anti-Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Complex-Temporal-Relation
                Irreflexive-Binary-Predicate
                (documentation "(#$contiguousAfter AFTER BEFORE) means that AFTER starts immediately following BEFORE.  The two events have no time points in common, but there is no time point between them --- i.e., between the ending of the first one (BEFORE) and the starting of the second one (AFTER).  E.g., one can use this predicate to state an axiom that adolescence is #$contiguousAfter childhood.

Note:  This Cyc temporal relation is similar, but not equivalent to, what James Allen independently dubbed the METBY relation.")))

(defrelation continuously-connected-to
  :arity 2
  :is-primitive touches-directly
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Cotemporal-Objects-Slot
                Symmetric-Binary-Predicate
                Shape-Describing-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(continuouslyConnectedTo OBJ1 OBJ2) means that OBJ1 and OBJ2 are #$PartiallyTangibles which are are directly and almost seamlessly connected (e.g. they are formed from the same chunk of material, with no substantial barrier or surface or gap separating them.).")))

(defrelation contrary-feelings
  :arity 2
  :is-primitive contrasted-feelings
  :domain (:and Feeling-Attribute-Type
                (:filled-by superrelations Feeling-Attribute))
  :range (:and Feeling-Attribute-Type
               (:filled-by superrelations Feeling-Attribute))
  :annotations (Anti-Transitive-Binary-Predicate
                Intensional-Representation-Predicate
                Functional-Slot
                Symmetric-Binary-Predicate
                (documentation "(#$contraryFeelings EMOTYPE CONTTYPE) means that a feeling of the type EMOTYPE is contrary to a feeling of the type CONTTYPE.  One feeling is contrary to another if they are opposed in almost all their components.  See also #$contrastedFeelings.  It would be very rare for someone to feel both an EMOTYPE and CONTTYPE at the same time, especially about the same thing/event/situation.  E.g., (#$contraryFeelings #$Gloominess #$Cheerfulness), (#$contraryFeelings #$Respect #$Contempt), (#$contraryFeelings #$Shame #$Pride), and so on.")))

(defrelation contrasted-feelings
  :arity 2
  :domain (:and Feeling-Attribute-Type
                (:filled-by superrelations Feeling-Attribute))
  :range (:and Feeling-Attribute-Type
               (:filled-by superrelations Feeling-Attribute))
  :annotations (Symmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                Intensional-Representation-Predicate
                (documentation "(#$contrastedFeelings EMOTYPE CONTTYPE) means that a feeling of the type EMOTYPE differs in enough components from a feeling of the type CONTTYPE that it is unlikely (but not virtually impossible, as in the case of #$contraryFeelings) that someone would simultaneously experience feelings of both types EMOTYPE and CONTTYPE, especially with respect to the same object. E.g., (#$contrastedFeelings #$Pride #$Remorse),  (#$contrastedFeelings #$Abhorrence #$Respect), (#$contrastedFeelings #$Entertained-Emotion #$Panic), etc.  That last assertion expresses the rule of thumb that one does not often feel both entertained and panicy at the same time, though those two emotions are clearly not each other's `opposite' by any means.")))

(defrelation contrastive--rst
  :arity 2
  :domain Linguistic-Object
  :range Linguistic-Object
  :annotations (Symmetric-Binary-Predicate
                Rst-Relation
                (documentation "The discourse relation that holds between two segments of text when ARG1 and ARG2 are presented as being similar in many ways but contrasting in ways the speaker wants to point out.")))

(defrelation controls
  :arity 2
  :is-primitive (:and positive-vested-interest cotemporal)
  :domain Agent
  :range Individual
  :annotations (Cotemporal-Objects-Slot
                (documentation "(#$controls X Y) represents that assertion that agent X controls the object Y, in one of the following 2 senses:  X can influence (prohibit, enable or constrain) the behavior of Y; or else X can at least influence (prohibit, enable or constrain) the behavior of other #$Agents in/concerning Y.  For example, Fred may control his horse directly, forcing it to do things, or not do them; and he also could control the horse indirectly, by deciding who else has access to and use of that horse.  Control of one agent over another agent is rarely total, of course, so this predicate is most likely to apply to a Y which is a non-living possession, and/or to apply in a very narrow context.  X's control over Y is usually either actual (de facto) control or legal (de jure) control.  It is usually #$cotemporal, meaning that some time slice of X controls the same temporal time slice of Y.")))

(defrelation convex-hull-fn
  :arity 2
  :domain Spatial-Thing
  :range Surface--Abstract
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "(ConvexHullFn OBJECT) is a function applied to a #$SpatialThing (which may be a single object or a #$Group of several unconnected objects) and returns the surface that is the convex hull of the object or objects.  The convex hull encloses, precisely, all of OBJECT and all space that lies on a straight line between any two points that are parts of OBJECT.  The convex hull is a surface; see also #$ConvexHullSpaceFn.")))

(defrelation convex-hull-space-fn
  :arity 2
  :domain Spatial-Thing
  :range Spatial-Thing
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "(ConvexHullSpaceFn OBJECT) is a function applied to a #$SpatialThing (which may be a single object or a #$Group of several unconnected objects) and returns the spatial region that is enclosed by the convex hull of the object or objects.  The convex hull encloses, precisely, all space that lies on a straight line between any two points that are parts of OBJECT.  The enclosed space is three or two dimensional and is not necessarily the hull surface itself; see also #$ConvexHullFn.")))

(defrelation conveyor--stationary
  :arity 2
  :is-primitive instrument--generic
  :domain Transportation-Event
  :range Tangible-Thing
  :annotations (Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "(conveyor-Stationary ?TRAN ?CONV) means that in the transportation event ?TRAN, ?CONV is a conveyor just like a transporter except it does not move together with the transportee along the path of the transportation.  For example, a river can move aboat from a location to another, and a conveyor belt can move some objects from one place to another, without itself moving with them inthe literal sense, i.e., the river does not change its location(though some pieces of water in the river do) together with the boat, nor does the conveyor belt move with the objects on it from place to place (though some parts of it do).")))

(defrelation cost
  :arity 2
  :domain Individual
  :range Money
  :annotations (Interval-Based-Quantity-Slot
                (documentation "(#$cost OBJECT MONEY) means that buying OBJECT costs the amount MONEY, where this amount can be an interval.  The #$cost of something is time- and seller-dependent.  For example, the cost of a particular mansion Grey Gables is US$800,000 in an actual sale, or when offered for sale; #$cost does not refer to appraised value.")))

(defrelation cost-per-quantity
  :arity 4
  :domains ((:and Stuff-Type Product-Type (:filled-by superrelations Product))
            Physical-Amount-Slot
            Scalar-Interval)
  :range Money
  :annotations (Quaternary-Predicate
                (documentation "The predicate #$costPerQuantity gives the price for a measured amount of some type of stuff.  (#$costPerQuantity STUFF UNITS QUANTITY PRICE) means that this kind of STUFF costs PRICE for each QUANTITY of UNITS.  For example, #$Milk, as measured by volume (i.e., by the predicate #$volumeOfObject), costs about US $3 per gallon.")))

(defrelation cotemporal
  :arity 2
  :is-primitive (:and temporal-bounds-identical temporally-subsumes)
  :domain Temporal-Thing
  :range Temporal-Thing
  :annotations (Transitive-Binary-Predicate
                Complex-Temporal-Relation
                Symmetric-Binary-Predicate
                Reflexive-Binary-Predicate
                (documentation "(#$cotemporal X Y) means that X and Y have the exact same temporal extent.  This is a much stronger relation than #$temporalBoundsIdentical (q.v.).







Note:  Cyc's #$cotemporal relation is equivalent to what James Allen independently dubbed the EQUALS relation.")))

(defrelation cotemporal-sub-events
  :arity 2
  :is-primitive (:and sub-events cotemporal)
  :domain Event
  :range Event
  :annotations (Sub-Process-Slot
                Transitive-Binary-Predicate
                (documentation "The Cyc predicate #$cotemporalSubEvents is used to relate an event to some sub-portion of the event which has the same duration as the whole event but doesn't include everything that happens.  (#$cotemporalSubEvents WHOLE PART) means that WHOLE and PART are cotemporal events (i.e., they have the same exact duration), and PART is a component of WHOLE.  For example, a particular element of #$RainStorm may have distinguishable #$cotemporalSubEvents for (1) raining and (2) wind blowing.  Or, an instance of swimming #$Backstroke has separable events for (1) kicking and (2) arm motion throughout the swimming.  #$cotemporalSubEvents allows us to identify them and state different things about the distinct processes.  See also #$cotemporal, #$subEvents.")))

(defrelation coulomb
  :annotations (Unit-Of-Measure-No-Prefix
                Unit-Of-Charge
                Mks-Unit-Of-Measure
                Standard-Unit-Of-Measure
                (documentation "This is the basic unit of measure for charge in the metric system and in CYC.")))

(defrelation country-of-address
  :arity 2
  :is-primitive object-found-in-location
  :domain Partially-Tangible
  :range Country
  :annotations (Functional-Slot
                (documentation "(#$countryOfAddress LOC COUNTRY) means that the #$ContactLocation LOC is located in the #$Country COUNTRY.  For example, #$Cycorp's #$countryOfAddress is the #$UnitedStatesOfAmerica.  See also #$ContactLocation.")))

(defrelation covering
  :arity 2
  :domain Set-Or-Collection
  :range Set-Or-Collection
  :annotations (Taxonomic-Slot
                (documentation "(#$covering SETORCOL COVER) means that the mathematical set or collection COVER is a covering of the mathematical set or collection SETORCOL -- that is, the elements of COVER are themselves mathematical sets or collections, and every element of SETORCOL is an element of at least one of the elements of COVER.  For example, the Linnaean taxonomy of types of living things (Dog, Mammal, Chordate, Fungus, etc.) is a covering of the set of all animals alive today.  Every animal alive today is a member of one or more of the Linnaean categories.  A covering set or collection COVER may contain `extra' elements, which are not members of SETORCOL.  For example, the union of all the Linnaean categories (see #$OrganismClassificationType) is actually much larger than the set of animals alive today, encompassing plants, extinct animal species, etc.  In order to express an assertion about covering, one need not create a new constant from scratch to play the role of COVER if such a constant doesn't already exist.  Instead, one can specify a covering set by enumerating its elements, using the function #$TheCovering.  (This is a special #$ReifiableFunction whose principal reason-for-being is to facilitate the inference heuristics associated with assertions about covering.)")))

(defrelation covers--baglike
  :arity 2
  :is-primitive (:and touches surrounds-completely)
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Spatial-Predicate
                Transitive-Binary-Predicate
                Cotemporal-Objects-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$covers-Baglike WRAP OBJECT) means that WRAP covers OBJECT as a continuous sheet wrapping wholly around object.  WRAP #$touches OBJECT, so there is nothing greater than a sheet thickness separating them.  OBJECT is totally enclosed in WRAP.")))

(defrelation covers--hairlike
  :arity 2
  :is-primitive cotemporal
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Spatial-Predicate
                Irreflexive-Binary-Predicate
                Cotemporal-Objects-Slot
                (documentation "(#$covers-Hairlike HAIR OBJECT) means that HAIR consists of a mob of things that are embedded close together in OBJECT and cover some portion of its surface.  See also #$Mob.")))

(defrelation covers--paintlike
  :arity 2
  :is-primitive (:and cotemporal touches)
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Spatial-Predicate
                Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Cotemporal-Objects-Slot
                (documentation "(covers-Paintlike COATING OBJECT) means that COATING adheres to and covers OBJECT like a coat of paint. COATING touchesDirectly onto OBJECT. COATING may be either dry (e.g., dried paint) or liquid (e.g., lubricant spread on a surface, like cooking oil on a baking pan). Like paint, COATING isn't more cohesive with itself thanit is with OBJECT, so (if dry) it would tend to peel or flake off in small pieces, rather than as a whole.")))

(defrelation covers--ruglike
  :arity 2
  :is-primitive cotemporal
  :domain Solid-Tangible-Thing
  :range Partially-Tangible
  :annotations (Spatial-Predicate
                Irreflexive-Binary-Predicate
                Cotemporal-Objects-Slot
                (documentation "(#$covers-Ruglike MAT OBJECT) means that MAT covers at least part of one surface of OBJECT.  MAT is #$SheetShaped, and MAT lies with its two longer dimensions parallel to OBJECT.  See also #$coversWithConformity.")))

(defrelation covers--skinlike
  :arity 2
  :is-primitive (:and cotemporal touches)
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Spatial-Predicate
                Functional-Slot
                Asymmetric-Binary-Predicate
                Anti-Transitive-Binary-Predicate
                Cotemporal-Objects-Slot
                (documentation "(#$covers-Skinlike SKIN OBJECT) means that SKIN forms all or part of OBJECT's outer surface, shell, or skin.  The predicate is agnostic as to whether SKIN is a part of OBJECT.")))

(defrelation covers-with-conformity
  :arity 3
  :domains (Solid-Tangible-Thing Sheet-Of-Some-Stuff)
  :range Generic-Attribute
  :annotations (Functional-Predicate
                Ternary-Predicate
                Spatial-Predicate
                (documentation "(#$coversWithConformity OBJ SHEET LEVEL) means that OBJ is covered by SHEET, and SHEET conforms to the surface features of OBJ to the degree LEVEL.  SHEET may cover OBJ in either the sense of #$covers-Ruglike or #$covers-Baglike.  For example, hosiery covers legs with a #$High degree of conformity; sweat pants have #$Low conformity to legs.")))

(defrelation cubic-centimeter
  :annotations (Cgs-Unit-Of-Measure
                Unit-Of-Measure-No-Prefix
                Unit-Of-Volume
                (documentation "The measurement function used in Cyc to represent the Metric cc, a unit of measure for volume.  See also #$CGSUnitOfMeasure, #$UnitOfMeasure.")))

(defrelation customers
  :arity 2
  :is-primitive (:and cotemporal clients does-business-with)
  :domain Agent
  :range Agent
  :annotations (Irreflexive-Binary-Predicate
                Cotemporal-Objects-Slot
                (documentation "The predicate #$customers represents a relationship between two #$Agents.  (#$customers AGENT1 AGENT2) means AGENT1 sells goods and/or services to AGENT2.  AGENT2 must actually buy something from AGENT1 in order to be one of AGENT1's #$customers.  (Thus, #$customers has a narrower meaning than `customer' in colloquial English, which includes potential buyers.)  See also #$clients.  Cf. #$buyingAgent (in a particular sales event). ")))

(defrelation cycle-in-system
  :arity 2
  :domain Path--Generic
  :range Cyc_Thing
  :annotations (Asymmetric-Binary-Predicate
                (documentation "(#$cycleInSystem CYCLE SYS) means that CYCLE is a cycle in the path system SYS.  A cycle in SYS is either a loop in SYS or the concatenation of two different paths PATH1 and PATH2 in SYS satisfying (i) there are two points X and Y in SYS such that (#$pathBetweenInSystem PATH1 X Y SYS) and (#$pathBetweenInSystem PATH2 X Y SYS), and (ii) no point in SYS other than X and Y is on both PATH1 and PATH2.")))

(defrelation cyclist-notes
  :arity 2
  :domain Cyc-Indexed-Term
  :range Cyc-System-String
  :annotations (Binary-Predicate
                Distributing-Meta-Knowledge-Predicate
                (documentation "(#$cyclistNotes X S) means that S is a string of text that usually conveys a message useful to others involved in building the Cyc KB.  This might include warnings ('don't use this!'), plans for future expansion or changes, etc.")))

(defrelation cylinder-fn
  :arity 3
  :domains (Distance Distance)
  :range (:and Abstract-Shape Three-Dimensional-Shape)
  :annotations (Shape-Function
                (documentation "The Cyc function #$CylinderFn is a #$ShapeFunction (q.v.).  (#$CylinderFn L D) that returns an abstract cylinder of length L and diameter D.  For example, a particular beer mug #$canContainShapes (#$CylinderFn (#$Inch 10) (#$Inch 5)).")))

(defrelation daily-high-temperature
  :arity 2
  :domain Geographical-Region
  :range Temperature
  :annotations (Interval-Based-Quantity-Slot
                (documentation "(#$dailyHighTemperature PLACE TEMP) means that the #$Temperature TEMP is the high temperature for a day at the #$GeographicalRegion PLACE.  #$dailyHighTemperature is typically used for a specified period of time (e.g., a particular day or a specific season); it may be used with generic temperature ranges as well as precise temperatures.  Examples: using #$holdsIn, we can say that Austin's temperature for 7/20/96 is 102 degrees Fahrenheit; or we can say that for any #$SummerSeason, Austin's [typical] #$dailyHighTemperature is #$VeryHot.")))

(defrelation daily-low-temperature
  :arity 2
  :domain Geographical-Region
  :range Temperature
  :annotations (Interval-Based-Quantity-Slot
                (documentation "(#$dailyLowTemperature PLACE TEMP) means that the #$Temperature TEMP is the low temperature for a day at the #$GeographicalRegion PLACE.  #$dailyLowTemperature is typically used for a specified period of time (e.g., a particular day or a specific season); it may be used with generic temperature ranges as well as precise temperatures.")))

(defrelation damages
  :arity 2
  :is-primitive (:and maleficiary object-acted-on)
  :domain Event
  :range Something-Existing
  :annotations (Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "(#$damages EV OBJ) means that OBJ is acted on in EV in such a way as to end up damaged.  Destruction is considered an extreme form of damage.")))

(defrelation date-after-fn
  :arity 3
  :domains (Date Time--Quantity)
  :range Date
  :annotations (Non-Predicate-Function
                Evaluatable-Function
                (documentation "Like #$PlusFn, but for #$Dates.  (#$DateAfterFn ?DATE ?DUR) returns a #$Date which is ?DUR amount of time after ?DATE.  For example, (#$DateAfterFn (#$YearFn 1950) (#$YearsDuration 10)) returns (#$YearFn 1960).  See also #$DateBeforeFn, #$TimeElapsedFn.")))

(defrelation date-before-fn
  :arity 3
  :domains (Date Time--Quantity)
  :range Date
  :annotations (Non-Predicate-Function
                Evaluatable-Function
                (documentation "Like #$DifferenceFn, but for #$Dates.  (#$DateBeforeFn ?DATE ?DUR) returns a #$Date which is ?DUR amount of time before ?DATE.  For example, (#$DateBeforeFn (#$YearFn 1999) (#$YearsDuration 1)) returns (#$YearFn 1998).   See also #$DateAfterFn, #$TimeElapsedFn.")))

(defrelation date-of-death
  :arity 2
  :is-primitive ending-date
  :domain Entity
  :range Date
  :annotations (Binary-Predicate
                (documentation "(#$dateOfDeath ?X ?Y) indicates that the #$Entity ?X ceased to exist during #$Date ?Y. For people, this is the date at which they died, hence the name of the predicate.  The first argument to this predicate must be an #$Entity, and not just any old #$SomethingExisting, because we don't want to talk about the #$birthDate or #$dateOfDeath of a subabstraction like AlbertEinsteinWhileAtPrinceton; in other words, proper subabstractions will have #$startingDates and #$endingDates, but only true #$Entitys will have a #$birthDate or #$dateOfDeath")))

(defrelation day-fn
  :arity 3
  :domains (Positive-Integer Calendar-Month)
  :range Calendar-Day
  :annotations (Non-Predicate-Function
                Individual-Denoting-Function
                (documentation "(#$DayFn ?D ?MNTH) denotes a #$CalendarDay -- in particular, the day number ?D of month ?MNTH.  For example, (#$DayFn 14 (#$MonthFn #$February (#$YearFn 1966))) denotes Feb. 14th, 1966")))

(defrelation days-duration
  :annotations (Unit-Of-Measure
                Unit-Of-Measure-No-Prefix
                Unit-Of-Time
                (documentation "This is a function that takes one or two numbers and returns, as its value, some amount of #$Time.  An expression of the form (#$DaysDuration ?min ?max) denotes a quantity of #$Time that is at least ?min Days and at most ?max Days.  (#$DaysDuration ?num) denotes a quantity of #$Time that is exactly ?num days.")))

(defrelation dead-end-in-system
  :arity 2
  :is-primitive point-in-system
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Asymmetric-Binary-Predicate
                (documentation "(#$deadEndInSystem END SYS) means that END is a dead-end node in the specified #$PathSystem SYS.  A node X in SYS is a dead-end node in SYS if there is exactly one link LINK in SYS that END is on and END is not on any loop in SYS.  One easy way to illustrate a deadend X in SYS is to picture it as a node with only one path (possibly very 'short') in the system through which one can approach or leave X.  Note that no totally isolated node in SYS can be a deadend in SYS, neither can any point in SYS that is on a loop in SYS.  If there is no specified #$PathSystem in which the path ends, but the ending is a dead end of a #$Path-Customary like a road or wire, then use #$pathTerminus instead.")))

(defrelation dealer-for
  :arity 2
  :domain Retail-Organization
  :range Manufacturing-Organization
  :annotations (Binary-Predicate
                (documentation "The predicate #$dealerFor relates a retailer to the manufacturer(s) whose products are sold by that retailer.  (#$dealerFor RETAILER MANUF) means that the #$RetailOrganization RETAILER is a dealer for products made by the #$ManufacturingOrganization MANUF.  RETAILER may be only one of many dealers.  RETAIL sells MANUF's products to the final consumers.")))

(defrelation defendants
  :arity 2
  :is-primitive litigants
  :domain Trial
  :range Agent
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation " (defendants ARG1 ARG2) means that the agent ARG2 is the accused party in the lawsuit ARG1.")))

(defrelation defn-iff
  :arity 2
  :is-primitive defn-sufficient
  :domain Cyc_Collection
  :range Cyc-System-Symbol
  :annotations (Functional-Slot
                Inference-Related-Bookkeeping-Predicate
                Binary-Predicate
                (documentation "(#$defnIff COL TEST) means that TEST is the name of a piece of code in the Cyc system substrate, and TEST acts as a necessary and sufficient test for inclusion in the #$Collection COL.  If TEST returns T [True] when applied to a particular item, that item is considered an element of COL; all elements of COL must fulfill TEST's requirements.  Cf. #$defnNecessary, #$defnSufficient.")))

(defrelation defn-necessary
  :arity 2
  :domain Cyc_Collection
  :range Cyc-System-Symbol
  :annotations (Binary-Predicate
                (documentation "(#$defnNecessary COL TEST) means that TEST is the name of a piece of code in the Cyc system substrate, and TEST acts as a necessary definition for membership in the Cyc #$Collection COL.   Only if TEST returns T [True] when applied to a particular item can that item be considered an element of COL; all elements of COL must fulfill TEST's requirements, although there may be additional requirements for membership in COL as well.  Cf. #$defnIff and #$defnSufficient.")))

(defrelation defn-sufficient
  :arity 2
  :domain Cyc_Collection
  :range Cyc-System-Symbol
  :annotations (Binary-Predicate
                Inference-Related-Bookkeeping-Predicate
                (documentation "(#$defnSufficient COL TEST) means that TEST is the name of a piece of code in the Cyc system substrate, and TEST acts as a sufficient definition for inclusion in the Cyc #$Collection COL.  If TEST returns T [True] when applied to a particular item, that item is considered an element of COL.  Note that TEST isn't necessarily a necessary test for membership in COL; i.e., not all elements of COL must pass the test, unless TEST is also a #$defnNecessary for COL.  Cf. #$defnNecessary, #$defnIff.")))

(defrelation degree--unit-of-angular-measure
  :annotations (Unit-Of-Measure-No-Prefix
                Unit-Of-Angular-Distance
                (documentation "The basic unit to measure the size of angles, in the Imperial system of measurement.  360 degrees = 1 complete circle")))

(defrelation degree-celsius
  :annotations (Unit-Of-Measure-No-Prefix
                Mks-Unit-Of-Measure
                Unit-Of-Temperature
                (documentation "The standard unit of temperature in much of the world and also in CYC.")))

(defrelation degree-fahrenheit
  :annotations (Unit-Of-Measure-No-Prefix
                Unit-Of-Temperature
                (documentation "The unit of measure on the Fahrenheit scale; mainly used in the USA")))

(defrelation degree-kelvin
  :annotations (Unit-Of-Measure-No-Prefix
                Standard-Unit-Of-Measure
                Unit-Of-Temperature
                (documentation "The unit of measure on the Kelvin or Absolute temperature scale; mainly used in science; note that the size of this unit is equal to the size of a DegreeCentrigrade.")))

(defrelation deliberate-actors
  :arity 2
  :is-primitive pre-actors
  :domain Event
  :range Agent
  :annotations (Actor-Slot
                (documentation "(#$deliberateActors ACT ACTR) means that the #$Agent ACTR is conscious, volitional, purposeful in the event ACT.   ACTR is aware of acting in ACT and chooses to play the role he/she/it has in that event; i.e., ACTR has some purpose in mind.
Note:  If you do something deliberately but you fail, you are still a #$deliberateActors.  For instance, you are a near-sighted doer of #$ShowingSupportForSomeone at a fencing match, and it turns out you were cheering for Fred when you thought you were cheering for Joe; nevertheless, you are still one of the #$deliberateActors in the #$ShowingSupportForSomeone event.
Note: Legal responsibility is a separte issue from `deliberateness.'  Doing something in a fit of rage (e.g. a crime of passion) still involves purpose, volition, and consciousness even if considered for only an instant, and even if the laws and courts find you not guilty.")))

(defrelation denotation
  :arity 4
  :domains (English-Word
            (:and Linguistic-Object-Type
             (:filled-by superrelations Speech-Part))
            Cyc_Integer)
  :range Cyc_Thing
  :annotations (Quaternary-Predicate
                Intangible-Object-Predicate
                (documentation "The predicate #$denotation is used to relate English words to their denotations within the Cyc Knowledge Base.  Some words have multiple denotations associated with different word senses, which may or may not occur in the same parts of speech. (#$denotation WORD PART NUM CONST) means that the denotation of WORD, with part of speech PART and word sense number NUM, is the Cyc constant CONST.  Examples: (1) #$Place-TheWord, an instance of #$EnglishWord, has the denotation #$PuttingSomethingSomewhere when used as a #$Verb with its word sense 0, and the denotation #$Place when used as a #$SimpleNoun with that same word sense; (2) #$Ring-TheWord currently has four #$denotation assertions in the KB: #$EmittingSound (as a #$Verb with its 1st word sense); #$AudibleSound (as a #$SimpleNoun with its 1st word sense); #$RingShape (as a #$SimpleNoun with its 0th word sense); and #$Ring-Jewelry (as a #$SimpleNoun with its 2nd word sense).  Note that #$denotation may reference the results of Cyc functions, as well as Cyc constants; e.g., #$Density-TheWord denotes (#$IntervalMinFn (#$LowAmountFn #$Density)).  See also #$WordSense, #$SpeechPart.")))

(defrelation density-of-object
  :arity 2
  :domain Partially-Tangible
  :range Density
  :annotations (Interval-Based-Quantity-Slot
                Tangible-Object-Predicate
                (documentation "(#$densityOfObject OBJ DENS) means that the tangible thing OBJ has the #$Density DENS.")))

(defrelation desires
  :arity 2
  :domain Intelligent-Agent
  :range Cyc-Formula
  :annotations (Propositional-Attitude-Slot
                (documentation "(#$desires AGT PROP) means that the #$Agent AGT desires that the world be as the proposition PROP (represented by a #$CycFormula) describes it to be.  #$desires is implied by #$goals, but is weaker:  PROP might be some desirable state of affairs that the agent is not actively working, or planning, to make/keep true; e.g., #$WorldPeace.  See also #$goals and #$intends.")))

(defrelation destination--round-trip
  :arity 2
  :is-primitive non-deliberate-actors
  :domain Translation--Round-Trip
  :range Partially-Tangible
  :annotations (Actor-Slot
                (documentation "(#$destination-RoundTrip TRIP PLACE) means that PLACE is the destination (i.e., the #$toLocation) of the OUTBOUND leg of the round-trip event TRIP.  PLACE is where the #$objectMoving in TRIP goes and then returns from.  See also #$origin-RoundTrip, #$Translation-RoundTrip, #$outboundLegOfRoundTrip.")))

(defrelation developer-of-ibt-type
  :arity 2
  :domain Specified-Information-Bearing-Thing-Type
  :range Agent
  :annotations (Binary-Predicate
                Intangible-Object-Predicate
                (documentation "The predicate #$developerOfIBTType relates a specific work to its creator(s).  (#$developerOfIBTType IBTTYPE AGENT) means that AGENT is one of the people, corporations, publishers, etc., responsible for the invention or bringing into being of the #$SpecifiedInformationBearingThingType IBTTYPE, which may be a book, television show, computer program, musical score, etc.  Examples: #$Lenat is a #$developerOfIBTType for the #$CycKB; #$OrsonWelles is a #$developerOfIBTType for #$CitizenKane-TheMovie.")))

(defrelation device-controlled-by
  :arity 2
  :domain Physical-Device
  :range Control-Device
  :annotations (Asymmetric-Binary-Predicate
                Anti-Symmetric-Binary-Predicate
                (documentation "(#$deviceControlledBy DEV CONTROL) means that CONTROL is a #$ControlDevice that controls #$PhysicalDevice DEV.  Most of the time, the controls will be #$physicalParts of the device.  However there are some notable exceptions -- one's TV remote control, for example -- which control a device but are not #$physicalParts of that device.")))

(defrelation device-used
  :arity 2
  :is-primitive instrument--generic
  :domain Event
  :range Physical-Device
  :annotations (Actor-Slot
                (documentation "The predicate #$deviceUsed indicates that a particular device is used in a particular event. (#$deviceUsed EVENT OBJECT) means that the #$PhysicalDevice OBJECT plays an instrumental role in the #$Event EVENT.  (See also #$instrument-Generic.) OBJECT is intentionally used in EVENT, and standardly (e.g., in the #$HumanActivitiesMt) OBJECT's role in EVENT is consistent with the object's #$primaryFunction.")))

(defrelation difference-fn
  :arity 3
  :domains (Scalar-Interval Scalar-Interval)
  :range Scalar-Interval
  :annotations (Evaluatable-Function
                Non-Predicate-Function
                Function-From-Quantities-To-Quantities
                (documentation "#$DifferenceFn is Cyc's subtraction operator; it is a binary mathematical function.  (#$DifferenceFn MINUEND SUBTRAHEND) yields a new quantity that is the result of subtracting SUBTRAHEND from MINUEND.  Both arguments to #$DifferenceFn must be elements of #$ScalarInterval, as is its result.  Examples: (#$DifferenceFn 88 11) returns 77; (#$DifferenceFn (#$Kilogram 4.2) (#$Kilogram 3)) returns (#$Kilogram 1.2).")))

(defrelation different
  :annotations (Commutative-Relation
                Variable-Arity-Relation
                Evaluatable-Function
                Predicate
                (documentation "The variable-arity predicate #$different is used to state the non-identity of two or more objects. (#$different X1 X2 ... Xn) means that each Xi given as an argument is not equal to any of the other Xi's.  #$different is an element of #$EvaluatableFunction (q.v.).  See also #$equals.



#$different can be used to simplify formulas when several things need to be tested for mutual inequality.")))

(defrelation different-in-attribute
  :arity 3
  :domains (Cyc_Thing Cyc_Thing)
  :range Attribute-Type
  :annotations (Ternary-Predicate
                (documentation "(#$differentInAttribute THING1 THING2 ATTRIBUTE) means that the two things THING1 and THING2 do not have the same values of the #$AttributeType ATTRIBUTE.  Here 'the same' could mean means complete identity or close resemblance -- what this 'different' means, and what the standard of closeness or identity is, depends on the context, but #$differentInAttribute and #$identicalInAttribute cannot both be correctly asserted of the same two things.  See also #$resemblesInAttribute, and #$differentInAttribute.")))

(defrelation directing-agent
  :arity 2
  :is-primitive deliberate-actors
  :domain Event
  :range Agent
  :annotations (Actor-Slot
                (documentation "(#$directingAgent ACT AGENT) means that AGENT is one of the agents that is in control of or directing ACT, but not necessarily directly performing it.  If, in the event ACT, an agent other than AGENT has the #$performedBy role, then that performer's actions in ACT are directed by AGENT.  For example, (#$directingAgent PSOBicentennialConcertOfBeethovensNinth #WilliamSteinberg) is true, because Steinberg was the conductor of that concert; he directed the many other musicians who performed in that event.  Another case: (#$directingAgent MassacreAtMyLai LtWilliamCalley).  The type of direction implied by #$directingAgent is the kind that can be accomplished by AGENT communicating its desires to the actual performer(s) of ACT.  So, a person would be the #$directingAgent in a clothes-washing event #$doneBy a washing machine ONLY in those contexts in which we can consider the machine an agent, acting intentionally.")))

(defrelation direction--pointing
  :arity 2
  :domain Partially-Tangible
  :range Unit-Vector-Interval
  :annotations (Spatial-Predicate
                Binary-Predicate
                (documentation "(#$direction-Pointing OBJ DIR) means that the intrinsic pointing axis of OBJ points in the direction DIR (which is described using an instance of #$UnitVectorInterval).  Pointing axes may be ascribed to certain objects especially in relation to their function(s); e.g., objects which are intended to indicate direction (e.g., a pointer stick, a compass needle); objects which cause motion in a certain direction (e.g., a gun, a train); objects which are accessed from a certain direction (e.g., cupboards, couches).")))

(defrelation direction-between-objects
  :arity 3
  :domains (Partially-Tangible Partially-Tangible)
  :range Unit-Vector-Interval
  :annotations (Ternary-Predicate
                (documentation "(#$directionBetweenObjects OBJ1 OBJ2 UVI) means that UVI, an element of #$UnitVectorInterval, is a vector or set of vectors which point(s) from a point (or set of points) in OBJ1 to a point (or set of points) in OBJ2.  See also #$VectorFromToFn which is roughly interchangeable with #$directionBetweenObjects.  #$directionBetweenObjects has the advantage that an arbitrarily precise direction may be specified.  #$VectorFromToFn saves the user from doing the labor involved with reifiing and from having to know the direction between OBJ1 and OBJ2.")))

(defrelation direction-of-translation--throughout
  :arity 2
  :domain Movement--Translation-Event
  :range Unit-Vector-Interval
  :annotations (Binary-Predicate
                (documentation "(#$directionOfTranslation-Throughout MOVEMENT DIR) means that the #$objectMoving in the MOVEMENT #$Event translates in the direction DIR throughout MOVEMENT.  In a #$Translation-MultiPath event, where there are several objects moving and following different pathways, this means that at least one of those objects moves in direction DIR.
Note: It may turn out, in the future, to be worth creating a ternary version of this, which specifies which direction each particular #$objectMoving moves in.")))

(defrelation dirtiness-of-object
  :arity 2
  :domain Partially-Tangible
  :range Dirtiness
  :annotations (Interval-Based-Quantity-Slot
                (documentation "(#$dirtinessOfObject OBJ DEGREE) means that the tangible object OBJ has this DEGREE of #$Dirtiness.")))

(defrelation disjoint-with
  :arity 2
  :domain Set-Or-Collection
  :range Set-Or-Collection
  :annotations (Rule-Macro-Predicate
                Taxonomic-Slot
                Default-Monotonic-Predicate
                Symmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$disjointWith SETORCOL1 SETORCOL2) means that the mathematical set or collection SETORCOL1 is disjoint with the mathematical set or collection SETORCOL2 -- that is, the two have no elements in common.")))

(defrelation dislikes-object
  :arity 2
  :domain Agent
  :range Partially-Tangible
  :annotations (Binary-Predicate
                (documentation "(#$dislikesObject AGT OBJ) means that AGT feels an emotion of #$Dislike when interacting with OBJ in some way.  See #$likesObject for elaboration.  A specialization of #$dislikesObject is #$dislikesSensorially (qv). ")))

(defrelation dislikes-role-in-activity
  :arity 3
  :domains (Agent Actor-Slot)
  :range Event
  :annotations (Ternary-Predicate
                (documentation "(#$dislikesRoleInActivity AGT ROLE EVT) means that if the #$Agent AGT has the relation ROLE to the #$Event EVT, then AGT is likely to feel #$Dissatisfaction.  This predicate is useful to represent sentences such as `Joe dislikes running' or `Fred disliked receiving the flogging'.")))

(defrelation dislikes-sensorially
  :arity 2
  :is-primitive dislikes-object
  :domain Perceptual-Agent
  :range Sensory-Attribute
  :annotations (Binary-Predicate
                (documentation "(#$dislikesSensorially AGT SENSUM) means that the #$PerceptualAgent AGT feels some physical discomfort from the sensory experience of SENSUM (a taste, an odor, a particular level of pain, etc. --- see #$SensoryAttribute).
Note: this is a stronger statement than (#$not (#$likesSensorially AGT SENSUM)), as there may be many #$SensoryAttributes which one neither particularly likes nor dislikes.")))

(defrelation distance-above-sea-level
  :arity 2
  :domain Geographical-Region
  :range Distance
  :annotations (Interval-Based-Quantity-Slot
                (documentation "(#$distanceAboveSeaLevel REG DIST) means that the altitude above sea level of the #$GeographicalRegion REG is the #$Distance DIST.  For elements of #$Mountain, distance is measured from sea level to the peak; for elements of #$Lake, from the surface to sea level; for cities, from the center of town to sea level.  Examples: (#$distanceAboveSeaLevel #$PikesPeak-Mount (#$Foot-UnitOfMeasure 14110)); (#$distanceAboveSeaLevel #$MountEverest (#$Foot-UnitOfMeasure 29028)); (#$distanceAboveSeaLevel #$MountFuji-Volcano (#$Foot-UnitOfMeasure 12389)); (#$distanceAboveSeaLevel #$LakeHuron (#$Foot-UnitOfMeasure 580)).")))

(defrelation distance-between
  :arity 3
  :domains (Spatial-Thing Spatial-Thing)
  :range Distance
  :annotations (Functional-Predicate
                Ternary-Predicate
                Cotemporal-Predicate
                (documentation "(#$distanceBetween THIS THAT DIST) means that the distance between two things, THIS and THAT, is DIST.  DIST is the length of the shortest straight line which extends from a point on THIS to a point on THAT.  For example, (#$distanceBetween #$LaGuardiaAirport #$NewYorkHiltonAtBroadway (#$Kilometer 12)).  The notion of 'straight line' depends on the context; in a Geography-related context it would be a great circle line on the Earth's surface rather than a true Euclidian straight line going through the Earth.")))

(defrelation distance-of-rotation
  :arity 2
  :domain Movement--Rotation
  :range (:and Scalar-Interval Physical-Attribute)
  :annotations (Cyc_Role
                Binary-Predicate
                (documentation "This predicate indicates, for a particular rotational motion event, the total absolute value of the angular distance travelled by the #$objectMoving in that event.  (#$distanceOfRotation ROT DIST) means that in the event ROT, the #$objectMoving travelled the angular distance DIST.  Note that this is not the same as the net angular displacement of the #$objectMoving, but rather the entire angular distance travelled.  So if you unscrew a jar lid 1/6 of a turn, and later screw it back on, the #$distanceOfRotation is 120 degrees, not zero; and if you spin around ten times, your #$distanceOfRotation is 3600 degrees, not zero.  Angular distance is measured in degrees, radians, etc.")))

(defrelation distance-translated
  :arity 2
  :domain Movement--Translation-Event
  :range Distance
  :annotations (Interval-Based-Quantity-Slot
                Cyc_Role
                (documentation "This predicate relates a translational movement event to the total distance travelled by the #$objectMoving in that event.  (#$distanceTranslated MOVE DIST) means that in the event MOVE, the #$objectMoving covered the distance DIST.  Note that DIST is the actual distance travelled by the object, not merely its net change in position; so if the #$pathway-Complete of MOVE is a round trip a mile each way to the store, the #$distanceTranslated would be 2 miles, not zero.")))

(defrelation does-business-with
  :arity 2
  :is-primitive cotemporal
  :domain Agent
  :range Agent
  :annotations (Cotemporal-Objects-Slot
                Symmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "The predicate #$doesBusinessWith relates two agents who do business with each other.  (#$doesBusinessWith AGENT1 AGENT2) means that AGENT1 does some business with AGENT2.  Minimally, that means the two agents at least occasionally negotiate to buy or sell products or services from one other. The two agents may or may not complete the sales/purchase and enter into actual contracts.")))

(defrelation dollar--united-states
  :annotations (Standard-Unit-Of-Measure
                Unit-Of-Measure-No-Prefix
                Unit-Of-Money
                (documentation "An element of #$UnitOfMoney.  #$Dollar-UnitedStates represents the main standard monetary unit of the United States of America.  One #$Dollar-UnitedStates is equivalent to 100 #$Cent-UnitedStates.  See #$UnitOfMeasure for further explanation.")))

(defrelation dollars-per-hour
  :annotations (Unit-Of-Measure-No-Prefix
                Unit-Of-Monetary-Flow-Rate
                (documentation "An element of #$UnitOfMonetaryFlowRate; the amount of #$Money in dollars earned, spent, or transferred in an hour.")))

(defrelation dollars-per-year
  :annotations (Unit-Of-Measure-No-Prefix
                Unit-Of-Monetary-Flow-Rate
                (documentation "An element of #$UnitOfMonetaryFlowRate; the amount of #$Money in dollars earned, spent, or transferred in a year.")))

(defrelation domain-assumptions
  :arity 2
  :domain Microtheory
  :range Cyc-Formula
  :annotations (Microtheory-Predicate
                Binary-Predicate
                (documentation "(#$domainAssumptions M P) means that the microtheory M has the proposition P as a domain assumption.  See the comment for #$Microtheory for a detailed explanation of what the `assumptions' of a mt are, as opposed to its `content'.  In brief, it means that all the `content' assertions of M assume that P is true.  Another way of thinking of this is that one is `in' context M only if all its domain assumptions are true.  Another way of thinking of this is that the various `content' assertions of M only apply to objects that satisfy all its #$domainAssumptions.  Yes, that means that the `domain of quantifiers' (#$forAll and #$thereExists) is limited to the universe of such objects.  So if it's true in M that (#$forAll ?x Q), and if we lift this axiom to another theory M2 that does not make the domain assumption P, then the axiom becomes (#$forAll ?x (#$implies P Q)).  

Note:  Actually, what becomes true in M2 is slightly more complicated, namely: (#$forAll ?x (#$implies (#$and P1 P2 P3...) Q)), where P1, P2, P3,... are all the domain assumptions of M which are not implied by the domain assumptions of M2.

Note:  Domain assumption propositions --- in this case P --- must have a special format:  P must contain the free variable ?U, and this ?U represents `some term which is talked about in M'.  The idea is that one could have a domain assumption that said `if ?U is a person, ?U must have been born after 1950', or which said `if ?U is the performer of an event, then ?U is a person' etc.  For example:  (#$implies (#$isa ?U #$PhysicalStateChangeEvent) (#$isa ?U #$CreationOrDestructionEvent)) is one of the #$domainAssumptions of the #$NaiveStateChangeMt context.  It says that, in that context, physical state changes of an object (e.g., melting or boiling) are viewed as creations and destructions, in which elements of #$Entity come into or go out of existence, rather than viewing them as events which preserve entityhood.")))

(defrelation done-by
  :arity 2
  :is-primitive (:and actors pre-actors)
  :domain Event
  :range Something-Existing
  :annotations (Actor-Slot
                (documentation "The predicate #$doneBy relates an event to its `doer'.  (#$doneBy EVENT DOER) means that DOER is the `doer' in the event EVENT.  Some action on the part of the doer causes or carries out the event.  This predicate is agnostic as to whether DOER does EVENT intentionally or not (DOER need not even be animate; e.g., the event in which Mount Vesuvius erupted and buried Pompeii was #$doneBy Mount Vesuvius).  See #$performedBy and #$bodilyDoer for the more specific senses of `doer' when DOER is, respectively, an agent (#$Agent) acting deliberately or a biological organism (#$Organism-Whole).")))

(defrelation doorway-has-covering
  :arity 2
  :is-primitive portal-has-covering
  :domain Doorway
  :range Doorway-Covering
  :annotations (Binary-Predicate
                Physical-Part-Predicate
                (documentation "Relates a #$Doorway to the physical covering used to seal it.  The user should be aware that #$Doorway, the designated arg1 for this predicate, is currently constrained to be a physical part of some instance of #$ShelterConstruction.  This is because, in normal English parlance, doorways are the portals through which people pass to get in and out of shelter constructions, and from room to room.  Planes, trains, automobiles, and other vehicles are not conventionally said to have #$Doorways, and if the aim is to assert something about the #$PortalCoverings of a vehicle, #$portalHasCovering would be the appropriate predicate to use.")))

(defrelation driver-actor
  :arity 2
  :is-primitive (:and performed-by transportees)
  :domain Transportation-Event
  :range Person
  :annotations (Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "(#$driverActor DRIVE DRIVER) means that DRIVER controls (see #$ControllingATransporter) the #$transporter in DRIVE.  DRIVER steers the wheel, graps the tiller, controls the throttle, the reins, the brakes etc of the #$transporter, e.g. a boat, train, windsurfer, mule, plane, horse and carriage, spaceship, sled, etc..   DRIVER is not a #$passengers in DRIVE.  Because #$transporter and #$transportees are disjoint and #$driverActor has #$transportees as a #$genlPreds, DRIVER is distinct from the value on #$transporter.  Thus a person walking while carrying a watermelon would not be a #$driverActor in their own walking.  DRIVER is usually in #$SittingPosture during DRIVE.  For any given instant of DRIVE there is exactly one DRIVER.  Until we have more extensive vocabulary, the transportees is the most specific we can be about events in which multiple drivers share driving responsibility throughout the event or if there is a pilot/co-pilot combination.")))

(defrelation drug-therapy-use-fn
  :arity 2
  :domain (:and Existing-Stuff-Type
                (:filled-by superrelations Partially-Tangible))
  :range (:and Script-Type
               Temporal-Stuff-Type
               (:filled-by superrelations Drug-Therapy))
  :annotations (Collection-Denoting-Function
                (documentation "The collection of events in which instances of ARG1 are used to achieve a medical purpose.  These events do not include the administration of the drug - they are the scripts which result from that administration.")))

(defrelation ductility-of-object
  :arity 2
  :domain Solid-Tangible-Thing
  :range Ductility
  :annotations (Interval-Based-Quantity-Slot
                Tangible-Object-Predicate
                (documentation "(#$ductilityOfObject OBJ DEGREE) means that the instance of #$SolidTangibleThing OBJ has this DEGREE of #$Ductility (q.v.).")))

(defrelation duration
  :arity 2
  :domain Temporal-Thing
  :range Time--Quantity
  :annotations (Interval-Based-Quantity-Slot
                (documentation "(#$duration ?X ?Y) means that ?Y is length of time #$TemporalThing ?X happened/existed.  For a continuous #$TemporalThing, this is the same as its #$measure (the elapsed time from start to end.)  But for a discontinuous #$TemporalThing, the #$duration is strictly less than the #$measure.  For example, the #$duration of `the Mondays during May of 1996' is (#$DaysDuration 4), whereas the #$measure of that same temporal object is (#$DaysDuration 22).
Note:  Unfortunately, in some disciplines, such as Real Analysis, these two terms' definitions are switched!  In such contexts, one could assert to Cyc that the preferred denotation of #$duration was #$Measure-TheWord, and that the preferred denotation of #$measure was #$Duration-TheWord, but notice that the two concepts --- #$measure and #$duration --- are still distinct and useful in that discipline, they just happen to have different names there.")))

(defrelation east-of
  :arity 2
  :domain Geographical-Region
  :range Geographical-Region
  :annotations (Asymmetric-Binary-Predicate
                Transitive-Binary-Predicate
                (documentation "(#$eastOf REGION-1 REGION-2) means that the #$GeographicalRegion REGION-1 is to the east of the #$GeographicalRegion REGION-2, when viewed in the terrestrial frame of reference.  Note that REGION-2 is therefore west of REGION-1; thus, no distinct predicate is needed to represent `west of'.  Example: (#$eastOf #$EasternUSATimeZone #$CentralUSATimeZone).")))

(defrelation eats-willingly
  :arity 2
  :domain Animal
  :range (:and Temporal-Stuff-Type
               (:filled-by superrelations Partially-Tangible))
  :annotations (Binary-Predicate
                (documentation "The predicate #$eatsWillingly is used to relate an #$Animal to the type of food
it will willingly eat.  In a normal #$EatingEvent, the food consumed is of a type
that the eater #$eatsWillingly.  As negative examples, no vegetarian or herbivore
#$eatsWillingly meat.")))

(defrelation edible-part-fn
  :arity 2
  :domain (:and Existing-Object-Type
                (:filled-by superrelations Partially-Tangible))
  :range (:and Existing-Object-Type (:filled-by superrelations Edible-Stuff))
  :annotations (Collection-Denoting-Function
                (documentation "The Cyc function #$EdiblePartFn is a #$CollectionDenotingFunction.  When applied to a set of tangible objects OBJ-TYPE, (#$EdiblePartFn OBJ-TYPE) represents the collection of all the edible parts of objects of OBJ-TYPE.  This collection includes any #$EdibleStuff (i.e., edible by humans or koalas or whatever the current microtheory is talking about) that is part of instances of OBJ-TYPE.  To represent only parts that humans eat, we may restrict the #$resultGenl to a specialized subset of #$FoodAndDrink defined in #$HumanActivitiesMt or other appropriate microtheory.  Examples: the collection (#$EdiblePartFn #$Apple-TheFruit) includes the skin and flesh of all apples, but not --- in the #$HumanActivitiesMt --- the instances of #$Stem or #$Seed found in them; the collection (#$EdiblePartFn #$Egg-Chickens) includes the yolks and whites of chicken eggs, but does not  --- in the #$HumanActivitiesMt ---  include any instances of #$Eggshell.  Because of cultural or philosophical preferences and prohibitions about food, exactly what parts are edible may differ in different human cultural microtheories; e.g., in a FundamentalistJewish or FundamentalistIslamic cultural #$Microtheory, the function call (#$EdiblePartFn #$Pig) would return NIL; in a vegan #$Microtheory, even (#$EdiblePartFn #$Animal) would return NIL.")))

(defrelation edibles-rich-in-fn
  :arity 2
  :domain (:and Existing-Stuff-Type (:filled-by superrelations Nutrient))
  :range (:and Existing-Stuff-Type (:filled-by superrelations Edible-Stuff))
  :annotations (Collection-Denoting-Function
                (documentation "The Cyc function #$EdiblesRichInFn is a #$CollectionDenotingFunction.  It is used to represent foodstuffs which have a high concentration of a certain nutrient.  (#$EdiblesRichInFn NUTRIENT) denotes the collection of edible things that are rich in the type of #$Nutrient NUTRIENT.  For example, (#$EdiblesRichInFn #$EdibleCalcium) denotes the collection of all #$EdibleStuff rich in calcium; that collection will have the collection #$DairyProduct as a subset.")))

(defrelation education-level
  :arity 2
  :domain Person
  :range Education-Level-Attribute
  :annotations (Binary-Predicate
                (documentation "(#$educationLevel PRSN LVL) means #$Person PRSN has had formal schooling up to the highest level #$EducationLevelAttribute LVL at one or more #$EducationalOrganizations.  This will refer to a particular #$subAbstrac of a #$Person, not to the person as a whole lifetime #$Entity.")))

(defrelation elasticity-of-object
  :arity 2
  :domain Solid-Tangible-Thing
  :range Elasticity
  :annotations (Interval-Based-Quantity-Slot
                Tangible-Object-Predicate
                (documentation "(#$elasticityOfObject OBJ DEGREE) indicates how readily the solid tangible thing OBJ returns to its original shape after being deformed (but not broken).  The higher the DEGREE of elasticity, the more quickly and completely the object returns to its previous shape.  Billiard balls, for example, are highly elastic in this sense.  A related concept is #$compressibilityOfObject.")))

(defrelation element-of
  :arity 2
  :domain Cyc_Thing
  :range Set-Or-Collection
  :annotations (Binary-Predicate
                (documentation "(#$elementOf THNG SETORCOL) means that THNG is an element of the mathematical set or collection SETORCOL.  #$elementOf is a more general relation than the more-heavily-used #$isa, which is used to talk about membership in a natural kind (an element of #$Collection).  #$elementOf can also be used to talk about membership in an arbitrarily-defined mathematical set (an instance of #$Set-Mathematical), such as those denoted by #$TheSet expressions.")))

(defrelation embryo-fn
  :arity 2
  :domain (:and Organism-Classification-Type (:filled-by superrelations Animal))
  :range (:and Existing-Object-Type (:filled-by superrelations Embryo))
  :annotations (Collection-Denoting-Function
                (documentation "#$EmbryoFn is an element of #$CollectionDenotingFunction.  (#$EmbryoFn LIFETYPE) returns the collection of organisms which are embryonic instances of LIFETYPE.  Note that this use of the word `embryo' does not correspond exactly with the English word, because the collection returned by #$EmbryoFn includes zygotes, fetuses, etc.")))

(defrelation emitter
  :arity 2
  :is-primitive (:and done-by from-location provider-of-motive-force)
  :domain Emission
  :range Partially-Tangible
  :annotations (Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "The Cyc predicate #$emitter is used to identify the source of an emission.  (#$emitter EMIT OBJ) means that OBJ provides the force involved in making the #$objectEmitted move from OBJ to someplace outside of OBJ.  See also #$providerOfMotiveForce, #$fromLocation.")))

(defrelation employed-agent
  :arity 2
  :is-primitive agreeing-agents
  :domain Work-Agreement
  :range Agent
  :annotations (Binary-Predicate
                (documentation "The predicate #$employedAgent identifies the particular employee who is covered by a particular work agreement.  (#$employedAgent AGREE WORKER) means that AGREE is an instance of #$WorkAgreement covering the employee WORKER.")))

(defrelation employees
  :arity 2
  :is-primitive (:and cotemporal affiliated-with has-workers)
  :domain Agent
  :range Agent
  :annotations (Cotemporal-Objects-Slot
                Asymmetric-Binary-Predicate
                (documentation "The predicate #$employees relates a particular employer to one of its paid employees.  (#$employees EMPLOYER WORKER) means WORKER regularly performs work for EMPLOYER, and EMPLOYER pays WORKER for that activity (often by paycheck).  EMPLOYER directs the manner in which WORKER performs the work and may provide the workplace, tools, capital, and other assistance for the work.  EMPLOYER is commonly an organization but may be a person. E.g., (#$employees PerryMason PaulDrake); (#$employees #$Cycorp #$Lenat).  This predicate is true during all or any part of the period that the employment continues; e.g., (#$holdsIn (#$YearFn 1995) (#$employees #$CarnegieMellonUniversity #$Derthick)).")))

(defrelation employee-status
  :arity 2
  :domain (:and Agent Person)
  :range Work-Status
  :annotations (Binary-Predicate
                (documentation "The predicate #$employeeStatus describes a worker's job as full-time, part-time, salaried, commissioned, paid by the hour, or etc.  More than one may apply.  (#$employeeStatus WORKER STATUS) means that STATUS indicates the #$WorkStatus of WORKER.  For example, the #$employeeStatus of an auto worker at GM probably includes the #$WorkStatus attributes #$FullTime and #$HourlyWork.")))

(defrelation employing-agent
  :arity 2
  :is-primitive agreeing-agents
  :domain Work-Agreement
  :range Agent
  :annotations (Binary-Predicate
                (documentation "The predicate #$employingAgent identifies the employer in a particular work agreement.  (#$employingAgent AGREE EMPLOYER) means that the #$Agent EMPLOYER has entered into the #$WorkAgreement AGREE with some employee, and AGREE obligates EMPLOYER to compensate that employee for specified work.  See also #$Agreement, #$obligatedAgent.")))

(defrelation empties-into
  :arity 2
  :domain Stream
  :range Body-Of-Water
  :annotations (Functional-Slot
                Asymmetric-Binary-Predicate
                Anti-Transitive-Binary-Predicate
                (documentation "The predicate #$emptiesInto is used to indicate that a particular flowing body of water disgorges into another body of water.  (#$emptiesInto RIV WAT) means that the #$Stream RIV flows into WAT, an element of #$BodyOfWater.  Examples: (#$emptiesInto #$AmazonRiver #$AtlanticOcean); (#$emptiesInto #$HuangHeRiver #YellowSea).")))

(defrelation end-fn
  :arity 2
  :domain Temporal-Thing
  :range Time-Point
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "#$EndFn is a function that takes a #$TemporalThing and returns the #$TimePoint it ends.  Thus: (#$endingPoint ?X (#$EndFn ?X))")))

(defrelation ending-date
  :arity 2
  :is-primitive ends-during
  :domain Temporal-Thing
  :range Date
  :annotations (Binary-Predicate
                (documentation "(#$endingDate ?X ?Y) indicates that ?Y is a #$Date such that (#$temporallySubsumes ?Y (#$EndFn ?X)). This is NOT the same as #$endingPoint.  Rather, it means that ?X stopped happening (went out of existence, etc.) sometime on that date.
Note:  the date is tied to a time interval on a calendar, but need not be a particular day; it might be a particular calendar month, a particular calendar year, etc.")))

(defrelation ending-point
  :arity 2
  :domain Temporal-Thing
  :range Time-Point
  :annotations (Temporal-Relation
                (documentation "(#$endingPoint ?X ?T) indicates that ?T is the #$TimePoint at which ?X ends, the latest moment of its temporal extent.")))

(defrelation ends-after-ending-of
  :arity 2
  :is-primitive ends-after-starting-of
  :domain Temporal-Thing
  :range Temporal-Thing
  :annotations (Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Complex-Temporal-Relation
                Irreflexive-Binary-Predicate
                (documentation "(#$endsAfterEndingOf LATER EARLY) means that LATER ends after EARLY ends -- in Cyc terms, (#$after (#$EndFn LATER) (#$EndFn EARLY)).  That is, the #$endingPoint of LATER is later than the #$endingPoint of EARLY.   This implies nothing about whether LATER and EARLY overlap, or how much they overlap, except that they can't be fully #$cotemporal.  Examples: rinsing while showering ends after soaping while showering; the process of hiring a contractor ends after the process of collecting bids.")))

(defrelation ends-after-starting-of
  :arity 2
  :domain Temporal-Thing
  :range Temporal-Thing
  :annotations (Reflexive-Binary-Predicate
                Complex-Temporal-Relation
                (documentation "(#$endsAfterStartingOf ?X ?Y) means (#$after (#$EndFn ?X) (#$StartFn ?Y)).  That is, the #$endingPoint of ?X is later than the #$startingPoint of ?Y.  This implies nothing about whether ?X and ?Y overlap, or how much they overlap.")))

(defrelation ends-during
  :arity 2
  :is-primitive (:and temporal-bounds-intersect ends-after-starting-of)
  :domain Temporal-Thing
  :range Temporal-Thing
  :annotations (Asymmetric-Binary-Predicate
                Complex-Temporal-Relation
                (documentation "(#$endsDuring ?X ?Y) means ?Y covers the end of ?X, i.e. the #$endingPoint of ?X is properly contained in (#$temporalBoundsContain) ?Y.  Note that ?X and ?Y don't necessarily intersect, however, if ?Y is continuous, they do.")))

(defrelation ends-of-path-segment
  :arity 2
  :is-primitive (:and physical-parts cotemporal)
  :domain Path--Simple
  :range Cyc_Thing
  :annotations (Asymmetric-Binary-Predicate
                Cotemporal-Objects-Slot
                (documentation "(#$endsOfPathSegment PATH LOC) means that LOC is one end of the #$Path-Simple segment PATH; LOC may be either a junction or a genuine terminal-end of the path segment.  This refers to the ends of any kind of simple path.")))

(defrelation end-to-end-connected
  :arity 2
  :is-primitive connected-to--rigidly
  :domain Path--Simple
  :range Path--Simple
  :annotations (Symmetric-Binary-Predicate
                Spatial-Predicate
                Connection-Predicate
                Inter-Existing-Object-Slot
                (documentation "(#$endToEndConnected PATH1 PATH2) means that one end of a #$Path-Simple or a #$SimpleUnloopedSegmentOfPath, PATH1, is connected to one end of another #$Path-Simple or #$SimpleUnloopedSegmentOfPath, PATH2, end-to-end, allowing flow or transport between them.  This kind of connection is not currently included as a #$JunctionOfPaths.  In pipe welding, these connections are called butt welds or circumferential pipe welds.")))

(defrelation english
  :arity 2
  :domain Cyc_Thing
  :range Cyc-System-String
  :annotations (Binary-Predicate))

(defrelation equals
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Default-Monotonic-Predicate
                Symmetric-Binary-Predicate
                Reflexive-Binary-Predicate
                Transitive-Binary-Predicate
                (documentation "The predicate #$equals is the Cyc version of identity of predicate logic.  (#$equals A B) means A and B denote the same thing.")))

(defrelation equiv
  :arity 2
  :domain Cyc-Formula
  :range Cyc-Formula
  :annotations (Commutative-Relation
                El-Relation
                (documentation "The logical connective #$equiv represents bi-directional implication.
 #$equiv takes two arguments, each of which must be an element of 
 #$CycFormula. (#$equiv FORMULA-1 FORMULA-2) means that formula FORMULA-1 
 is true precisely when formula FORMULA-2 is true; in other words, 
 FORMULA-1 is true if and only if FORMULA-2 is true.  An EL formula that
 mentions #$equiv is translated during canonicalization into an equivalent
 (though less compact) formula that mentions #$implies and does not mention
 #$equiv (see the #$expansion gaf for #$equiv).")))

(defrelation ethnic-groups-here
  :arity 2
  :domain Geopolitical-Entity
  :range Ethnic-Group-Type
  :annotations (Intangible-Object-Predicate
                Binary-Predicate
                (documentation "The ethnic groups that inhabit a geographical region.")))

(defrelation ethnicity
  :arity 2
  :is-primitive cyc_isa
  :domain Person
  :range (:and Ethnic-Group-Type (:filled-by superrelations Person))
  :annotations (Binary-Predicate
                (documentation "(#$ethnicity PERSON GROUPTYPE) means #$Person PERSON belongs to the #$EthnicGroupType GROUPTYPE.   E.g., (#$ethnicity #$JohnWilkesBooth #$CensusGroupOfCaucasians).  One #$Person may belong to more than one #$EthnicGroupType.")))

(defrelation evaluate
  :arity 2
  :domain Cyc-El-Variable
  :range Cyc_Thing
  :annotations (Binary-Predicate
                (documentation "(#$evaluate VAR EXPRESSION) is satisfied by an HL module which evaluates EXPRESSION and binds VAR to the result.  For example, (#$evaluate ?SUM (#$PlusFn 1 2)) would bind ?SUM to 3.")))

(defrelation event-honors
  :arity 2
  :domain Social-Occurrence
  :range Agent
  :annotations (Asymmetric-Binary-Predicate
                Cyc_Role
                Irreflexive-Binary-Predicate
                (documentation "(#$eventHonors OCCURRENCE AGENT) means that AGENT is honored or commemorated by OCCURRENCE.  If AGENT is a living #$Person, AGENT is probably present at OCCURRENCE.  This is the appropriate predicate for relating a #$Funeral to the deceased person for whom the #$Funeral is in honor.")))

(defrelation event-occurs-at
  :arity 2
  :is-primitive (:and in-region actors temporally-intersects)
  :domain Event
  :range Partially-Tangible
  :annotations (Actor-Slot
                (documentation "The predicate #$eventOccursAt relates a particular event to the instance of #$PartiallyTangible in which it occurs.  (#$eventOccursAt EVENT PT) means that the spatial extent of EVENT is within PT.  For example, (#$eventOccursAt #$LomaPrietaEarthquake #$SanFranciscoBayArea).")))

(defrelation event-occurs-near
  :arity 2
  :domain Event
  :range Partially-Tangible
  :annotations (Actor-Slot
                (documentation "The predicate #$eventOccursNear is used to give an approximate location for an event.  (#$eventOccursNear EVENT LOC) means that EVENT occurs at a place #$near LOC.  #$eventOccursNear is useful when the more exact #$eventOccursAt is unknown, hard to specify, or not worth reifying.  For example, #$eventOccursNear is useful for describing the location of events in scenarios such as `Bob was cycling by the dam', `We played checkers near the TV', and `He is standing by the horse's hind legs'.  See #$cyclistNotes for ideas on how to formalize this.")))

(defrelation event-type-temporal-locality
  :arity 2
  :domain (:and Script-Type (:filled-by superrelations Event))
  :range Time--Quantity
  :annotations (Interval-Based-Quantity-Slot
                (documentation "The time period over which the effects of this type of event may be felt. This could be infinite for certain events (such as killing a person), but for most events this is a much shorter period.  E.g., some of the effects of swimming are being wet, being tired, being out of breath, etc. but those effect generally only persist for a period of minutes after the swimming ends.")))

(defrelation evokes
  :arity 3
  :domains (Individual
            (:and Feeling-Attribute-Type
             (:filled-by superrelations Feeling-Attribute)))
  :range Generic-Attribute
  :annotations (Ternary-Predicate
                Cotemporal-Predicate
                (documentation "(#$evokes OBJ EMOTYPE DEGREE) means that as a consequence of perceiving OBJ, a typical sane intelligent perceiving agent would experience a feeling of EMOTYPE with degree of intensity DEGREE.  E.g., in some contexts, (#$evokes #$StatueOfLiberty #$Pride #$High).")))

(defrelation except-for
  :arity 2
  :domain Reifiable-Term
  :range Assertion
  :annotations (Relationship
                Logical-Connective
                (documentation "(#$exceptFor TERM ASSERTION) means that TERM is a thing, about which ASSERTION is not known to hold.  

#$exceptFor is a special case of #$exceptWhen (q.v.), applicable when ASSERTION has only one universally quantified variable.  (#$exceptFor TERM ASSERTION) prevents TERM from binding to that variable, thereby blocking the conclusions about TERM that Cyc might otherwise draw from ASSERTION.  In other words, if ASSERTION is an implication, then whatever proposition(s) -- call that Q -- that Cyc might have concluded about TERM from ASSERTION may or may not be true in Cyc, but (due to the exception) they would no longer be justified, even partially, by ASSERTION.

Note that the exception TERM  should be a particular binding for
the rule, not a collection, all of whose members the rule
does not apply to. Example: I have the rule 
(#$implies (#$isa ?X #$Cyclist) (#$loves ?X #$RichardNixon)).
I could use #$exceptFor to state that this rule does not
apply to some particular cyclist, e.g., #$Foxvog. But if
I wanted to make an exception to this rule for all 
#$MalePersons, I would not use #$exceptFor, but #$exceptWhen.")))

(defrelation except-when
  :arity 2
  :domain Cyc-Formula
  :range Assertion
  :annotations (Relationship
                Logical-Connective
                (documentation "(#$exceptWhen FORMULA ASSERTION) means that FORMULA gives a set of conditions under which ASSERTION is known not to hold (or, more precisely, conditions under which ASSERTION should not be relied upon as the justification for some other inferences).  The universally quantified variables in ASSERTION's formula may be used in FORMULA to refer to the same objects.  A common special case of #$exceptWhen is handled by #$exceptFor (q.v.)")))

(defrelation exchangers
  :arity 2
  :is-primitive (:and pre-actors post-actors performed-by social-participants)
  :domain Exchange-Of-User-Rights
  :range Agent
  :annotations (Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "The predicate #$exchangers is used to identify the (typically, two) #$Agents involved in an instance of #$ExchangeOfUserRights.   In such an event, each of the #$exchangers gives up possession of one thing and gains possession of another which was previously possessed by the other agent.  (#$exchangers EXCH AGENT) means that AGENT is one of the parties having such a dual role in the #$ExchangeOfUserRights EXCH.  Every instance of #$ExchangeOfUserRights has two sub-events which are instances of #$TransferringPossession (e.g., a dollar bill goes in one direction and some french fries and a few coins go in the other direction.)  Each of the #$exchangers is both a #$toPossessor (in one of the two #$TransferringPossession sub-events of EXCH) and a #$fromPossessor (in the other sub-event).")))

(defrelation exhibitors
  :arity 2
  :is-primitive social-participants
  :domain Social-Gathering
  :range Agent
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$exhibitors GATHERING AGENT) means that AGENT actively presents information, markets a product, displays merchandise or artwork to the attendees of GATHERING.")))

(defrelation expansion
  :arity 2
  :domain Relationship
  :range Cyc-System-List
  :annotations (Binary-Predicate
                (documentation "The complex functions/relations can be explained in terms of more primitive functions. This slot contains such a primitive expansion.")))

(defrelation expansion-axiom
  :arity 2
  :domain Rule-Macro-Predicate
  :range Assertion
  :annotations (Binary-Predicate
                Meta-Knowledge-Predicate
                (documentation "(#$expansionAxiom PRED ASSERT) means that the assertion ASSERT is part of the expansion of PRED.")))

(defrelation expects
  :arity 2
  :domain Intelligent-Agent
  :range Cyc-Formula
  :annotations (Propositional-Attitude-Slot
                (documentation "(#$expects AGT PROP) means that the agent AGT believes the proposition PROP (represented by a #$CycFormula) will be true sometime in the future.  A use of this predicate is to state rules such as: when someone confirms that they will be participating in a social event, the host(ess) #$expects that they will participate.")))

(defrelation exp-fn
  :arity 2
  :domain Scalar-Interval
  :range Scalar-Interval
  :annotations (Function-From-Quantities-To-Quantities
                (documentation "#$ExpFn is the exponential operator, i.e., the unary mathematical function that returns e^x for the x value taken as its argument.  (#$ExpFn 1) returns e.  Its inverse (i.e., #$inverseFunc) is #$LogFn.")))

(defrelation exports
  :arity 2
  :domain Geopolitical-Entity
  :range (:and Product-Type (:filled-by superrelations Partially-Tangible))
  :annotations (Binary-Predicate
                Process-Predicate
                (documentation "(exports REGION THING) means that the region REGION has substantial regular exports of the commodity THING.")))

(defrelation exterior-region-fn
  :arity 2
  :domain Animal-Body-Region
  :range Animal-Body-Region
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "The function (ExteriorRegionFn REGOROBJ), applied to a region or object REGOROBJ, means the sub-region consisting of all the outer parts or sections of REGOROBJ, or the exterior main portion of REGOROBJ.  It applies when REGOROBJ itself has an intrinsic inside/outside orientation (unlike, say, a loop of thread), but if REGOROBJ is an enveloping part, surface membrane, ring or layer within or on a larger region or object that has its own inside/outside orientation, the function returns REGOROBJ's outside portion with respect to the inside and outside of the larger region or object.")))

(defrelation external-parts
  :arity 2
  :is-primitive (:and cotemporal physical-parts)
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Cotemporal-Objects-Slot
                Anti-Symmetric-Binary-Predicate
                Transitive-Binary-Predicate
                Physical-Part-Predicate
                (documentation "(#$externalParts OBJ PART) means that OBJ has PART as one of its external #$physicalParts.")))

(defrelation eye-color
  :arity 2
  :domain Animal
  :range Color
  :annotations (Physical-Attribute-Description-Slot
                Tangible-Object-Predicate
                (documentation "(#$eyeColor ANIMAL COLOR) means that the #$Animal ANIMAL has eyes whose #$Color is COLOR  (more precisely, this means that their irises appear to have that color, in sunlight).  E.g., (#$eyeColor AmyIrving #$PurpleColor).")))

(defrelation faces-direction
  :arity 2
  :domain Partially-Tangible
  :range Unit-Vector-Interval
  :annotations (Spatial-Predicate
                Binary-Predicate
                (documentation "(#$facesDirection OBJ DIR) means that the intrinsic forward axis of OBJ (i.e., the vector normal to its intrinsic front side) points in the direction DIR.  Note that an object only has an intrinsic forward axis if it has some intrinsic front side by virtue of its design or function.  For example, trains, cars, and bullets have intrinsic front faces by virtue of the direction in which they are intended to travel.  Other objects, such as refrigerators, bookshelves against walls, and televisions, have front faces by virtue of how people usually view the object.  Spheres, being symmetric, do not have an intrinsic forward axis.")))

(defrelation faces-object
  :arity 3
  :domains (Partially-Tangible Intrinsic-Axis-Of-Object)
  :range Partially-Tangible
  :annotations (Ternary-Predicate
                (documentation "The Cyc predicate #$facesObject is used to represent the orientation of one object to another. (#$facesObject OBJ1 AXIS1 OBJ2) means that an intrinsic axis projected through OBJ1 (i.e., AXIS1) spatially intersects with the second object, OBJ2.  See also #$IntrinsicAxisOfObject, #$AxisFn.")))

(defrelation failure-for-agents
  :arity 2
  :is-primitive performed-by
  :domain Purposeful-Action
  :range Agent
  :annotations (Actor-Slot
                (documentation "The predicate #$failureForAgents is used to indicate that a particular agent fails to achieve (at least one of) its goals in a particular action.  (#$failureForAgents ENDEAVOR AGT) means that the #$Agent AGT had some purpose in performing ENDEAVOR that was not realized.  See also #$purposeInEvent.")))

(defrelation fan-out-arg
  :arity 2
  :domain Transitive-Binary-Predicate
  :range Positive-Integer
  :annotations (Binary-Predicate
                (documentation "(#$fanOutArg ?PRED ?N) means that transitively-related assertions using ?PRED usually ''fan out'' in the direction of argument position ?N.  For example, (#$fanOutArg #$geographicalSubRegions 2).  This means there are more non-subsumed arg2s for a given arg1 to #$geographicalSubRegions than there would be non-subsumed arg1s for a given arg2.")))

(defrelation fastened-to
  :arity 2
  :is-primitive connected-to--rigidly
  :domain Solid-Tangible-Thing
  :range Solid-Tangible-Thing
  :annotations (Spatial-Predicate
                Connection-Predicate
                Symmetric-Binary-Predicate
                (documentation "(#$fastenedTo OBJ1 OBJ2) means that there is an assembly consisting of OBJ1, OBJ2, and one or more fasteners configured so that OBJ1 and OBJ2 are rigidly connected.  Many types of fastener are covered by #$fastenedTo; e.g., screws, nails, rivets, nuts and bolts.  The fastener penetrates all the way through OBJ1 and may or may not go all the way through OBJ2.  Examples: a utility shelf screwed into the wall; paper notices stapled to a bulletin board; shingles nailed to the roof of a house.")))

(defrelation father
  :arity 2
  :is-primitive cotemporal
  :domain Animal
  :range Male-Animal
  :annotations (Irreflexive-Binary-Predicate
                Family-Relation-Slot
                Asymmetric-Binary-Predicate
                Anti-Transitive-Binary-Predicate
                Cotemporal-Objects-Slot
                (documentation "(#$father CHILD FATHER) means FATHER is one of the persons who fulfill the role of father for CHILD.  This may or may not include CHILD's biological father, and might include CHILD's step father(s) or foster father(s).")))

(defrelation fax-number-text
  :arity 2
  :domain Contact-Location
  :range Phone-Number
  :annotations (Binary-Predicate
                (documentation "The predicate #$faxNumberText relates a particular location to the fax number at that location.  (#$faxNumberText LOC NUM) means that NUM is a string denoting (one of) the fax number(s) of the #$ContactLocation LOC.")))

(defrelation feels-emotion
  :arity 3
  :domains (Intelligent-Agent
            (:and Feeling-Attribute-Type
             (:filled-by superrelations Feeling-Attribute)))
  :range Generic-Attribute
  :annotations (Ternary-Predicate
                Cotemporal-Predicate
                (documentation "(#$feelsEmotion AGT EMOTYPE DEGREE) means that the #$IntelligentAgent AGT feels a feeling of the type EMOTYPE with the intensity DEGREE.  For example, (#$feelsEmotion #$Lenat #$Pride #$High).  As you might imagine, such statements are generally embedded in a context, or within some other statement (such as #$holdsIn some small time interval).  See also #$feelsTowardsEvent, #$feelsTowardsObject.
Note: the first argument can be a non-human intelligent agent, such as a dog or a company, because we often ascribe feelings and emotions to them, and they often behave consistently with having such feelings and emotions.")))

(defrelation feels-response-on-body-region
  :arity 4
  :domains (Perceptual-Agent
            (:and Existing-Object-Type
             (:filled-by superrelations Animal-Body-Region))
            Sensory-Reaction-Type)
  :range Generic-Attribute
  :annotations (Functional-Predicate
                Quaternary-Predicate
                (documentation "The Cyc predicate #$feelsResponseOnBodyRegion is used to represent localized somatic feelings of a perceptive being. (#$feelsResponseOnBodyRegion AGT BODYPARTTYPE SENS DEGREE) means that the #$PerceptualAgent AGT feels on its body, in the area specified by BODYPARTTYPE, the sensory reaction SENS with an intensity of DEGREE.  For example, Cyc's knowledge base contains an assertion that the very same part of one's body doesn't feel both hot and cold at the same time.  #$feelsResponseOnBodyRegion can also be used to state symptoms, e.g., when you're feverish, your head feels hot.  See also #$SensoryReactionType.")))

(defrelation feels-sensation
  :arity 3
  :domains (Biological-Living-Object
            (:and Sensory-Reaction-Type
             (:filled-by superrelations Sensory-Attribute)))
  :range Generic-Attribute
  :annotations (Functional-Predicate
                Ternary-Predicate
                (documentation "(#$feelsSensation BLO SENSTYPE DEGREE) means that the #$BiologicalLivingObject BLO feels a sensation of type SENSTYPE with the intensity DEGREE.  #$feelsSensation may be used to describe an organism's feeling during a particular time period or activity (see #$holdsIn); for example, we might say of a particular person who is doing yoga: (#$holdsIn `TodaysYoga' (#$feelsSensation Prakriti #$LevelOfRelaxationFeeling #$VeryHigh).  Note that the first argument of #$feelsSensation could also be filled by a part of an organism, e.g., `John F. Kennedy's head'; however, by using the more specialized predicate #$feelsResponseOnBodyRegion (q.v.), we can express localized feelings without reifying each such region.")))

(defrelation feels-towards-event
  :arity 4
  :domains ((:and Intelligent-Agent Person)
            Event
            (:and Feeling-Attribute-Type
             (:filled-by superrelations Feeling-Attribute)))
  :range Generic-Attribute
  :annotations (Quaternary-Predicate
                (documentation "(#$feelsTowardsEvent AGT EVT EMOTYPE DEGREE) means that the #$IntelligentAgent AGT feels a feeling of the #$FeelingAttributeType EMOTYPE towards the #$Event EVT, with intensity DEGREE.
Note: the first argument can be a non-human intelligent agent, such as a dog or a company, because we often ascribe feelings and emotions to them, and they often behave consistently with having such feelings and emotions. ")))

(defrelation feels-towards-object
  :arity 4
  :domains ((:and Intelligent-Agent Person)
            Individual
            (:and Feeling-Attribute-Type
             (:filled-by superrelations Feeling-Attribute)))
  :range Generic-Attribute
  :annotations (Quaternary-Predicate
                (documentation "(#$feelsTowardsObject AGT OBJ EMOTYPE DEGREE) means that the #$IntelligentAgent AGT feels a feeling of the #$FeelingAttributeType EMOTYPE towards the #$Individual OBJ, with intensity DEGREE.
Note: the first argument can be a non-human intelligent agent, such as a dog or a company, because we often ascribe feelings and emotions to them, and they often behave consistently with having such feelings and emotions.")))

(defrelation female-fn
  :arity 2
  :domain (:and Organism-Classification-Type (:filled-by superrelations Animal))
  :range (:and Existing-Object-Type (:filled-by superrelations Female-Animal))
  :annotations (Collection-Denoting-Function
                (documentation "#$FemaleFn is a Cyc function, in particular, an instance of #$CollectionDenotingFunction.  (#$FemaleFn ORGTYPE) returns that subset of the animal taxonomic collection ORGTYPE which includes all and only the females of ORGTYPE.  For example, (#$FemaleFn #$Person) and #$FemalePerson denote the same collection, while (#$FemaleFn #$Deer) denotes the collection of all female members of #$Deer.")))

(defrelation female-parent-actor
  :arity 2
  :is-primitive parent-actors
  :domain Biological-Reproduction-Event
  :range Biological-Living-Object
  :annotations (Functional-Slot
                Actor-Slot
                Asymmetric-Binary-Predicate
                Anti-Transitive-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$femaleParentActor ?EVENT ?ORGANISM) means that ?ORGANISM is the female parent in the #$SexualReproductionEvent ?EVENT.")))

(defrelation fields-of-activity
  :arity 2
  :is-primitive fields-of-competence
  :domain Person
  :range Field-Of-Study
  :annotations (Binary-Predicate
                (documentation "(#$fieldsOfActivity X FLD) means the #$Person X was or is active in the #$FieldOfStudy FLD, and usually is making, has made, or intends to make some contribution to FLD.  E.g., (#$fieldsOfActivity #$Thales #$MilesianSchool) and, to take a more recent example, (#$fieldsOfActivity #$Lenat #$ArtificialIntelligence).")))

(defrelation fields-of-competence
  :arity 2
  :domain Person
  :range Field-Of-Study
  :annotations (Binary-Predicate
                (documentation "(#$fieldsOfCompetence Z FLD) means the #$Person Z has actual competence and knowledgeability in the #$FieldOfStudy FLD, or else at least is recognized by peers and colleagues in the same field as being competent in that field.  E.g., (#$fieldsOfCompetence #$Nichols #$PhilosophyAncient)")))

(defrelation fields-of-formal-education
  :arity 2
  :is-primitive fields-of-competence
  :domain Person
  :range Field-Of-Study
  :annotations (Binary-Predicate
                (documentation "(#$fieldsOfFormalEducation Z FLD) means that #$Person Z has had formal academic or tutorial education in the #$FieldOfStudy FLD.  E.g., (#$fieldsOfFormalEducation #$Colvin #$Linguistics).  This is a good example of a predicate whose precise meaning, and associated heuristic rules, vary quite a bit from context to context, such as from culture to culture, from century to century, etc.")))

(defrelation first-name
  :arity 2
  :is-primitive name-of-agent
  :domain Person
  :range Human-Given-Name-String
  :annotations (Intangible-Object-Predicate
                Binary-Predicate
                (documentation "(#$firstName X STRNG) means that #$Person X is known by the #$HumanGivenNameString STRNG as his or her first name.  E.g., (#$firstName #$Lenat ``Douglas'').  A person rarely has more than one first name, though they may have many nicknames which acquaintences use almost interchangably with the person's first and/or last names.")))

(defrelation first-sub-events
  :arity 2
  :is-primitive (:and sub-events temporally-started-by)
  :domain Event
  :range Event
  :annotations (Sub-Process-Slot
                Transitive-Binary-Predicate
                (documentation "(#$firstSubEvents ?X ?Y) implies (#$subEvents ?X ?Y) and (#$temporallyStartedBy ?X ?Y).  For example, if one is #$RelievingPain by taking a pill, then the #$firstSubEvents in that event is an #$Ingesting event.  See also #$lastSubEvents.")))

(defrelation fiscally-capable-of
  :arity 3
  :domains (Intelligent-Agent
            (:and Cyc_Collection (:filled-by superrelations Situation)))
  :range Cyc_Role
  :annotations (Ternary-Predicate
                (documentation "The predicate #$fiscallyCapableOf indicates that an agent has the economic prerequisites needed for taking a certain role in a certain type of situation or event.  (#$fiscallyCapableOf AGT SIT-TYPE ROLE) means that a particular #$Agent AGT has the financial resources for acting in this ROLE in normal instances of SIT-TYPE.  For example, we could say that Mary is #$fiscallyCapableOf being the #$buyer in a #$Buying of a Humvee (i.e., (#$BuyingFn Humvee)).  However, #$fiscallyCapableOf is noncommittal as to whether Mary does or will in fact buy a Humvee.")))

(defrelation fits-in
  :arity 2
  :domain Partially-Tangible
  :range Abstract-Shape
  :annotations (Binary-Predicate
                (documentation "The predicate #$fitsIn is used to give an approximation of the external size and shape of particular tangible objects, by relating an object to an abstract region of space described as a geometric shape with definite dimensions.  (#$fitsIn OBJ SHAPE) gives an upper bound for the size of the object OBJ, by stating what sized shape OBJ will fit inside.  #$fitsIn uses the elements of #$ShapeFunction (q.v.) for reference, especially the basic shapes generated by #$RectangularSolidFn, #$CylinderFn, and #$SphereFn.  (Note: actual instances of AbstractPhysicalShape are NOT used for assertions made with #$fitsIn.)  Examples: (#$fitsIn #$Pittman (#$RectangularSolidFn (#$Meter 2) (#$Meter 0.35) (#$Meter 0.25))) and (#$fitsIn HopeDiamond (#$CylinderFn (#$Centimeter 10) (#$Centimeter 10))).  When #$fitsIn is used in a rule to represent a class of objects with variable sizes, the #$ShapeFunction used should refer to the largest size that such objects normally have.  For example, by default, any sandwich SW (#$fitsIn SW (#$RectangularSolidFn (#$Inch 12) (#$Inch 12) (#$Inch 6))).")))

(defrelation flammability-of-object
  :arity 2
  :domain Partially-Tangible
  :range Flammability
  :annotations (Physical-Attribute-Description-Slot
                Interval-Based-Quantity-Slot
                Tangible-Object-Predicate
                (documentation "(#$flammabilityOfObject SUBST DEGREE) means that the tangible SUBST has this DEGREE of #$Flammability.  A higher value of DEGREE describes objects that catch fire and burn more quickly and easily than those with a lower value.")))

(defrelation fluid-pressure
  :arity 2
  :domain Fluid-Tangible-Thing
  :range Pressure
  :annotations (Tangible-Substance-Predicate
                Interval-Based-Quantity-Slot
                (documentation "(#$fluidPressure FLUID PRESS) means that the #$FluidTangibleThing FLUID exerts the #$Pressure PRESS at its surface.")))

(defrelation following-interval-type
  :arity 2
  :domain Temporal-Object-Type
  :range Temporal-Object-Type
  :annotations (Temporal-Relation
                (documentation "(#$followingIntervalType ?X ?Y) indicates that every instance of ?X is followed by some instance of ?Y, and every instance of ?Y is preceded by some instance of ?X.  The instance of ?Y is #$contiguousAfter the instance of ?X.  For example,  (#$followingIntervalType #$Saturday #$Sunday).  Every Saturday is followed by a Sunday, and every Sunday is preceded by a Saturday; the Sunday is #$contiguousAfter the Saturday.")))

(defrelation following-value
  :arity 2
  :domain Scalar-Interval
  :range Scalar-Interval
  :annotations (Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Extensional-Representation-Predicate
                Irreflexive-Binary-Predicate
                (documentation "The Cyc predicate #$followingValue is used to represent an ordering of generic attributes.  (#$followingValue VAL1 VAL2) means that VAL2 is a greater value than VAL1 on a scale that they share.  (#$followingValue VAL1 VAL2) implies (#$greaterThan VAL2 VAL1).  Typically, one uses #$followingValue when the values VAL1 and VAL2 are elements of #$GenericAttribute, and they are not grounded in numerically quantifiable units of measure (see #$NoteAboutGivingGenericValueFunctionsNumericValues).  If VAL1 and VAL2 do have numerical grounding, a #$followingValue formula is unnecessary since #$numericallyEqual, #$greaterThanOrEqualTo, and #$greaterThan, are automatically computable using arithmetic relations holding between the minimum and maximum of val1 and val2.  (See #$minQuantValue, #$maxQuantValue.)  For example, one must use #$followingValue to state that (#$HighAmountFn #$Glamor) is more glamorous than (#$LowAmountFn #$Glamor).  On the other hand, it is unnecessary to assert a #$followingValue relation between (#$MilesPerHour 5) and (#$MilesPerHour 25 60) since #$greaterThan is arithmetically determinable.  See also #$GenericAttribute, #$GenericValueFunction.")))

(defrelation food-source-for
  :arity 2
  :domain Organism--Whole
  :range (:and Temporal-Stuff-Type
               (:filled-by superrelations Partially-Tangible))
  :annotations (Binary-Predicate
                (documentation "The predicate #$foodSourceFor is used to relate a particular organism to the kinds of things it usually eats.  (#$foodSourceFor ORG OBJTYPE) means ORG is an organism that typically eats some instances of OBJTYPE for food.  Note that OBJTYPE refers to a type of food source, not a particular object that ORG eats.  For example, (#$foodSourceFor #$BillJ #$Popcorn) means that #$Popcorn is a #$foodSourceFor Bill, i.e., Bill often eats (instances of) popcorn.")))

(defrelation foot--unit-of-measure
  :annotations (Unit-Of-Distance
                Fps-Unit-Of-Measure
                Unit-Of-Measure-No-Prefix
                (documentation "The measurement function used in Cyc to represent the basic unit of length within the British (FPS) system.  See also #$FPSUnitOfMeasure, #$UnitOfMeasure.")))

(defrelation for-all
  :arity 2
  :domain Cyc-El-Variable
  :range Cyc-Formula
  :annotations (Relationship
                Quantifier
                (documentation "The predicate #$forAll is Cyc's version of the universal quantifier of predicate calculus (i.e., the operator symbolized in one common notation by an upside-down `A').  As its two arguments, #$forAll takes a variable (which is an element of #$CycELVariable) and an element of #$CycFormula, respectively.  (#$forAll VAR FORM) means that FORM is true whenever all the occurrences of the variable VAR in the formula FORM are replaced by any object in the Cyc universe.  For example, to say that every person is a mammal, we could assert: (#$forAll ?X (#$implies (#$isa ?X #$Person) (#$isa ?X #$Mammal))).  In addition, CycL follows a convention that allows #$forAll to be omitted; that is, when no explicit quantifier is used, seemingly unbound variables inside formulas are assumed to be universally quantified.  With that convention, the sample assertion could be written more compactly as: (#$implies (#$isa ?X #$Person) (#$isa ?X #$Mammal)).



[Developer-level footnote:  There are many `flavors' of quantification `on the market' these days; here is how the Cyc system currently handles axioms that involve #$forAll:



When processing an FI-ASK about whether an assertion of the form (#$forAll VAR FORM) is true or not, Cyc determines extensionally whether or not any known VAR (anything in the knowledge base) could make FORM false.



When processing an FI-PROVE about whether an assertion of the form (#$forAll VAR FORM) is true or not, Cyc tries to construct an intensional proof (at least at a default-true level) that FORM must be true regardless of what VAR is ever inserted therein.



When processing an FI-ASSERT in which a user or program tells Cyc that an assertion of the form (#$forAll VAR FORM) is true, Cyc records it intensionally so that it can later serve as part of an intensional proof, when some future FI-PROVE request is processed.]")))

(defrelation force-acting-on-object
  :arity 2
  :domain Partially-Tangible
  :range (:and Physical-Attribute Vector-Interval)
  :annotations (Tangible-Object-Predicate
                Interval-Based-Quantity-Slot
                (documentation "#$forceActingOnObject is a predicate relating an instance of #$PartiallyTangible to any force which changes its direction of travel or the speed at which it is traveling.")))

(defrelation force-capacity
  :arity 2
  :domain Biological-Living-Object
  :range Strength
  :annotations (Interval-Based-Quantity-Slot
                (documentation "The slot describing the capability of an animal to exert force.")))

(defrelation formed-by-confluence-of
  :arity 2
  :domain River
  :range River
  :annotations (Asymmetric-Binary-Predicate
                Anti-Transitive-Binary-Predicate
                (documentation "(formedByConfluenceOf WATER1 WATER2) means that WATER1 is formed, or increased in volume, by the confuence of the rivers including RIVER2 which merge to form RIVER1.")))

(defrelation forms-border-between
  :arity 3
  :domains (Spatial-Thing Spatial-Thing)
  :range Spatial-Thing
  :annotations (Ternary-Predicate
                Spatial-Predicate
                (documentation "(#$formsBorderBetween BORDER REG1 REG2) means that BORDER comprises at least part of the border between REG1 and REG2.  BORDER may be a surface separating two regions of space, or a curve separating two regions of a surface.  The arguments REG1 and REG2 may be physical objects, geographical regions, or abstract entities.  Note that BORDER need not comprise the entire border between REG1 and REG2.  By contrast, #$BorderBetweenFn returns the entire border between the regions that serve as arguments.")))

(defrelation four-way-junction-in-system
  :arity 2
  :is-primitive junction-in-system
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Asymmetric-Binary-Predicate
                (documentation "(#$fourWayJunctionInSystem JUNCT SYS) means that JUNCT is a 4-way junction in the specified #$PathSystem SYS.  (See also #$FourWayJunctionOfPaths for the general case.)  Formally, a 4-way junction in SYS is any point (actually, a node) X in SYS such that either there are exactly 4 links and no loops in SYS that X is on, or there are exactly 2 loops and no links in SYS that X is on, or there are exactly 2 links and 1 loop in SYS that X is on.  See #$junctionInSystem.")))

(defrelation fragility-of-object
  :arity 2
  :domain Partially-Tangible
  :range Fragility
  :annotations (Interval-Based-Quantity-Slot
                Tangible-Object-Predicate
                (documentation "(#$fragilityOfObject OBJ DEGREE) means that the tangible object OBJ has this DEGREE of #$Fragility.  The higher the fragility, the more easily the object can be broken.")))

(defrelation freezing-point
  :arity 2
  :domain Partially-Tangible
  :range Temperature
  :annotations (Tangible-Substance-Predicate
                Interval-Based-Quantity-Slot
                (documentation "(#$freezingPoint STUFF TEMP) means that TEMP is the temperature at which the substance STUFF changes from having the attribute #$LiquidStateOfMatter to #$SolidStateOfMatter (when sufficient energy is output to lower STUFF's temperature through this point).  Note that the freezing point of most substances is context-dependent (e.g., based on altitude and other factors.)")))

(defrelation frequency-of-action-type
  :arity 4
  :domains ((:and Cyc_Collection (:filled-by superrelations Situation))
            Cyc_Collection
            Actor-Slot)
  :range Frequency
  :annotations (Type-Predicate
                Functional-Predicate
                Quaternary-Predicate
                (documentation "(#$frequencyOfActionType ?X ?Y ?R ?F) indicates that instances of ?Y play the role ?R in a number of instances of ?X, and they occur with the frequency ?F.  One axiom in Cyc that uses this predicate expresses the rule of thumb that each military typically wages war about once a generation: (#$frequencyOfActionType  #$WagingWar #$MilitaryOrganization #$performedBy #$OnceAGeneration).  Another use of it is to express the fact that animals are virtually always breathing:  (#$frequencyOfActionType #$Breathing #$Vertebrate #$bodilyDoer #$Continuously).  Even more interesting examples of this predicate express the the rules of thumb that in a modern Western personal... context a person engages in a toothbrushing event about once a day, while as the recipient of professional service that happens 0.5 - 4 times per year, while as the provider of such a service that happens 4 - 20 times per day.  Those three axioms would be written -- in the appropriate contexts of course -- (#$frequencyOfActionType #$TeethCleaning #$Person #$performedBy (#$TimesPerDay 1)) and (#$frequencyOfActionType #$TeethCleaning #$Person #$recipientOfService (#$TimesPerYear 0.5 4)) and (#$frequencyOfActionType #$TeethCleaning #$Person #$providerOfService (#$TimesPerDay 4 20)).   Two additional notes are in order about this predicate:
Note that ?X must be a set of #$Situations [there is an argument constraint on this predicate that enforces this, namely (#$arg1Genl #$frequencyOfActionType #$Situation)],.
Note that this predicate is functional in its fourth argument position.  That is, given a legal set of values for ?X, ?Y, and ?R, there is one and only one meaningful value for the frequency ?F [this is specified by the Cyc axiom (#$functionalInTheNthArg #$frequencyOfActionType 4)].")))

(defrelation frequency-of-signal
  :arity 2
  :domain Wave-Propagation
  :range Frequency
  :annotations (Binary-Predicate
                (documentation "(#$frequencyOfSignal WAVE FREQ) means that the #$WavePropagation event WAVE consists of waves that occur at intervals of FREQ.  FREQ is a measure of #$Frequency generally expressed as cycles per unit of time; frequency of electromagnetic radiation is standardly measured in #$Hertz.")))

(defrelation friends
  :arity 2
  :is-primitive (:and cotemporal likes-as-friend)
  :domain Animal
  :range Animal
  :annotations (Irreflexive-Binary-Predicate
                Symmetric-Binary-Predicate
                Inter-Personal-Relation-Slot
                Cotemporal-Objects-Slot
                (documentation "(#$friends X Y) means X and Y are friends; typically they have a close relationship of reciprocal care, concern, respect, enjoyment, and mutual regard based on emotional (and/or ideological and intellectual) compatibility, shared interests, etc.
Note:  In the cases of assertions of two non-human animals being friends, there may be some anthropomorphism going on.")))

(defrelation from-location
  :arity 2
  :is-primitive (:and pre-actors
                      |(meaning-in-system-fn sensus--information-1997 SOURCE-DESTINATION)|)
  :domain Translocation
  :range Partially-Tangible
  :annotations (Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "The predicate #$fromLocation is used to indicate the starting point of a particular movement.  (#$fromLocation MOVE LOC) means that LOC is where the #$objectMoving in the #$Movement-TranslationEvent MOVE is found at the beginning of MOVE and is where it begins this motion.  The #$objectMoving may or may not be #$Stationary at LOC.  If MOVE is a single-pathway translation (see #$Translation-SinglePath), then every #$objectMoving is found at LOC when MOVE starts.  If MOVE has multiple movers and multiple pathways (see #$Translation-MultiPath), then at least some of the #$objectMoving(s) can be found at LOC at the start of MOVE.  If MOVE is a flow (including rivers flowing, winds blowing, tornado, typhoon, clouds moving and even air filling your lungs when you take breath, see #$Translation-Flow), then at least some portion of the fluid #$objectMoving can be found at LOC at the start of MOVE.  See also #$pathway-Complete, #$pathConnects.")))

(defrelation from-orientation
  :arity 2
  :domain Movement--Rotation
  :range Orientation-Attribute
  :annotations (Binary-Predicate
                Cyc_Role
                (documentation "This predicate indicates, for the particular rotational motion ROT, the orientation that the #$objectMoving in that event has at the beginning of that motion.  (#$fromOrientation ROT ORIENT) means that when ROT begins, the object that moves in ROT has the position ORIENT, with respect to the current frame of reference.  For example, the object may have a #$HorizontalOrientation, #$VerticalOrientation, #$RightSideUp orientation, etc.  See also #$toOrientation, #$OrientationAttribute.")))

(defrelation from-possessor
  :arity 2
  :is-primitive pre-actors
  :domain Losing-User-Rights
  :range Agent
  :annotations (Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "This predicate identifies an #$Agent who loses some right to use an object.  (#$fromPossessor LOSS AGENT) means that AGENT enjoys some #$UserRightsAttribute over the #$objectOfPossessionTransfer at the start of the #$LosingUserRights event LOSS, but no longer has that particular #$UserRightsAttribute after the LOSS ends.")))

(defrelation from-state
  :arity 2
  :domain Changing-Device-State
  :range Device-State
  :annotations (Binary-Predicate
                (documentation "This predicate is used in connection with #$ChangingDeviceState, to identify the #$DeviceState that a device is in before the change.  (#$fromState EVENT DEVICE-STATE) means that immediately prior to EVENT (which is the device state-changing action), the device that is changed in EVENT has the state DEVICE-STATE (and during the EVENT the device changes from that to another state).  For example, prior to any X which is a #$TurningOnAnElectricalSwitch, the switch involved has (#$fromState X #$DeviceOff).")))

(defrelation fruit-fn
  :arity 2
  :domain (:and Organism-Classification-Type (:filled-by superrelations Plant))
  :range (:and Existing-Object-Type (:filled-by superrelations Fruit))
  :annotations (Collection-Denoting-Function
                (documentation "#$FruitFn is a Cyc function, specifically a #$CollectionDenotingFunction, which is used to denote the various natural kinds of fruit.  #$FruitFn takes a single plant collection as its argument and returns the collection of fruits of that type of plant.  (#$FruitFn PLANTTYPE) denotes the collection of all fruits from the elements of PLANTTYPE.  Examples: (#$FruitFn #$AppleTree) denotes the collection of apples (corresponds to #$Apple-TheFruit); (#$FruitFn #$CashewTree) denotes the fruit of the cashew tree (note this does NOT correspond with #$Cashew-TheNut; the red pulpy fruit is used to make cashew wine).")))

(defrelation gaseous-fn
  :arity 2
  :domain Tangible-Stuff-Composition-Type
  :range (:and Tangible-Stuff-State-Type
               (:filled-by superrelations Gaseous-Tangible-Thing))
  :annotations (Collection-Denoting-Function
                (documentation "A #$CollectionDenotingFunction.  #$GaseousFn takes as an argument a collection COL, membership in which is based only on physical and/or chemical composition and not on any other property (see #$TangibleStuffCompositionType).  (#$GaseousFn COL) is the collection of elements of COL that are in the #$GaseousStateOfMatter.")))

(defrelation gen-format
  :arity 3
  :domains (Relationship Cyc-System-String)
  :range Cyc-System-List
  :annotations (Ternary-Predicate))

(defrelation genl-attributes
  :arity 2
  :domain Attribute-Value
  :range Attribute-Value
  :annotations (Reflexive-Binary-Predicate
                Transitive-Binary-Predicate
                Intangible-Object-Predicate
                Rule-Macro-Predicate
                (documentation "(#$genlAttributes S-ATT G-ATT) means that G-ATT is a more general attribute than S-ATT.  If we know, for some object, THING, (#$hasAttributes THING S-ATT), the system will be able to derive (#$hasAttributes THING G-ATT).  #$genlAttributes is transitive, so (#$genlAttributes A B) and (#$genlAttributes B C) lets the system derive (#$genlAttributes A C).  For example, if a certain portion of the atmosphere has the attribute #$Hazy, Cyc can conclude through its #$genlAttributes knowledge that there is only moderate #$Visibility there.")))

(defrelation genl-inverse
  :arity 2
  :domain Binary-Predicate
  :range Binary-Predicate
  :annotations (Binary-Predicate
                Rule-Macro-Predicate
                (documentation "(#$genlInverse NARROW BROAD) means that binary predicate BROAD is a more general version of binary predicate NARROW, but with the arguments reversed. Thus  (NARROW ARG1 ARG2) implies (BROAD ARG2 ARG1).   



Note:  Notice that if two predicates are true inverses of each other, such as the pair parents and children, or the pair greater-than and less-than, then each member of the pair will be a #$genlInverse of the other.  Creating two predicates like that is considered poor KEing style, however, because in that case the second predicate in the pair adds no new `expressive power' over what the first already provides.  One might decide to write an end-user interface which acts as though both predicates exist, so that the user doesn't have to remember which is `the real one' in the system, but there is no gain at the representation language level to having both predicates.")))

(defrelation genl-mt
  :arity 2
  :domain Microtheory
  :range Microtheory
  :annotations (Rule-Macro-Predicate
                Microtheory-Predicate
                Default-Monotonic-Predicate
                Anti-Symmetric-Binary-Predicate
                Reflexive-Binary-Predicate
                Transitive-Binary-Predicate
                (documentation "(#$genlMt SMT GMT) means #$Microtheory SMT is a specialization of #$Microtheory GMT.   E.g., (#$genlMt #$ModernMilitaryMt #$OrganizationMt), which means that all the assertions which are true `content' in the general #$OrganizationMt context are also true in the more specialized #$ModernMilitaryMt context.  Another way to think of this is that SMT `has access to' the content of GMT.   Each proposition which is true in GMT is also true in SMT.  The #$genlMt relation is transitive; it induces a partial ordering on the set of all microtheories.   

Each assertion in the knowledge base must be explicitly stated to be true in at least one mt.  It will then (by inference) also be true in all the more specialized contexts.  If something is true in the `life in North America' mt, then it should by default be true in the `life in Canada' mt.  I.e., the microtheories are organized into a generalization/specialization lattice by the predicate #$genlMt, just as collections are organized into such a lattice by #$genls, and just as predicates are organized into such a lattice by #$genlPreds.  Just as a collection may have several incommensurable supersets, so too a microtheory may have several incommensurable #$genlMts.  Just as each and every collection must have some explicitly recorded superset (except for #$Thing), each and every mt must have some (expicitly recorded) more general mt (except for the #$BaseKB, which is the most general context, containing universal, timeless truths).  Just as a Cyc concept may have multiple incommensurable sets of which it is an element (via #$isa), so too a Cyc assertion may be declared to be true in a set of incommensurable mts.  For virtually all intents and purposes, #$genlMt assertions should go in #$BaseKB.")))

(defrelation genl-preds
  :arity 2
  :domain Predicate
  :range Predicate
  :annotations (Anti-Symmetric-Binary-Predicate
                Reflexive-Binary-Predicate
                Transitive-Binary-Predicate
                Rule-Macro-Predicate
                (documentation "(#$genlPreds NARROW BROAD) means that predicate BROAD is a more general version of predicate NARROW; e.g., (#$genlPreds #$biologicalMother #$biologicalParents), (#$genlPreds #$greaterThan #$greaterThanOrEqualTo).   (#$genlPreds NARROW BROAD) is shorthand for the axiom schema (NARROW ARG1 ... ARGN) => (BROAD ARG1 ... ARGN).  See also #$genlInverse, which can handle cases where NARROW and BROAD are both binary but their order of arguments is reversed.  If the #$arity of NARROW differs from the #$arity of BROAD (or their order of arguments differs and they're not binary), then we just assert the whole appropriate axiom into the Cyc knowledge base; of course, such axioms are absent from the public release of the Upper Cyc Ontology.")))

(defrelation genls
  :arity 2
  :is-primitive subset-of
  :domain Cyc_Collection
  :range Cyc_Collection
  :annotations (Transitive-Binary-Predicate
                Reflexive-Binary-Predicate
                Default-Monotonic-Predicate
                Taxonomic-Slot-For-Collections
                Rule-Macro-Predicate
                (documentation "(#$genls COL SUPER) means that SUPER is one of the supersets of COL.  Both arguments must be elements of #$Collection.  Cyc knows that #$genls is transitive; that is, if one asserts (#$genls COL SUPER) and (#$genls SUPER BIGGER), Cyc will infer that (#$genls COL BIGGER). Therefore, in practice one only manually asserts a small fraction of the #$genls assertions --- the vast majority are inferred automatically by Cyc.")))

(defproperty gen-mass-noun :arity 1 :domain Reifiable-Term :annotations
 (Unary-Predicate
  (documentation "This predicate is a flag to indicate when a given constant should be treated as a mass noun in English paraphrases.  See also #$prettyName.")))

(defrelation gen-value-fn
  :arity 4
  :domains (Interval-Based-Quantity-Slot Cyc_Collection Generic-Attribute)
  :range Scalar-Interval
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "#$GenValueFn is a Cyc function, in particular, an element of #$IndividualDenotingFunction.  It is used to denote an amount of a specified attribute that can be considered a generic value (very low, low, medium, high, or etc.) for members of the indicated group.  Thus, (#$GenValueFn PRED COL GEN) denotes the amount which can be considered the GEN value of PRED for members of the #$Collection COL.  Thus (#$GenValueFn #$heightOfObject #$BasketBallPlayer #$High) denotes the amount of distance which is a high height among basketball players.  See also #$GenericAttribute.")))

(defrelation geographical-sub-regions
  :arity 2
  :is-primitive surface-parts
  :domain Geographical-Region
  :range Geographical-Region
  :annotations (Reflexive-Binary-Predicate
                Spatial-Predicate
                Transitive-Binary-Predicate
                (documentation "(#$geographicalSubRegions SUPER SUB) means that SUPER and SUB are both elements of #$GeographicalRegion, and the area SUB lies wholly within the region SUPER (see #$inRegion).  SUPER may or may not completely surround SUB (i.e., they may share an outer boundary, as do Texas and the USA).  See also #$surroundsHorizontally, #$bordersOn.")))

(defrelation gerund
  :arity 2
  :domain English-Word
  :range Character-String
  :annotations (Binary-Predicate
                Intangible-Object-Predicate
                (documentation "(#$gerund WORD STRING) means that STRING is the gerund form of WORD.  Also known as present participle or progressive. The regular gerund is formed from the infinitive verb form with an `ing' suffix. Verbs in the Cyc lexicon will have a #$gerund entry only if they are irregular. Regular forms are generated by the morphology component. Regular example: `singing'. Irregular example: `swimming'.")))

(defrelation goals
  :arity 2
  :is-primitive desires
  :domain Agent
  :range Goal
  :annotations (Propositional-Attitude-Slot
                (documentation "(#$goals AGT G) means that the #$Agent AGT has the #$Goal G.  That is, G is one of their goals.  This implies (#$desires AGT G), but #$goals is stronger than #$desires, in that an agent will take action (or at least intend to take action, and plan accordingly) to make their #$goals true, while their #$desires may include things s/he merely wishes were true, but about which s/he has no intention of undertaking action.  Additionally, #$goals are generally about the future, whereas #$desires can be about the present, future, or even the past.  For further information about goals, see #$Goal.  Also see #$intends.")))

(defrelation governed-by-agreement
  :arity 2
  :is-primitive pre-actors
  :domain Social-Occurrence
  :range Agreement
  :annotations (Actor-Slot
                (documentation "The predicate #$governedByAgreement relates an event to an agreement which stipulates that certain conditions are to hold during that event.  (#$governedByAgreement EVT AGR) means that some aspects of the #$SocialOccurrence EVT are controlled by the #$Agreement AGR.  For example, a #$BuyingGroup may have #$SalesContracts with its #$suppliers that specify what prices may be charged for goods bought by members of the group during the agreement period.")))

(defrelation government
  :arity 2
  :domain Geopolitical-Entity
  :range Regional-Government
  :annotations (Binary-Predicate
                (documentation "The predicate #$government identifies the political entity which has governing authority over a particular geopolitical region.  (#$government GEOPOL GOV) means that the #$RegionalGovernment GOV is the government of the #$GeopoliticalEntity GEOPOL.  That is, GOV claims to be the government of GEOPOL, is recognized as such at least informally, and effectively functions as such -- administering the internal and external affairs of GEOPOL --  whether or not GOV has formal diplomatic recognition.  Effectively functioning as a #$government includes having the power to settle disputes, collect revenue, and provide services.  Examples include the #$UnitedStatesFederalGovernment, the #$CityCouncilOfAustin (TX), and all of the entities returned by the Cyc function #$GovernmentFn (q.v.) -- e.g., (#$GovernmentFn #$Taiwan-RepublicOfChina), (#$GovernmentFn #$Russia).")))

(defrelation government-fn
  :arity 2
  :domain Geopolitical-Entity
  :range Regional-Government
  :annotations (Reifiable-Function
                Individual-Denoting-Function
                (documentation "The Cyc function #$GovernmentFn is an #$IndividualDenotingFunction.  Given an element of #$GeopoliticalEntity as its single argument, #$GovernmentFn forms a non-atomic term (NAT) used to denote the element of #$RegionalGovernment that governs that geopolitical entity.  (#$GovernmentFn REGION) is the NAT used to denote the government of REGION.  For example, what is denoted by #$UnitedStatesFederalGovernment is the same as -- i.e., #$equals -- what is denoted by (#$GovernmentFn #$UnitedStatesOfAmerica).  See also #$government.")))

(defrelation government-type
  :arity 2
  :domain Geopolitical-Entity
  :range System-Of-Government
  :annotations (Binary-Predicate
                Intangible-Object-Predicate
                (documentation "The predicate #$governmentType indicates what kind of system of government a geopolitical entity has.  (#$governmentType REGION GOVSYSTEM) means that the government of the #$GeopoliticalEntity REGION is an element of the #$SystemOfGovernment type denoted by GOVSYSTEM.  For example, the #$governmentType of the #$UnitedStatesOfAmerica is a #$FederalRepublic and a #$RepresentativeDemocracy.")))

(defrelation gram
  :annotations (Cgs-Unit-Of-Measure
                Unit-Of-Measure-No-Prefix
                Unit-Of-Mass
                (documentation "The measurement function used in Cyc to represent the gram used within the Metric system to measure mass.  See also #$CGSUnitOfMeasure, #$UnitOfMeasure.")))

(defrelation grandchildren
  :arity 2
  :is-primitive (:and positive-vested-interest relatives)
  :domain Animal
  :range Animal
  :annotations (Asymmetric-Binary-Predicate
                (documentation "(#$grandchildren OLDER YOUNGER) means YOUNGER is the grandchild of OLDER.")))

(defrelation granule-of-stuff
  :arity 2
  :domain Existing-Stuff-Type
  :range (:and Existing-Object-Type
               (:filled-by superrelations Partially-Tangible))
  :annotations (Binary-Predicate
                (documentation "(#$granuleOfStuff STUFFTYPE OBJTYPE) means 
that the collection STUFFTYPE has as its spatial granules (or granularity level) the 
collection OBJTYPE. If some collection is spatially stuff-like, that means that 
the instances of that collection can be divided spatially, and the physical portions 
remaining will still be instances of that collection; e.g., a physcial portion of 
some instance of #$SandMob is still sand (cf. #$ExistingStuffType). Such division cannot 
go on indefinitely in this way,
however: eventually, division of something spatially stuff-like will result in the 
object-like 'granules' out of which the stuff-like thing is composed. For instances, 
division of sand would eventually result in individual grains of sand, division of 
water would eventually get down to individual molecules of water, etc. At this level 
of division or below, the remaining physical portions do NOT count as instances of 
the stuff-type from which they were divided. This may seem counter-intuitive: isn't 
an individual molecule of water still water? Perhaps in some sense, but since the 
individual granules of a stuff typically do NOT have most of the properties that 
the groups made of the granules have (including the property of being stuff-like), 
we do not count the individual granules as instances of the collection of which 
they are granules.")))

(defrelation granule-of-time
  :arity 2
  :domain Temporal-Stuff-Type
  :range Temporal-Object-Type
  :annotations (Binary-Predicate
                (documentation "(#$granuleOfTime STUFFTYPE OBJTYPE) means 
that the collection STUFFTYPE has as its temporal granules (or granularity level) the 
collection OBJTYPE. If some collection is temporally stuff-like, that means that 
the instances of that collection can be divided temporally, and the temporal slices 
remaining will still be instances of that collection; e.g., a time slice of 
some instance of #$Person is still a person, and a temporal slice of a walking process
is still a walking process (cf. #$TemporalStuffType). Such division cannot 
always go on indefinitely, however: eventually, division of something temporally 
stuff-like will result in the 
temporally object-like 'granules' out of which the stuff-like thing is composed. 
For instances, 
division of a walking process would eventually result in individual steps. At this level 
of division or below, the remaining temporal slices do NOT count as instances of 
the temporal stuff-type from which they were divided. This may seem counter-intuitive,
but since the 
individual temporal granules of a temporal stuff typically do NOT have most of the 
properties that the groups made of the granules have (including the property of being 
temporally stuff-like),  we do not count the individual granules as instances of the 
collection of which they are granules. See also #$granuleOfStuff.")))

(defrelation greater-than
  :arity 2
  :domain Scalar-Interval
  :range Scalar-Interval
  :annotations (Asymmetric-Binary-Predicate
                Transitive-Binary-Predicate
                Evaluatable-Function
                Numeric-Comparison
                (documentation "The predicate #$greaterThan is Cyc's representation of the `greater than' ( > ) relation in mathematics, adapted to use with Cyc's scalars, which include quantitative intervals as well as point values.  Formally, there are two conditions under which (#$greaterThan SI-1 SI-2) is true, for two elements of #$ScalarInterval: (1) (#$followingValue SI-1 SI-2) is true, or (2) the minimum of SI-1 is greater than the maximum of SI-2.  Note that `A is less than B' is expressed in CycL as (#$greaterThan B A).")))

(defrelation greater-than-or-equal-to
  :arity 2
  :domain Scalar-Interval
  :range Scalar-Interval
  :annotations (Transitive-Binary-Predicate
                Reflexive-Binary-Predicate
                Anti-Symmetric-Binary-Predicate
                Evaluatable-Function
                Numeric-Comparison
                (documentation "The predicate #$greaterThanOrEqualTo is Cyc's representation of the `greater than or equal to' ( >= ) relation in mathematics, adapted to use with Cyc's scalars, which include quantitative intervals as well as point values.  (See #$ScalarInterval.) Formally, there are three conditions under which (#$greaterThanOrEqualTo SI-1 SI-2) is true, for two elements of #$ScalarInterval: (1) (#$equals SI-1 SI-2) is true; (2) (#$followingValue SI-1 SI-2) is true; or (3) the minimum of SI-1 is greater than or equal to the maximum of SI-2.  Note that `A is less than or equal to B' is expressed in CycL as (#$greaterThanOrEqualTo B A).")))

(defrelation ground-of
  :arity 2
  :domain Partially-Tangible
  :range Surface--Physical
  :annotations (Spatial-Predicate
                Binary-Predicate
                (documentation "(#$groundOf OBJ GROUND) means that GROUND is the stationary surface on which OBJ is located and possibly supported.")))

(defrelation group-cardinality
  :arity 2
  :domain Group
  :range Non-Negative-Integer
  :annotations (Interval-Based-Quantity-Slot
                (documentation "The predicate #$groupCardinality is used to indicate the total number of members there are in a particular group.  (#$groupCardinality GROUP INTEGER) means that the number of members in the #$Group GROUP is INTEGER.  For example, the #$groupCardinality of the #$SevenWondersOfTheAncientWorld is 7.  Cyc infers that the #$groupCardinality of any group that is a pair is 2, and that of a dozen is 12.")))

(defrelation group-fn
  :arity 2
  :domain Object-Type
  :range (:and Object-Type (:filled-by superrelations Group))
  :annotations (Collection-Denoting-Function
                (documentation "#$GroupFn is a Cyc #$CollectionDenotingFunction.  #$GroupFn is used for referring to specializations of #$Group; esp. note that applications of #$GroupFn produce COLLECTIONS (of groups), not individual groups.  #$GroupFn takes any element of #$ObjectType as its argument and returns a subset of #$Group, namely the collection containing those groups whose #$groupMembers are elements of that #$ObjectType.  (#$GroupFn OBJ-TYPE) denotes the collection of all groups whose members belong to (#$isa) OBJ-TYPE. For example, (#$GroupFn #$BallisticMissile) represents the collection of all groups of ballistic missiles, e.g., Russia's ballistic missiles, China's ballistic missiles, the U.S.'s ballistic missiles, etc.  Another example: A group of 101 (particular) Dalmatians #$isa (#$GroupFn #$Dog).  Collections of groups of events may also be denoted; e.g., Columbus's voyages to North America constitute a group (of events) which #$isa (#$GroupFn #$Travel-TripEvent).")))

(defrelation group-members
  :arity 2
  :is-primitive (:and structure-members cotemporal)
  :domain Group
  :range Temporal-Thing
  :annotations (Cotemporal-Objects-Slot
                (documentation "The predicate #$groupMembers is used to relate a particular group to its individual members.  (#$groupMembers GROUP MEMBER) means that MEMBER is a member of GROUP.  For example,  the #$PyramidOfCheops is a member of the #$SevenWondersOfTheAncientWorld.  Or, to say that President Bill Clinton was a member of the Democratic Party throughout 1996, we would say: (#$holdsIn (#$YearFn 1996) (#$groupMembers #$DemocraticParty #$BillClinton)).")))

(defrelation group-member-type
  :arity 2
  :domain Group
  :range (:and Object-Type (:filled-by superrelations Temporal-Thing))
  :annotations (Binary-Predicate
                (documentation "The predicate #$groupMemberType is used in characterizing the members of a particular group.  (#$groupMemberType GROUP TYPE) means that all of GROUP's members are elements of the collection TYPE.  For example, to state that the #$groupMembers of the Austin City Council are humans, one would write (#$groupMemberType AustinCityCouncil #$Person).  The members of a particular group might be characterized in more than one way; e.g., a Hispanic Business Council may have both the #$groupMemberType #$EthnicGroupOfHispanics and the #$groupMemberType #$BusinessPerson (provided that all of its members are Hispanic business people).")))

(defrelation hair-color
  :arity 3
  :domains ((:and Animal Mammal)
            (:and Existing-Object-Type
             (:filled-by superrelations Animal-Body-Part)))
  :range Color
  :annotations (Ternary-Predicate
                Tangible-Object-Predicate
                (documentation "(#$hairColor ANIMAL BODYPARTTYPE COLOR) means that the hair which the #$Animal ANIMAL has on its BODYPARTTYPE has the #$Color COLOR.  E.g., (#$hairColor #$SantaClaus #$Chin #$WhiteColor).  This is normally #$Mammal hair, but certain #$Invertebrates also have hair.")))

(defrelation hangs-around
  :arity 2
  :is-primitive (:and on--physical hangs-from)
  :domain Solid-Tangible-Thing
  :range Solid-Tangible-Thing
  :annotations (Spatial-Predicate
                Connection-Predicate
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$hangsAround ?loop ?obj) means that ?loop is a semi-flexible loop, looped around a piece of ?obj.  ?loop is supported by gripping friction and/or ?loop's limited ability to elongate as it moves down on ?obj.  See also #$hangsFrom.")))

(defrelation hangs-from
  :arity 2
  :is-primitive supported-by
  :domain Solid-Tangible-Thing
  :range Solid-Tangible-Thing
  :annotations (Spatial-Predicate
                Connection-Predicate
                Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                (documentation "(#$hangsFrom ?obj1 ?obj2) means that ?obj1 is suspended from ?obj2, either directly touching it (like a weight attached to a line) or through some intermediary object (like a weight suspended from the ceiling).  All of the weight of ?obj1 is #$supportedBy ?obj2.  Most if not all of ?obj1 is below ?obj2. Certainly, the center of ?obj1 is below the connection point.  If pushed, ?obj1 will undergo #$Swinging without necessarily dislodging it.")))

(defrelation hardness-of-object
  :arity 2
  :domain Solid-Tangible-Thing
  :range Hardness
  :annotations (Interval-Based-Quantity-Slot
                Tangible-Object-Predicate
                (documentation "(#$hardnessOfObject OBJ DEGREE) means that the instance of #$SolidTangibleThing OBJ has this DEGREE of #$Hardness.")))

(defrelation has-as-tributary
  :arity 2
  :domain River
  :range River
  :annotations (Asymmetric-Binary-Predicate
                Physical-Part-Predicate
                (documentation "The predicate #$hasAsTributary is used to indicate the tributaries of a particular river.  (#$hasAsTributary BIGRIV SMALLRIV) means that BIGRIV has SMALLRIV as one of its tributaries.  SMALLRIV flows into BIGRIV.  Examples: the #$MississippiRiver has the #$WisconsinRiver, #$OhioRiver, #$ArkansasRiver, #$RedRiverOfTexas, and others as its tributaries.  Cf. #$formedByConfluenceOf.")))

(defrelation has-attributes
  :arity 2
  :domain Temporal-Thing
  :range Attribute-Value
  :annotations (Binary-Predicate
                (documentation "A very general predicate. (#$hasAttributes THING ATT) means that THING has the attribute ATT.  See also #$AttributeType and #$AttributeValue.")))

(defrelation has-belief-systems
  :arity 2
  :domain Intelligent-Agent
  :range Belief-System
  :annotations (Binary-Predicate
                (documentation "(#$hasBeliefSystems AGT BSYS) means that the #$Agent AGT has the belief system BSYS.   E.g., (#$hasBeliefSystems BorisYeltsin #$RussianOrthodoxReligion).")))

(defrelation has-climate-type
  :arity 2
  :domain Geographical-Region
  :range (:and Climate-Cycle-Type
               (:filled-by superrelations Annual-Climate-Cycle))
  :annotations (Binary-Predicate
                (documentation "The predicate #$hasClimateType is used to specify the type of climate that occurs in a particular region.  (#$hasClimateType AREA CLIME) means that the climate in the #$GeographicalRegion AREA is of the #$ClimateCycleType CLIME; i.e., any individual annual cycle falls under the type CLIME.  For example, to describe the climate of Houston, we would say: (#$hasClimateType #$CityOfHoustonTX #$HumidSubtropicalClimateCycle).  See also #$ClimateCycleType, #$AnnualClimateCycle.")))

(defrelation has-comm-convention
  :arity 2
  :domain Agent
  :range Communication-Convention
  :annotations (Binary-Predicate
                (documentation "(#$hasCommConvention AGENT CONV) means that the agent AGENT knows the #$CommunicationConvention CONV and can use it to encode or decode information.")))

(defrelation has-gender
  :arity 2
  :domain Biological-Living-Object
  :range Gender-Of-Living-Thing
  :annotations (Functional-Slot
                (documentation "(#$hasGender BLO SEX) means that the #$BiologicalLivingObject BLO is of the gender SEX.")))

(defrelation has-habitat
  :arity 2
  :domain Organism--Whole
  :range Ecological-Region
  :annotations (Functional-Slot
                (documentation "The predicate #$hasHabitat is used to relate an organism to the region where it lives.  (#$hasHabitat ORG REGION) means that the organism ORG lives in the #$EcologicalRegion REGION. Typically, REGION will belong to one of the subsets of #$EcologicalRegion which represent specific biomes (e.g., #$Desert, #$CoralReef).")))

(defrelation has-headquarters-in-country
  :arity 2
  :domain Organization
  :range Country
  :annotations (Binary-Predicate
                (documentation "The predicate #$hasHeadquartersInCountry identifies the country in which a particular organization has its headquarters.  (#$hasHeadquartersInCountry ORG COUNTRY) means that the #$Organization ORG has its world-wide headquarters and place of primary central control in the #$Country COUNTRY.")))

(defrelation has-levels
  :arity 2
  :is-primitive physical-parts
  :domain Construction-Artifact
  :range Level-Of-A-Construction
  :annotations (Part-Predicate
                Binary-Predicate
                (documentation "Levels which are part of this building")))

(defrelation has-members
  :arity 2
  :is-primitive cotemporal
  :domain Organization
  :range Agent
  :annotations (Cotemporal-Objects-Slot
                Sub-Process-Slot
                Taxonomic-Slot
                (documentation "The predicate #$hasMembers relates a particular organization to the agents which are members of that organization.  This predicate indicates `generic' membership, although there may be specialized kinds of membership in the same organization.  (#$hasMembers ORG AGENT) means that AGENT is a member of the #$Organization ORG; typically, membership elegibility is determined by ORG and accepted with AGENT's voluntary affiliation.  For example, (#$hasMembers 'PeanutsBaseballTeam' #$CharlieBrown).   A member may be any #$Agent, including other #$Organizations (such as member countries in the United Nations).  The truth of an assertion made with #$hasMembers may be time-dependent and, if so, should be qualified appropriately.  E.g., (#$holdsIn (#$YearFn 1975) (#$hasMembers #$UnitedNationsOrganization #$Taiwan-RepublicOfChina)) is true, but (#$holdsIn (#$YearFn 1995) (#$hasMembers #$UnitedNationsOrganization #$Taiwan-RepublicOfChina)) is not.")))

(defrelation has-ownership-in
  :arity 2
  :domain Agent
  :range Something-Existing
  :annotations (Binary-Predicate
                (documentation "The predicate #$hasOwnershipIn relates a particular agent to some thing of which it has part or whole ownership.  (#$hasOwnershipIn AGENT SOMETHING) means that the #$Agent AGENT owns a part (or possibly the whole) of the thing SOMETHING.  For example, Ted Turner #$hasOwnershipIn Atlanta's Olympic Stadium. There may be other owners.  See also #$legalOwnerOf and #$ownsShare.")))

(defrelation has-patients
  :arity 2
  :is-primitive clients
  :domain Medical-Care-Provider
  :range Animal
  :annotations (Binary-Predicate
                (documentation "The predicate #$hasPatients represents a relationship between a medical professional and a patient (including nonhuman animals).  (#$hasPatients MEDIC PATIENT) means that the #$MedicalCareProvider MEDIC is treating the recipient-of-care PATIENT.  PATIENT may be a human or a nonhuman animal.  An assertion using #$hasPatients holds only during the time that PATIENT has a condition that is being treated by MEDIC; it does not represent or imply a long term doctor-patient relationship.")))

(defrelation has-physiological-attributes
  :arity 2
  :is-primitive has-attributes
  :domain Biological-Living-Object
  :range Physiological-Attribute
  :annotations (Binary-Predicate
                (documentation "(#$hasPhysiologicalAttributes ?BLO  ?ATT) means that the #$BiologicalLivingObject ?BLO has the #$PhysiologicalAttribute ?ATT.  #$PhysiologicalAttributes are concerned with the physiological functions of a living animal, especially with the physical and/or (bio)chemical basis of those functions.  However, #$PhysiologicalAttributes need not be specified in scientific detail.  Many common #$PhysiologicalAttributes permit commonsense inference about further features of an individual having a certain physiological state or condition.  Note that many, perhaps most, assertions made with #$hasPhysiologicalAttributes will be time-dependent; e.g., an individual person is not #$SexuallyMature throughout his or her life, but only during a portion of it.  Thus, it is necessary to make these assertions only about the appropriate temporal #$subAbstrac; one way to do that is by using #$holdsIn; e.g., (#$holdsIn (#$YearFn 1820)  (#$hasPhysiologicalAttributes #$LudwigVanBeethoven #$Deaf)).")))

(defrelation has-portal-to-region
  :arity 2
  :is-primitive cotemporal
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Binary-Predicate
                (documentation "ARG1 is connected to ARG2 through some type of portal (e.g. #$hasPortalToRegion(MyMasterBedroom MyMaterBathroom))")))

(defrelation has-position-in
  :arity 3
  :domains (Person Organization)
  :range Position-Type
  :annotations (Ternary-Predicate
                (documentation "The predicate #$hasPositionIn is used to relate a particular person to his or her position in a particular organization.  (#$hasPositionIn PER ORG POS-TYPE) means that the #$Person PER works in the #$Organization ORG, in a position of type POS-TYPE.  POS-TYPE may or may not specifically indicate PER's occupational field or training; that is, one individual occupying a position of #$Manager may be a #$MarketingPerson, while another is an #$ElectricalEngineer.  In addition, POS-TYPE may or may not correspond to an official `Job Title' (cf. #$hasTitle) or be the primary occupation of PER.  Contrast, e.g., (#$hasPositionIn JerryLewis MarchOfDimes #$Spokesman) with (#$hasPositionIn DellaStreet PerryMasonsLawOffice #$Secretary).  Note that assertions using #$hasPositionIn should be properly time-constrained, for example with #$holdsIn.")))

(defrelation has-preparation-attributes
  :arity 2
  :domain Edible-Stuff
  :range Preparation-Attribute
  :annotations (Binary-Predicate
                (documentation "The predicate #$hasPreparationAttributes is used to indicate the way in which a particular food item was prepared.  (#$hasPreparationAttributes EDIBLE PREP) means the #$EdibleStuff EDIBLE has been processed so that it has the food #$PreparationAttribute PREP (e.g., #$Cooked, #$Roasted, #$Chilled -- or #$Raw).  For example, a piece of #$Toast #$hasPreparationAttributes #$Toasted; any quantity of #$Beer that is ready to drink #$hasPreparationAttributes #$Fermented.")))

(defrelation has-rooms
  :arity 2
  :is-primitive (:and contains-cavity physical-parts internal-parts cotemporal)
  :domain Construction-Artifact
  :range Space-In-A-Hoc
  :annotations (Cotemporal-Objects-Slot
                Physical-Part-Predicate
                (documentation "The predicate #$hasRooms allows us to say that a particular space is within a particular building.  (#$hasRooms BUILD ROOM) means that ROOM is a room or demarcated space which is physically contained within BUILD, a #$ConstructionArtifact.  ROOM is not removable from BUILD.  Spaces that can be identified in this way include lobbies, hallways, kitchens, closets, dining rooms, gymnasia, studios, stairwells, bedrooms, etc.")))

(defrelation has-same-entity-as
  :arity 2
  :domain Something-Existing
  :range Something-Existing
  :annotations (Inter-Existing-Object-Slot
                Symmetric-Binary-Predicate
                Reflexive-Binary-Predicate
                Transitive-Binary-Predicate
                (documentation "(#$hasSameEntityAs ?X ?Y) indicates that ?X and ?Y are both subabstractions of the same #$Entity.  The unique #$myEntity of ?X is the same as the unique #$myEntity of ?Y.  For instance, AlbertEinsteinAsAnAdult and AlbertEinsteinWhileAtPrinceton are in this relationship.")))

(defrelation has-title
  :arity 3
  :domains (Person Title)
  :range Organization
  :annotations (Ternary-Predicate
                (documentation "The predicate #$hasTitle relates a person to a title that s/he holds in an organization.  (#$hasTitle PER TITLE ORG) means that the #$Person PER has the #$Title TITLE in the #$Organization ORG.  Elements of #$Title are linguistic objects usually related to positions or other qualifications that a person has.  A person generally has a title only while actually holding the related position; e.g., (#$hasTitle #$Lenat #$PrincipalScientist-Title #$CycGroup) tells us Doug Lenat's title at the Cyc Project while under MCC's organizational structure.  A noteworthy class of exceptions is #$CourtesyTitle (q.v.), which include forms of address such as `Mr.' and `Ms.', plus some titles which by courtesy the holders retain for life, such as (in the U.S.) `President' and military rank designations (e.g., officers retired from the armed services).
Note: Elements of #$Title belong to the set #$LinguisticObject, while positions themselves are represented by persons (cf. #$PositionType).  Cf. #$hasPositionIn.")))

(defrelation has-workers
  :arity 2
  :is-primitive (:and works-with cotemporal)
  :domain Agent
  :range Agent
  :annotations (Asymmetric-Binary-Predicate
                Cotemporal-Objects-Slot
                (documentation "The predicate #$hasWorkers relates an
organization or individual agent to those who work for it in any capacity.  (#$hasWorkers
AGENT1 AGENT2) says that the second agent regularly
 works for the first agent.  This includes employees,
managers, soldiers, sailors, certain prison inmates, volunteers,
apprentices, slaves, servants, sharecroppers, and indentured workers
(as well as other organizations, e.g. subcontractors).  The truth of
an assertion made with #$hasWorkers is time-relative; e.g.,
(#$hasWorkers #$Cycorp #$Dexter) is true when asserted for the period
(or any sub-period) from May 1989 to July 1994.  Note that `workers'
in the sense of #$hasWorkers need not be #$employees (e.g., they could
be volunteers); cf. #$employees.")))

(defrelation headquarters
  :arity 2
  :is-primitive physical-quarters
  :domain Organization
  :range Construction-Artifact
  :annotations (Binary-Predicate
                (documentation "The predicate #$headquarters indicates the building(s) where a particular organization has its headquarters.  (#$headquarters ORG BUILDING) means that BUILDING is the buildings, rooms, offices, etc., which house the main administrative and decision-making functions of the #$Organization ORG.")))

(defrelation hears
  :arity 2
  :is-primitive perceives
  :domain Perceptual-Agent
  :range Temporal-Thing
  :annotations (Perceiving-Slot
                Tangible-Object-Predicate
                (documentation "(#$hears AGT OBJ) means that the #$PerceptualAgent AGT percieves sounds emananating from or as the result of OBJ.  Events such as the shooting of a gun and tangible objects such as telephones are things which can emit audible sound and thus be perceived auditorily. ")))

(defrelation height-of-object
  :arity 2
  :domain Partially-Tangible
  :range Distance
  :annotations (Physical-Amount-Slot
                (documentation "(#$heightOfObject OBJ HEIGHT) means that the #$Distance from OBJ's top boundary to its bottom boundary is HEIGHT.  Note that top and bottom are determined by an object's default orientation, if it has one (as do, e.g., people, houses, cars, trees); otherwise, by the orientation of the object in its environment.")))

(defrelation hertz
  :annotations (Unit-Of-Measure-No-Prefix
                Standard-Unit-Of-Measure
                Unit-Of-Frequency
                (documentation "A Cyc function, specifically an #$IndividualDenotingFunction.  #$Hertz represents the basic unit of measure for elements of #$Frequency (1 Hz=1 cycle per second).  (#$Hertz NUM) denotes the frequency NUM cycles per second.")))

(defrelation high-amount-fn
  :arity 2
  :domain (:and Primitive-Attribute-Type
                (:filled-by superrelations Scalar-Interval))
  :range Scalar-Interval
  :annotations (Generic-Value-Function
                (documentation "#$HighAmountFn is a Cyc function, in particular, an element of #$IndividualDenotingFunction.  It is one of several functions used to denote so-called generic values for a wide variety of attributes.  When ATT is a type of attribute, (#$HighAmountFn ATT) returns an instance of ATT which is considered `a high amount of' ATT in the current context.  A high amount of ATT is more than (#$MediumAmountFn ATT) but less than (#$VeryHighAmountFn ATT).")))

(defrelation hinged-to
  :arity 2
  :is-primitive rotationally-connected-to
  :domain Solid-Tangible-Thing
  :range Solid-Tangible-Thing
  :annotations (Physical-Feature-Describing-Predicate
                Extensional-Representation-Predicate
                Symmetric-Binary-Predicate
                Spatial-Predicate
                Connection-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$hingedTo OBJ1 OBJ2) means that there is some hinge connecting OBJ1 and OBJ2 which allows limited rotational motion between them.  That is the only relative motion that can occur between them.  The hinged pivoting motion may be repeated.  #$hingedTo is noncommittal about whether the hinge is a distinct object or is part of OBJ1 or OBJ2.  Some edge of OBJ1 adjoins an edge of OBJ2.")))

(defrelation holds-in
  :arity 2
  :domain Temporal-Thing
  :range Cyc-Formula
  :annotations (Binary-Predicate
                (documentation "(#$holdsIn ?X ?P) means that the proposition ?P is true during the temporal extent of #$TemporalThing ?X.  To represent `Nick owned Spot in 1992' we could create the appropriate cotemporal subabstractions of each, and assert (#$owns NickIn1992 SpotIn1992).  More tersely, we could use #$holdsIn and simply assert (#$holdsIn (#$YearFn 1992) (#$owns Nick Spot)), since #$holdsIn implicitly treats instances of #$SomethingExisting as their appropriate temporal subabstractions.  Alternatively, we could create a context (a microtheory) one of whose assumptions was a temporal one, limiting all axioms to holding during 1992, and then in that context we could simply assert (#$owns Nick Spot).  But it would be incorrect to assert (#$owns Nick Spot) in the #$BaseKB --- i.e., devoid of context --- since Nick as a baby and Nick as an old man didn't/won't own Spot.")))

(defrelation horse-power
  :annotations (Unit-Of-Measure-No-Prefix
                Unit-Of-Power
                (documentation "An english unit of power.  The power that, roughly, a single workhorse can continually supply")))

(defrelation host-of-event
  :arity 2
  :is-primitive social-participants
  :domain Social-Gathering
  :range Agent
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                (documentation "(#$hostOfEvent GATHERING AGENT) means that AGENT is a host and sponsor of the #$SocialGathering GATHERING.")))

(defrelation hour-fn
  :arity 3
  :domains (Non-Negative-Integer Calendar-Day)
  :range Calendar-Hour
  :annotations (Non-Predicate-Function
                Individual-Denoting-Function
                (documentation "(#$HourFn ?H ?D) denotes a #$CalendarHour -- in particular, hour number ?H (military time) of day ?D.  For example, (#$HourFn 18 (#$DayFn 14 (#$MonthFn #$February (#$YearFn 1966)))) denotes 6pm Feb. 14th, 1966")))

(defrelation hours-duration
  :annotations (Unit-Of-Measure
                Unit-Of-Measure-No-Prefix
                Unit-Of-Time
                (documentation "This is a function that takes one or two numbers and returns, as its value, some amount of #$Time.  An expression of the form (#$HoursDuration ?min ?max) denotes a quantity of #$Time that is at least ?min hours and at most ?max hours.  (#$HoursDuration ?num) denotes a quantity of #$Time that is exactly ?num hours.")))

(defrelation hunger-level-of
  :arity 2
  :domain Level-Of-Hunger
  :range Animal
  :annotations (Intangible-Object-Predicate
                Binary-Predicate
                (documentation "Just what it says")))

(defrelation ibo-created
  :arity 2
  :is-primitive (:and outputs-created information-destination ibt-generated)
  :domain Ibo-Creation
  :range Information-Bearing-Object
  :annotations (Actor-Slot
                (documentation "The predicate #$iboCreated is used to link a particular information bearing object (IBO) to the event in which it is created.  (#$iboCreated CREATION IBO) means that the #$InformationBearingObject IBO is created in the event CREATION.  For example, my copy of today's `Austin American-Statesman' morning paper was created during the previous night's paper-publishing event.")))

(defrelation ibt-generated
  :arity 2
  :domain Ibt-Generation
  :range Information-Bearing-Thing
  :annotations (Binary-Predicate
                Cyc_Role
                (documentation "The predicate #$ibtGenerated is used to link a particular information bearing thing (IBT) to the event in which it is created.  (#$ibtGenerated GEN IBT) means that the #$InformationBearingThing IBT comes about, happens, or comes into existence in or as an immediate consequence of the event GEN.")))

(defrelation ibt-has-info-about
  :arity 2
  :domain Information-Bearing-Thing
  :range Cyc_Thing
  :annotations (Binary-Predicate
                (documentation "(#$ibtHasInfoAbout ?IBT ?THING) means that the #$InformationBearingThing ?IBT is generally 'about' ?THING -- which may be any #$Thing at all.  This is a very general notion of aboutness, which does not require that ?THING be explicitly named in ?IBT, nor that it be the main topic.")))

(defrelation identical-in-attribute
  :arity 3
  :domains (Cyc_Thing Cyc_Thing)
  :range Attribute-Type
  :annotations (Ternary-Predicate
                (documentation "(#$identicalInAttribute THING1 THING2 ATTRIBUTE) means that the two things THING1 and THING2 have the same values of the #$AttributeType ATTRIBUTE.  Here 'the same' means complete identity or very close resemblance -- what this means, and what the standard of closeness or identity is, depends on the context, but #$identicalInAttribute and #$differentInAttribute cannot both be correctly asserted of the same two things.  See also #$resemblesInAttribute, and #$differentInAttribute.")))

(defrelation illumination-level
  :arity 2
  :domain Partially-Tangible
  :range Light-Intensity
  :annotations (Interval-Based-Quantity-Slot
                (documentation "(#$illuminationLevel LOC DEGREE) indicates how brightly illuminated the location LOC is.  Higher values of DEGREE mean greater light intensity.")))

(defrelation cyc_implies
  :arity 2
  :domain Cyc-Formula
  :range Cyc-Formula
  :annotations (Relationship
                Logical-Connective
                (documentation "The predicate #$implies represents the material implication relation in Cyc.  #$implies is a logical connective taking two arguments, each of which must be an element of #$CycFormula.   (#$implies ANTE CONSEQ) means that whenever the formula ANTE is true, the formula CONSEQ must also be true; in other words, it is not the case that ANTE is true while CONSEQ is false.  Cyc assertions that begin with #$implies are used during inference, both in modus ponens and modus tollens.")))

(defrelation in--among
  :arity 2
  :is-primitive (:and object-found-in-location cotemporal)
  :domain Partially-Tangible
  :range Group
  :annotations (Spatial-Predicate
                Cotemporal-Objects-Slot
                (documentation "(#$in-Among OBJ GROUP) means that the tangible thing OBJ is physically located within the spatial cluster GROUP, which is composed of individuals.  OBJ may (but need not) be a member of GROUP.  OBJ is spatially distinct from any (other) member of GROUP; cf. #$spatiallyIntersects.  Examples: a bird in the branches of a tree; a zebra in its herd; a flea in a dog's pelt; a bee in a swarm of bees; a snake in the grass.")))

(defrelation in--cont-closed
  :arity 2
  :is-primitive (:and in--cont-generic cotemporal)
  :domain Partially-Tangible
  :range Solid-Tangible-Thing
  :annotations (Spatial-Predicate
                Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Cotemporal-Objects-Slot
                Irreflexive-Binary-Predicate
                (documentation "(#$in-ContClosed OBJ CONT) means that OBJ is contained in CONT and cannot leave CONT unless CONT opens or breaks, or OBJ is broken into pieces small enough to escape from CONT.  Examples: water in a bottle; CD in a CD case; food in a plastic zip bag; books in a backpack; spare tire in the trunk.  In order for a relation to count as #$in-ContClosed, the container must have a portal, even though that portal is closed while this relation holds.  So, for example, it is NOT proper to use #$in-ContClosed to say that an egg is in its eggshell, or that a brain is in its skull.  See also #$Portal.")))

(defrelation in--cont-full-of
  :arity 2
  :is-primitive (:and in--cont-generic touches-directly cotemporal)
  :domain Partially-Tangible
  :range Solid-Tangible-Thing
  :annotations (Spatial-Predicate
                Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Cotemporal-Objects-Slot
                Irreflexive-Binary-Predicate
                (documentation "(#$in-ContFullOf STUFF CONT) means that STUFF is the substance that fills CONT.  STUFF is unique in that it is the only substance that `fills' CONT, even though other things may be with it in CONT (e.g., as #$in-ContGeneric).  Filling the container means that the inside surface of CONT touches the filling STUFF at virtually all points of CONT's inner surface, rather than touching whatever stuff CONT itself is immersed in and which CONT's outside surface touches (e.g., air).  The only thing which can override this #$touches (i.e., get alongside CONT's inside wall without being STUFF) would be some other object which is also in CONT (e.g., with #$in-ContGeneric).  In order to fill the container, STUFF must be #$Pourable or have a shape which conforms to the shape of CONT's cavity.  Cf. #$in-ContGeneric to cover cases of stuff which is in a container without filling it. ")))

(defrelation in--cont-generic
  :arity 2
  :is-primitive (:and cotemporal object-found-in-location)
  :domain Partially-Tangible
  :range Solid-Tangible-Thing
  :annotations (Cotemporal-Objects-Slot
                Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Spatial-Predicate
                (documentation "(#$in-ContGeneric OBJ CONT) means that OBJ is contained, confined, or held in CONT.  CONT may be open or closed. See also #$in-ContOpen, #$in-ContClosed, #$in-ContFullOf, #$inRegion.")))

(defrelation in--cont-open
  :arity 2
  :is-primitive (:and in--cont-generic cotemporal)
  :domain Partially-Tangible
  :range Solid-Tangible-Thing
  :annotations (Spatial-Predicate
                Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Cotemporal-Objects-Slot
                Irreflexive-Binary-Predicate
                (documentation "(#$in-ContOpen OBJ CONT) means that OBJ is contained in CONT -- CONT confines or holds OBJ in -- but OBJ can be removed from CONT without having to open any portals in CONT.  In gravity fields, CONT is right-side-up, and if CONT is turned over, OBJ will fall out.  Cf. #$in-ContClosed.")))

(defrelation in--embedded
  :arity 2
  :is-primitive (:and object-found-in-location
                      cotemporal
                      touches-directly
                      connected-to)
  :domain Solid-Tangible-Thing
  :range Solid-Tangible-Thing
  :annotations (Spatial-Predicate
                Connection-Predicate
                Irreflexive-Binary-Predicate
                Cotemporal-Objects-Slot
                (documentation "(#$in-Embedded OBJ1 OBJ2) means that some portion of OBJ1 is embedded in OBJ2 at least semi-permanently.  OBJ1 is thus #$connectedTo OBJ2.  The remaining portion of OBJ1 is not embedded in OBJ2. In many cases, an #$in-Embedded relationship comes about during the formation of OBJ1 or OBJ2.  Examples: grass in the ground, hair in the scalp, or eyes in sockets.")))

(defrelation in--floating
  :arity 2
  :is-primitive (:and above--touching in--immersed-partly)
  :domain Solid-Tangible-Thing
  :range Liquid-Tangible-Thing
  :annotations (Spatial-Predicate
                Anti-Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                (documentation "(#$in-Floating OBJ LIQUID) means that OBJ is floating in LIQUID.  Thus, OBJ is buoyant and is #$in-ImmersedPartly in LIQUID.")))

(defrelation in--held
  :arity 2
  :is-primitive (:and touches in--cont-generic cotemporal)
  :domain Solid-Tangible-Thing
  :range Solid-Tangible-Thing
  :annotations (Spatial-Predicate
                Anti-Symmetric-Binary-Predicate
                Cotemporal-Objects-Slot
                (documentation "(#$in-Held OBJ HOLDER) means that OBJ is being held or restrained by HOLDER, which is applying pressure to OBJ.  HOLDER #$touches OBJ.  HOLDER may be either a #$deviceUsed or an #$anatomicalPartTypeAffected in an instance of #$HoldingAnObject; OBJ would be the #$objectActedOn by that holding.")))

(defrelation in--immersed-fully
  :arity 2
  :is-primitive (:and cotemporal in--immersed-generic object-found-in-location)
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Cotemporal-Objects-Slot
                Anti-Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Spatial-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$in-ImmersedFully OBJ FLUID) means that FLUID is the unique fluid in which OBJ is completely immersed.  Thus, as a default inference, every outside surface region of OBJ #$touches FLUID.  E.g., (live) fish are fully immersed in water, and people are usually immersed in air (even though the bottoms of their feet touch the ground and not the air).  Examples like air bubbles in water or mercury globules immersed in air suggest that the #$arg1Isa should be kept general, i.e., #$PartiallyTangible rather than #$SolidTangibleThing.")))

(defrelation in--immersed-generic
  :arity 2
  :is-primitive touches
  :domain Partially-Tangible
  :range Fluid-Tangible-Thing
  :annotations (Spatial-Predicate
                Asymmetric-Binary-Predicate
                Anti-Transitive-Binary-Predicate
                (documentation "(#$in-ImmersedGeneric OBJ FLUID) means that OBJ is immersed in FLUID.  #$in-ImmersedGeneric is noncomittal as to whether OBJ is completely or partially immersed.  But FLUID #$touches OBJ and conforms to a significant portion of the surface of OBJ.   See also #$in-ImmersedFully, #$in-ImmersedPartly.")))

(defrelation in--immersed-partly
  :arity 2
  :is-primitive in--immersed-generic
  :domain Partially-Tangible
  :range Fluid-Tangible-Thing
  :annotations (Spatial-Predicate
                Anti-Transitive-Binary-Predicate
                Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                (documentation "(#$in-ImmersedPartly OBJ FLUID) means that a portion of OBJ is immersed in FLUID, but OBJ is not completely surrounded by FLUID.  In gravitational fields, #$in-ImmersedPartly entails #$surroundsHorizontally, because in that context fluid surfaces are of generally #$HorizontalOrientation.")))

(defrelation in--lodged
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Asymmetric-Binary-Predicate))

(defrelation in--permeates
  :arity 2
  :is-primitive object-found-in-location
  :domain Liquid-Tangible-Thing
  :range Solid-Tangible-Thing
  :annotations (Irreflexive-Binary-Predicate
                (documentation "(#$in-Permeates LIQUID SOLID)
means that LIQUID permeates SOLID.  LIQUID must be separable from SOLID
by physical, not chemical means.  If LIQUID is not a constituent (see
#$constituents) of SOLID, then SOLID is porous (see #$Porous).
Exemplars include water permeating a wet sponge, oil soaking a sponge,
or water in soil.  Negative exemplars include vapor suspended in air
(see, e.g. #$suspendingFluid or #$solute) .  Other negative exemplars
include liquids which undergoe a chemical change and combine with some
other substance, e.g. water which becomes a chemical part of plant
material in photosynthesis.")))

(defrelation in--snugly
  :arity 2
  :is-primitive (:and in--cont-generic touches cotemporal)
  :domain Solid-Tangible-Thing
  :range Solid-Tangible-Thing
  :annotations (Spatial-Predicate
                Cotemporal-Objects-Slot
                (documentation "The #$BinaryPredicate (#$in-Snugly ?INNER ?OUTER) means that ?INNER is #$in-ContGeneric ?OUTER, that ?INNER #$touches ?OUTER, and that a #$FrictionProcess would be necessary for a #$RemovingSomething in which ?INNER is the #$objectMoving and ?OUTER is the #$fromLocation.")))

(defrelation in--spiked
  :arity 2
  :is-primitive (:and connected-to--rigidly in--embedded in--lodged)
  :domain Solid-Tangible-Thing
  :range Solid-Tangible-Thing
  :annotations (Spatial-Predicate
                Connection-Predicate
                Asymmetric-Binary-Predicate
                (documentation "(#$in-Spiked OBJ REG) means that an object, OBJ, is spiked into another object, REG, in the way that nails, push pins, needles, and other pointed objects stick into other objects.  Thus, OBJ must be #$LongAndThin and must be harder than REG.  Typically, the rigid connection between REG and OBJ can support forces substantially greater than the weight of OBJ.")))

(defrelation inch
  :annotations (Unit-Of-Measure-No-Prefix
                Unit-Of-Distance
                Fps-Unit-Of-Measure
                (documentation "The measurement function used in Cyc to represent the inch used to measure length within the British (FPS) system.  See also #$FPSUnitOfMeasure, #$UnitOfMeasure.")))

(defrelation included-items
  :arity 2
  :is-primitive parts
  :domain Formal-Product
  :range Individual
  :annotations (Anti-Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Part-Predicate
                (documentation "The predicate #$includedItems is used to identify the peripheral items that come with a particular packaged product.  (#$includedItems FORM ITEM) means that the #$Individual ITEM is one of the things that are included in the #$FormalProduct FORM, along with its #$mainProduct; but ITEM is not the main product itself.  ITEM can be an accessory, owner's manual, warranty agreement, or included service.  ITEM is something that is a regular part of the package.  ITEM does NOT refer to free samples or extras thrown in--for that, see #$includesWithProductType.")))

(defrelation includes-with-product-type
  :arity 3
  :domains (Commercial-Organization
            (:and Product-Type (:filled-by superrelations Product)))
  :range (:and Product-Type (:filled-by superrelations Product))
  :annotations (Ternary-Predicate
                (documentation "The predicate #$includesWithProductType is used to specify `extras' that a particular seller includes with a specific product.  (#$includesWithProductType SELLER MAINTYPE EXTRATYPE) means that the #$CommercialOrganization SELLER provides an item of the #$ProductType EXTRATYPE free of charge to its customers who purchase a product of #$ProductType MAINTYPE.  For example, to say that Ernie's Garage provides towing free with a car repair, we could say (#$includesWithProductType ErniesGarage #$CarRepairing #$TowingAnAutomobile).")))

(defrelation income
  :arity 2
  :domain Agent
  :range Monetary-Flow-Rate
  :annotations (Interval-Based-Quantity-Slot
                (documentation "The predicate #$income is used to state the income of a person or other agent.  (#$income AGT RATE) means that the #$Agent AGT has the income RATE, where RATE is a #$MonetaryFlowRate, e.g., a number of #$DollarsPerHour or #$DollarsPerYear.  See #$MonetaryFlowRate.")))

(defrelation infecting-organism
  :arity 2
  :is-primitive pre-actors
  :domain Infection
  :range Organism--Whole
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "This predicate relates a particular instance of #$Infection to an organism which causes that infection.  (#$infectingOrganism INFECT ORG) means that the organism ORG is one of the causes of the infection INFECT.  For example, if INFECT is a case of  #$StrepThroat, then ORG is an instance of #$Streptococcus.  I.e., 
(#$forAll ?x
  (#$forAll ?y
     (#$implies 
         (#$and
             (#$isa ?x #$StrepThroat) 
             (#$infectingOrganism ?x ?y))
         (#$isa ?y #$Streptococcus))))
")))

(defrelation infection-fn
  :arity 2
  :domain (:and Existing-Object-Type
                (:filled-by superrelations Animal-Body-Part))
  :range (:and Infection-Type (:filled-by superrelations Infection))
  :annotations (Collection-Denoting-Function
                (documentation "#$InfectionFn is a Cyc function, and in particular a #$CollectionDenotingFunction.  It is used to decribe ailments according to the region of the animal's body in which they are found.  (#$InfectionFn REGION) denotes the collection of infections of the region of the body, REGION.  For example, (#$InfectionFn #$Throat) is the set of all throat infections, and hence a subset of #$Infection.  When you get a case of strep throat, that is an element of (#$InfectionFn #$Throat).   When you get appendicitis, that is an element of the set represented by (#$InfectionFn #$Appendix-OrganPart).")))

(defrelation infection-host
  :arity 2
  :is-primitive bodily-doer
  :domain Infection
  :range Organism--Whole
  :annotations (Irreflexive-Binary-Predicate
                Anti-Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "This predicate relates a particular case of #$Infection to the organism it is infecting.  (#$infectionHost INF ORG) means that INF is an #$Infection in which the host organism is ORG.")))

(defrelation infinitive
  :arity 2
  :domain English-Word
  :range Character-String
  :annotations (Binary-Predicate
                Intangible-Object-Predicate
                (documentation "(#$infinitive WORD STRING) means that STRING is the infinitive verb form of WORD.  For example, `to hit' is the infinitive form of #$Hit-TheWord.")))

(defrelation info-added
  :arity 2
  :is-primitive info-transferred
  :domain Information-Updating
  :range Abstract-Information
  :annotations (Cyc_Role
                Binary-Predicate
                (documentation "(#$infoAdded CHANGE INFO) means that in the #$InformationUpdating action, CHANGE, INFO was added to the IBO (#$InformationBearingObject) acted on.")))

(defrelation info-contributed
  :arity 3
  :domains (Multi-Directional-Communication Agent)
  :range Propositional-Information-Thing
  :annotations (Ternary-Predicate
                (documentation "The predicate #$infoContributed is used to identify which agent said what in a particular complex communication activity.  (#$infoContributed MULTICOM AGENT INFO) means that in the #$MultiDirectionalCommunication event MULTICOM, AGENT does something that expresses INFO.  Note that speaking, writing, or otherwise signalling are all viable methods of `saying'.  The (unspecified) thing that AGENT does in MULTICOM generates the message, and INFO is a propositional item expressing the content of AGENT's message.  See also #$PropositionalInformationThing and #$IBTGeneration.")))

(defrelation info-removed
  :arity 2
  :is-primitive info-transferred
  :domain Information-Updating
  :range Abstract-Information
  :annotations (Cyc_Role
                Binary-Predicate
                (documentation "(#$infoRemoved CHANGE INFO) means that in the #$InformationUpdating action, CHANGE, INFO was removed from the IBO (#$InformationBearingObject) acted on.")))

(defrelation information-destination
  :arity 2
  :domain Information-Transfer-Event
  :range Temporal-Thing
  :annotations (Binary-Predicate
                Cyc_Role
                (documentation "The predicate #$informationDestination is used to indicate where information is transferred in a particular information transfer event.  (#$informationDestination TRANSFER DEST) means that in the #$InformationTransferEvent TRANSFER, the information being transferred is sent, given to, or impressed upon DEST.  DEST is an IBT (i.e., an element of #$InformationBearingThing) or an agent.  Note that if DEST is an agent, you should probably use the more specific actor slot, #$recipientOfInfo.  Note also that if DEST existed before the transfer, it may have already contained the information.")))

(defrelation information-origin
  :arity 2
  :domain Information-Transfer-Event
  :range Temporal-Thing
  :annotations (Binary-Predicate
                Cyc_Role
                (documentation "The predicate #$informationOrigin is used to indicate the source of information for a particular communication event.  (#$informationOrigin TRANSFER ORIGIN) means that in the #$InformationTransferEvent TRANSFER, the information being transferred is coming from ORIGIN.  ORIGIN is either an IBT (i.e., element of #$InformationBearingThing) or an agent.  Note that if ORIGIN still exists past the transfer, it presumably still contains the information.")))

(defrelation inform-statement
  :arity 2
  :is-primitive ist--information
  :domain Propositional-Information-Thing
  :range Cyc-Formula
  :annotations (Binary-Predicate
                Microtheory-Predicate
                (documentation "(#$informStatement ?MT ?PROP) means that the #$CycFormula ?PROP is true in the information context ?MT.  (An information context here usually means a particular database application of #$Cyc.  In these applications, ?PROP is communicated to #$Cyc directly as an explicit #$informStatement, and is not inferred to be true.)  Note that (#$informStatement ?mt ?clpe) implies that (#$ist ?mt ?clpe).")))

(defrelation info-transferred
  :arity 2
  :domain Information-Transfer-Event
  :range Abstract-Information
  :annotations (Binary-Predicate
                Cyc_Role
                (documentation "The predicate #$infoTransferred is used to indicate the propositional content of a particular transferral of information.  (#$infoTransferred TRANSFER INFO) means that INFO is information that is transferred due to the #$InformationTransferEvent TRANSFER.  INFO originates from some agent or IBT (i.e., element of #$InformationBearingThing).  After TRANSFER, INFO is contained in another IBT or agent; INFO may persist in the source as well.  For example, when I read the front page of the newspaper, some information about current world events is transferred from the newspaper to me.   See also #$informationOrigin, #$informationDestination.")))

(defrelation in-front-of--directly
  :arity 2
  :is-primitive in-front-of--generally
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Spatial-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$inFrontOf-Directly FORE AFT) means that FORE is directly in front of AFT.  More precisely, it implies both (#$inFrontOf-Generally FORE AFT) and that there is at least one line parallel to the forward pointing axis of AFT that intersects both FORE and AFT.")))

(defrelation in-front-of--generally
  :arity 2
  :is-primitive near
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Spatial-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$inFrontOf-Generally FORE AFT) means that the tangible object FORE is in front of the tangible object AFT.  More precisely, the intrinsic back-to-front axis of AFT is within 45 degrees of some line intersecting both FORE and AFT.")))

(defrelation ingesting-fn
  :arity 2
  :domain (:and Stuff-Type (:filled-by superrelations Partially-Tangible))
  :range (:and Temporal-Object-Type (:filled-by superrelations Ingesting))
  :annotations (Collection-Denoting-Function
                (documentation "The Cyc function #$IngestingFn is a #$CollectionDenotingFunction.  It is used to represent collections of events in which certain types of things are consumed.  (#$IngestingFn STUFFTYPE) denotes the collection of events in which a tangible substance of the type STUFFTYPE is ingested.  For example, lots of instances of (#$IngestingFn #$Popcorn) occur at the movies.")))

(defrelation ingredients
  :arity 2
  :is-primitive (:and physical-decompositions cotemporal)
  :domain Artifact
  :range Partially-Tangible
  :annotations (Transitive-Binary-Predicate
                Cotemporal-Objects-Slot
                Composition-Predicate
                (documentation "The predicate #$ingredients is used to indicate a particular input used to make a particular artifact.  (#$ingredients ART INGR) means that the #$PartiallyTangible thing INGR was one of the #$inputs to the creation of the #$Artifact ART, and INGR is one of ART's #$physicalDecompositions.  Note that #$ingredients applies only to those inputs which retain their identity in the creation process and which are incorporated into the resulting #$Artifact.  For example, a meatball can be considered an ingredient of a plate of spaghetti, and a portion of ground beef can be considered an ingredient of the meatball.  On the other hand, we would not say that an egg is an ingredient of the meatball, even though it was an input to the creation process, because its identity was not preserved.")))

(defrelation inhabitant-types
  :arity 2
  :domain Geographical-Region
  :range (:and Existing-Object-Type (:filled-by superrelations Person))
  :annotations (Binary-Predicate
                Intensional-Representation-Predicate
                (documentation "The predicate #$inhabitantTypes is used to indicate the type(s) of people who live in a region.  (#$inhabitantTypes REGION TYPE) means that TYPE is (one of) the (primary) type(s) of people who live in the #$GeographicalRegion REGION.  For example, to say that Chileans are among the primary groups of inhabitants of Chile, we assert (#$inhabitantTypes #$Chile #$ChileanPerson).  TYPE may be based on ethnicity, nationality, age, economics--in short, any demographic class.  E.g., (#$inhabitantTypes #$UnitedStatesOfAmerica #$AdultMiddleClassAmerican), (#$inhabitantTypes #$UnitedStatesOfAmerica #$WorkingAdultAmericanWoman), (#$inhabitantTypes #$UnitedStatesOfAmerica #$MexicanImmigrantToUSA).")))

(defrelation in-plane
  :arity 2
  :is-primitive spatially-intersects
  :domain Spatial-Thing
  :range Surface--Abstract
  :annotations (Spatial-Predicate
                Binary-Predicate
                (documentation "(#$inPlane OBJ SURFACE) means that OBJ spatially intersects with the #$FlatSurface SURFACE.")))

(defrelation inputs
  :arity 2
  :is-primitive (:and object-acted-on starts-after-starting-of pre-actors)
  :domain Creation-Or-Destruction-Event
  :range Something-Existing
  :annotations (Asymmetric-Binary-Predicate
                Actor-Slot
                Irreflexive-Binary-Predicate
                (documentation "The predicate #$inputs relates a particular event to things which are `inputs', i.e., materials used in that event and somehow altered by it.  (#$inputs EVENT OBJECT) means that OBJECT is an input to the #$CreationOrDestructionEvent EVENT.  During and due to the event, OBJECT is either destroyed or incorporated into a new entity.  For example, the pigments used to paint the Mona Lisa were #$inputs to Leonardo's painting process; however, his brushes were not #$inputs, even though they were changed a little by it.  In general, in instances of #$Manufacturing, materials or objects are inputs if they find their way into the product manufactured, or if they are destroyed -- such as the coke used in manufacturing steel -- as part of that manufacturing process.  
Note: One should use the specialized predicates #$inputsDestroyed or #$inputsCommitted whenever they are appropriate, rather than the more general predicate #$inputs.")))

(defrelation inputs-committed
  :arity 2
  :is-primitive (:and post-actors inputs commits-for-future-uses)
  :domain Creation-Event
  :range Something-Existing
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                (documentation "The predicate #$inputsCommitted is used when some #$inputs to a particular event is incorporated into some #$outputs of that event, but remains recognizable rather than being destroyed.  (#$inputsCommitted EVENT OBJECT) means that OBJECT exists before EVENT and continues to exist afterwards, and as a result of EVENT, OBJECT becomes incorporated into something created during EVENT.  For example, bricks that are used to build a house continue to exist as bricks once the house has been built.  (See also #$outputsCreated.)
Note: there is a grey area between #$inputsCommitted and #$inputsDestroyed; the less possible it is to take apart the relevant #$outputs of EVENT and get OBJECT back as an independent thing, the more likely it is that the relationship between EVENT and OBJECT should be #$inputsDestroyed, rather than #$inputsCommitted.")))

(defrelation inputs-destroyed
  :arity 2
  :is-primitive (:and ends-after-ending-of inputs)
  :domain Destruction-Event
  :range Something-Existing
  :annotations (Anti-Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Actor-Slot
                Irreflexive-Binary-Predicate
                (documentation "The predicate #$inputsDestroyed is used to relate a particular event to the items which are destroyed by it.  (#$inputsDestroyed EVENT OBJECT) means that OBJECT exists before EVENT, is affected by EVENT, and due to that involvement, ends its existence as an #$Entity sometime during EVENT.  OBJECT may or may not be a #$deliberateActors in EVENT.")))

(defrelation in-region
  :arity 2
  :domain Spatial-Thing
  :range Spatial-Thing
  :annotations (Extensional-Representation-Predicate
                Transitive-Binary-Predicate
                Anti-Symmetric-Binary-Predicate
                (documentation "(#$inRegion OBJECT AREA) means that all points in OBJECT are found within the boundaries of AREA, which is another spatial thing (of which OBJECT may or may not be a part).  OBJECT is totally included spatially within the region demarcated by AREA.  







Note, regarding whether OBJECT is a part of AREA: Two subordinate, but contrasting, predicates are #$physicalDecompositions (a #$genlInverse of #$inRegion) and #$objectFoundInLocation (a #$genlPreds of #$inRegion).  (1) OBJECT is a #$physicalDecompositions of AREA if the set of points occupied by OBJECT is a subset of the points actually occupied by AREA; i.e., OBJECT is spatially a part of AREA.  (2) On the other hand, if OBJECT is merely present in AREA, but is not a part of it, then #$objectFoundInLocation applies.")))

(defrelation ins-is-job-of
  :arity 2
  :domain Script-Type
  :range Professional
  :annotations (Type-Predicate
                Binary-Predicate
                (documentation "The predicate #$insIsJobOf indicates a type of work done by a particular individual.  (#$insIsJobOf SCRIPT-TYPE PER) means that the person PER performs instances of SCRIPT-TYPE as part of his or her job.  E.g., #$KeithRichards performs instances of #$WritingMusic as part of his work; #$Goolsbey performs instances of #$ProgrammingAComputer in his job at Cycorp; a #$SecurityGuard performs instances of #$ProtectingSomething.  Note that assertions using #$insIsJobOf are true for some specific period of time, which may be indicated with #$holdsIn.")))

(defrelation instrument--container
  :arity 2
  :is-primitive instrument--generic
  :domain Event
  :range Solid-Tangible-Thing
  :annotations (Actor-Slot
                (documentation "(#$instrument-Container ?EVENT ?CONT) means that the #$objectActedOn in ?EVENT is contained in (#$in-ContGeneric) ?CONT during ?EVENT, and that ?CONT facilitates ?EVENT being accomplished.")))

(defrelation instrument--generic
  :arity 2
  :is-primitive actors
  :domain Event
  :range Partially-Tangible
  :annotations (Actor-Slot
                (documentation "The predicate #$instrument-Generic is used to link a particular event to any of the objects which play an instrumental role in it.  (#$instrument-Generic EVENT OBJECT) means that OBJECT plays an intermediate causal role in EVENT, facilitating its occurrence and serving some purpose of some #$Agent.  This can happen in at least two ways: a. the `doer' of EVENT acts on OBJECT, which in turn acts on something else (as when someone uses a hammer to pound in a nail) or b. the `doer' of EVENT acts on something, making it possible for OBJECT to act on that thing (as when someone puts wet clothes out in the sun to dry).  Typically, an #$instrument-Generic is not significantly altered by playing that role in an event.  #$deviceUsed is an important specialization predicate of #$instrument-Generic.")))

(defrelation intangible-component
  :arity 2
  :is-primitive parts
  :domain Composite-Tangible-And-Intangible-Object
  :range Intangible-Individual
  :annotations (Transitive-Binary-Predicate
                Non-Physical-Part-Predicate
                (documentation "(#$intangibleComponent WHOLE PART) means that PART is the intangible part of the #$CompositeTangibleAndIntangibleObject WHOLE.")))

(defrelation intended-audience
  :arity 2
  :domain Information-Bearing-Thing
  :range Agent
  :annotations (Binary-Predicate
                (documentation "The predicate #$intendedAudience indicates an individual who is the intended recipient of the information in a particular IBT (i.e., element of #$InformationBearingThing).  (intendedAudience IBT AGT) means that the #$InformationBearingThing IBT has the individual #$Agent AGT as its intended audience--viewer, reader, listener, etc.  AGT (possibly along with other agents) is an individual who is supposed to access the information represented in IBT.  For example, the #$intendedAudience of a personal letter is usually its addressee.")))

(defrelation intended-audience-type
  :arity 2
  :domain Abstract-Information
  :range (:and Existing-Object-Type (:filled-by superrelations Agent))
  :annotations (Binary-Predicate
                (documentation "The predicate #$intendedAudienceType indicates the type of agents who are the intended recipients of the information in a particular IBT (i.e., element of #$InformationBearingThing).  (#$intendedAudienceType PIT TYPE) means that agents who are elements of TYPE are in the intended audience of the particular #$PropositionalInformationThing PIT.  Examples: the #$intendedAudienceType for the information in a copy of `AMA Journal' is the collection of American physicians; the #$intendedAudienceType of TV commercials for sugary packaged cereals are those members of #$HumanChild living in the broadcast area.")))

(defrelation intended-behavior-capable
  :arity 3
  :is-primitive behavior-capable
  :domains (Something-Existing
            (:and Cyc_Collection (:filled-by superrelations Situation)))
  :range Cyc_Role
  :annotations (Ternary-Predicate
                (documentation "The predicate #$intendedBehaviorCapable is used to describe ways in which an object was designed to function.  (#$intendedBehaviorCapable OBJ SITTYPE ROLE) means that the individual, OBJ, was designed to serve as a ROLE in situations or events of type SITTYPE.  For example, a #$LandTransportationDevice such as an automobile is intended to serve the #$vehicle role in instances of (#$TransportViaFn #$LandTransportationDevice); an element of #$Sphygmomanometer is intended to serve as the #$deviceUsed in instances of #$SystolicBloodPressureTest; an element of #$RestArea is intended to be where a #$Resting-Relaxing #$eventOccursAt.  A thing may be able to play the same kind of ROLE in different kinds of situations; e.g., an element of #$StoveTopCookingPot can be the #$instrument-Container in either #$BoilingFood or #$SteamingFood events.  Or something may serve more than one function; e.g., a #$VacuumCleaner serves both as the #$deviceUsed in instances of #$Vacuuming and (in virtue of its #$VacuumDustBag) as the #$instrument-Container.")))

(defrelation intended-for-use-by
  :arity 2
  :domain Product
  :range (:and Existing-Object-Type (:filled-by superrelations Organism--Whole))
  :annotations (Binary-Predicate
                (documentation "(#$intendedForUseBy PROD TYPE) means that the #$Product PROD is intended to be used by individuals of the #$ExistingObjectType TYPE, where TYPE must be a subset of #$Organism-Whole.  E.g., many types of products are only for use by adults, by women, by dogs, etc.
Note:  This is a good example of a predicate which is redundant but useful.  `Redundant' means that any assertion one states using #$intendedForUseBy could be stated, albeit less tersely, using other, more basic predicates in the KB, in this case #$intends and #$usesObject.  Often, a huge number of axioms can be drastically shortened by introducing such a redundant predicate, and writing axioms that define it in terms of the more-basic predicates.")))

(defrelation intends
  :arity 2
  :domain Intelligent-Agent
  :range Cyc-Formula
  :annotations (Propositional-Attitude-Slot
                (documentation "(#$intends AGT PROP) means that the #$Agent AGT intends the proposition PROP (represented by a #$CycFormula) to become (or remain) true.  This predicate is obviously similar to #$goals (q.v.), but PROP is likely to be more short-lived (at least as far as the agent's intending) and more event-centered (`I did it because I intended that...') and more mechanically satisfied (`I intend to turn off the lamp') than any of the agent's goals.  You may intend to turn off the lamp, but it would be odd to call that one of your goals.")))

(defrelation inter-arg-isa-1--2
  :arity 3
  :domains (Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Rule-Macro-Predicate
                Meta-Relation
                Ternary-Predicate
                (documentation "(#$interArgIsa1-2 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that, when an instance of INDEPENDENT-ARG-COL appears as the first argument to PRED, the second argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")))

(defrelation inter-arg-isa-1--3
  :arity 3
  :domains (Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Ternary-Predicate
                (documentation "(#$interArgIsa1-3 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) #$BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the first argument to PRED, the third argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")))

(defrelation inter-arg-isa-1--4
  :arity 3
  :domains (Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Ternary-Predicate
                (documentation "(#$interArgIsa1-4 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) #$BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the first argument to PRED, the fourth argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")))

(defrelation inter-arg-isa-1--5
  :arity 3
  :domains (Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Ternary-Predicate
                (documentation "(#$interArgIsa1-5 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) #$BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the first argument to PRED, the fifth argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")))

(defrelation inter-arg-isa-2--1
  :arity 3
  :domains (Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Rule-Macro-Predicate
                Meta-Relation
                Ternary-Predicate
                (documentation "(#$interArgIsa2-1 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) means that, when an instance of INDEPENDENT-ARG-COL appears as the second argument to PRED, the first argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")))

(defrelation inter-arg-isa-2--3
  :arity 3
  :domains (Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Ternary-Predicate
                (documentation "(#$interArgIsa2-3 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) #$BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the second argument to PRED, the third argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")))

(defrelation inter-arg-isa-2--4
  :arity 3
  :domains (Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Ternary-Predicate
                (documentation "(#$interArgIsa2-4 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) #$BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the second argument to PRED, the fourth argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")))

(defrelation inter-arg-isa-2--5
  :arity 3
  :domains (Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Ternary-Predicate
                (documentation "(#$interArgIsa2-5 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) #$BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the second argument to PRED, the fifth argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")))

(defrelation inter-arg-isa-3--1
  :arity 3
  :domains (Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Ternary-Predicate
                (documentation "(#$interArgIsa3-1 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) #$BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the third argument to PRED, the first argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")))

(defrelation inter-arg-isa-3--2
  :arity 3
  :domains (Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Ternary-Predicate
                (documentation "(#$interArgIsa3-2 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) #$BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the third argument to PRED, the second argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")))

(defrelation inter-arg-isa-3--4
  :arity 3
  :domains (Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Ternary-Predicate
                (documentation "(#$interArgIsa3-4 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) #$BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the third argument to PRED, the fourth argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")))

(defrelation inter-arg-isa-3--5
  :arity 3
  :domains (Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Ternary-Predicate
                (documentation "(#$interArgIsa3-5 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) #$BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the third argument to PRED, the fifth argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")))

(defrelation inter-arg-isa-4--1
  :arity 3
  :domains (Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Ternary-Predicate
                (documentation "(#$interArgIsa4-1 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) #$BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the fourth argument to PRED, the first argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")))

(defrelation inter-arg-isa-4--2
  :arity 3
  :domains (Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Ternary-Predicate
                (documentation "(#$interArgIsa4-2 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) #$BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the fourth argument to PRED, the second argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")))

(defrelation inter-arg-isa-4--3
  :arity 3
  :domains (Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Ternary-Predicate
                (documentation "(#$interArgIsa4-3 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) #$BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the fourth argument to PRED, the third argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")))

(defrelation inter-arg-isa-4--5
  :arity 3
  :domains (Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Ternary-Predicate
                (documentation "(#$interArgIsa4-5 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) #$BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the fourth argument to PRED, the fifth argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")))

(defrelation inter-arg-isa-5--1
  :arity 3
  :domains (Quintary-Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Ternary-Predicate
                (documentation "(#$interArgIsa5-1 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) #$BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the fifth argument to PRED, the first argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")))

(defrelation inter-arg-isa-5--2
  :arity 3
  :domains (Quintary-Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Ternary-Predicate
                (documentation "(#$interArgIsa5-2 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) #$BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the fifth argument to PRED, the second argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")))

(defrelation inter-arg-isa-5--3
  :arity 3
  :domains (Quintary-Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Ternary-Predicate
                (documentation "(#$interArgIsa5-3 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) #$BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the fifth argument to PRED, the third argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")))

(defrelation inter-arg-isa-5--4
  :arity 3
  :domains (Quintary-Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Ternary-Predicate
                (documentation "(#$interArgIsa5-4 PRED INDEPENDENT-ARG-COL DEPENDENT-ARG-COL) #$BaseKB) means that, when an instance of INDEPENDENT-ARG-COL appears as the fifth argument to PRED, the fourth argument in that assertion is constrained to be an instance of DEPENDENT-ARG-COL.")))

(defrelation interior-fn
  :arity 2
  :domain Tangible-Thing
  :range Interior
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "The function (InteriorFn OBJ), applied to a #$TangibleThing OBJ, means all the interior space within the #$Cavity or cavites (chambers, passages, pockets, bubbles, etc.) that occur inside of OBJ.  The result is an instance of #$Interior.  An #$Interior, unlike a #$Cavity, does not include the walls of the chamber or passage, just the interior space itself without any of the the enclosing walls, panels or membranes.")))

(defrelation interior-region-fn
  :arity 2
  :domain Animal-Body-Region
  :range Animal-Body-Region
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "The function (InteriorRegionFn REGOROBJ), applied to a region or object REGOROBJ, means the sub-region consisting of the core or inner parts or sections of REGOROBJ, or the interior main portion of REGOROBJ.  It applies when REGOROBJ itself has an intrinsic inside/outside orientation (unlike, say, a loop of thread), but if REGOROBJ is an enveloping part, surface membrane, ring or layer within or on a larger region or object that has its own inside/outside orientation, the function returns REGOROBJ's inside portion with respect to the inside and outside of the larger region or object.")))

(defrelation internal-parts
  :arity 2
  :is-primitive (:and cotemporal physical-parts)
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Irreflexive-Binary-Predicate
                Cotemporal-Objects-Slot
                Asymmetric-Binary-Predicate
                Transitive-Binary-Predicate
                Physical-Part-Predicate
                (documentation "the internal parts of this tangible object")))

(defrelation international-org--member-country
  :arity 2
  :domain (:and International-Organization
                International-Organization-Of-Countries)
  :range Country
  :annotations (Binary-Predicate
                Intangible-Object-Predicate
                (documentation "The predicate #$internationalOrg-MemberCountry is used to indicate that a particular country belongs to a particular international organization.  (#$internationalOrg-MemberCountry INTORG NATION) means that the #$Country NATION (as represented by its national government or other legally designated body) is a member of the #$InternationalOrganization INTORG.  For example, #$Bahrain is an #$internationalOrg-MemberCountry of the #$LeagueOfArabStates and of the #$UnitedNationsOrganization; or, #$China-PeoplesRepublic is a #$internationalOrg-MemberCountry of the #$UnitedNationsOrganization -- but #$Taiwan-RepublicOfChina is not.
Note: Cyc requires that members of organizations be #$Agents.  Since geographical regions (such as countries) are not #$Agents, the usual Cyc predicate for indicating membership -- #$hasMembers -- refers to the governments of the countries which are mentioned in assertions made with #$internationalOrg-MemberCountry.")))

(defrelation intersects-interval-type
  :arity 2
  :domain Temporal-Object-Type
  :range Temporal-Object-Type
  :annotations (Reflexive-Binary-Predicate
                Symmetric-Binary-Predicate
                Temporal-Relation
                (documentation "(#$intersectsIntervalType ?X ?Y) indicates that every instance of ?X #$temporallyIntersects some instance ?Y.  For example, in the nontropics, (#$intersectsIntervalType #$SummerSeason #$CalendarSummer).  The `summer season' may not coincide exactly with the time between the summer solstice and autumnal equinox, but there is an (enormous) overlap between those two time periods.  This relation, #$intersectsIntervalType, is commutative but not transitive.")))

(defrelation interval-after-fn
  :arity 3
  :domains (Temporal-Thing Time--Quantity)
  :range Time-Interval
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "(#$IntervalAfterFn T-OBJ DUR) denotes the #$TimeInterval which immediately follows T-OBJ, lasting for duration DUR.")))

(defrelation interval-before-fn
  :arity 3
  :domains (Temporal-Thing Time--Quantity)
  :range Time-Interval
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "(#$IntervalBeforeFn ?X ?D) returns the time interval, of duration ?D, immediately preceding ?X.  So the value is a #$TimeInterval, it has #$duration ?D, and  (#$contiguousAfter  ?X  (#$IntervalBeforeFn ?X ?D)).")))

(defrelation interval-ended-by-fn
  :arity 2
  :domain Temporal-Thing
  :range Time-Interval
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "(#$IntervalEndedByFn TEMP-OBJ) denotes the time interval which ends when TEMP-OBJ starts.  The beginning of this interval coincides with the beginning of all time (#$Always-TimeInterval), if it has a beginning.")))

(defrelation interval-max-fn
  :arity 2
  :domain Scalar-Interval
  :range Scalar-Interval
  :annotations (Non-Predicate-Function
                (documentation "(#$IntervalMaxFn SCALAR) returns an interval of the same type as SCALAR whose maximum value is the maximum value of SCALAR and whose minimum value is #$MinusInfinity.  For example, (#$IntervalMaxFn (#$Mile 3)) is the same as `the interval from negative infinity miles to three miles'. [Technical Note: if that expression were to denote a strictly absolute, as opposed to a relative-or-absolute, distance, then it would mean `the interval from 0 miles to 3 miles'.]   (#$IntervalMaxFn (#$Unity 1)) is the same as `the interval from negative infinity to 1', in other words, `no greater than one'.")))

(defrelation interval-min-fn
  :arity 2
  :domain Scalar-Interval
  :range Scalar-Interval
  :annotations (Non-Predicate-Function
                (documentation "(#$IntervalMinFn SCALAR) returns an interval of the same type as SCALAR whose minimum value is the minimum value of SCALAR and whose maximum value is #$PlusInfinity.  For example, (#$IntervalMinFn (#$Mile 3)) is the same as `the interval from three miles to an infinite number of miles', in other words, `at least three miles'.")))

(defrelation interval-started-by-fn
  :arity 2
  :domain Temporal-Thing
  :range Time-Interval
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "(#$IntervalStartedByFn TEMP-OBJ) denotes the time interval which begins when TEMP-OBJ ends.  The end of this interval coincides with the end of all time (#$Always-TimeInterval), if time has an end.")))

(defrelation interviewee
  :arity 2
  :is-primitive social-participants
  :domain (:and Multi-Directional-Communication Spoken-Communicating)
  :range Person
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$interviewee INTERVIEW AGT) means that the #$Agent AGT is an interviewee in the #$Interviewing event INTERVIEW.")))

(defrelation interviewer
  :arity 2
  :is-primitive (:and performed-by social-participants)
  :domain (:and Multi-Directional-Communication Spoken-Communicating)
  :range Person
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$interviewer INTERVIEW AGT) means that the #$Agent AGT is an interviewer in the #$Interviewing event INTERVIEW.")))

(defrelation inverse-func
  :arity 2
  :domain Function-From-Quantities-To-Quantities
  :range Function-From-Quantities-To-Quantities
  :annotations (Relationship-Predicate
                Functional-Slot
                (documentation "The predicate #$inverseFunc relates a mathematical function to a unique inverse.  Both arguments to #$inverseFunc are elements of #$FunctionFromQuantitiesToQuantities.  (#$inverseFunc FN INVFN) relates the function FN to its inverse INVFN; e.g., the #$inverseFunc of the logarithm function (#$LogFn) would be the exponential function (#$ExpFn).")))

(defrelation inverse-of-interval-fn
  :arity 2
  :domain Scalar-Interval
  :range Scalar-Interval
  :annotations (Function-From-Quantities-To-Quantities
                (documentation "#$InverseOfIntervalFn is the unary mathematical function that returns the inverse of the number taken as its argument.  For example, (#$InverseOfIntervalFn 7) returns 1/7.")))

(defrelation inverse-relation-type
  :arity 3
  :domains (Binary-Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Rule-Macro-Predicate
                Ternary-Predicate
                (documentation "(#$inverseRelationType SLOT COL1 COL2) means that, for every INS2 which is an instance of COL2, there is some INS1 which is an instance of COL1, such that (SLOT INS1 INS2) holds.  #$inverseRelationType is thus redundant with a huge set of commonly-occurring axioms.  By having this predicate (along with an axiom that defines it, and, eventually, support in code for quick inferencing with it), axioms in that set can be stated more tersely, and collection-level reasoning with it is possible.")))

(defrelation inverse-relation-type-count
  :arity 4
  :domains (Binary-Predicate Cyc_Collection Cyc_Collection)
  :range Non-Negative-Integer
  :annotations (Quaternary-Predicate
                (documentation "(#$inverseRelationTypeCount SLOT COL1 COL2 NUM) means that, for every instance of COL2 (INS2) there are exactly NUM instances of COL1 (INS1, INS3, ...) such that (SLOT INS1 INS2), (SLOT INS3 INS2), ..., hold.  Thus (#$inverseRelationTypeCount #$anatomicalParts #$Animal #$Head-AnimalBodyPart 1) would mean `every animal head belongs to exactly one animal'.")))

(defrelation inverse-relation-type-max
  :arity 4
  :domains (Binary-Predicate Cyc_Collection Cyc_Collection)
  :range Non-Negative-Integer
  :annotations (Quaternary-Predicate
                (documentation "(#$inverseRelationTypeMax SLOT COL1 COL2 NUM) means that, for every instance of COL2 (INS2) there are at most NUM instances of COL1 (INS1, INS3, ...) such that (SLOT INS1 INS2), (SLOT INS3 INS2), ..., hold.  Thus (#$inverseRelationTypeMax #$physicalParts #$Hand #$Finger 1) means `every finger is part of at most one hand'.")))

(defrelation inverse-relation-type-min
  :arity 4
  :domains (Binary-Predicate Cyc_Collection Cyc_Collection)
  :range Non-Negative-Integer
  :annotations (Quaternary-Predicate
                (documentation "(#$inverseRelationTypeMin SLOT COL1 COL2 NUM) means that, for every instance of COL2 (INS2) there are at least NUM instances of COL1 (INS1, INS3, ...) such that (SLOT INS1 INS2), (SLOT INS3 INS2), ..., hold.  Thus (#$inverseRelationTypeMin #$children #$Person #$HumanChild 1) means literally `every child is the child of at least one person' or `every child has at least one parent'.")))

(defrelation cyc_isa
  :arity 2
  :is-primitive element-of
  :domain Reifiable-Term
  :range Cyc_Collection
  :annotations (Binary-Predicate
                Default-Monotonic-Predicate
                Taxonomic-Slot-For-Any-Unit
                (documentation "(#$isa EL COL) means that EL is an element of the collection COL.   Cyc knows that #$isa distributes over #$genls; that is, if one asserts (#$isa EL COL) and (#$genls COL SUPER), Cyc will infer that (#$isa EL SUPER). Therefore, in practice one only manually asserts a small fraction of the #$isa assertions --- the vast majority are inferred automatically by Cyc.")))

(defrelation isolated-node-in-system
  :arity 2
  :is-primitive point-in-system
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Asymmetric-Binary-Predicate
                (documentation "(#$isolatedNodeInSystem X SYS) means that the node X in the #$PathSystem SYS is an isolated point in SYS, i.e., X is not on any link or loop in the #$PathSystem SYS.  Note that an isolated point must be a node in SYS.")))

(defrelation ist
  :arity 2
  :domain Microtheory
  :range Cyc-Formula
  :annotations (Binary-Predicate
                Microtheory-Predicate
                (documentation "(#$ist MICRO PROP) means that the Cyc assertion PROP is true in the Cyc #$Microtheory MICRO.  E.g., one might assert (#$ist Image8093Mt (#$age #$Lenat (#$YearsDuration 5)) to state that in the context of a certain photograph, Doug was 5 years old.  In other microtheories, Doug would have different ages, or not be `known about' at all.")))

(defrelation ist--agreement
  :arity 2
  :is-primitive ist
  :domain Agreement
  :range Cyc-Formula
  :annotations (Microtheory-Predicate
                Binary-Predicate
                (documentation "The predicate #$ist-Agreement is used to indicate the propositions which have been agreed upon in a particular agreement.  (#$ist-Agreement AGR PROP) means that the proposition PROP is and should be true, according to the #$Agreement AGR.  PROP is expressed as a #$CycFormula and is considered true within the microtheory which represents AGR.  PROP may or may not be true in reality.
Note the distinction between #$ist and #$ist-Agreement:  #$ist relates any particular microtheory to all assertions that happen to be true in that microtheory; but #$ist-Agreement specially indicates those assertions in an #$Agreement microtheory which belong to the agreement itself and are not just something that happens to be true in it (e.g., that one of the #$agreeingAgents is named Joe).")))

(defrelation ist--information
  :arity 2
  :is-primitive ist
  :domain Propositional-Information-Thing
  :range Cyc-Formula
  :annotations (Microtheory-Predicate
                Binary-Predicate
                (documentation "This is a form of #$ist that applies to the explicit content of a chunk of information.  It is needed so we can distinguish between things that are true in an information context because they were explicitly stated, and things that are true because they can be inferred.")))

(defrelation item-worn
  :arity 2
  :domain Wearing-Something
  :range Something-To-Wear
  :annotations (Cyc_Role
                Binary-Predicate
                (documentation "The predicate #$itemWorn is used to indicate a particular article of clothing (or other wearable item) that is worn in a particular situation.  (#$itemWorn WEARING ITEM) means that ITEM is the #$ClothingItem worn during the situation WEARING, an element of #$WearingSomething (q.v.).")))

(defrelation job-attributes
  :arity 2
  :domain Occupation-Type
  :range Job-Attribute
  :annotations (Binary-Predicate
                Intangible-Object-Predicate
                (documentation "The predicate #$jobAttributes describes a type of job as #$BlueCollar, #$WhiteCollar, #$Unionized, etc.  (#$jobAttributes JOBTYPE ATTRIBUTE) means that ATTRIBUTE describes a general property of the #$OccupationType JOBTYPE.  Note that this predicate talks about elements of #$OccupationType (kinds of occupations), not about a particular job held by some individual.")))

(defrelation joint-type-between-fn
  :arity 3
  :domains ((:and Existing-Object-Type
             (:filled-by superrelations Partially-Tangible))
            (:and Existing-Object-Type
             (:filled-by superrelations Partially-Tangible)))
  :range (:and Existing-Object-Type (:filled-by superrelations Configuration))
  :annotations (Collection-Denoting-Function
                (documentation "(#$JointTypeBetweenFn OBJ-TYPE1 OBJ-TYPE2) denotes the class of #$Connections found between objects of type OBJ-TYPE1 and OBJ-TYPE2.  For example, (#$JointTypeBetweenFn #$TelephoneBody #$TelephoneReceiver) is the class of #$Connections between telephone handsets and bodies of telephones.  (#$JointTypeBetweenFn #$Humerus #$Radius-Bone) would be the class of elbows, but we chose to reify that class (#$ElbowJoint).  #$JointTypeBetweenFn is most useful when one needs to refer to a type of connection without creating it and naming it specifically.")))

(defrelation judicial-agents
  :arity 2
  :is-primitive mediators
  :domain Social-Occurrence
  :range Agent
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$judicialAgents EV JUDGE) means that the #$Agent JUDGE is acting as a judge in the event EV.")))

(defrelation junction-in-system
  :arity 2
  :is-primitive point-in-system
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Asymmetric-Binary-Predicate
                (documentation "(#$junctionInSystem JUNCTION SYS) means that JUNCTION is a junction in the #$PathSystem SYS, i.e., a node in SYS that is an 'intersection' or 'branching point' of links or loops in SYS.  (For the case when no SYS is specified, see #$JunctionOfPaths.)  Formally, a node X in SYS is a junction in SYS iff either there are three (different) links in SYS such that X is on all of them, or there are two (different) loops in SYS such that X is on both of them, or there is a link in SYS and there is a loop in SYS such that X is on both of them.  For different kinds of junctions in a path system, see #$threeWayJunctionInSystem, #$fourWayJunctionInSystem.")))

(defrelation juvenile-fn
  :arity 2
  :domain (:and Organism-Classification-Type (:filled-by superrelations Animal))
  :range (:and Existing-Object-Type (:filled-by superrelations Juvenile-Animal))
  :annotations (Collection-Denoting-Function
                (documentation "#$JuvenileFn is a Cyc function, and in particular a #$CollectionDenotingFunction.  (#$JuvenileFn ORGCLASSTYPE) represents that subset of #$JuvenileAnimal whose elements are the juveniles of the group of animals denoted by ORGCLASSTYPE.  E.g., (#$JuvenileFn #$Deer) denotes the collection of all fawns.  Certain kinds of organisms have no juveniles (e.g., the members of #$Amoeba).")))

(defrelation kilogram
  :annotations (Unit-Of-Measure-With-Prefix
                Mks-Unit-Of-Measure
                Standard-Unit-Of-Measure
                Unit-Of-Mass
                (documentation "The measurement function used in Cyc to represent the basic unit of mass in the Metric system (and in Cyc).  See also #$MKSUnitOfMeasure, #$UnitOfMeasure.")))

(defrelation kilometer
  :annotations (Mks-Unit-Of-Measure
                Unit-Of-Measure-With-Prefix
                Unit-Of-Distance
                (documentation "The measurement function used in Cyc to represent the 1000-meter unit used within the Metric system to measure distance.  Modern countries using the metric system measure their roads - and their road races - in kilometers. See also #$MKSUnitOfMeasure, #$UnitOfMeasure.")))

(defrelation kilometers-per-hour
  :annotations (Mks-Unit-Of-Measure
                Unit-Of-Speed
                (documentation "(#$KilometersPerHour NUMBER) returns a dimensionless rate or speed of NUMBER kilometers per hour.")))

(defrelation knows
  :arity 2
  :is-primitive beliefs
  :domain Intelligent-Agent
  :range Cyc-Formula
  :annotations (Propositional-Attitude-Slot
                (documentation "(#$knows AGT PROP) means that the #$Agent AGT believes the proposition PROP (represented by a #$CycFormula), is sure about the truth of PROP (may or may not have a rational argument for PROP), and furthermore PROP is in fact true at least in the current context (#$Microtheory).
Note: Knowledge is stronger than belief; it implies belief.  So if (#$knows AGT PROP), then (#$beliefs AGT PROP) is true.
Note: Knowledge is stronger than truth; it implies truth (in the current #$Microtheory): if (#$knows AGT PROP), then PROP is true.
Note:  Opinion and knowledge are mutually exclusive: if (#$knows AGT PROP), then it is NOT true that (#$opinions AGT PROP).
Note: Knowledge implies awareness.  Since Abraham Lincoln died a century before we were born, it is impossible for (#$knows #$AbrahamLincoln (#$likesAsFriend #$Lenat #$MaryShepherd)) to hold, except in some fictional context.
")))

(defrelation knows-about
  :arity 2
  :domain Intelligent-Agent
  :range Cyc_Thing
  :annotations (Binary-Predicate
                (documentation "(#$knowsAbout AGT X) means that the #$IntelligentAgent AGT knows something about X.  This predicate represents more than simple awareness, but exactly what is known -- the content of AGT's knowledge about X -- is not specified.  Examples: (#$knowsAbout #$Lenat #$Cyc),  (#$knowsAbout #$MichaelJordan #$BasketBallGame). 
Note: many commonsense rules can conclude (#$knowsAbout AGT X) -- e.g., those having to do with AGT's occupation, college degrees, city of residence,... in fact, almost any assertion about AGT can lead to presumptions that he/she probably #$knowsAbout something.  #$knowsAbout in turn can serve (weakly) in arguments about whether or not AGT #$knows (qv) specific common assertions involving X, and in arguments about whether or not AGT #$knowsValue of some particular predicate applied to X, etc.")))

(defrelation knows-value
  :arity 3
  :domains (Intelligent-Agent Cyc_Thing)
  :range Binary-Predicate
  :annotations (Ternary-Predicate
                Modal-Relationship
                (documentation "(#$knowsValue AGT X PRED) means that, if (PRED X VAL) is true, then the #$Agent ?AGT knows that; i.e., (#$knows AGT (PRED X VAL)).  E.g., this is a more compact way of expressing `people know their own date of birth' than if one had to use #$knows.  One could just write  (#$implies (#$isa ?A #$Agent) (#$knowsValue ?A ?A #$birthDate); presumably this would be asserted in a context (#$Microtheory) in which all actions were performed by human beings, or else there would have to be an extra qualifier to that effect added to the rule.")))

(defrelation language-of-communication
  :arity 2
  :domain Communicating
  :range Language
  :annotations (Functional-Slot
                Cyc_Role
                (documentation "The predicate #$languageOfCommunication is used to indicate a language used by agents in a particular communication event.  (#$languageOfCommunication COM LANG) means that in the #$Communicating COM, the information transferred is expressed in the language LANG.  LANG may be a natural language, a computer language, a musical system, or other symbolic system such as #$AmericanSignLanguage.")))

(defrelation language-spoken
  :arity 2
  :is-primitive (:and knows-about has-comm-convention)
  :domain Intelligent-Agent
  :range Natural-Language
  :annotations (Binary-Predicate
                (documentation "(#$languageSpoken INTAGENT NATLANG) means the #$IntelligentAgent INTAGENT speaks the natural human language NATLANG at least somewhat fluently.  The language must be speakable by humans, as are English, Latin, or Japanese, but not LISP, C or LINCOS.  So, for example, (#$languageSpoken #$Lenat #$EnglishLanguage).   See #$NaturalLanguage.")))

(defrelation last-name
  :arity 2
  :is-primitive name-of-agent
  :domain Person
  :range Human-Family-Name-String
  :annotations (Intangible-Object-Predicate
                Binary-Predicate
                (documentation "(#$lastName X STRNG) means that #$Person X is known by the #$HumanFamilyNameString STRNG as his or her last name (surname).  E.g., (#$lastName #$Lenat ``Lenat'').  A person rarely has more than one last name at any one time.  Last names may change as a result of certain actions, such as marriages, deaths, etc., in various cultures.")))

(defrelation last-sub-events
  :arity 2
  :is-primitive (:and temporally-finished-by sub-events)
  :domain Event
  :range Event
  :annotations (Sub-Process-Slot
                (documentation "(#$lastSubEvents ?X ?Y) implies (#$subEvents ?X ?Y) and (#$temporallyFinishedBy ?X ?Y).  For example, one Cyc axiom says that if ?X is a #$WagingWar event, and (#$lastSubEvents ?X ?Y) is true, and ?Y is a #$Surrendering event, then the the identity of those for whom the war was #$successfulForAgents can be inferred from the particular roles that are played by the various parties during the surrender.  This is how one might infer, from Lee surrendering to Grant, that the South lost the American Civil War.")))

(defrelation lateral-region-fn
  :arity 2
  :domain Animal-Body-Region
  :range Animal-Body-Region
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "The function (LateralRegionFn REGOROBJ), applied to a region or object REGOROBJ, means the sub-region consisting of the flanks or side parts or lateral main sections (away from the mid-line) of REGOROBJ, or the lateral main areas of REGOROBJ as opposed to the medial or middle area; the right and left regions then both include parts of the lateral regions.  #$LateralRegionFn applies when REGOROBJ itself has an intrinsic right/left orientation (unlike, say, a sphere), but if REGOROBJ is a part within a larger region or object that has its own right/left orientation, the function returns REGOROBJ's portions farthest from the mid-line (with respect to left and right) of the larger region or object.")))

(defrelation later-sub-abstractions
  :arity 2
  :domain Something-Existing
  :range Something-Existing
  :annotations (Complex-Temporal-Relation
                Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                (documentation "(#$laterSubAbstractions SUB1 SUB2) means that SUB1 and SUB2 are both a #$subAbstrac of the same entity (i.e., (#$hasSameEntityAs SUB1 SUB2)) and the sub-abstraction SUB2 starts sometime after the beginning of SUB1 (i.e., (#$startsAfterStartingOf SUB2 SUB1)).  For example, #$RichardFeynman while working on the Manhattan Project was a #$laterSubAbstractions than #$RichardFeynman in his first year of graduate school at Princeton.")))

(defrelation later-than
  :arity 2
  :domain Date
  :range Date
  :annotations (Evaluatable-Function
                Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                (documentation "#$laterThan is similar to #$greaterThan, but takes #$Dates as arguments.  (#$laterThan DATE1 DATE2) is true when DATE1 and DATE2 are #$Dates, and DATE1 starts after DATE2 is over.  #$laterThan is evaluatable.")))

(defrelation laws
  :arity 2
  :is-primitive cotemporal
  :domain Geopolitical-Entity
  :range Government-Coc
  :annotations (Cotemporal-Objects-Slot
                (documentation "The predicate #$laws is used to relate a geopolitical region (country, state, city, etc.) to a law or entire legal code which applies there.  (#$laws GEOPOL CODE) means that the #$GeopoliticalEntity GEOPOL officially has the law (or set of laws) CODE.  See also #$GovernmentCOC for the representation of a #$Law or a #$LegalCode as a #$Microtheory.")))

(defrelation left-region-fn
  :arity 2
  :domain Animal-Body-Region
  :range Animal-Body-Region
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "The function (LeftRegionFn REGOROBJ), applied to a region or object REGOROBJ, means the region consisting of the left half or flank or left main portion of REGOROBJ.  It applies only when REGOROBJ itself has an intrinsic left/right orientation, or is part of a larger region or object that has a left/right orientation.")))

(defrelation legally-capable-of
  :arity 3
  :domains (Agent (:and Cyc_Collection (:filled-by superrelations Situation)))
  :range Cyc_Role
  :annotations (Ternary-Predicate
                (documentation "The predicate #$legallyCapableOf indicates that an agent is legally able to take a certain role in a certain type of action.  (#$legallyCapableOf AGT SIT-TYPE ROLE) means that the individual AGT is legally qualified and/or entitled to act in this ROLE in #$Situations of the type SIT-TYPE.  For example, a person over 21 years of age is #$legallyCapableOf smoking cigarettes in the United States.")))

(defrelation length-of-object
  :arity 2
  :is-primitive (:and |(meaning-in-system-fn sensus--information-1997 SIZE-PROPERTY-ASCRIPTION)|
                      |(meaning-in-system-fn sensus--information-1997 LINEAR-SIZE)|)
  :domain Spatial-Thing
  :range Distance
  :annotations (Physical-Amount-Slot
                (documentation "(#$lengthOfObject OBJ LEN) means that the tangible object OBJ has a length LEN.  Which dimension counts as length depends upon the object's orientation (which may be intrinsic or determined relative to its environment).")))

(defrelation level-with
  :arity 2
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Symmetric-Binary-Predicate
                Spatial-Predicate
                Reflexive-Binary-Predicate
                Transitive-Binary-Predicate
                (documentation "(#$levelWith OBJ1 OBJ2) means that OBJ1 and OBJ2 are roughly the same vertical distance from some horizontal surface in the frame of reference.")))

(defrelation light-source
  :arity 3
  :domains (Partially-Tangible Partially-Tangible)
  :range Illumination-Mode-Attribute
  :annotations (Ternary-Predicate
                (documentation "The predicate #$lightSource is used to indicate the source of an illumination falling on a particular object.  (#$lightSource OBJ SOURCE MODE) means that OBJ is illuminated by SOURCE with the type of illumination (#$IlluminationModeAttribute) MODE.")))

(defrelation likes-as-friend
  :arity 2
  :is-primitive (:and acquainted-with likes-object)
  :domain Animal
  :range Animal
  :annotations (Binary-Predicate
                (documentation "(#$likesAsFriend AGT1 AGT2) means that AGT1 enjoys interacting socially with AGT2.  See also the #$FeelingAttributeTypes #$Friendliness. 
Note: this predicate does not imply that AGT1 likes AGT2 only as a friend -- there may be romantic feelings, and other feelings, as well.")))

(defrelation likes-object
  :arity 2
  :domain Animal
  :range Partially-Tangible
  :annotations (Binary-Predicate
                (documentation "(#$likesObject AGT OBJ) means that when the sentient agent AGT is interacting in some way with OBJ, that agent feels some measure of #$Enjoyment  --- that is, (#$feelsEmotion AGT #$Enjoyment).  The kind of interactions that produce #$Enjoyment depend largely on what kind of thing OBJ is.  Thus, `Joe likes the Mona Lisa' implies that Joe feels #$Enjoyment when viewing the Mona Lisa.  But `Joe likes pizza' implies that Joe feels #$Enjoyment when eating that kind of food.  There are some specialized predicates of #$likesObject that give more information about the kind of interaction between AGT and OBJ that results in #$Enjoyment; see, e.g., #$likesSensorially and #$likesAsFriend.")))

(defrelation likes-role-in-activity
  :arity 3
  :domains (Agent Actor-Slot)
  :range Event
  :annotations (Ternary-Predicate
                (documentation "(#$likesRoleInActivity AGT ROLE EVT) means that if the #$Agent AGT has the relation ROLE to the #$Event EVT, then AGT is likely to feel some positive measure of #$Enjoyment.  This predicate is useful to represent sentences such as `Joe likes running' or `Fred liked receiving the money'.")))

(defrelation likes-sensorially
  :arity 2
  :domain Perceptual-Agent
  :range Sensory-Attribute
  :annotations (Binary-Predicate
                (documentation "(#$likesSensorially AGT SENSUM) means that the #$PerceptualAgent AGT derives some physical pleasure from the sensory experience of SENSUM (a taste, odor, or other #$SensoryAttribute).")))

(defrelation link-between-in-system
  :arity 4
  :domains (Path--Simple Cyc_Thing Cyc_Thing)
  :range Cyc_Thing
  :annotations (Quaternary-Predicate
                (documentation "(#$linkBetweenInSystem LINK X Y SYS) means that in the #$PathSystem SYS, LINK (a link in SYS) has its two end points X and Y (nodes in SYS).  A link in a path system is one of the paths in the system whose end points are nodes in the system and that have no other nodes along them.  For each link LINK in SYS, there is a unique pair {X, Y} of different nodes in SYS such that (#$linkBetweenInSystem LINK X Y SYS) and (#$linkBetweenInSystem LINK Y X SYS) hold, and for two points (nodes) in SYS, there could be several different ('parallel') links between them.  No point in SYS that is not a node can be an end point of a link.  If node X is an end-point of LINK and (#$linkBetweenInSystem LINK X Y SYS) holds, then (#$pointOnPath X LINK) holds.  A link in SYS may have many points on it other than its end-points, but these points cannot be nodes in SYS (another way to put this is to say that there are exactly two nodes on a link, though there can be any number, greater than 1, of points on the link).  Only nodes in SYS can be 'intersection' point in SYS (see #$junctionInSystem), which implies that there is, in the system SYS, no point on a link LINK between X and Y that is an 'intersection' point of LINK and another link or a loop.  When defining a path system, it is convenient (and also quite safe) to start with a name of the system, say SYS1 (with an assertion (#$isa SYS1 #$PathSystem)), and enter the names of links in SYS, say Link1, Link2 etc. (with assertions (#$isa Link1 #$Path-Simple) etc.), and then only enter assertions of the form (#$linkBetweenInSystem LINK X Y SYS1) for each link in SYS1 and its end points X and Y--the rules related to a path systems will generate assertions like (#$nodeInSystem X SYS1), (#$pointInSystem X SYS1), (#$linkInSystem LINK SYS1) and (#$pathInSystem LINK SYS1) etc.  If one later needs to add something else to the system, say a point A on a link LINK other than its end nodes X and Y, he/she may further enter (#$betweenOnPath A X Y LINK) and (#$pointInSystem A SYS1) without changing anything else.  Note that (#$linkBetweenInSystem LINK X Y SYS) is actually an abbreviation of (#$and (#$linkInSystem LINK SYS) (#$nodeInSystem X SYS) (#$nodeInSystem Y SYS) (#$pathBetween LINK X Y)).")))

(defrelation link-closed-sub-systems
  :arity 2
  :is-primitive sub-path-systems
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Anti-Symmetric-Binary-Predicate
                Transitive-Binary-Predicate
                Reflexive-Binary-Predicate
                (documentation "(#$linkClosedSubSystems SYS SUBSYS) means that the path system SUBSYS is a subsystem of the path system SYS (i.e., (#$subPathSystems SYS SUBSYS) holds) and SUBSYS 'preserves' all links in SYS between nodes in SUBSYS, i.e., if (#$linkBetweenInSystem LINK X Y SYS) holds and X and Y are in SUBSYS, LINK is a link in SUBSYS.")))

(defrelation link-fn
  :arity 2
  :domain Cyc_Thing
  :range Set-Or-Collection
  :annotations (Non-Predicate-Function
                (documentation "For each #$PathSystem SYS, (#$LinkFn SYS) denotes the set of all links in SYS (see #$PathSystem).  Note that the function #$LinkFn and the predicate #$linkInSystem are interdefinable.  We normally use #$LinkFn, for convenience, when we consider some relations between different path systems even though for a single path system SYS, we can also replace each (#$linkInSystem X SYS) by (#$elementOf X (#$LinkFn SYS)).")))

(defrelation link-in-system
  :arity 2
  :domain Path--Simple
  :range Cyc_Thing
  :annotations (Asymmetric-Binary-Predicate
                (documentation "(#$linkInSystem LINK SYS) means that LINK is an instance of #$Path-Simple taken as a primitive path (called a link) in the #$PathSystem SYS.  For each link LINK in a path system SYS, there is a unique pair {X, Y} of different nodes in SYS (see #$nodeInSystem) such that X and Y are the two end-points of LINK in SYS.  Other 'points' can also be on LINK, but they cannot be nodes in SYS.  There can be no point on a link that is different from its end points but nevertheless on another link, i.e., no matter how many points there are on a particular link in a path system, none of them can be an 'intersection' (see #$junctionInSystem) except the end points of the link, which are nodes in the system.  See #$linkBetweenInSystem.  Each link in SYS is also a path in SYS, i.e., (#$linkInSystem LINK SYS) implies (#$pathInSystem LINK SYS).  Note that there is no general collection of all links.  Any path can be a link if you can somehow ignore the intersection points on it--it all depends on the #$PathSystem.")))

(defrelation liquid-fn
  :arity 2
  :domain Tangible-Stuff-Composition-Type
  :range (:and Tangible-Stuff-State-Type
               (:filled-by superrelations Liquid-Tangible-Thing))
  :annotations (Collection-Denoting-Function
                (documentation "A #$CollectionDenotingFunction.  #$LiquidFn takes as an argument a collection COL, membership in which is based only on physical and/or chemical composition and not on any other property (see #$TangibleStuffCompositionType).  (#$LiquidFn COL) is the collection of elements of COL that are in the #$LiquidStateOfMatter.  E.g., the mud in my driveway belongs to the collection (#$LiquidFn #$EarthStuff).")))

(defrelation lisp-defun
  :arity 2
  :domain Evaluatable-Function
  :range Cyc-System-Symbol
  :annotations (Relationship-Predicate
                Functional-Slot
                Binary-Predicate
                (documentation "The Cyc predicate #$lispDefun is used to relate an evaluatable Cyc function to the name of the piece of code that is used to evaluate it.  (#$lispDefun E-FUN NAME) means that the #$CycSystemSymbol NAME is the name of a piece of Heuristic Level (SubL) code in the Cyc system which is used to compute the value of expressions containing the #$EvaluatableFunction E-FUN.")))

(defrelation liter
  :annotations (Unit-Of-Measure-No-Prefix
                Mks-Unit-Of-Measure
                Standard-Unit-Of-Measure
                Unit-Of-Volume
                (documentation "The measurement function used in Cyc to represent the standard unit of capacity in the Metric system (and also in Cyc). See also #$UnitOfVolume, #$MKSUnitOfMeasure, #$UnitOfMeasure.")))

(defrelation litigants
  :arity 2
  :is-primitive social-participants
  :domain Trial
  :range Agent
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(litigants ARG1 ARG2) means that the agent ARG2 is one of the contending parties in the lawsuit ARG1.")))

(defrelation log-fn
  :arity 2
  :domain Scalar-Interval
  :range Scalar-Interval
  :annotations (Function-From-Quantities-To-Quantities
                (documentation "#$LogFn is the unary mathematical function that returns the natural logarithm of the number taken as its argument.  Its inverse (i.e., #$inverseFunc) is #$ExpFn.")))

(defrelation loop-fn
  :arity 2
  :domain Cyc_Thing
  :range Set-Or-Collection
  :annotations (Non-Predicate-Function
                (documentation "For each #$PathSystem SYS, (#$LoopFn SYS) denotes the set of all loops in SYS (see #$PathSystem).  Note that the function #$LoopFn and the predicate #$loopInSystem are interdefinable.  We normally use #$LoopFn, for convenience, when we consider some relations between different path systems even though for a single path system SYS, we can also replace each (#$loopInSystem X SYS) by (#$elementOf X (#$LoopFn SYS)).")))

(defrelation loop-in-system
  :arity 2
  :is-primitive cycle-in-system
  :domain Path--Generic
  :range Cyc_Thing
  :annotations (Asymmetric-Binary-Predicate
                (documentation "(#$loopInSystem LOOP SYS) means that LOOP is a 'loop' in SYS, which is like a link in SYS except that it has exactly one node on it as if it is a link whose two end nodes are the same.  Each loop in SYS is also a cycle in SYS, see #$cycleInSystem.  The differences between a loop and a (non-loop) cycle in SYS include that (i) there is exactly one point in SYS on a loop (which must be a node in SYS), but there may in general be any finite number of nodes (and even as many points as there are real numbers) on some (non-loop) cycle in SYS, and that (ii) The unique node in SYS on a loop may or may not be an end point of a link in SYS, but each node on a (non-loop) cycle in SYS must be an end point of at least two links in SYS.  These imply that there can be at most one 'intersection point' on a loop in SYS but there can be any finite number of 'intersection points' on a (non-loop) cycle in SYS.  See #$pointOnCycle and #$junctionInSystem. Note that under current treatment of loops in a path system, if one would like to talk about a 'loop' in a path system a 'part' of which is a path in the system, then he/she should make it a cycle rather than a loop in the system because according to what we said above, no 'part' of a loop in the system can be presented as a path in the system.")))

(defrelation loves
  :arity 2
  :is-primitive (:and positive-vested-interest likes-as-friend)
  :domain Animal
  :range Agent
  :annotations (Binary-Predicate
                (documentation "(#$loves AGENT1 AGENT2) means AGENT1 loves AGENT2; AGENT2 has a strong emotional affect on AGENT1 whereby AGENT1 is usually loyal and devoted to and wishes well AGENT2, seeks AGENT2's companionship, and will incur substantial personal cost to help AGENT2.  Any #$Agent can love any other #$Agent, though there are specialized types of love which are restricted to two animals, two adult people, two corporations, a person and a corporation, etc.")))

(defrelation low-amount-fn
  :arity 2
  :domain (:and Primitive-Attribute-Type
                (:filled-by superrelations Scalar-Interval))
  :range Scalar-Interval
  :annotations (Generic-Value-Function
                (documentation "#$LowAmountFn is a Cyc function, in particular, an #$IndividualDenotingFunction.  It is one of several functions used to denote so-called `generic' amounts of a wide variety of attributes.  When ATT is a type of attribute, (#$LowAmountFn ATT) returns an instance of ATT which is considered `a low amount of' ATT in the current context.  A low amount of ATT is more than (#$VeryLowAmountFn ATT) but less than (#$MediumAmountFn ATT).")))

(defrelation mach--unit-of-speed
  :annotations (Unit-Of-Measure-No-Prefix
                Unit-Of-Speed
                (documentation "The speed of sound on earth at sea level.  344.4 m/s")))

(defrelation made-by
  :arity 2
  :domain Product
  :range Commercial-Organization
  :annotations (Binary-Predicate
                (documentation "The predicate #$madeBy was used to indicate that a particular product was made by a particular company.  (#$madeBy PROD COMORG) means that PROD, an individual instance of #$Product, was manufactured by the #$CommercialOrganization COMORG.  Cf. #$makesProductType.")))

(defrelation main-constituent
  :arity 2
  :is-primitive (:and cotemporal constituents)
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Cotemporal-Objects-Slot
                Functional-Slot
                Composition-Predicate
                (documentation "The predicate #$mainConstituent is used to indicate the most significant portion of an element of #$ExistingStuffType that makes up a particular #$PartiallyTangible thing.  (#$mainConstituent X Y) means that X's #$constituents include Y, and (as a default) the physical properties of the thing X are those of its main constituent, Y.  For example, for a particular instance of #$Lemonade, there is an instance of #$Water which is the #$mainConstituent, and most of the physical properties of the #$Lemonade derive from #$Water.  On the other hand, a person is NOT considered to have some portion of #$Water as #$mainConstituent, even though much of a person's mass is #$Water, because the physical properties of a person are not the same as those of water.")))

(defrelation main-product
  :arity 2
  :is-primitive physical-parts
  :domain Formal-Product
  :range Product
  :annotations (Part-Predicate
                Anti-Symmetric-Binary-Predicate
                Transitive-Binary-Predicate
                (documentation "The predicate #$mainProduct is used to identify the main item in a particular set of stuff that a customer gets when buying a packaged product.  (#$mainProduct FORM PROD) means that the particular #$Product PROD is the main item of the #$FormalProduct FORM--as distinct from the accessories, agreements, packaging, literature, etc., that come along with it.")))

(defrelation main-transportees
  :arity 2
  :is-primitive transportees
  :domain Transportation-Event
  :range Partially-Tangible
  :annotations (Binary-Predicate
                (documentation "(mainTransportees TRAN MT) means that MT is one of the main transportees, or of the primary things intended to be transported (as opposed to incidentals), in the instance TRAN of TransportationEvent.")))

(defrelation major-undertakings-of
  :arity 2
  :is-primitive (:and performed-by temporally-intersects)
  :domain Action
  :range Agent
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$majorUndertakingsOf ACTION AGENT) means that AGENT consciously performed ACTION.  The success and consequence(s) of ACTION are important to AGENT.  As a result, for a sentient AGENT, failure usually results in AGENT feeling negative emotions, and success positive emotions.")))

(defrelation makes-product-type
  :arity 2
  :domain Commercial-Organization
  :range (:and Product-Type (:filled-by superrelations Product))
  :annotations (Binary-Predicate
                (documentation "The predicate #$makesProductType is used to indicate that a particular company makes a specific (i.e., type of) product.  (#$makesProductType ORG PRODTYP) means that the #$CommercialOrganization ORG manufactures the #$ProductType PRODTYP.  Cf. #$madeBy.")))

(defrelation making-fn
  :arity 2
  :domain (:and Temporal-Stuff-Type
                (:filled-by superrelations Partially-Tangible))
  :range (:and Script-Type
               Temporal-Object-Type
               (:filled-by superrelations Making-Something))
  :annotations (Collection-Denoting-Function
                (documentation "#$MakingFn is a Cyc function, in particular a #$CollectionDenotingFunction.  (#$MakingFn TYPE) denotes the set of events in which elements of some TYPE of thing are made (whether manufactured, constructed, produced, etc.)  E.g., (#$MakingFn #$Automobile) is the set of events in which cars are manufactured.  Having this function saves us from having to create tens of thousands of new terms for peanut-butter-making, business-card-making, etc.")))

(defrelation maleficiary
  :arity 2
  :is-primitive pre-actors
  :domain Event
  :range Agent
  :annotations (Binary-Predicate
                (documentation "(#$maleficiary ACT AGT) means that the #$Agent AGT is harmed by the occurrence of the action ACT.  That is, the interest or welfare of AGT is thwarted, blocked, or harmed in ACT.")))

(defrelation male-fn
  :arity 2
  :domain (:and Organism-Classification-Type (:filled-by superrelations Animal))
  :range (:and Existing-Object-Type (:filled-by superrelations Male-Animal))
  :annotations (Collection-Denoting-Function
                (documentation "#$MaleFn is a Cyc function, in particular, an instance of #$CollectionDenotingFunction.  (#$MaleFn ORGTYPE) returns that subset of the animal taxonomic collection ORGTYPE which includes all and only the males of ORGTYPE.  For example, (#$MaleFn #$Person) and #$MalePerson denote the same collection, while (#$MaleFn #$Deer) denotes the collection of all bucks.")))

(defrelation male-parent-actor
  :arity 2
  :is-primitive parent-actors
  :domain Biological-Reproduction-Event
  :range Organism--Whole
  :annotations (Functional-Slot
                Actor-Slot
                Asymmetric-Binary-Predicate
                Anti-Transitive-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$maleParentActor ?EVENT ?ORGANISM) means that ?ORGANISM is the male parent in the #$SexualReproductionEvent ?EVENT.")))

(defrelation malleability-of-object
  :arity 2
  :domain Solid-Tangible-Thing
  :range Malleability
  :annotations (Interval-Based-Quantity-Slot
                Tangible-Object-Predicate
                (documentation "(#$malleabilityOfObject OBJ DEGREE) indicates that the instance of #$SolidTangibleThing OBJ has the degree of #$Malleability DEGREE.")))

(defrelation marital-status
  :arity 2
  :domain Person
  :range Marital-Status-Of-People
  :annotations (Functional-Slot
                (documentation "(#$maritalStatus PRSN MSTAT) means #$Person PRSN has the #$MaritalStatusOfPeople MSTAT.  The latter may be: #$Married, #$Widowed, #$Single, etc.  E.g., (#$maritalStatus #$KeithRichards #$Married).  The marital status of a person depends on whether, and when, that person was married to another person, and how the marriage ended.")))

(defrelation mass-number
  :arity 2
  :domain English-Word
  :range Character-String
  :annotations (Binary-Predicate
                Intangible-Object-Predicate
                (documentation "(#$massNumber WORD STRING) means that STRING is the mass noun form of WORD.  For example, `paper' is the mass noun form of #$Paper-TheWord.")))

(defrelation mass-of-object
  :arity 2
  :domain Partially-Tangible
  :range Mass
  :annotations (Physical-Amount-Slot
                Physical-Attribute-Description-Slot
                (documentation "(#$massOfObject OBJ MASS) means that the tangible object OBJ has #$Mass MASS.")))

(defrelation mate
  :arity 2
  :is-primitive (:and friends positive-vested-interest)
  :domain Animal
  :range Animal
  :annotations (Symmetric-Binary-Predicate
                Inter-Personal-Relation-Slot
                Anti-Transitive-Binary-Predicate
                Cotemporal-Objects-Slot
                (documentation "(mate PERSON1 PERSON2) means that PERSON1 and PERSON2 are mates and long-term monogamous companions.  In the #$AngloAmericanSocialLifeMt each person has at most only one mate at a time.  Hence, this predicate has #$SingleEntry arguments.")))

(defrelation maximal-connected-sub-systems
  :arity 2
  :is-primitive (:and point-closed-sub-systems link-closed-sub-systems)
  :domain Cyc_Thing
  :range Connected-Path-System
  :annotations (Transitive-Binary-Predicate
                Anti-Symmetric-Binary-Predicate
                (documentation "(#$maximalConnectedSubSystems SYS SUB) means that SUB is a 'maximal' connected subsystem of SYS, i.e., that SUB is an entire connected piece of SYS without other disconnected pieces of SYS.  That is to say, (i) SUB is a connected path system, and consequently must have at least one node, say NODE, in it, and (ii) SUB is a subsystem of SYS, and (iii) for every connected subsystem SUB1 of SYS containing NODE, SUB1 is a subsystem of SUB.  Thus a maximal connected subsystem SUB of a path system SYS must satisfy the conditions that (a) for each point X in SUB and each point Y in SYS that is not in SUB, X and Y are not connected in SYS, and that (b) for any nodes X and Y in SUB, for any link LINK in SYS between X and Y, LINK must also be in SUB, and that (c) for each point X in SYS, if X is on a link in SYS which is also a link in SUB, then X must also be in SUB.  It follows that if SUB is a maximal connected subsystem of SYS, SUB must be a link-closed subsystem as well as a point-closed subsystem of SYS.  Another consequence is that if SUB is a maximal connected subsystem of SYS, and if X is a point in SUB and is on a loop in SYS, then the loop must also be in SUB.")))

(defrelation max-quant-value
  :arity 2
  :domain Scalar-Interval
  :range Scalar-Point-Value
  :annotations (Reflexive-Binary-Predicate
                Relationship-Predicate
                (documentation "(#$maxQuantValue SCALAR POINT) means that the upper limit of the quantity SCALAR is POINT, an element of #$ScalarPointValue.  SCALAR is an element of #$ScalarInterval.  For example, the #$maxQuantValue for the pay of mail room employees might be (#$DollarsPerHour 6.5); e.g., (#$maxQuantValue `MailPay' (#$DollarsPerHour 6.5)).  Another example: (#$maxQuantValue (#$Unity 5 10) 10).")))

(defrelation meaning-in-system-fn
  :arity 3
  :domains (Indexed-Info-Source Character-String)
  :range Cyc_Thing
  :annotations (Reifiable-Function
                (documentation "The function (MeaningInSystemFn INFOSOURCE STRING), applied to a character string or code STRING in some external information system INFOSOURCE, returns whatever concept is meant by that string or code in that system.  For example, the value of (#$MeaningInSystemFn #$WordNet-Information ''N221566'') is the concept (or WordNet `synset') represented by the synonyms (rampart|bulwark|wall), meaning 'an embankment built around a space for defensive purposes' in the WordNet system.  The STRING can have any format chosen by the person who builds the representation of the external system; usually it will include some index string that is used as an identifier in the external system.  In addition, the STRING may arbitrarily contain any further characters or information, depending on how the external information is selected and processed.  This function allows you to relate a concept in an external system to an arbitrarily complicated expression composed of Cyc concepts.  If the external concept has a direct, exact mapping to a single Cyc constant, then it is better to use the predicate #$synonymousExternalConcept rather than this function.  If the there is a direct correspondence to one Cyc constant, but it is only an approximate correspondence of meaning, you can use #$overlappingExternalConcept.")))

(defrelation measure
  :arity 2
  :domain Temporal-Thing
  :range Time--Quantity
  :annotations (Interval-Based-Quantity-Slot
                (documentation "(#$measure ?X ?Y) indicates that ?Y is total elapsed time from the start of ?X to its end.  For continuous #$TemporalThings, the #$measure of the object is the same as its #$duration (qv).  But if the #$TemporalThing is discontinuous, then the #$measure will be greater than the #$duration.  For example, `GeorgeWashingtonSleeping' has a #$measure that is about three times as long as its #$duration, assuming he slept about 8 hours a night.  Note:  Unfortunately, in some disciplines, such as Real Analysis, these two terms' definitions are switched!  In such contexts, one could assert to Cyc that the preferred denotation of #$duration was #$Measure-TheWord, and that the preferred denotation of #$measure was #$Duration-TheWord, but notice that the two concepts --- #$measure and #$duration --- are still distinct and useful in that discipline, they just happen to have different names there.")))

(defrelation medial-region-fn
  :arity 2
  :domain Animal-Body-Region
  :range Animal-Body-Region
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "The function (MedialRegionFn REGOROBJ), applied to a region or object REGOROBJ, means the sub-region consisting of the center parts or middle section (near the mid-line) of REGOROBJ, or the medial main portion of REGOROBJ as opposed to the right and left portions.  It applies when REGOROBJ itself has an intrinsic right/left orientation (unlike, say, a sphere), but if REGOROBJ is a part within a larger region or object that has its own right/left orientation, the function returns REGOROBJ's portion nearest the mid-line (with respect to left and right) of the larger region or object.")))

(defrelation mediators
  :arity 2
  :is-primitive social-participants
  :domain Social-Occurrence
  :range Agent
  :annotations (Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "The facilitators of a process including the agents, brokers, or mediators that assist in arranging a contract, transaction, or agreement among several parties.")))

(defrelation medium-amount-fn
  :arity 2
  :domain (:and Primitive-Attribute-Type
                (:filled-by superrelations Scalar-Interval))
  :range Scalar-Interval
  :annotations (Generic-Value-Function
                (documentation "#$MediumAmountFn is a Cyc function, in particular, an element of #$IndividualDenotingFunction.  It is one of several functions used to denote so-called `generic' amounts of a variety of attributes.  When ATT is a type of attribute, (#$MediumAmountFn ATT) returns an instance of ATT which is considered `a medium amount of' ATT in the current context.  A medium amount of ATT is more than (#$VeryLowAmountFn ATT) but less than (#$HighAmountFn ATT).")))

(defrelation megabyte
  :annotations (Unit-Of-Measure-With-Prefix
                (documentation "The measurement function used in Cyc to represent a common unit of computer memory and disk capacity.  The value of (#$Megabyte 1) equals approximately one million (8-bit) bytes.  See also #$UnitOfMeasure.")))

(defrelation mega-hertz
  :annotations (Unit-Of-Measure-With-Prefix
                Unit-Of-Frequency
                (documentation "The measurement function used in Cyc to represent the common unit of frequency.     See also #$UnitOfFrequency, #$UnitOfMeasure.")))

(defrelation member-of-species
  :arity 2
  :is-primitive cyc_isa
  :domain Organism--Whole
  :range (:and Biological-Species (:filled-by superrelations Organism--Whole))
  :annotations (Functional-Slot
                (documentation "(#$memberOfSpecies ORG SPECIES) means that the organism ORG is a member of the #$BiologicalSpecies SPECIES.")))

(defrelation member-of-this-political-party
  :arity 2
  :is-primitive has-members
  :domain Political-Party
  :range Human-Adult
  :annotations (Taxonomic-Slot
                (documentation "(#$memberOfThisPoliticalParty PARTY PERS) means that #$Person PERS is a (registered) member of #$PoliticalParty PARTY.  For example, (#$memberOfThisPoliticalParty #$DemocraticParty #$BillClinton).")))

(defrelation meter
  :annotations (Unit-Of-Measure-No-Prefix
                Mks-Unit-Of-Measure
                Standard-Unit-Of-Measure
                Unit-Of-Distance
                (documentation "The measurement function used in Cyc to represent the basic unit of measure in the metric system.  The meter is also the basic unit of measure for length in CYC.  See also #$MKSUnitOfMeasure, #$UnitOfMeasure.")))

(defrelation meters-per-second
  :annotations (Unit-Of-Measure-No-Prefix
                Mks-Unit-Of-Measure
                Standard-Unit-Of-Measure
                Unit-Of-Speed
                (documentation "(#$MetersPerSecond NUMBER) returns a dimensionless rate or speed of NUMBER meters per second.  Notice that this result is not presently thought of as incorporating a vector, although it might be modified to do so at some point in the future if this should prove appropriate.")))

(defrelation meters-per-second-per-second
  :annotations (Unit-Of-Measure-No-Prefix
                Unit-Of-Acceleration
                Mks-Unit-Of-Measure
                Standard-Unit-Of-Measure
                (documentation "The basic measure of acceleration")))

(defrelation middle-name
  :arity 2
  :is-primitive name-of-agent
  :domain Person
  :range Human-Given-Name-String
  :annotations (Intangible-Object-Predicate
                Binary-Predicate
                (documentation "(#$middleName X STRNG) means that #$Person X is known by the #$HumanGivenNameString STRNG as his or her middle name.  E.g., (#$middleName #$Lenat ``Bruce'').  A person rarely has more than one middle name.  In some cultures, when a wedding occurs, one party changes their middle name to whatever their #$lastName used to be, thus leading to cases where the person's new middle name is actually a #$HumanFamilyNameString rather than a #$HumanGivenNameString --- the same is true in some cultures when an infant is born and given, as a middle name, the last name of a grandparent (other than the infant's last name).")))

(defrelation miles-per-hour
  :annotations (Unit-Of-Measure-No-Prefix
                Unit-Of-Speed
                (documentation "A unit of speed")))

(defrelation min-quant-value
  :arity 2
  :domain Scalar-Interval
  :range Scalar-Point-Value
  :annotations (Reflexive-Binary-Predicate
                Relationship-Predicate
                (documentation "(#$minQuantValue SCALAR POINT) means that the lower limit of SCALAR is POINT, an element of #$ScalarPointValue.  SCALAR is an element of #$ScalarInterval.  For example, the #$minQuantValue for the pay of mail room employees might be (#$DollarsPerHour 4.5); e.g., (#$minQuantValue `MailPay' (#$DollarsPerHour 4.5)).  Another example: (#$minQuantValue (#$Unity 5 10) 5).")))

(defrelation minus-fn
  :arity 2
  :domain Scalar-Interval
  :range Scalar-Interval
  :annotations (Function-From-Quantities-To-Quantities
                (documentation "#$MinusFn is the unary mathematical function that changes the sign of the number taken as its argument; e.g., (#$MinusFn 2) returns -2, and (#$MinusFn -2) returns 2.")))

(defrelation minute--unit-of-angular-measure
  :annotations (Unit-Of-Angular-Distance
                Unit-Of-Measure-No-Prefix
                (documentation "A unit to measure the size of angles, in the Imperial system of measurement.  60 minutes = 1 degree (#$Degree-UnitOfAngularMeasure)")))

(defrelation minute-fn
  :arity 3
  :domains (Non-Negative-Integer Calendar-Hour)
  :range Calendar-Minute
  :annotations (Non-Predicate-Function
                Individual-Denoting-Function
                (documentation "(#$MinuteFn ?M ?H) denotes a #$CalendarMinute -- in particular, minute number ?M of hour ?H.  For example, (#$MinuteFn 12 (#$HourFn 18 (#$DayFn 14 (#$MonthFn #$February (#$YearFn 1966))))) denotes 6:12pm Feb. 14th, 1966")))

(defrelation minutes-duration
  :annotations (Unit-Of-Measure
                Unit-Of-Measure-No-Prefix
                Unit-Of-Time
                (documentation "#$MinutesDuration is a function that takes one or two numbers and returns, as its value, some amount of #$Time.  An expression of the form (#$MinutesDuration ?min ?max) denotes a quantity of #$Time that is at least ?min minutes and at most ?max minutes.  An expression of the form (#$MinutesDuration ?num) denotes a quantity of #$Time that is exactly ?num minutes.")))

(defrelation mob-fn
  :arity 2
  :domain Object-Type
  :range (:and Cyc_Collection (:filled-by superrelations Mob))
  :annotations (Collection-Denoting-Function
                (documentation "#$MobFn is a Cyc #$CollectionDenotingFunction.  #$MobFn is used for referring to specializations of #$Mob; esp. note that applications of #$MobFn produce COLLECTIONS (of mobs), not individual mobs.  #$MobFn takes any element of #$ObjectType as its argument and returns a subset of #$Mob, namely the collection containing those mobs whose #$groupMembers are elements of that #$ObjectType.  (#$MobFn OBJ-TYPE) denotes the collection of all mobs whose members belong to (#$isa) OBJ-TYPE.  For example, a clump of hair on my head is an element of (#$MobFn #$Hair-Strand).  The collection #$Galaxy is a subset of (#$MobFn #$Star).  And the collection #$Applauding (i.e., all applause events) could be referred to as (#$MobFn `HandClappingEvent').")))

(defrelation molecule-fn
  :arity 2
  :domain (:and Chemical-Compound-Type
                (:filled-by superrelations Molecular-Stuff))
  :range (:and Existing-Object-Type (:filled-by superrelations Molecule))
  :annotations (Collection-Denoting-Function
                (documentation "#$MoleculeFn is a Cyc function, specifically a #$CollectionDenotingFunction.  It takes an instance of #$ChemicalCompoundType as its sole argument and returns the set of all molecules of that compound.  (#$MoleculeFn X) denotes the collection of all #$Molecules of #$MolecularStuff X.  For example, (#$MoleculeFn #$Water) is the collection of all water molecules.")))

(defrelation monetary-value
  :arity 2
  :domain Something-Existing
  :range Money
  :annotations (Interval-Based-Quantity-Slot
                (documentation "The value of an element of #$SomethingExisting. For the time being, expressed in a monetary curency.")))

(defrelation money-transfer-mode
  :arity 2
  :domain Money-Transfer
  :range (:and Money-Tender-Type (:filled-by superrelations Tender-Object))
  :annotations (Binary-Predicate
                (documentation "(#$moneyTransferMode TRANSACTION
TYPE) means that in some particular money transfer TRANSACTION,
the #$MoneyTenderType used in that transaction was TYPE, e.g.,
#$CreditCard, #$Check-TenderObject, etc.")))

(defrelation money-transferred
  :arity 2
  :domain (:and Money-Transfer Buying)
  :range Money
  :annotations (Cost-Breakdown-Slot
                Interval-Based-Quantity-Slot
                Cyc_Role
                (documentation "This predicate indicates the amount of money involved in a particular transfer of funds.  (#$moneyTransferred TRANS MONEY) means that MONEY is the quantity of #$Money transferred in the money transfer event TRANS.  
Note: MONEY is distinct from the physical #$TenderObjects (q.v.) used to accomplish that transfer (cf. #$objectTendered).  For example, the #$moneyTransferred to pay a car payment might be the amount US$400, while the #$objectTendered in the paying is an instance of #$Check-TenderObject.")))

(defrelation month-fn
  :arity 3
  :domains ((:and Month-Of-Year-Type Temporally-Disjoint-Interval-Type
             Annual-Event-Type Conventional-Classification-Type
             (:filled-by superrelations Calendar-Month))
            Calendar-Year)
  :range Calendar-Month
  :annotations (Non-Predicate-Function
                Individual-Denoting-Function
                (documentation "(#$MonthFn ?M ?YR) denotes a #$CalendarMonth -- in particular, the month of type ?M during ?YR.  For example, (#$MonthFn #$February (#$YearFn 1966)) denotes Feb. of 1966.  Note that #$MonthFn -- unlike #$DayFn, #$HourFn, etc. -- does NOT take a number as its first argument.")))

(defrelation months-duration
  :annotations (Unit-Of-Measure
                Unit-Of-Measure-No-Prefix
                Unit-Of-Time
                (documentation "This is a function that takes one or two numbers and returns, as its value, some amount of #$Time.  An expression of the form (#$MonthsDuration ?min ?max) denotes a quantity of #$Time that is at least ?min months and at most ?max months.  (#$MonthsDuration ?num) denotes a quantity of #$Time that is exactly ?num months.")))

(defrelation mother
  :arity 2
  :is-primitive cotemporal
  :domain Animal
  :range Female-Animal
  :annotations (Family-Relation-Slot
                Anti-Transitive-Binary-Predicate
                Cotemporal-Objects-Slot
                Asymmetric-Binary-Predicate
                (documentation "(#$mother OFFSPRING FEMALE) means that the #$FemaleAnimal FEMALE is the female biological parent of the #$Animal OFFSPRING



.")))

(defrelation mt-inference-function
  :arity 2
  :domain Microtheory
  :range Cyc-System-Symbol
  :annotations (Binary-Predicate
                (documentation "The function which is used to perform inference within this microtheory.")))

(defrelation multiplication-units
  :arity 3
  :domains (Unit-Of-Measure Unit-Of-Measure)
  :range Unit-Of-Measure
  :annotations (Bookkeeping-Predicate
                Ternary-Predicate
                (documentation "The Cyc predicate #$multiplicationUnits is used to state what measurement units should be used for the product of two physical quantities, given the units measuring each of the quantities multiplied.  (#$multiplicationUnits UM-1 UM-2 PROD-UM) means that the value of (#$TimesFn (UM-1 x) (UM-2 y)) should be given in the units PROD-UM.  For example, (#$multiplicationUnits #$Mile #$Mile #$SquareMile).  See also #$UnitOfMeasure, #$TimesFn.")))

(defrelation my-creation-time
  :arity 2
  :domain Reifiable-Term
  :range Positive-Integer
  :annotations (Bookkeeping-Predicate
                Binary-Predicate
                (documentation "(#$myCreationTime X TIME) means that the constant X was created at time TIME.  TIME is not, however, an instance of #$Date.  This assertion is not intended for inference, only for documentation, so the format is a simple one, designed for human readability and for use by internal Cyc functions.  The format of TIME is YYYYMMDD, so for example, 19870911 is September 11, 1987.")))

(defrelation my-creator
  :arity 2
  :domain Reifiable-Term
  :range Cyclist
  :annotations (Bookkeeping-Predicate
                Binary-Predicate
                (documentation "(#$myCreator X Y) means that Y is the constant representing the person who introduced the constant X into the Cyc vocabulary. In general, the editing interfaces to the Cyc KB only allow the KB to be modified when an instance of #$Cyclist is designated as the author of the changes.")))

(defrelation my-entity
  :arity 2
  :domain Something-Existing
  :range Entity
  :annotations (Inter-Existing-Object-Slot
                Functional-Slot
                (documentation "(#$myEntity ?X ?Y) indicates that ?Y is an #$Entity (qv) and that ?X is some subabstraction of ?Y.  That is, (#$subAbstrac ?Y ?X).  Note that each #$SomethingExisting ?X will generally have one unique #$Entity ?Y of which it is a #$subAbstrac.  E.g., (#$myEntity AlbertEinsteinWhileAtPrinceton AlbertEinstein).")))

(defrelation name-of-agent
  :arity 2
  :is-primitive name-string
  :domain Agent
  :range Proper-Name-String
  :annotations (Binary-Predicate
                Intangible-Object-Predicate
                (documentation "(#$nameOfAgent AGT STRING) means STRING is the name(s) of AGT.  AGT can be a #$Person, #$Animal, #$Organization, etc.  In most contexts, this means that AGT may normally be called STRING, in that context, and should therefore include their #$salutation if the context is a formal one, should omit their #$lastName if it is unambiguous and the context is an intimate one, etc..")))

(defrelation name-string
  :arity 2
  :domain Reifiable-Term
  :range Proper-Name-String
  :annotations (Intangible-Object-Predicate
                Binary-Predicate
                (documentation "(#$nameString THING STRING) means that
the name of the thing THING is the string STRING. Use it to connect
constants or NATS with their names. For agents, use the more 
specific predicate #$nameOfAgent.")))

(defrelation native-language
  :arity 2
  :is-primitive language-spoken
  :domain Person
  :range Language
  :annotations (Binary-Predicate
                (documentation "The first language spoken by a person.  EntryFormat is #$SetTheFormat, to cover cases of bi-lingual childhoods.")))

(defrelation near
  :arity 2
  :domain Spatial-Thing
  :range Spatial-Thing
  :characteristics :SYMMETRIC
  :annotations (Irreflexive-Binary-Predicate
                Spatial-Predicate
                Symmetric-Binary-Predicate
                (documentation "(#$near THIS THAT) means that the distance between THIS and THAT doesn't exceed the maximum dimension of the smaller object.  Thus, two pebbles one mile apart would not be #$near each other, but a pebble one centimeter above the earth would be #$near the earth.")))

(defrelation negation-attribute
  :arity 2
  :domain Attribute-Value
  :range Attribute-Value
  :annotations (Symmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$negationAttribute ATT1 ATT2) means that a thing cannot have both ATT1 and ATT2 as attributes at the same or overlapping times.")))

(defrelation negation-inverse
  :arity 2
  :domain Binary-Predicate
  :range Binary-Predicate
  :annotations (Rule-Macro-Predicate
                Symmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "The predicate #$negationInverse is used to describe a relationship between some elements of #$BinaryPredicate.  (#$negationInverse PRED INV) means that if PRED holds between a pair of items <X,Y>, then INV does NOT hold between the inverted pair <Y,X>.  In other words, #$negationInverse is syntactic shorthand for (#$implies (PRED X Y) (#$not (INV Y X))).  Note that PRED and INV may take the same value; e.g., (#$negationInverse #$father #$father) is true and means that if X's #$father is Y, then X is NOT Y's #$father.  Thus, #$negationInverse is true for all elements of #$AsymmetricBinaryPredicate.")))

(defrelation negation-preds
  :arity 2
  :domain Predicate
  :range Predicate
  :annotations (Rule-Macro-Predicate
                Symmetric-Binary-Predicate
                (documentation "The predicate #$negationPreds is used to represent a relation between some elements of #$Predicate.  (#$negationPreds PRED1 PRED2) means that PRED1 is a negation of PRED2 in the sense that any tuple in the extension of PRED1 is NOT also a tuple in the extension of PRED1.  In other words, (#$negationPreds PRED1 PRED2) is shorthand for (#$implies (PRED1 {arg-list}) (#$not (PRED2 {arg-list}))).  For example, (#$negationPreds #$transportees #$transporter).")))

(defrelation negative-vested-interest
  :arity 2
  :domain Agent
  :range Temporal-Thing
  :annotations (Binary-Predicate
                (documentation "(#$negativeVestedInterest  AGT OBJ) means #$Agent AGT has a negative interest in the object OBJ or in the good fortune of OBJ, and a positive interest in its misfortune.  Generally, AGT will be helped or pleased by the destruction, diminution, weakening, or retarding of OBJ, and will be hurt or displeased if OBJ is preserved or enhanced.  See #$positiveVestedInterest.")))

(defrelation no-amount-fn
  :arity 2
  :domain (:and Primitive-Attribute-Type
                (:filled-by superrelations Scalar-Interval))
  :range Scalar-Interval
  :annotations (Generic-Value-Function
                (documentation "NoAmountFn is a Cyc function, in particular, an element of #$IndividualDenotingFunction.  It is one of several functions used to denote so-called `generic' values for a wide variety of attributes.  When ATT is a type of attribute, (#$NoAmountFn ATT) returns a zero amount of ATT.  For example, (#$NoAmountFn #$Elasticity) represents zero elasticity and is the property of things that don't re-expand at all following compression; e.g.,instances of #$Ceramic, #$Silicon, or #$Sugar-Generic.")))

(defrelation node-fn
  :arity 2
  :domain Cyc_Thing
  :range Set-Or-Collection
  :annotations (Non-Predicate-Function
                (documentation "For each #$PathSystem SYS, (#$NodeFn SYS) denotes the set of all nodes in SYS (see #$PathSystem).  Note that the function #$NodeFn and the predicate #$nodeInSystem are interdefinable.  We normally use #$NodeFn, for convenience, when we consider some relations between different path systems even though for a single path system SYS, we can replace each (#$nodeInSystem X SYS) by (#$elementOf X (#$NodeFn SYS)).")))

(defrelation non-deliberate-actors
  :arity 2
  :is-primitive actors
  :domain Event
  :range Partially-Tangible
  :annotations (Actor-Slot
                (documentation "(#$nonDeliberateActors ACT ACTR) means that ACTR has a #$Role in the #$Event ACT but is not acting deliberately.  Examples: (1) President #$JohnKennedy was a #$nonDeliberateActors in his assassination; (2) a person is a #$nonDeliberateActors in his/her own autonomic bodily functioning (e.g., heart beating, digesting); (3) Mount #$Vesuvius-Volcano was a #$nonDeliberateActors in the event of its eruption that destroyed Pompeii.  #$nonDeliberateActors is a negative specification of the role an actor has in an event; the role of particular #$nonDeliberateActors might be further specified positively, e.g., with #$bodilyActedOn or #$bodilyDoer.")))

(defrelation non-volitional-result--rst
  :arity 2
  :domain Linguistic-Object
  :range Linguistic-Object
  :annotations (Asymmetric-Binary-Predicate
                Rst-Relation
                (documentation "The discourse relation that holds between two segments of text when ARG1 specifies something which could be a nonvolitional cause of ARG2.")))

(defrelation northeast-of
  :arity 2
  :domain Geographical-Region
  :range Geographical-Region
  :annotations (Asymmetric-Binary-Predicate
                Transitive-Binary-Predicate
                (documentation "(#$northeastOf REGION-1 REGION-2) means that the #$GeographicalRegion REGION-1 is to the north-east of the #$GeographicalRegion REGION-2, when viewed in the terrestrial frame of reference.  Note that REGION-2 is therefore southwest of REGION-1; thus, no distinct predicate is needed to represent `southwest of'.  Example: (#$northeastOf #$Philippines #$Taiwan-RepublicOfChina).")))

(defrelation north-of
  :arity 2
  :domain Geographical-Region
  :range Geographical-Region
  :annotations (Asymmetric-Binary-Predicate
                Transitive-Binary-Predicate
                (documentation "(#$northOf REGION-1 REGION-2) means that the #$GeographicalRegion REGION-1 is to the north of the #$GeographicalRegion REGION-2, when viewed in the terrestrial frame of reference.  Note that REGION-2 is therefore south of REGION-1; thus, no distinct predicate is needed to represent `south of'.  Example: (#$northOf #$CityOfPhiladelphiaPA #$CityOfWashingtonDC).")))

(defrelation northwest-of
  :arity 2
  :domain Geographical-Region
  :range Geographical-Region
  :annotations (Asymmetric-Binary-Predicate
                Transitive-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$northwestOf REGION-1 REGION-2) means that the #$GeographicalRegion REGION-1 is to the northwest of the #$GeographicalRegion REGION-2, when viewed in the terrestrial frame of reference.  Note that REGION-2 is therefore southeast of REGION-1; thus, no distinct predicate is needed to represent `southeast of'.  Example: (#$northwestOf #$UnitedKingdomOfGreatBritainAndNorthernIreland #$France).")))

(defproperty not :arity 1 :domain Cyc-Formula :annotations
 (Relationship Logical-Connective
  (documentation "The predicate #$not is the negation operator in Cyc.  #$not takes a single element of #$CycFormula as its argument.  (#$not FORM) is true if and only if the formula FORM is false in Cyc.")))

(defrelation notices
  :arity 2
  :is-primitive beliefs
  :domain Intelligent-Agent
  :range Cyc-Formula
  :annotations (Propositional-Attitude-Slot
                (documentation "(#$notices AGT PROP) means that
AGT believes the proposition PROP because AGT has seen, heard,
smelled, etc. PROP via some element of #$Perceiving.  Although
(#$notices AGT PROP) implies (#$beliefs AGT PROP) {via the assertion
(#$genlPreds #$notices #$beliefs)}, exceptions occur if AGT believes
they have been hallucinating or drugged, for example.  The predicate
#$beliefs, unlike #$notices, can include propositions gathered through
inferring, dreaming, intuiting.  The temporal extent of (#$notices AGT
PROP) is at least a 'short time' following the perceiving of PROP.
The extent of this time is a function of the type of fact perceived
noticed, when forgetting or other overriding information comes into
play.")))

(defrelation nth
  :arity 3
  :domains (Series Positive-Integer)
  :range Cyc_Thing
  :annotations (Reifiable-Function
                (documentation "(#$Nth SER N) denotes the Nth member of the series SER, provided that N is an integer greater than or equal to 1 and less than or equal to the #$seriesLength of SER.")))

(defrelation nucleus-fn
  :arity 2
  :domain (:and Element-Stuff-Type-By-Number-Of-Protons
                (:filled-by superrelations Element-Stuff))
  :range (:and Existing-Object-Type (:filled-by superrelations Atomic-Nucleus))
  :annotations (Collection-Denoting-Function
                (documentation "#$NucleusFn is a Cyc function, specifically a #$CollectionDenotingFunction.  #$NucleusFn takes an instance of #$ElementStuffTypeByNumberOfProtons (q.v.) as its single argument and returns a collection of all the atomic nucleii belonging to element-stuff of that type.  Thus, (#$NucleusFn E) denotes a subset of #$AtomicNucleus whose elements all have the same number of protons. For example, (#$NucleusFn #$Carbon) is the collection of #$Carbon nuclei, each of which has six protons.")))

(defrelation numerically-equal
  :arity 2
  :domain Scalar-Interval
  :range Scalar-Interval
  :annotations (Numeric-Comparison
                Evaluatable-Function
                Symmetric-Binary-Predicate
                Reflexive-Binary-Predicate
                Transitive-Binary-Predicate
                (documentation "The predicate #$numericallyEqual is Cyc's representation of the equals ( = ) of arithmetic, adapted to use with Cyc's scalars, which include quantitative intervals as well as point values.  For any two instances of #$ScalarInterval, (#$numericallyEqual SI-1 SI-2) means that the minimum of SI-1 is equal to the mininum of SI-2 and that the maximum of SI-1 is equal to the maximum of SI-2.  See also #$ScalarInterval.")))

(defrelation num-inhabitants
  :arity 2
  :domain (:and Agent Geographical-Region)
  :range Cyc_Integer
  :annotations (Intangible-Object-Predicate
                Interval-Based-Quantity-Slot
                (documentation "The predicate #$numInhabitants is used to indicate the number of people living in a region.  (#$numInhabitants REGION NUMBER) means that the #$GeographicalAgent REGION has this #$Integer NUMBER of inhabitants.  Note that, for any particular country, NUMBER is not necessarily the same as the number of its citizens, since citizens may be living abroad, and aliens may be residing in the country.  Examples: (#$numInhabitants #$CityOfRomeItaly 2800000); (#$numInhabitants #$CityOfTokyoJapan 8300000).")))

(defrelation object-acted-on
  :arity 2
  :is-primitive pre-actors
  :domain Event
  :range Something-Existing
  :annotations (Asymmetric-Binary-Predicate
                Actor-Slot
                Irreflexive-Binary-Predicate
                (documentation "The predicate #$objectActedOn is used to relate an event to an entity (or entities) significantly affected in that event.  That entity must exist before the event, but may be either destroyed in the event (see #$inputsDestroyed), or merely affected by it (e.g., see #$damages, #$objectOfStateChange). (#$objectActedOn EVENT OBJECT) means that OBJECT is altered or affected in EVENT, and the change that OBJECT undergoes is central or focal to understanding EVENT.  Thus, scissors are NOT an #$objectActedOn in a #$HairCuttingEvent.  The focal change in a haircut is hair getting shorter; thus, hair is a legitimate #$objectActedOn in a #$HairCuttingEvent.  The almost microscopic dulling that scissors undergo in a single haircut is a comparatively insignificant change with respect to a single haircut, considered as a #$HairCuttingEvent.  

Note: long-term effects of usage on devices should be axiomatized in connection with #$UsingAFn constants.")))

(defrelation object-controlled
  :arity 2
  :is-primitive object-acted-on
  :domain Controlling-Something
  :range Partially-Tangible
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                (documentation "This predicate is used to indicate that a particular object is being controlled in a particular event.  (#$objectControlled EVENT OBJ) means that the object OBJ is being controlled in the #$Event EVENT.
Note: #$objectControlled does not assume or require physical contact between controller and object controlled.")))

(defrelation object-emitted
  :arity 2
  :is-primitive object-moving
  :domain Emitting-An-Object
  :range Partially-Tangible
  :annotations (Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "This predicate is used in connection with particular instances of #$EmittingAnObject, to identify the object which `comes out' during the event.  (#$objectEmitted EMIT OBJ) means that OBJ is emitted from the #$emitter during the emission event EMIT.  The #$objectEmitted is also an #$objectMoving in EMIT.  For example, in a particular human #$BirthEvent, some particular #$HumanInfant is an #$objectEmitted.")))

(defrelation object-found-in-location
  :arity 2
  :is-primitive (:and cotemporal in-region)
  :domain Partially-Tangible
  :range Spatial-Thing
  :annotations (Cotemporal-Objects-Slot
                Transitive-Binary-Predicate
                Reflexive-Binary-Predicate
                (documentation "(#$objectFoundInLocation OBJ LOC) means that OBJ has the location LOC. OBJ is not a part of LOC.  Examples: the #$ArcDeTriomphe is located in the #$CityOfParisFrance; the #$AlaskanPipeline is found in #$Alaska-State; the #$TownOfGettysburgPA is located in the Eastern region of Pennsylvania (note that the town's territory is part of Pennsylvania, but the town as a social organization is distinct).  See also the #$comment on #$inRegion.  Cf., for cases where OBJ is a spatial part of LOC, #$physicalDecompositions, #$geographicalSubRegions.")))

(defrelation object-moving
  :arity 2
  :is-primitive (:and temporally-intersects transferred-thing)
  :domain Movement-Event
  :range Partially-Tangible
  :annotations (Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "The predicate #$objectMoving is used to refer to an object which is moving in a particular #$MovementEvent.  (#$objectMoving MOVE OBJECT) means that OBJECT is in motion at some point during the #$MovementEvent MOVE and this movement is focal in MOVE.  In some cases, such as an instance of #$LocomotionEvent, OBJECT causes MOVE directly.  OBJECT's motion in MOVE may be translational, rotational, or some combination of these.  OBJECT may be a solid -- such as an animal, an automobile, or a tennis ball -- or a fluid, such as lava flowing or a warm air mass rising.")))

(defrelation object-of-possession-transfer
  :arity 2
  :is-primitive transferred-thing
  :domain Change-In-User-Rights
  :range Something-Existing
  :annotations (Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "The predicate #$objectOfPossessionTransfer identifies the object which `changes hands' in a particular event wherein some user's rights to it are changed.  (#$objectOfPossessionTransfer EVENT OBJECT) means that in EVENT, all or some rights to use OBJECT are transferred from one agent (the #$fromPossessor) to another (the #$toPossessor).  EVENT is an element of #$ChangeInUserRights (q.v.), for example, a buying, renting, lending, repossessing, etc.")))

(defrelation object-of-state-change
  :arity 2
  :is-primitive (:and post-actors object-acted-on)
  :domain Intrinsic-State-Change-Event
  :range Partially-Tangible
  :annotations (Anti-Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "The predicate #$objectOfStateChange is used to identify the object of an instance of #$IntrinsicStateChangeEvent.  (#$objectOfStateChange EVENT OBJECT) means that OBJECT is an #$Entity that undergoes some kind of intrinsic change of state in EVENT.  OBJECT exists before EVENT, is directly involved in EVENT, and persists after EVENT.  (Accordingly, this predicate inherits the #$genlPreds #$preActors and #$postActors through #$objectActedOn.)  The change which OBJECT undergoes is internal or intrinsic; this predicate is not used for extrinsic changes, e.g., in location, orientation, ownership, status, etc.  



Note: If OBJECT were destroyed by EVENT and went out of existence in the course of EVENT, then the right predicate to use would be #$inputsDestroyed, rather than #$objectOfStateChange.")))

(defrelation object-paid-for
  :arity 2
  :is-primitive object-of-possession-transfer
  :domain Monetary-Exchange-Of-User-Rights
  :range Something-Existing
  :annotations (Actor-Slot
                (documentation "(#$objectPaidFor EVENT OBJECT) means that in the #$MonetaryExchangeOfUserRights EVENT, the right to possess OBJECT is transferred from one #$Agent to another.  OBJ is not the #$objectTendered but the goods that are bought or rented.")))

(defrelation object-removed
  :arity 2
  :is-primitive (:and post-actors object-acted-on object-moving)
  :domain Removing-Something
  :range Partially-Tangible
  :annotations (Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "(#$objectRemoved REMOVING OBJ) means OBJ is removed from its previous location in the removing event REMOVING.  The force that does the REMOVING comes from some other object than OBJ.")))

(defrelation object-selected
  :arity 2
  :is-primitive actors
  :domain (:and Human-Activity Purposeful-Action)
  :range Individual
  :annotations (Functional-Slot
                Actor-Slot
                (documentation "(#$objectSelected SEL OBJ) means that OBJ is the object that is chosen in the event SEL, an instance of #$SelectingSomething.  If what is selected in SEL is a collection, rather than an individual object, then use the predicate #$activityObjectType to represent the object of SEL.")))

(defrelation objects-in-contact
  :arity 3
  :domains (Physical-Contact-Situation Partially-Tangible)
  :range Partially-Tangible
  :annotations (Cyc_Role
                Ternary-Predicate
                (documentation "The predicate #$objectsInContact indicates that two objects physically touch in a particular #$PhysicalContactSituation.  (#$objectsInContact SIT OBJ-1 OBJ-2) means that OBJ-1 and OBJ-2 are in contact in the #$PhysicalContactSituation SIT.  For example, a #$ClothingItem and its #$wearer are #$objectsInContact during the wearing.  A father and son in a #$CarryingPiggyback event are #$objectsInContact.  (#$objectsInContact SIT OBJ-1 OBJ-2) entails (#$holdsIn SIT (#$touches OBJ-1 OBJ-2)); #$touches covers both direct touching and touching indirectly (i.e., through a thin layer, e.g., through clothing).")))

(defrelation object-taken-care-of
  :arity 2
  :is-primitive (:and post-actors object-acted-on)
  :domain (:and Human-Activity Action-On-Object Purposeful-Action)
  :range Something-Existing
  :annotations (Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "(#$objectTakenCareOf EV OBJ) means that OBJ is acted on in EV by some #$Agent in order to maintain, preserve, or promote the health
or good condition of OBJ.")))

(defrelation object-tendered
  :arity 2
  :is-primitive object-of-possession-transfer
  :domain Money-Transfer
  :range Tender-Object
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "This predicate indicates the financial instrument which is used in a particular transfer of money.  (#$objectTendered TRANS OBJECT) means that the #$TenderObject OBJECT is used to transfer funds in the #$MoneyTransfer event TRANS.  See also #$TenderObject.
Note: OBJECT is distinct from the quantity of #$Money transferred (see #$moneyTransferred) although of course OBJECT has some value --- is `worth' a certain amount, generally calculated from the numbers printed or stamped or engraved on the #$TenderObject OBJECT --- which in turn is an element of #$Money.")))

(defrelation object-tested
  :arity 2
  :is-primitive object-acted-on
  :domain (:and Thinking Purposeful-Action)
  :range Partially-Tangible
  :annotations (Asymmetric-Binary-Predicate
                (documentation "(#$objectTested EVAL OBJ) mean that OBJ is the specific object or portion being tested in EVAL.  For example, if someone has a blood test, then the object tested is the portion of blood used to run the test fulfulls the role of #$objectTested, rather than the person or the collection of that person's blood.")))

(defrelation obscures-from
  :arity 3
  :domains (Partially-Tangible Partially-Tangible)
  :range Agent
  :annotations (Ternary-Predicate
                (documentation "(obscuresFrom OBJ1 OBJ2 OBJ3) means that OBJ1 visually blocks OBJ2 from OBJ3's view.")))

(defrelation occurrences-per-period
  :arity 3
  :domains (Temporal-Object-Type Temporal-Object-Type)
  :range Cyc_Integer
  :annotations (Ternary-Predicate
                (documentation "(#$occurrencesPerPeriod ?X ?Y ?N) indicates that ?N instances of ?X occur during each instance of ?Y.  For example, to indicate that there are seven calendar days in each calendar week, we would write the axiom (#$occurrencesPerPeriod #$CalendarDay #$CalendarWeek 7).")))

(defrelation officiator
  :arity 2
  :is-primitive social-participants
  :domain Social-Occurrence
  :range Agent
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "The predicate #$officiator points to the agent who performs official functions at an event. For example, it is used to indicate the person who plays the role of a priest or justice of the peace at a wedding; also, a master of ceremonies, a judge, a referee.  An #$officiator is one of the performers at the social event where s/he officiates, usually not the only one.")))

(defrelation offspring-actors
  :arity 2
  :is-primitive outputs-created
  :domain Biological-Reproduction-Event
  :range Biological-Living-Object
  :annotations (Actor-Slot
                (documentation "(#$offspringActors EVENT ORGANISM) means that ORGANISM is an offspring created in the #$BiologicalReproductionEvent EVENT .")))

(defrelation ohm
  :annotations (Standard-Unit-Of-Measure
                Mks-Unit-Of-Measure
                (documentation "The standard unit of electrical resistance.  The resistance of a circuit in which a 1-#$Volt #$ElectricalPotentialDifference produces a 1-#$Coulomb #$ElectricalCurrent.")))

(defrelation oil-solubility
  :arity 2
  :domain Partially-Tangible
  :range Solubility
  :annotations (Physical-Attribute-Description-Slot
                Tangible-Object-Predicate
                Interval-Based-Quantity-Slot
                (documentation "(#$oilSolubility OBJ DEGREE) means that the particular tangible OBJ has this DEGREE of #$Solubility in #$Oil.")))

(defrelation old-constant-name
  :arity 2
  :domain Cyc_Thing
  :range Cyc-System-String
  :annotations (Binary-Predicate
                (documentation "If this constant has been renamed after Oct 95, and if the system variable cyc::*note-old-constant-name* is set to t on the machine on which the name change occurred, then this slot automatically records the most recent name that this constant had.")))

(defrelation on--physical
  :arity 2
  :is-primitive (:and supported-by above--touching)
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Spatial-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$on-Physical OVER UNDER) means that the object OVER is above, supported by, and touching the object UNDER.  OVER and UNDER may be at rest or in motion, or one may be in motion and the other at rest (relative to it).  Examples: a person on a bicycle; groceries on a checkout conveyor belt; a statue on a pedestal.  Note that only #$touches (and not #$touchesDirectly) is implied.")))

(defrelation on-line
  :arity 2
  :is-primitive spatially-intersects
  :domain Spatial-Thing
  :range Line
  :annotations (Spatial-Predicate
                Binary-Predicate
                (documentation "(#$onLine OBJ LINE) means that OBJ is an object or region with one or more dimensions much smaller than the length of the #$Line LINE, and OBJ #$spatiallyIntersects or touches LINE but does not include all of LINE.  One object can be on several different #$Lines.  See also #$onPath and #$onPath-Generic.")))

(defrelation on-path
  :arity 2
  :is-primitive (:and on-path--generic cotemporal object-found-in-location)
  :domain Partially-Tangible
  :range Path--Simple
  :annotations (Cotemporal-Objects-Slot
                Irreflexive-Binary-Predicate
                Transitive-Binary-Predicate
                (documentation "(#$onPath ARG1 PATH) means that ARG1 is located along (on or adjacent to) the #$Path-Generic PATH.  ARG1 could be a moving object or it could be a stationary point (see the more specific predicate #$pointOnPath)  For example, Saint Louis, Missouri was #$onPath U.S. Route 66, as was Missouri, any car driving along it, and any lamp-post on it.")))

(defrelation on-path--generic
  :arity 2
  :domain Partially-Tangible
  :range Path--Generic
  :annotations (Binary-Predicate
                (documentation "(onPath-Generic LOC PATH) means that LOC, a location, is on the path PATH.  Here at least a part of LOC should be a part of PATH (e.g., as a part of the meaning of the sentence that Austin is on I35, a part of Austin is a part of I35).  Note that #$onPath-Generic is used for #$Path-Generic.  If one wants to be clear that the path PATH is an instance of #$Path-Simple, then #$onPath rather than #$onPath-Generic should be used.")))

(defrelation opinions
  :arity 2
  :is-primitive beliefs
  :domain Intelligent-Agent
  :range Cyc-Formula
  :annotations (Propositional-Attitude-Slot
                (documentation "(#$opinions AGT PROP) means that the #$Agent AGT believes that PROP (represented by a #$CycFormula) may be true, but they aren't sure about it, their mind might be changed, they are usually aware that PROP is just an opinion, etc.  They may or may not have an argument to justify PROP.  
Note: Opinion implies belief.  So if (#$opinions AGT PROP), then (#$beliefs AGT PROP) is true.
Note:  Opinion and knowledge are mutually exclusive: if (#$knows AGT PROP), then it is NOT true that (#$opinions AGT PROP).")))

(defrelation opposite-attribute-value
  :arity 2
  :is-primitive negation-attribute
  :domain Attribute-Value
  :range Attribute-Value
  :annotations (Symmetric-Binary-Predicate
                Anti-Transitive-Binary-Predicate
                (documentation "(#$oppositeAttributeValue ATT1 ATT2) means that ATT2 is the opposite of ATT1.  E.g., #$DeviceOn and #$DeviceOff.")))

(defrelation opposite-direction--interval
  :arity 2
  :is-primitive opposite-attribute-value
  :domain Unit-Vector-Interval
  :range Unit-Vector-Interval
  :annotations (Spatial-Predicate
                Anti-Transitive-Binary-Predicate
                Symmetric-Binary-Predicate
                (documentation "(#$oppositeDirection-Interval COMING GOING) means that the vector which points in the opposite direction to the vector COMING is the vector GOING.  More technically, COMING and GOING are both elements of #$UnitVectorInterval in Cyc's spatial representation, and the midpoint of the direction interval COMING is 180 degrees from the midpoint of the direction interval GOING.  Examples: (#$oppositeDirection-Interval #$North-Generally #$South-Generally), (#$oppositeDirection-Interval #$DorsalDirection #$VentralDirection).  If a precise opposite direction is needed, use #$oppositeDirection-Precise.")))

(defrelation opposite-direction--precise
  :arity 2
  :is-primitive opposite-direction--interval
  :domain Vector--Precise
  :range Vector--Precise
  :annotations (Anti-Transitive-Binary-Predicate Symmetric-Binary-Predicate))

(defrelation or
  :annotations (Variable-Arity-Relation
                Commutative-Relation
                Logical-Connective
                (documentation "The predicate #$or is the disjunction relation in Cyc.  #$or is a variable-arity relation and takes any number of elements of #$CycFormula as its arguments.  (#$or P Q ... Z) is true if at least one of the formulas P, Q, ..., or Z is true in Cyc.")))

(defrelation orientation
  :arity 2
  :domain Partially-Tangible
  :range Orientation-Attribute
  :annotations (Binary-Predicate
                Spatial-Predicate
                (documentation "(#$orientation OBJECT ORTN) means that the tangible OBJECT is oriented in the way described by the #$OrientationAttribute ORTN.  Examples: (#$orientation OBJ #$RightSideUp), (#$orientation OBJ #$VerticalOrientation).  #$orientation is asserted with respect to the current context's #$FrameOfReference.")))

(defrelation origin--round-trip
  :arity 2
  :is-primitive (:and from-location to-location non-deliberate-actors)
  :domain Translation--Round-Trip
  :range Partially-Tangible
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$origin-RoundTrip TRIP PLACE) means that the #$Translation-RoundTrip event TRIP leaves from and returns to the location PLACE.  PLACE is both the #$fromLocation and #$toLocation of the entire TRIP, considered as a whole.  For example, some commuters to Manhattan leave and return each day to #$Connecticut-State, which is their #$origin-RoundTrip.  See also #$destination-RoundTrip.")))

(defrelation orthography
  :arity 2
  :domain Language
  :range Communication-Convention
  :annotations (Binary-Predicate
                (documentation "(#$orthography ?LANG ?WRIT) means that the #$WritingSystem ?WRIT is the usual mode of writing used to encode the #$Language ?LANG; that it is used by most of the people who customarily engage in writing ?LANG.")))

(defrelation ounce
  :annotations (Unit-Of-Measure-No-Prefix
                Unit-Of-Mass
                Fps-Unit-Of-Measure
                (documentation "The measurement function used in Cyc to represent the ounce used for measuring weight within the British (FPS) system.  See also #$FPSUnitOfMeasure, #$UnitOfMeasure.")))

(defrelation outputs
  :arity 2
  :is-primitive (:and actors post-actors)
  :domain Creation-Or-Destruction-Event
  :range Something-Existing
  :annotations (Actor-Slot
                (documentation "The predicate #$outputs is used to relate a particular event to any of the outputs from that event.  (#$outputs EVENT OBJECT) means that OBJECT is an output from the #$CreationOrDestructionEvent EVENT; i.e., OBJECT is either created as a result of EVENT, or it is something left after another thing was destroyed in EVENT.  For example, silicon chips are #$outputsCreated in a chip manufacturing process, while scrap metal is #$outputsRemaining after cars are put through a crusher.
Note that those two types of cases should be distinguished by using (respectively) the specialized predicates #$outputsCreated or #$outputsRemaining whenever they are appropriate, rather than only the more general predicate #$outputs.")))

(defrelation outputs-created
  :arity 2
  :is-primitive (:and starts-during non-deliberate-actors outputs)
  :domain Creation-Event
  :range Something-Existing
  :annotations (Actor-Slot
                (documentation "The predicate #$outputsCreated is used to identify items created by a particular event.  (#$outputsCreated EVENT OBJECT) means that OBJECT doesn't exist before EVENT but comes into existence sometime during EVENT, as a result of EVENT.  #$outputsCreated is a specialization of #$nonDeliberateActors, since it would in general be impossible for OBJECT to act deliberately in its own creation.")))

(defrelation outputs-remaining
  :arity 2
  :is-primitive (:and pre-actors outputs)
  :domain Destruction-Event
  :range Something-Existing
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "The predicate #$outputsRemaining is used to identify leftovers which survive from the #$inputs to a particular event.  (#$outputsRemaining EVENT OBJECT) means that OBJECT persists after EVENT, and that it existed before EVENT as an identifiable part of one of the things destroyed during EVENT (see #$inputsDestroyed).  Examples: (1) when a sheet of plywood is sawn through in a cutting event, the original board is destroyed and the #$outputsRemaining are the two smaller plywood pieces; (2) after a #$FiltrationProcess, the #$suspendedPart and the #$suspendingFluid are the #$outputsRemaining from the original mixture which has been destroyed.")))

(defrelation overlapping-external-concept
  :arity 3
  :domains (Cyc_Thing Indexed-Info-Source)
  :range Character-String
  :annotations (Ternary-Predicate
                (documentation "(#$overlappingExternalConcept ?TERM ?SOURCE ?STRING) means that the Cyc
concept ?TERM overlaps semantically with the concept named by ?STRING in the
external data source ?SOURCE.")))

(defrelation overlaps-start
  :arity 2
  :is-primitive ends-during
  :domain Temporal-Thing
  :range Temporal-Thing
  :annotations (Asymmetric-Binary-Predicate
                Complex-Temporal-Relation
                (documentation "(#$overlapsStart FIRST SECOND) means that FIRST starts before SECOND and ends during SECOND.  That is, the #$startingPoint of FIRST is before the #$startingPoint of SECOND, and the #$endingPoint of FIRST is before the #$endingPoint of SECOND.  So this is actually a STRONGER relation than might be suggested just by its name alone, since the name alone does not suggest that FIRST must end during SECOND.  If all you mean to say, in some situation, is that FIRST starts before SECOND, then do NOT use #$overlapsStart; just use the #$startsAfterStartingOf relation; i.e., say (#$startsAfterStartingOf SECOND FIRST).  Also note that #$overlapsStart is, in a way, a WEAKER relation than might be suggested by its name alone.  Namely, the #$startingPoint of SECOND might not even be a point of FIRST (if FIRST is discontinuous).







Note:  This Cyc temporal relation is equivalent to what James Allen independently dubbed the OVERLAPS relation.")))

(defrelation overrides
  :arity 2
  :domain Assertion
  :range Assertion
  :annotations (Meta-Knowledge-Predicate
                Asymmetric-Binary-Predicate
                Transitive-Binary-Predicate
                (documentation "The predicate #$overrides is used to tell Cyc which rule to prefer when it encounters two conflicting rules while reasoning with default assertions.  (#$overrides FIRST SECOND) means that if the assertions FIRST and SECOND both appear in conflicting arguments for and against some proposition, favor the argument that contains FIRST.")))

(defrelation owns
  :arity 2
  :is-primitive (:and cotemporal has-ownership-in)
  :domain Agent
  :range Something-Existing
  :annotations (Asymmetric-Binary-Predicate
                Cotemporal-Objects-Slot
                (documentation "(#$owns AGENT OBJECT) means that AGENT owns OBJECT -- that is, AGENT enjoys #$FullUseRights (q.v.) over OBJECT.  
Note:  There are commonsense rules relating #$owns to #$controls.  E.g., ownership typically implies control.  But they are just default rules, as there are many exceptions (e.g., when the owner of a building leases it to a company for ten years, the owner gives up almost all `control' over it during that decade).")))

(defrelation owns-share
  :arity 3
  :domains (Agent Something-Existing)
  :range Non-Negative-Number
  :annotations (Ternary-Predicate
                (documentation "The predicate #$ownsShare is used to state how much of some thing is owned by a particular #$Agent.  (#$ownsShare AGENT SOMETHING SHARE) means that the #$Agent AGENT has SHARE #$Percent (q.v.) ownership of the object or company SOMETHING.  Note that SHARE is a percentage and does not refer directly to a number of shares of #$Stock.")))

(defrelation parallel-objects
  :arity 2
  :domain Spatial-Thing
  :range Spatial-Thing
  :annotations (Spatial-Predicate
                Symmetric-Binary-Predicate
                Transitive-Binary-Predicate
                Reflexive-Binary-Predicate
                (documentation "(#$parallelObjects OBJ1 OBJ2) means that both OBJ1 and OBJ2 have a lengthwise axis, and those axes are parallel to each other.")))

(defrelation parallel-vectors
  :arity 2
  :domain Vector-Interval
  :range Vector-Interval
  :annotations (Symmetric-Binary-Predicate
                Reflexive-Binary-Predicate
                Transitive-Binary-Predicate
                (documentation "(#$parallelVectors VECTOR1 VECTOR2) means that VECTOR1 is parallel to VECTOR2.")))

(defrelation parent-actors
  :arity 2
  :is-primitive pre-actors
  :domain Biological-Production-Event
  :range Biological-Living-Object
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$parentActors EV P) means that organism P is one of the parents in the #$BiologicalReproductionEvent EV.")))

(defrelation parent-company
  :arity 2
  :domain Organization
  :range Business
  :annotations (Binary-Predicate
                (documentation "The predicate #$parentCompany relates an organization to the business which is its parent company.  (#$parentCompany ORG1 ORG2) means that ORG1 is a (partly or wholly owned) subsidiary of ORG2.  ORG2 is the parent company that owns and substantially controls ORG1.  E.g., (#$parentCompany TheLAWeekly TheVillageVoice).")))

(defrelation partitioned-into
  :arity 2
  :is-primitive covering
  :domain Set-Or-Collection
  :range Disjoint-Set-Or-Collection
  :annotations (Taxonomic-Slot
                (documentation "(#$partitionedInto SETORCOL PART) means that the mathematical set or collection PART is a partition of the mathematical set or collection SETORCOL -- that is, the elements of PART are themselves mathematical sets or collections, and every element of SETORCOL is an element of exactly one element of PART, and every element of PART is a subset of SETORCOL.  Or to put it another way, PART is a set or collection of disjoint sets or collections whose union is co-extensional with SETORCOL.  Typically, the #$DisjointSetOrCollection that plays the role of PART in an assertion about partitioning will be a set specified by enumerating its elements, using the function #$ThePartition.  (This is a special #$ReifiableFunction whose principal reason-for-being is to facilitate the inference heuristics associated with assertions about partitioning.)")))

(defrelation parts
  :arity 2
  :is-primitive |(meaning-in-system-fn sensus--information-1997 GENERALIZED-POSSESSION)|
  :domain Individual
  :range Individual
  :annotations (Reflexive-Binary-Predicate
                Anti-Symmetric-Binary-Predicate
                Transitive-Binary-Predicate
                Part-Predicate
                (documentation "(#$parts WHOLE PART) means that #$Individual PART is a part of #$Individual WHOLE.  This predicate is very general.  It can be used to refer to concepts including #$physicalParts, #$subEvents, #$timeSlices, and #$groupMembers.")))

(defrelation passengers
  :arity 2
  :is-primitive transportees
  :domain Transportation-Event
  :range Person
  :annotations (Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "(#$passengers MOVE PAS) means that PAS is a human #$transportees in MOVE who is not a #$driverActor for any #$subEvents of Move.  Any PAS is not a #$driverActor for any #$subEvents of MOVE.  PAS is likely to be sitting (see #$SittingPosture) during the MOVE.")))

(defrelation past-tense
  :arity 2
  :domain English-Word
  :range Character-String
  :annotations (Binary-Predicate
                Intangible-Object-Predicate
                (documentation "(#$pastTense WORD STRING) means that STRING is the past tense verb form of WORD. The regular past tense form is formed from the infinitive verb form with an `-ed' suffix.  Verbs in the Cyc lexicon will have a #$pastTense entry only if they are irregular. Regular forms are generated by the morphology component. Regular example: `helped'. Irregular example: `ate'.")))

(defrelation path-between
  :arity 3
  :domains (Path--Simple Cyc_Thing)
  :range Cyc_Thing
  :annotations (Ternary-Predicate
                (documentation "(#$pathBetween PATH X Y) means that the #$Path-Simple PATH goes between points (or places) X and Y, where X and Y do not 'overlap', and no further.  Both X and Y have to be on PATH (see #$pointOnPath).  Note that (#$pathBetween PATH X Y) is more specific than (#$pathConnects PATH X Y) because here the PATH cannot extend beyond X and Y.  Within a particular #$PathSystem, a path's end points in the system are unique, and #$pathBetweenInSystem is restricted to paths and points in the system.  When considered without a context of a path system, a path may have several different places at one end, such as Austin and Texas both being at the same end of some path along Highway I-35.")))

(defrelation path-connects
  :arity 3
  :domains (Path--Simple Spatial-Thing)
  :range Spatial-Thing
  :annotations (Spatial-Predicate
                Ternary-Predicate
                (documentation "(#$pathConnects PATH HERE THERE) means that PATH is an individual element of #$Path-Simple that connects HERE and THERE.  Often PATH is a physical path or connection along which objects or information capable of using that path may travel, back and forth, between HERE and THERE.  Note that (#$pathConnects ?PATH ?A ?B) doesn't mean that PATH cant't extend beyond ?A and ?B (in contrast with #$pathBetween ?A ?B).")))

(defrelation paths-concatenated-fn
  :arity 3
  :domains (Path--Simple Path--Simple)
  :range Path--Simple
  :annotations (Non-Predicate-Function
                (documentation "A function joining two paths end-to-end in series.  For each path PATH1 between X and Y, and each path PATH2 between Y and Z, if every point A on both paths satisfies the conditions (#$pathBetween PATH1 X A) and (#$pathBetween PATH2 A Z), then (#$PathsConcatenatedFn PATH1 PATH2) denotes the path obtained by concatenating PATH1 and PATH2, i.e., the path that is a super path of both PATH1 and PATH2 and is between X and Z.  Note that when you use (#$PathsConcatenatedFn PATH1 PATH2), PATH1 and PATH2 cannot intersect, i.e., no point is on both paths except their end-points.  This function is not defined on the cartesian product #$Path-Simple x #$Path-Simple.  It is rather defined on a proper subset of it.")))

(defrelation path-terminus
  :arity 2
  :domain Path--Simple
  :range Partially-Tangible
  :annotations (Binary-Predicate
                (documentation "#$pathTerminus (PATH END) means that END is a terminating end of a #$Path-Customary PATH, and that there are no further paths of the same type issuing from END.  The terminal end of any #$Path-Customary may be a dead-end, closed off path end, or it may be open, or it may be a terminus of motion; it is not generally a #$JunctionOfPaths with one or more paths of the same basic type issuing beyond it.  Contrast this with the predicate #$deadEndInSystem that indicates a terminus with respect to a specified #$PathSystem only.")))

(defrelation pathway--complete
  :arity 2
  :is-primitive pathway--partial
  :domain Movement--Translation-Event
  :range Path--Generic
  :annotations (Functional-Slot
                Actor-Slot
                (documentation "The predicate #$pathway-Complete is used to indicate the whole route travelled by a moving object in a particular event.  (#$pathway-Complete MOVE PATH) means that PATH is the entire trajectory along which an #$objectMoving travels in the #$Movement-TranslationEvent MOVE.  There is exactly one #$pathway-Complete if (and only if) MOVE is an element of #$Translation-SinglePath.  If MOVE is an element of #$Translation-MultiPath, then there are at least two #$pathway-Completes; i.e., at least two distinct values of PATH such that (#$pathway-Complete MOVE PATH) is true.  PATH may be a marked or unmarked #$Path-Generic (q.v.).  By definition, the #$pathway-Complete of a #$Movement-TranslationEvent connects the starting and stopping points (#$fromLocation, #$toLocation) of the whole movement event.  (See also #$pathConnects.)  Use #$pathwayPassesThrough to state that an object passes through a particular location on the #$Path-Generic. 



Note:  Compare #$pathway-Complete with #$pathway-Partial; the former refers to the entire route of a particular #$Translation-Complete.  A sub-region of a #$pathway-Complete is NOT itself considered a #$pathway-Complete of the same movement event; i.e., if (#$pathway-Complete MOVE PATH) is true, and we cut PATH up into ten pieces PATH1, ..., PATH10, then it will generally not be true that (#$pathway-Complete MOVE PATH8),  but it will be true that (#$pathway-Partial MOVE PATH8).")))

(defrelation pathway--partial
  :arity 2
  :is-primitive (:and temporally-intersects event-occurs-at)
  :domain Movement--Translation-Event
  :range Path--Generic
  :annotations (Actor-Slot
                (documentation "(pathway-Partial EVENT PATH) means that EVENT is a movement along a trajectory (see #$pathway-Complete) which has a sub-path in common with a sub-path of PATH.  For example, if a certain trip to Dallas from Austin is via highway I-35, that does not mean either that the whole journey is along I-35 (it also may be along driveways and side streets), or that it is along all of I-35 (which would take you from the Mexican border all the way to the Canadian border).  A part of the journey is along a part of I-35.  This is in contrast to #$pathway-Complete, which relates a movement to its entire path.")))

(defrelation pathway-passes-through
  :arity 2
  :is-primitive non-deliberate-actors
  :domain Translation--Single-Path
  :range Partially-Tangible
  :annotations (Actor-Slot
                (documentation "(#$pathwayPassesThrough MOVE LOC) means that the #$pathway-Complete of MOVE, which is an instance of #$Translation-SinglePath, passes through LOC, which is an instance of #$PartiallyTangible, and thus can be a location, a river or another path, etc.  More formally, any #$objectMoving which undergoes motion from the #$fromLocation to the #$toLocation passes through LOC.  Here `passes through LOC' means that OBJ both arrives and leaves LOC.  Thus, LOC can not be a super region of any #$fromLocation nor any #$toLocations of MOVE. Otherwise it would be possible to state (#$pathwayPassesThrough TripToTheStore01 TheUniverse).  On the other hand, LOC can be a sub region of some #$toLocation or some #$fromLocation.")))

(defrelation perceives
  :arity 2
  :domain Perceptual-Agent
  :range (:and Temporal-Thing Spatial-Thing)
  :annotations (Perceiving-Slot
                (documentation "(#$perceives AGENT OBJ) means that AGENT has come to know of OBJ via the action of at least one of its senses (e.g. sight, hearing, smell, etc).  Precisely what tangible aspects of OBJ have been apprehended depend on the sensory modality used (see predicates which have #$perceives as a #$genlPreds).  For example, if (#$sees AGENT OBJ), then AGENT knows of some visual aspects of OBJ.  Whereas if (#$smells AGENT OBJ), then AGENT knows of some olfactory aspects of OBJ.  Only tangible things, #$PhysicalEvents or #$PartiallyTangibles, can be perceived")))

(defrelation percent
  :annotations (Unit-Of-Measure-No-Prefix
                Dimensionless-Unit-Of-Measure
                Evaluatable-Function
                (documentation "#$Percent is a function whose results are percentages.  E.g., (#$Percent 1) represents 1% in Cyc (and is equal to .01); (#$Percent 110) is the same as 1.1; (#$Percent 0.1) is the same as 0.1%, which is the same as .001.")))

(defrelation perfect
  :arity 2
  :domain English-Word
  :range Character-String
  :annotations (Binary-Predicate
                Intangible-Object-Predicate
                (documentation "(#$perfect WORD STRING) means that STRING is the perfect verb form of WORD. This form is also known as the past participle. The regular perfect verb form is often the same as the past tense verb form. Verbs in the Cyc lexicon will have a #$perfect entry only if they are irregular. Regular forms are generated by the morphology component. Regular example: `helped'. Irregular example: `eaten'.")))

(defrelation performance-level
  :arity 5
  :domains (Something-Existing
            Event
            Actor-Slot
            (:and Script-Performance-Attribute-Type
             (:filled-by superrelations Script-Performance-Attribute)))
  :range Generic-Attribute
  :annotations (Functional-Predicate
                Quintary-Predicate
                (documentation "This predicate relates performers to particular individual actions.  (#$performanceLevel OBJ EVT ROLE PERF-ATT LEVEL) means that the individual OBJ plays the role ROLE in the action EVT, and does so with the performance attribute PERF-ATT to the degree LEVEL.  Such an assertion expresses actual performance in a particular action; for example, (#$performanceLevel #$Joe DiggingHole54001 #$performedBy #$Strength #$Low) means Joe exerted a low level of strength while digging that particular hole.  This does not imply much about Joe's potential to exert strength, about strength required in general for hole-digging, etc., it just talks about that one single event.  To talk about typical or expected performance, use #$skillLevel.")))

(defrelation performed-by
  :arity 2
  :is-primitive (:and deliberate-actors done-by)
  :domain Action
  :range Agent
  :annotations (Actor-Slot
                (documentation "The predicate #$performedBy relates an event to an agent who performs it deliberately, which in Cyc means, intentionally and volitionally.  (#$performedBy ACT DOER) means that the agent DOER deliberately does the action ACT.  DOER must be an #$Agent.  For example, (#$performedBy #$AssassinationOfPresidentLincoln #$JohnWilkesBooth).  If ACT has multiple performers, ACT will be #$performedBy each of them.  See also #$deliberateActors, #$doneBy.")))

(defrelation performed-by-part
  :arity 2
  :is-primitive performed-by
  :domain Action
  :range Organization
  :annotations (Actor-Slot
                (documentation "(#$performedByPart ACT ORG) means that the #$Organization ORG is considered to be the performer of the #$Action ACT, though in fact only some subordinate part of ORG (i.e., a member or a sub-organization), rather than all of the organization, is directly involved in ACT.  For example, (#$performedByPart OperationDesertStorm USArmy) since only certain divisions of the US Army participated in Operation Desert Storm.")))

(defrelation perpendicular-objects
  :arity 2
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Spatial-Predicate
                Symmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$perpendicularObjects OBJ1 OBJ2) means that the longest axis of OBJ1 is perpendicular to the longest axis of OBJ2.")))

(defrelation perpendicular-vectors
  :arity 2
  :domain Vector-Interval
  :range Vector-Interval
  :annotations (Symmetric-Binary-Predicate
                (documentation "(#$perpendicularVectors VECTOR1 VECTOR2) means that VECTOR1 is perpendicular to VECTOR2.  E.g., (#$perpendicularVectors #$SouthEast-Directly #$SouthWest-Directly),  (#$perpendicularVectors #$East-Directly #$North-Directly).")))

(defrelation perpetrator
  :arity 2
  :is-primitive performed-by
  :domain Action
  :range Social-Being
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "The #$Agent(s) that performed this possibly criminal act.")))

(defrelation phone-number-text
  :arity 2
  :domain Contact-Location
  :range Phone-Number
  :annotations (Binary-Predicate
                (documentation "The predicate #$phoneNumberText is used to relate a telephone number to a contact location.  (#$phoneNumberText LOC NUM) means NUM is a string denoting (one of) the phone number(s) of the #$ContactLocation LOC.")))

(defrelation physical-decompositions
  :arity 2
  :is-primitive (:and cotemporal spatially-intersects parts)
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Cotemporal-Objects-Slot
                Reflexive-Binary-Predicate
                Anti-Symmetric-Binary-Predicate
                Transitive-Binary-Predicate
                Physical-Part-Predicate
                (documentation "(#$physicalDecompositions WHOLE PART) -- PART is any spatial part or decomposition of WHOLE.  PART may be discontinuous, diffused throughout the object, discrete and identifiable, etc.")))

(defrelation physical-extent
  :arity 2
  :is-primitive parts
  :domain Composite-Tangible-And-Intangible-Object
  :range Partially-Tangible
  :annotations (Anti-Symmetric-Binary-Predicate
                Transitive-Binary-Predicate
                Functional-Slot
                (documentation "(#$physicalExtent WHOLE PART) means that PART is the physical part of the #$CompositeTangibleAndIntangibleObject WHOLE.")))

(defrelation physical-parts
  :arity 2
  :is-primitive (:and cotemporal physical-decompositions)
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Physical-Feature-Describing-Predicate
                Cotemporal-Objects-Slot
                Anti-Symmetric-Binary-Predicate
                Reflexive-Binary-Predicate
                Transitive-Binary-Predicate
                Physical-Part-Predicate
                (documentation "(#$physicalParts WHOLE PART) -- WHOLE is a physical object and PART is one of its distinct, non-diffuse, identifiable parts, such as the relationship between a car and its wheels or bumpers.  The #$physicalParts of an object include only those spatial decompositions which are distinct, identifiable parts.")))

(defrelation physical-portions
  :arity 2
  :is-primitive (:and cotemporal physical-decompositions)
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Cotemporal-Objects-Slot
                Physical-Part-Predicate
                (documentation "(#$physicalPortions ?WHOLE ?PART) means ?PART is a representative spatial chunk of ?WHOLE.  Every intrinsic property which is true of ?WHOLE should be true of ?PART.  Spatial parts of ?WHOLE which are not representative of the whole would be #$physicalParts or #$physicalDecompositions , not #$physicalPortions.  For example, the SpaghettiSauce001 which is part of SpaghettiDinner001 is a #$physicalParts of the dinner.  A #$physicalPortions of the dinner would include some sauce, some noodles, some parmesan cheese, etc. - parts of all the #$constituents.   This is the spatial analog of #$timeSlices (not #$subEvents).")))

(defrelation physical-quarters
  :arity 2
  :domain Organization
  :range Construction-Artifact
  :annotations (Sub-Process-Slot
                (documentation "The predicate #$physicalQuarters is used to relate an organization to the building(s) it occupies.  (#$physicalQuarters ORG BLDG) means that the #$Organization ORG is located in the #$ConstructionArtifact BLDG, which may consist of one or more buildings, rooms, offices, etc.")))

(defrelation physical-structural-attributes
  :arity 2
  :is-primitive has-attributes
  :domain Partially-Tangible
  :range Physical-Structural-Attribute
  :annotations (Tangible-Substance-Predicate
                Binary-Predicate
                (documentation "(#$physicalStructuralAttributes OBJ ATT) means that the physical structure of the tangible object OBJ is (at least partially) determined or described by its attribute ATT.  See also #$PhysicalStructuralAttribute.")))

(defrelation physical-structural-integrity
  :arity 2
  :domain Partially-Tangible
  :range Generic-Attribute
  :annotations (Tangible-Substance-Predicate
                Binary-Predicate
                (documentation "(#$physicalStructuralIntegrity SUBST DEGREE) means that the tangible object SUBST has DEGREE ability to maintain its physical structure intact in the face of various forces.  DEGREE is a #$GenericAttribute.  The #$physicalStructuralIntegrity of an object may be inferred from some of its other physical attributes; e.g., something with the #$physicalStructuralAttributes #$Granular has a #$Low degree of #$physicalStructuralIntegrity; things whose #$stateOfMatter is #$LiquidStateOfMatter have #$VeryLow #$physicalStructuralIntegrity.")))

(defrelation pipe-ends-at-cavity
  :arity 2
  :is-primitive (:and path-terminus connected-to--rigidly)
  :domain Pipe--Generic-Conduit
  :range Partially-Tangible
  :annotations (Asymmetric-Binary-Predicate
                Spatial-Predicate
                Connection-Predicate
                (documentation "(#$pipeEndsAtCavity PIPE CAV) means that PIPE is a #$Pipe-GenericConduit that joins the larger-diameter #$Cavity CAV at a #$PipeEndToCavityJunction, allowing flow or access between them.  The flange where a water pipe enters a water tank is one example, as is the junction of the #$Esophagus and the #$Stomach in animals.  See also the collection #$PipeEndToCavityJunction.")))

(defrelation pipes-directly-connected
  :arity 2
  :is-primitive connected-to
  :domain Pipe--Generic-Conduit
  :range Pipe--Generic-Conduit
  :annotations (Symmetric-Binary-Predicate
                Connection-Predicate
                (documentation "(pipesDirectlyConnected PIPE1 PIPE2) means that there is a #$JunctionOfPipes connecting two #$Pipe-GenericConduits, PIPE1 to PIPE2, (or else they are #$endToEndConnected) allowing flow of #$FluidTangibleThings between them.")))

(defrelation pit-of-ibt-fn
  :arity 2
  :domain Information-Bearing-Thing
  :range Propositional-Information-Thing
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "The Cyc function #$PITOfIBTFn is an element of #$IndividualDenotingFunction.  Given as its argument a particular instance of #$InformationBearingThing (q.v.), #$PITOfIBTFn returns the information content of that thing.  The object returned is an element of #$PropositionalInformationThing (q.v.).  Thus, (#$PITOfIBTFn IBT) denotes the abstract, propositional chunk of information that is represented in IBT.  For example: if IBT is a particular printed copy of Psalm 23, then (#$PITOfIBTFn MyCopyOfPsalm23) refers to the propositional content of Psalm 23.")))

(defrelation plaintiffs
  :arity 2
  :is-primitive litigants
  :domain Trial
  :range Agent
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(plaintiffs ARG1 ARG2) means that the agent ARG2 is the complaining party (the party bringing an accusation of wrong-doing) in the lawsuit ARG1.")))

(defrelation plural
  :arity 2
  :domain English-Word
  :range Character-String
  :annotations (Binary-Predicate
                Intangible-Object-Predicate
                (documentation "(#$plural WORD STRING) means that STRING is the plural noun form of WORD.  For example, the #$plural form of #$Hit-TheWord is `hits', and the plural form of #$Goose-TheWord is `geese'.")))

(defrelation plus-fn
  :annotations (Function-From-Quantities-To-Quantities
                Commutative-Relation
                Variable-Arity-Relation
                Non-Predicate-Function
                Evaluatable-Function
                (documentation "#$PlusFn is Cyc's addition operator; it is a variable-arity mathematical function.  #$PlusFn takes a variable number of quantities as arguments, and it yields a new quantity which is the result of adding those arguments together.  All of the arguments to #$PlusFn must be elements of #$ScalarInterval, as is its result.  Examples: (#$PlusFn 2 3 4) returns 9; (#$PlusFn (#$Meter 1.5) (#$Meter 0.7)) returns (#$Meter 2.2).  See also #$VariableArityRelation.")))

(defrelation point-closed-sub-systems
  :arity 2
  :is-primitive sub-path-systems
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Anti-Symmetric-Binary-Predicate
                Transitive-Binary-Predicate
                Reflexive-Binary-Predicate
                (documentation "(#$pointClosedSubSystems SYS SUBSYS) means that the path system SUBSYS is a subsystem of the path system SYS (i.e., (#$subPathSystems SYS SUBSYS) holds) and SUBSYS 'preserves' all points in SYS that are on links in SUBSYS, i.e., if LINK is a link in SUBSYS (and hence is a link in SYS) and X is a point in SYS and is on LINK, then X must be a point in SUBSYS.")))

(defrelation point-fn
  :arity 2
  :domain Cyc_Thing
  :range Set-Or-Collection
  :annotations (Non-Predicate-Function
                (documentation "For each #$PathSystem SYS, (#$PointFn SYS) denotes the set of all points in SYS (see #$PathSystem).  Note that the function #$PointFn and the predicate #$pointInSystem are interdefinable.  We normally use #$PointFn, for convenience, when we consider some relations between different path systems even though for a single path system SYS, we can replace each (#$pointInSystem X SYS) by (#$elementOf X (#$PointFn SYS)).")))

(defrelation pointing-toward
  :arity 2
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Spatial-Predicate
                Binary-Predicate
                (documentation "(#$pointingToward OBJ1 OBJ2) means that OBJ1 has a pointing axis and that its axis points toward OBJ2.  A pointing axis is ascribed to objects that have directionality (e.g., a gun, a projectile, an arrow, an extended finger).")))

(defrelation point-in-system
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Asymmetric-Binary-Predicate
                (documentation "(#$pointInSystem POINT SYS) means that POINT is an instance of #$Thing, SYS is an instance of #$PathSystem, and POINT is a 'point' on a path in SYS or is a 'node' in SYS.  Note that for each path system SYS there is at least one POINT such that (#$pointInSystem POINT SYS) holds.  For any path system SYS, the set of all points in SYS has an important subset, the set of all 'nodes' in SYS.  See #$nodeInSystem for the difference between nodes and points that are not nodes in a path system.  Note that in some cases (such as making a 'closed world' or talking about different systems), using (#$PointFn SYS) to denote the set of all points in a path system SYS is more convenient than using the predicate #$pointInSystem.")))

(defrelation point-of-contact
  :arity 3
  :domains (Agent
            (:and Contact-Location-Type
             (:filled-by superrelations Contact-Location)))
  :range Contact-Location
  :annotations (Ternary-Predicate
                (documentation "The predicate #$pointOfContact (#$pointOfContact AGENT LOCTYPE LOC) means the #$Agent AGENT has as its LOCTYPE (a #$ContactLocationType such as #$Workplace, #$HumanResidence, #$BillingLocation, etc.) a particular #$ContactLocation LOC, where that agent can be contacted.  Typically, LOC is a complete address, i.e., it is not a generic location such as Austin, TX.")))

(defrelation point-of-contact-info
  :arity 4
  :domains (Agent
            (:and Contact-Location-Type
             (:filled-by superrelations Contact-Location))
            Binary-Predicate)
  :range Cyc_Thing
  :annotations (Quaternary-Predicate
                (documentation "The predicate #$pointOfContactInfo allows us to characterize a string of information as belonging to a certain kind of contact location for a particular person, without actually reifying those contact locations.  (#$pointOfContactInfo AGENT LOC-TYPE INFO-TYPE STRING) means that AGENT's contact locations of type LOC-TYPE (e.g., #$Workplace) have STRING as their contact address of INFO-TYPE (e.g., #$phoneNumberText, #$faxNumberText, #$addressText).  For example, to say that Keith Goolsbey's home phone number is 512-123-4567, we write: (#$pointOfContactInfo #$Goolsbey #$HumanResidence #$phoneNumberText ``(512) 123-4567'').  Note: the disadvantage of this shorthand method is that all of AGENT's contact locations of the type LOC-TYPE are assumed to have the same STRING of INFO-TYPE.")))

(defrelation points-of-contact
  :arity 2
  :domain Agent
  :range Contact-Location
  :annotations (Binary-Predicate
                (documentation "The predicate #$pointsOfContact indicates the places at which a particular agent can be reached.  (#$pointsOfContact AGENT LOC) means that the #$Agent AGENT can be contacted at the #$ContactLocation LOC.")))

(defrelation porosity-of-object
  :arity 2
  :domain Partially-Tangible
  :range Porosity
  :annotations (Physical-Attribute-Description-Slot
                Tangible-Object-Predicate
                Interval-Based-Quantity-Slot
                (documentation "(#$porosityOfObject OBJ DEGREE) means that the tangible object OBJ has the degree of #$Porosity DEGREE.")))

(defrelation portal-connects-regions
  :arity 3
  :domains (Portal Partially-Tangible)
  :range Partially-Tangible
  :annotations (Ternary-Predicate
                (documentation "(#$portalConnectsRegions PORTAL HERE THERE) means that the regions HERE and THERE each contain PORTAL as a physical part.")))

(defrelation portal-has-covering
  :arity 2
  :is-primitive physical-parts
  :domain Portal
  :range Portal-Covering
  :annotations (Physical-Part-Predicate
                Cotemporal-Objects-Slot
                (documentation "A general predicate for relating instances of portal to their coverings.  Specpreds include #$doorwayHasCovering and #$windowHasCovering.")))

(defrelation pos-forms
  :arity 2
  :domain English-Word
  :range (:and Linguistic-Object-Type (:filled-by superrelations Speech-Part))
  :annotations (Binary-Predicate
                (documentation "The predicate #$posForms is used to indicate the different parts of speech that a particular English word has associated with it.  (#$posForms WORD POS) means that the #$EnglishWord WORD has a form that can serve as the #$SpeechPart POS.  For example, #$Dot-TheWord has forms for both #$SimpleNoun and #$Verb.  Forms of a word used for different parts of speech may or may not differ from each other in sound and/or spelling.  To find out, or to specify, the string that represents a particular POS form of a specific word, use #$partOfSpeech.")))

(defrelation positive-vested-interest
  :arity 2
  :domain Agent
  :range Temporal-Thing
  :annotations (Binary-Predicate
                (documentation "(#$positiveVestedInterest AGT OBJ) means #$Agent AGT has a positive interest in the object OBJ or in the good fortune of OBJ.  Generally, AGT will be helped or pleased by the preservation or enhancement of OBJ.
Note:  the restriction of OBJ to #$TemporalThing means that it would be incorrect to use this predicate to say that Douglas Adams has a #$positiveVestedInterest in the number 42.  Rather, what he has a vested interest in is public popularity and faddism focusing on that number.  A fad is a #$TemporalThing, but the number 42 isn't.")))

(defrelation possesses
  :arity 2
  :domain Agent
  :range Something-Existing
  :annotations (Predicate
                (documentation "(#$possesses AGENT OBJECT) means that OBJECT is in the physical possession of AGENT.  Compare with #$owns.")))

(defrelation post-actors
  :arity 2
  :is-primitive actors
  :domain Event
  :range Something-Existing
  :annotations (Actor-Slot
                (documentation "The predicate #$postActors is used to indicate a participant that continues to exist after a particular event.  (#$postActors EVENT OBJECT) means that OBJECT exists after EVENT ends.  It makes no commitment about OBJECT's condition before or during EVENT.  #$postActors is a very general element of #$ActorSlot; it subsumes #$outputsCreated, #$doneBy, and many others.")))

(defrelation postal-code-of-address
  :arity 2
  :domain Contact-Location
  :range Postal-Code
  :annotations (Functional-Slot
                (documentation "The predicate #$postalCodeOfAddress maps from a particular element of #$ContactLocation to a corresponding element of #$PostalCode.  (#$postalCodeOfAddress LOC PC) means that the location LOC has the #$PostalCode PC.  For example, if LOC had the address: P.O. Box 1677-B, New York, NY, 10014, PC would be the string `10014'.  See also #$ContactLocation.")))

(defrelation post-configuration
  :arity 2
  :domain Event
  :range Static-Situation
  :annotations (Binary-Predicate
                (documentation "(#$postConfiguration EVT CONFIG) means CONFIG is a #$Configuration that begins immediately after the action EVT ends, and is directly (probably causally) related to EVT.  See #$postEvents and #$preConfiguration for related predicates.")))

(defrelation posterior-region-fn
  :arity 2
  :domain Animal-Body-Region
  :range Animal-Body-Region
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "The function (PosteriorRegionFn REGOROBJ), applied to a region or object REGOROBJ, means the region consisting of the back or rear half or section, or posterior main portion, of REGOROBJ.  It applies only when REGOROBJ itself has an intrinsic front/back orientation, or is a (non-backward-facing) part of a larger region or object that has a front/back orientation.")))

(defrelation post-events
  :arity 2
  :domain Event
  :range Event
  :annotations (Asymmetric-Binary-Predicate
                Transitive-Binary-Predicate
                Complex-Temporal-Relation
                Cyc_Role
                (documentation "This predicate relates one event to another that follows it.  (#$postEvents BEFORE AFTER) implies two things: 

(1) BEFORE occurs strictly before AFTER; i.e., AFTER starts after BEFORE has ended; i.e., (#$startsAfterEndingOf AFTER BEFORE); and

(2) BEFORE and AFTER are significantly relevant to each other.  This required `relevance' of the two arguments to each other is difficult to formalize but often intuitively clearcut.  Often, e.g., AFTER is caused by BEFORE.")))

(defrelation posture-of-animal
  :arity 2
  :is-primitive has-attributes
  :domain Animal
  :range Posture
  :annotations (Functional-Slot
                Shape-Describing-Predicate
                (documentation "(#$postureOfAnimal ?AN ?POS) means that the #$Animal ?AN is in the #$Posture ?POS.  #$Postures are types of attributes that describe bodily configurations and/or orientations of #$Animals.  See #$Posture for examples.")))

(defrelation pound--unit-of-mass
  :annotations (Unit-Of-Measure-No-Prefix
                Unit-Of-Mass
                Fps-Unit-Of-Measure
                (documentation "The measurement function used in Cyc to represent the basic unit of mass in the British (FPS) system.  Technically, the FPS pound is exclusively a unit of force, analogous to the #$Newton in the MKS system.  The usage here is occasioned primarily by the fact that interconversions between pounds and kilograms are often used in the terrestrial frame of reference.  In fact, the FPS unit of mass, analogous to the #$Kilogram in the MKS system, is called the 'slug'.  See also #$FPSUnitOfMeasure, #$UnitOfMeasure, #$Pound-UnitOfForce.")))

(defrelation pre-actors
  :arity 2
  :is-primitive (:and starts-after-starting-of actors)
  :domain Event
  :range Something-Existing
  :annotations (Asymmetric-Binary-Predicate
                Actor-Slot
                Irreflexive-Binary-Predicate
                (documentation "The predicate #$preActors is used to indicate a participant that pre-exists a particular event.  (#$preActors EVENT OBJECT) means that OBJECT exists before EVENT begins.  It makes no commitment about OBJECT's condition during or after EVENT.  #$preActors is a very general #$ActorSlot, subsuming #$doneBy, #$objectActedOn, #$objectMoving, and many others.")))

(defrelation pre-configuration
  :arity 2
  :is-primitive starts-after-ending-of
  :domain Event
  :range Static-Situation
  :annotations (Anti-Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$preConfiguration EVT CONFIG) means CONFIG is an element of #$Configuration that holds just prior to the start of EVT, and CONFIG is directly related to EVT.  The required `salience' of the two arguments to each other is difficult to formalize but usually intuitively clearcut.  Commonly, CONFIG and EVT share many of the same objects involved in various roles, and there is often a causal connection as well.   For instance, the configuration CONFIG might be somehow `taken apart' by event EVT, might `trigger' EVT, etc.")))

(defrelation presenter
  :arity 2
  :is-primitive social-participants
  :domain Social-Gathering
  :range Person
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$presenter GATHERING PERSON) means that PERSON speaks to a set of audience members who have a role in GATHERING.")))

(defrelation pretty-name
  :arity 2
  :domain Cyc-Indexed-Term
  :range Cyc-System-String
  :annotations (Binary-Predicate
                (documentation "(#$prettyName TERM STRING) means that STRING is the English word or           expression (sequence of words) commonly used to refer to the #$Cyc           term TERM.  The predicate #$prettyName is used by the code which           generates CycL to English paraphrases, but its applicability is not           restricted to this use.")))

(defrelation primary-function
  :arity 3
  :is-primitive intended-behavior-capable
  :domains (Artifact
            (:and Cyc_Collection (:filled-by superrelations Situation)))
  :range Cyc_Role
  :annotations (Ternary-Predicate
                (documentation "The predicate #$primaryFunction is used to indicate what an artifact was primarily designed to do.  (#$primaryFunction ART SITTYPE ROLE) means that the primary function of the #$Artifact OBJ is to serve as described by ROLE in situations of the type SITTYPE.  Examples: the #$primaryFunction of instances of #$MammographyFacility is to be the #$providerOfService in instances of #$MammographicBreastCancerScreening; the #$primaryFunction of a pump is to be the #$providerOfMotiveForce in instances of #$TransportingGoods in which liquids are transported.
Note: in the #$SimpleDeviceFunctioningMt, it is assumed that every #$PhysicalDevice has only one primary function.")))

(defrelation primitive-attribute-types
  :arity 2
  :domain Composite-Attribute-Type
  :range Primitive-Attribute-Type
  :annotations (Binary-Predicate
                (documentation "The Cyc predicate #$primitiveAttributeTypes is used to relate a type of complex attribute to its basic components.  (#$primitiveAttributeTypes COMP PRIM) means that PRIM is an element of #$PrimitiveAttributeType that makes up the #$CompositeAttributeType, COMP.  PRIM can be thought of as one axis for the composite scale.  For example, hue, intensity, and saturation are each a primitive scale for the composite attribute `color'.  Another case: #$Speed is a primitive component of the composite attribute #$VelocityVector.")))

(defrelation products
  :arity 2
  :is-primitive outputs
  :domain Creation-Or-Destruction-Event
  :range Partially-Tangible
  :annotations (Actor-Slot
                (documentation "(#$products EV OBJ) means that OBJ is one of the intended outputs of event EV.  For unintended outputs, see #$byProducts.  For a particular EV and OBJ, it will not be true that both (#$products EV OBJ) and (#$byProducts EV OBJ).")))

(defrelation program-used
  :arity 2
  :is-primitive (:and unchanged-actors instrument--generic)
  :domain Action
  :range Computer-Program
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$programUsed EV PROG) means that PROG is the computer program used in the action EV.")))

(defrelation propositional-info-about
  :arity 2
  :domain Propositional-Information-Thing
  :range Cyc_Thing
  :annotations (Binary-Predicate
                (documentation "(#$propositionalInfoAbout ?MT ?OBJ) means that the #$PropositionalInformationThing ?MT is 'about' ?OBJ, i.e. it is a #$Microtheory with assertions concerning this object.  For example, a microtheory which is the propositional content of a portrait of #$GeorgeWashington might only have #$GeorgeWashington as the ?OBJ of this predicate.")))

(defrelation propositions-perceived
  :arity 2
  :domain Perceiving
  :range Cyc-Formula
  :annotations (Binary-Predicate
                (documentation "(#$propositionsPerceived PERCEIVING PROP) means that in the #$Perceiving event PERCEIVING, the perceiver mentally grasps the proposition(s) PROP.  E.g., ten people witness a particular car crash, and yet each one gets their own particular set of propositions which they later can relate to the police; there are ten separate #$Perceivings in this case, and each one has its own unique set of #$propositionsPerceived.")))

(defrelation provider-of-motive-force
  :arity 2
  :is-primitive pre-actors
  :domain Movement-Event
  :range Partially-Tangible
  :annotations (Actor-Slot
                (documentation "(#$providerOfMotiveForce ACT OBJ) means that OBJ provides, through its expenditure of energy, a significant fraction of the physical force required to make ACT happen. For example, if ACT is an element of #$PedalingABicycle, OBJ will be the person who is operating the bike.  Another example: in the use of a belt sanding tool, there will be two values for #$providerOfMotiveForce, the electric sander and the person operating the sander.  In that case, although force is transmitted and applied through the sandpaper, the paper doesn't count as a #$providerOfMotiveForce, because it only transmits force and does not itself expend energy.   Note that inferences involving this constant require that every #$providerOfMotiveForce be a whole object, not just a part of an object.  For example: (=> (#$and (#$isa ?LOCO #$LocomotionEvent) (#$providerOfMotiveForce ?LOCO ?OBJ)) (#$objectMoving ?LOCO ?OBJ)) or (=> (#$and (#$isa ?LOC #$LocomotionEvent) (#$providerOfMotiveForce ?LOC ?PROV)) (#$doneBy ?LOC ?PROV)) or (#$domainAssumptions #$ManualHumanActivitiesMt (#$forAll ?U (#$forAll ?PERS (#$implies (#$and (#$isa ?U #$Action) (#$providerOfMotiveForce ?U ?PERS)) (#$isa ?PERS #$Person)))))).")))

(defrelation provider-of-service
  :arity 2
  :is-primitive (:and performed-by pre-actors deliberate-actors)
  :domain Service-Event
  :range Agent
  :annotations (Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "The Cyc predicate #$providerOfService is used to relate a service to the agent that provides it.  (#$providerOfService SEVT AGT) means that the #$ServiceEvent SEVT is performed or provided by the #$Agent AGT.  Typically, AGT acts in order to serve the #$recipientOfService in SEVT.")))

(defrelation pure-fn
  :arity 2
  :domain (:and Chemical-Compound-Type
                (:filled-by superrelations Tangible-Thing))
  :range (:and Pure-Compound-Type (:filled-by superrelations Pure-Compound))
  :annotations (Collection-Denoting-Function
                (documentation "#$PureFn is a Cyc function, specifically a #$CollectionDenotingFunction.  (#$PureFn X) denotes the subset of the #$ChemicalCompoundType X whose instances are chemically pure.  Note that #$PureFn can be applied only to instances of #$ChemicalCompoundType (such as #$Fructose or #$Water), but not to mixtures (such as #$Air).  See also #$PureCompound.")))

(defrelation purpose--rst
  :arity 2
  :domain Linguistic-Object
  :range Linguistic-Object
  :annotations (Asymmetric-Binary-Predicate
                Rst-Relation
                (documentation "The discourse relation that holds between two segments of text when ARG1 specifies something which is initiated with the purpose of achieving ARG2. #$purpose-RST is agnostic as to volition; see also #$volitionalCause-RST.")))

(defrelation purpose-in-event
  :arity 3
  :domains (Agent Purposeful-Action)
  :range Goal
  :annotations (Ternary-Predicate
                Modal-Relationship
                (documentation "(#$purposeInEvent AGT EVT G) means that the agent AGT is taking part in event EVT because (1) AGT wants G to become true, and also (2) AGT expects and believes that EVT occurring will (help) make G true.")))

(defrelation quarter-fn
  :arity 3
  :domains (Positive-Integer Calendar-Year)
  :range Calendar-Quarter
  :annotations (Non-Predicate-Function
                Individual-Denoting-Function
                (documentation "(#$QuarterFn ?N ?YR) denotes the Nth #$CalendarQuarter of the year ?YR. For example, (#$QuarterFn 2 (#$YearFn 1966)) denotes the second quarter of 1966.")))

(defrelation quarters-duration
  :annotations (Unit-Of-Measure
                Unit-Of-Measure-No-Prefix
                Unit-Of-Time
                (documentation "This is a function that takes one or two numbers and returns, as its value, some amount of #$Time.  An expression of the form (#$QuartersDuration ?min ?max) denotes a quantity of #$Time that is at least ?min quarter-years and at most ?max quarter-years.  (#$QuartersDuration ?num) denotes a quantity of #$Time that is exactly ?num quarter-years.")))

(defrelation quotient-fn
  :arity 3
  :domains (Scalar-Interval Scalar-Interval)
  :range Scalar-Interval
  :annotations (Function-From-Quantities-To-Quantities
                (documentation "#$QuotientFn is the division operator, a binary mathematical function.  (#$QuotientFn DIVIDEND DIVISOR) yields a new quantity that is the result of dividing the DIVIDEND by DIVISOR.  For example, (#$QuotientFn 24 6) returns 4.")))

(defrelation quotient-units
  :arity 3
  :domains (Unit-Of-Measure Unit-Of-Measure)
  :range Unit-Of-Measure
  :annotations (Bookkeeping-Predicate
                Ternary-Predicate
                (documentation "The Cyc predicate #$quotientUnits is used to state what measurement units should be used for the quotient of two physical quantities, given the units measuring the dividend and divisor.  (#$quotientUnits UM-1 UM-2 QUOT-UM) means that the value of (#$QuotientFn (UM-1 x) (UM-2 y)) should be given in the units QUOT-UM.  Examples: (#$quotientUnits #$Newton #$SquareMeter #$Pascal-UnitOfPressure); (#$quotientUnits #$Unity #$DaysDuration #$PerDay); (#$quotientUnits (#$Micro #$Gram) (#$Milli #$Liter) #$MicrogramsPerMilliliter).  See also #$UnitOfMeasure, #$QuotientFn.")))

(defrelation radian
  :annotations (Unit-Of-Measure-No-Prefix
                Standard-Unit-Of-Measure
                Unit-Of-Angular-Distance
                (documentation "This is the basic unit of angular measure.  2 radians make a complete circle.")))

(defrelation radians-per-second
  :annotations (Standard-Unit-Of-Measure
                Mks-Unit-Of-Measure
                Unit-Of-Angular-Speed
                Unit-Of-Measure-No-Prefix
                (documentation "The basic measure of #$RateOfRotation.")))

(defrelation radians-per-second-per-second
  :annotations (Standard-Unit-Of-Measure
                Mks-Unit-Of-Measure
                Unit-Of-Angular-Acceleration
                Unit-Of-Measure-No-Prefix
                (documentation "The basic measure of angular acceleration")))

(defrelation radius
  :arity 2
  :domain Partially-Tangible
  :range Distance
  :annotations (Physical-Attribute-Description-Slot
                Interval-Based-Quantity-Slot
                (documentation "The radius of an object with a circular shape.")))

(defrelation raininess-of-region
  :arity 2
  :is-primitive has-attributes
  :domain Outdoor-Location
  :range Raininess
  :annotations (Interval-Based-Quantity-Slot
                (documentation "(#$raininessOfRegion LOC DEGREE) indicates the intensity with which it is raining at the #$OutdoorLocation LOC.  (If it is not raining at LOC, it will be the case that (#$raininessOfRegion LOC (#$NoAmountFn #$Raininess)).)")))

(defrelation rate-of-rotation-of-object
  :arity 2
  :domain Partially-Tangible
  :range Rate-Of-Rotation
  :annotations (Physical-Attribute-Description-Slot
                (documentation "#$rateOfRotationOfObject relates an instance of #$PartiallyTangible to the rate of change of its physical component's angular separation from a reference vector as measured from a point of origin.")))

(defrelation recipient-of-info
  :arity 2
  :is-primitive information-destination
  :domain Information-Transfer-Event
  :range Agent
  :annotations (Actor-Slot
                (documentation "The predicate #$recipientOfInfo is used to indicate who receives information in a particular communication event.  (#$recipientOfInfo TRANSFER RECIP) means that the information transferred in the #$InformationTransferEvent TRANSFER is received by the #$Agent RECIP.  After TRANSFER, RECIP understands or conceives of the information transferred in TRANSFER; Cyc does NOT conclude that s/he #$knows the information or counts it among his/her #$beliefs, because RECIP might not believe it.  In receiving the information transferred, RECIP may be acting intentionally or unintentionally.  See also #$infoTransferred.")))

(defrelation recipient-of-service
  :arity 2
  :is-primitive (:and post-actors pre-actors beneficiary)
  :domain Service-Event
  :range Agent
  :annotations (Actor-Slot
                (documentation "(#$recipientOfService ACT AGNT) means the #$Agent AGNT is the recipient of the #$ServiceEvent ACT.  The service is performed on, for, or to AGNT, and AGNT is correspondingly affected by it.")))

(defrelation reciprocal-transfers
  :arity 2
  :domain Transferring-Possession
  :range Transferring-Possession
  :annotations (Symmetric-Binary-Predicate
                Anti-Transitive-Binary-Predicate
                (documentation "(#$reciprocalTransfers ?T1 ?T2) means that ?T1 and ?T2 are transfers of possession done in exchange for each other.  They are part of some #$ExchangeOfUserRights.")))

(defrelation rectangular-solid-fn
  :arity 4
  :domains (Distance Distance Distance)
  :range Abstract-Shape
  :annotations (Shape-Function
                (documentation "The Cyc function #$RectangularSolidFn is a #$ShapeFunction (q.v.).  (#$RectangularSolidFn LN BR HT) returns an abstract rectangular solid of length LN, breadth BR, and height HT.  For example, the #$shape of a 2-by-4 stud is #$Rectangular3DShape; it #$fitsIn the shape denoted by (#$RectangularSolidFn (#$Inch 2) (#$Inch 4) (#$Foot-UnitOfMeasure 8)).")))

(defrelation reduction-of-path-systems
  :arity 2
  :is-primitive link-closed-sub-systems
  :domain Cyc_Thing
  :range Multi-Graph
  :annotations (Anti-Symmetric-Binary-Predicate
                Transitive-Binary-Predicate
                (documentation "(#$reductionOfPathSystems SYS RED) means that (i) every node in SYS is a node in RED, (ii) every point in RED is a node in RED (and hence a node in SYS), and (iii) (#$linkClosedSubSystems SYS RED) holds. It is easy to see that when (#$reductionOfPathSystems SYS RED) holds, RED must be an instance of #$MultiGraph.  But RED is not only a multi-graph, it is THE multi-graph that underlies the path system SYS, i.e., the only difference between SYS and RED is that SYS is obtainable by adding to RED some points that are on a link in RED between the end-nodes.")))

(defrelation referred-service-provider
  :arity 2
  :is-primitive provider-of-service
  :domain Service-Event
  :range Agent
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "The agent ARG2 who provides the service ARG1 was referred by another agent.")))

(defrelation relation-type-of
  :arity 3
  :domains (Binary-Predicate Cyc_Collection)
  :range Cyc_Collection
  :annotations (Rule-Macro-Predicate
                Ternary-Predicate
                (documentation "(#$relationType SLOT COL1 COL2) means that, for every instance of COL1 (INS1), there is some instance of COL2 (INS2) such that (SLOT INS1 INS2) holds.  #$relationType is thus redundant with a huge set of commonly-occurring rules.  By having this predicate (along with an axiom defining it, and, eventually, coded support for quick inferencing with it), those rules can be stated more tersely and reasoning at the collection level is possible.")))

(defrelation relation-type-count
  :arity 4
  :domains (Binary-Predicate Cyc_Collection Cyc_Collection)
  :range Non-Negative-Integer
  :annotations (Quaternary-Predicate
                (documentation "(#$relationTypeCount SLOT COL1 COL2 NUM) means that, for every instance of COL1 (INS1) there are exactly NUM instances of COL2 (INS2, INS3, ...) such that (SLOT INS1 INS2), (SLOT INS1 INS3), ..., hold.  Thus, (#$relationTypeCount #$anatomicalParts #$Dog #$Leg 4) means simply `dogs have four legs'.")))

(defrelation relation-type-max
  :arity 4
  :domains (Binary-Predicate Cyc_Collection Cyc_Collection)
  :range Positive-Integer
  :annotations (Quaternary-Predicate
                (documentation "(#$relationTypeMax SLOT COL1 COL2 NUM) means that, for every instance of COL1 (INS1) there are at most NUM instances of COL2 (INS2, INS3, ...) such that (SLOT INS1 INS2), (SLOT INS1 INS3), ..., hold.  Thus (#$relationTypeMax #$anatomicalParts #$Mammal #$Leg 4) would mean `every mammal has at most four legs'.")))

(defrelation relation-type-min
  :arity 4
  :domains (Binary-Predicate Cyc_Collection Cyc_Collection)
  :range Non-Negative-Integer
  :annotations (Quaternary-Predicate
                (documentation "(#$relationTypeMin SLOT COL1 COL2 NUM) means that, for every instance of COL1 (INS1) there are at least NUM instances of COL2 (INS2, INS3, ...) such that (SLOT INS1 INS2), (SLOT INS1 INS3), ..., hold.  Thus (#$relationTypeMin #$subEvents #$EatingEvent #$Swallowing 1) would mean `every eating event has at least one swallowing sub-event'.")))

(defrelation relatives
  :arity 2
  :domain Animal
  :range Animal
  :annotations (Reflexive-Binary-Predicate
                Symmetric-Binary-Predicate
                Family-Relation-Slot
                (documentation "(#$relatives ANIM1 ANIM2) means ANIM2 is some biological relative of ANIM1.")))

(defrelation renting-fn
  :arity 2
  :domain (:and Existing-Object-Type
                (:filled-by superrelations Partially-Tangible))
  :range (:and Temporal-Object-Type
               Product-Type
               Script-Type
               (:filled-by superrelations Renting))
  :annotations (Collection-Denoting-Function
                (documentation "#$RentingFn is a Cyc function, and in particular a #$CollectionDenotingFunction.  It returns a subset of actions which are instances of #$Renting.  (#$RentingFn TYPE) denotes the collection of events in which an #$Agent gets the use and/or possession (but not ownership) of an instance of TYPE by paying some #$Money to the owner.  For instance, (#$RentingFn #$Automobile) returns a set of all the events in which an agent rents an automobile.
Note:  That means that the value of (#$RentingFn #$Automobile) is both extensionally and intensionally the same as the collection #$RentingOfAutomobile.")))

(defrelation rents
  :arity 2
  :is-primitive cotemporal
  :domain Agent
  :range Partially-Tangible
  :annotations (Cotemporal-Objects-Slot
                (documentation "The predicate #$rents relates an agent to something that s/he is renting.  (#$rents AGT OBJ) means that the #$Agent AGT is renting the object (possibly a piece of real estate) OBJ from another, unspecified agent.   AGT is the borrower, renter, lessee or tenant.  AGT has temporary use and enjoyment of OBJ, for a charge.  See also #$TemporaryUserRightsAgreement, #$TemporaryChangeOfUserRights, #$Renting.")))

(defrelation represents-agent-in-event
  :arity 3
  :domains (Agent Agent)
  :range Temporal-Thing
  :annotations (Ternary-Predicate
                (documentation "ARG1 represents ARG2 in the event ARG3.  ARG2 often has multiple entries, when ARG1 is appointed to represent the group's interests.")))

(defrelation represents-agent-to-agent
  :arity 3
  :domains (Agent Agent)
  :range Agent
  :annotations (Ternary-Predicate
                (documentation "(#$representsAgentToAgent AGENT1 AGENT2 AGENT3) means that in in dealings with AGENT3,  AGENT1 represents AGENT2.  For example, if Joe Terwilliger is a salesman working for IBM, and is their sales rep to NASA, then we could represent that by asserting to Cyc  (#$representsAgentToAgent JoeTerwilliger IBM #$NASA).")))

(defrelation required-arg-1-pred
  :arity 2
  :domain Cyc_Collection
  :range Predicate
  :annotations (Rule-Macro-Predicate
                Binary-Predicate
                (documentation "(#$requiredArg1Pred COL PRED) means that for every instance INS of COL, there exists some X1..Xn-1 such that (PRED INS X1 .. Xn-1), where the #$arity of PRED is n.")))

(defrelation required-arg-2-pred
  :arity 2
  :domain Cyc_Collection
  :range Predicate
  :annotations (Binary-Predicate
                Rule-Macro-Predicate
                (documentation "(#$requiredArg2Pred COL PRED) means that for every instance INS of COL, there exists some X1..Xn-1 such that (PRED X INS .. Xn-1), where the #$arity of PRED is n. ")))

(defrelation requires-for-role
  :arity 3
  :domains (Situation Cyc_Collection)
  :range Cyc_Role
  :annotations (Ternary-Predicate
                (documentation "(#$requiresForRole ?SIT ?COL ?ROLE) means that success of the #$Situation ?SIT depends upon the existence of an element of the collection ?COL playing the role ?ROLE in ?SIT.")))

(defrelation resembles-in-attribute
  :arity 3
  :domains (Cyc_Thing Cyc_Thing)
  :range Attribute-Type
  :annotations (Ternary-Predicate
                (documentation "(#$resemblesInAttribute THING1 THING2 ATTRIBUTE) means that the two things THING1 and THING2 resemble each other in their values of the #$AttributeType ATTRIBUTE.  Here 'resembles' means has a 'close' or similar value in that attribute -- what this means, and what the standard of closeness or similarity is, depends on the context.  See also #$identicalInAttribute and #$differentInAttribute.")))

(defrelation residence-of-organization
  :arity 2
  :domain Organization
  :range Geographical-Region
  :annotations (Binary-Predicate
                (documentation "The predicate #$residenceOfOrganization indicates the geographical location of a particular organization's main offices.  (#$residenceOfOrganization ORG GEOGREG) means that the #$Organization ORG has its chief office at the location GEOGREG.  GEOGREG is typically a #$City but may be a larger or smaller #$GeographicalRegion.  For example, the #$residenceOfOrganization of the #$UnitedStatesFederalGovernment is the #$CityOfWashingtonDC.")))

(defrelation resides-in-dwelling
  :arity 2
  :is-primitive cotemporal
  :domain (:and Person Animal)
  :range (:and Human-Residence Shelter-Construction)
  :annotations (Cotemporal-Objects-Slot
                (documentation "(#$residesInDwelling X SHELT) means the #$Person or #$Animal X resides or lives in the #$ShelterConstruction SHELT -- meaning the place where it sleeps, spends much of its time, lays its eggs, a place which it cleans and maintains and repairs, a place it defends against intrusion, etc.  A person or animal may reside in more than one dwelling.  For example, a person on a camping trip might #$residesInDwelling some tent, during that trip, and at the same time it would still be true that he or she #$residesInDwelling  their `normal' apartment or house.    See also #$occupantsAre and #$residesInRegion.  A couple other notes:

Note:  #$residesInDwelling is not the same as legal domicile, though often of course they coincide. 

Note:  #$residesInDwelling is not appropriate for one animal living in/on another, as a parasite or symbiote.  A more general predicate, #$objectFoundInLocation, would be the appropriate one to use for the case of a #$Flea living on a #$Dog.")))

(defrelation resides-in-region
  :arity 2
  :is-primitive cotemporal
  :domain Animal
  :range Geographical-Region
  :annotations (Cotemporal-Objects-Slot
                (documentation "(#$residesInRegion X REG) means the individual #$Animal or #$Person X lives or resides primarily in the #$GeographicalRegion REG.  Notice that everyone (every first argument X) is likely to have many different regions REG that make the assertion (#$residesInRegion X REG) true.  E.g., Karen resides in Austin, in Texas, in the United States, in North America, etc.  See also #$residesInDwelling.")))

(defrelation resistance-of-object
  :arity 2
  :domain Partially-Tangible
  :range Electrical-Resistance
  :annotations (Interval-Based-Quantity-Slot
                Tangible-Object-Predicate
                (documentation "(#$resistanceOfObject OBJ DEGREE) means that the tangible object OBJ has this DEGREE of #$ElectricalResistance.  A lower value of DEGREE indicates OBJ is a better conductor, i.e., one that conducts with less energy lost to heat.")))

(defrelation resistance-to-bio-deterioration
  :arity 2
  :domain Partially-Tangible
  :range Bio-Deterioration-Resistance
  :annotations (Physical-Attribute-Description-Slot
                Tangible-Object-Predicate
                Interval-Based-Quantity-Slot
                (documentation "(#$resistanceToBioDeterioration OBJ DEGREE) means that the tangible object OBJ has the indicated DEGREE of resistance to biological deterioration.")))

(defrelation resistance-to-corrosion
  :arity 2
  :domain Partially-Tangible
  :range Corrosion-Resistance
  :annotations (Physical-Attribute-Description-Slot
                Tangible-Object-Predicate
                Interval-Based-Quantity-Slot
                (documentation "(#$resistanceToCorrosion OBJ DEGREE) means that the tangible object OBJ has the stated DEGREE of #$CorrosionResistance.  The higher DEGREE is, the less readily OBJ will corrode.")))

(defrelation resistance-to-radiation
  :arity 2
  :domain Partially-Tangible
  :range Radiation-Resistance
  :annotations (Physical-Attribute-Description-Slot
                Tangible-Object-Predicate
                Interval-Based-Quantity-Slot
                (documentation "(#$resistanceToRadiation OBJ DEGREE) indicates how resistant a tangible object OBJ is to radiation.  A higher DEGREE of resistance means that an object is less penetrable by #$ElectromagneticRadiation.")))

(defrelation response-to
  :arity 2
  :domain Acknowledging--Communication-Act
  :range Propositional-Information-Thing
  :annotations (Binary-Predicate
                (documentation "(#$responseTo ?ACT ?PIT) means that ?ACT is an acknowledging act to signify receipt of the abstract information ?PIT that is being acknowledged and to indicate a response.  The ?ACT may be an #$Accepting-CommunicationAct or a #$Rejecting-CommunicationAct, or several others.  Some may be combinations, e.g. David may accept part of #$Wanda's order (say the part about cleaning the kitchen) but not the other part (say cleaning the bathroom).  See also #$acknowledgedAct which relates the two acts directly.")))

(defrelation resultant-mental-objects
  :arity 2
  :domain Perceiving
  :range Mental-Object
  :annotations (Binary-Predicate
                (documentation "(#$resultantMentalObjects PEVT PERCEPT) means that during the #$Perceiving event PEVT, the perceiver acquires the #$MentalObject PERCEPT (i.e., feeling some emotion, deducing some conclusion, observing some facts, etc.)")))

(defrelation result-genl
  :arity 2
  :domain Collection-Denoting-Function
  :range Cyc_Collection
  :annotations (Rule-Macro-Predicate
                Functional-Slot
                Binary-Predicate
                (documentation "The Cyc predicate #$resultGenl is used to specify that a certain collection is a superset of the value returned by a particular collection-denoting function.  (#$resultGenl CDF COL) means that when the #$CollectionDenotingFunction CDF is applied to its legal number and type of arguments, the result will be a subset of the #$Collection COL -- i.e., the #$genls of (CDF ARG1 [ARG2 ... ARGN]) will include COL.  Examples: (#$resultGenl #$UsingAFn #$Action), i.e., `every using of a [particular kind of] object is an action'; (#$resultGenl #$AttemptingFn #$PurposefulAction), i.e., `every attempt [at a specific action] is a purposeful act'; (#$resultGenl #$BachelorsDegreeInFn #$BachelorsDegree), i.e., `every bachelor's degree [in some subject] is a bachelor's degree'; (#$resultGenl #$JointTypeBetweenFn #$Connection), i.e., `every joint [between specific things] is a connection'.  See also #$resultIsa.")))

(defrelation result-isa
  :arity 2
  :domain Relationship
  :range Cyc_Collection
  :annotations (Binary-Predicate
                Intangible-Object-Predicate
                Rule-Macro-Predicate
                (documentation "The Cyc predicate #$resultIsa is used to indicate that the value returned by a particular function is an element of a certain Cyc collection.  In other words, when FUNC is applied to its legal number of valid arguments in a non-atomic term, that resultant term is an element of the #$Collection COL; Thus, (#$resultIsa FUNC COL) means that applications of FUNC return elements of COL; i.e., (#$resultIsa FUNC COL) implies that (#$isa (FUNC ARG1 [ARG2 ... ARGN]) COL).  For example, since legal uses of #$PlusFn always return a quantity, (#$resultIsa #$PlusFn #$ScalarInterval) is asserted in Cyc.  Another example: because Cyc knows that (#$resultIsa #$GovernmentFn #$RegionalGovernment), Cyc concludes that the government of France is an element of #$RegionalGovernment; i.e., (#$isa (#$GovernmentFn #$France) #$RegionalGovernment).  See also #$resultGenl.")))

(defrelation right-region-fn
  :arity 2
  :domain Animal-Body-Region
  :range Animal-Body-Region
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "The function (RightRegionFn REGOROBJ), applied to a region or object REGOROBJ, means the region consisting of the right half or flank or right main portion of REGOROBJ.  It applies only when REGOROBJ itself has an intrinsic left/right orientation, or is part of a larger region or object that has a left/right orientation.")))

(defrelation rights-granted
  :arity 2
  :domain Change-In-User-Rights
  :range User-Rights-Attribute
  :annotations (Binary-Predicate
                (documentation "This predicate is used to indicate what #$UserRightsAttributes are acquired in events which bring about a #$ChangeInUserRights.  (#$rightsGranted EVENT URA) means that in the #$ChangeInUserRights EVENT, the #$UserRightsAttribute URA is granted (to some agent).  For example, (#$rightsGranted ''LouisianaPurchase'' #$ExclusiveUserRights), since no country other than the USA could then claim it as one of their territories.   If EVENT is a #$Buying event, then almost always both (#$rightsGranted EVENT #$FullUseRights) and (#$rightsGranted EVENT #$ExclusiveUserRights) are true.")))

(defrelation rigidity-of-object
  :arity 2
  :domain Partially-Tangible
  :range Rigidity
  :annotations (Interval-Based-Quantity-Slot
                Tangible-Object-Predicate
                Physical-Attribute-Description-Slot
                (documentation "(#$rigidityOfObject OBJ DEGREE) means that the tangible object OBJ has this DEGREE of #$Rigidity.  A higher DEGREE of #$Rigidity means more force is required to change the shape of OBJ than for a lower DEGREE.")))

(defrelation rotationally-connected-to
  :arity 2
  :is-primitive connected-to
  :domain Solid-Tangible-Thing
  :range Solid-Tangible-Thing
  :annotations (Spatial-Predicate
                Connection-Predicate
                Symmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$rotationallyConnectedTo OBJ1 OBJ2) means that OBJ1 and OBJ2 are connected in such a way that rotational motion, and only rotational motion, can happen between them.  The rotational motion may be fully or partially rotational.  Non-rotational movement between two rotationally connected objects at their connection point can occur only if the connection is broken, deformed, or disassembled.  Positive examples: Femurs are rotationally connected to hips, doors are rotationally connected to door frames, doorknobs are rotationally connected to doors, and propellers are rotationally connected to airplanes; in computer trackballs the ball is rotationally connected to the housing.  Negative examples: a planet orbiting around a star (they are not connected).  Cf. #$MovingInACircle.")))

(defrelation salient-assertions
  :arity 2
  :domain Reifiable-Term
  :range Assertion
  :annotations (Meta-Knowledge-Predicate
                Binary-Predicate
                (documentation "(#$salientAssertions ?TERM ?ASSERTION) means that some #$Cyclist has deemed it useful to mark ?ASSERTION as one of the assertions which is most useful to examine when trying to figure out the intended meaning of ?TERM.  Statements using #$salientAssertions are wholly intended for human consumption; they are not used by Cyc's inference engine in any way. ")))

(defrelation salutation
  :arity 2
  :domain Person
  :range Courtesy-Title
  :annotations (Intangible-Object-Predicate
                Binary-Predicate
                (documentation "(#$salutation PRSN TITLE) means the #$Person PRSN's name may have the #$CourtesyTitle TITLE attached to it, such as: Mr., Ms., Mrs., Miss, Dr., etc., when that person is addressed.")))

(defrelation satisfies-description
  :arity 3
  :domains (Cyc-System-List Cyc-System-List)
  :range Microtheory
  :annotations (Ternary-Predicate
                (documentation "ARG1 is a list of things (item1, item2, ...) which, taken together, satisfy the descriptions in the MT ARG3 of the roles listed in ARG2 (role1, role2, ...).  For example, we might see (#$satisfiesDescription (Joe Jane) (TheHusband TheWife) #$HumanSocialLifeMt).")))

(defrelation satisfies-standard
  :arity 2
  :domain (:and Formal-Product-Type (:filled-by superrelations Product))
  :range Product-Standard
  :annotations (Binary-Predicate
                (documentation "The predicate #$satisfiesStandard is used to identify a product standard that applies to a certain type of products.  (#$satisfiesStandard PRODTYPE STAND) means that every instance of the #$FormalProductType PRODTYPE satisfies the #$ProductStandard STAND.  STAND will contain a description of the desired physical form and/or function for the type of product (or service) denoted by PRODTYPE, and the instances of PRODTYPE fulfill those specifications.  See also #$ProductStandard.")))

(defrelation schooling
  :arity 3
  :domains (Person Educational-Organization)
  :range Student-Status-Attribute
  :annotations (Ternary-Predicate
                (documentation "(#$schooling PERSN SCHL LVL) means #$Person PERSN has attained formal schooling up to #$EducationLevelAttribute LVL at the #$EducationalOrganization SCHL.  This will refer to a particular #$subAbstrac of a #$Person, not the person as a whole lifetime #$Entity.  And of course the schooling itself generally occurs at but one of many #$timeSlices of the school.")))

(defrelation second--unit-of-angular-measure
  :annotations (Unit-Of-Measure-No-Prefix
                Unit-Of-Angular-Distance
                (documentation "A unit to measure the size of angles, in the Imperial system of measurement.  60 seconds = 1 minute (#$Minute-UnitOfAngularMeasure)")))

(defrelation second-fn
  :arity 3
  :domains (Non-Negative-Integer Calendar-Minute)
  :range Calendar-Second
  :annotations (Non-Predicate-Function
                Individual-Denoting-Function
                (documentation "(#$SecondFn S MINUTE) denotes second number S of minute MINUTE.  For example, (#$SecondFn 59 (#$MinuteFn 12 (#$HourFn 18 (#$DayFn 14 (#$MonthFn #$February (#$YearFn 1966)))))) denotes 6:12:59pm Feb. 14th, 1966")))

(defrelation seconds-duration
  :annotations (Unit-Of-Time
                Cgs-Unit-Of-Measure
                Unit-Of-Measure-No-Prefix
                Standard-Unit-Of-Measure
                Unit-Of-Measure
                (documentation "Seconds are the standard unit of #$Time in Cyc.  Think of #$SecondsDuration as a function; it takes one or two numbers and returns, as its value, some amount of #$Time.   An expression of the form (#$SecondsDuration ?num) denotes a quantity of #$Time that is exactly ?num seconds long.  An expression of the form (#$SecondsDuration ?min ?max) denotes a quantity of #$Time that is at least ?min seconds at most ?max seconds long.
Note:  Cyc's ontology contains ways to specify nonuniform distributions (e.g., a normal distribution with a mean and standard deviation), but for most purposes this simple uniform specification of `a piece of time' has proven itself to be the most useful building block.")))

(defrelation sees
  :arity 2
  :is-primitive perceives
  :domain Perceptual-Agent
  :range (:and Spatial-Thing Temporal-Thing)
  :annotations (Perceiving-Slot
                (documentation "(#$sees AGENT OBJ) means that the #$PerceptualAgent AGENT perceives at least some of the visual properties (color, shape, texture, etc) of the object(s) or event(s) OBJ.")))

(defrelation seller
  :arity 2
  :is-primitive exchangers
  :domain Commercial-Activity
  :range Agent
  :annotations (Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "The predicate #$seller relates an agent to a sales event.  (#$seller EVENT AGENT) means that the #$Agent AGENT sells something in the #$CommercialActivity EVENT.")))

(defrelation selling-agent
  :arity 2
  :is-primitive (:and mediators selling-performer)
  :domain Commercial-Activity
  :range Legal-Agent
  :annotations (Irreflexive-Binary-Predicate
                Anti-Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Actor-Slot
                Functional-Slot
                (documentation "A selling agent acts on behalf of a would be seller to bring about a buying event involving his/her/its client as the seller. ")))

(defrelation selling-performer
  :arity 2
  :is-primitive (:and social-participants performed-by)
  :domain Commercial-Activity
  :range Legal-Agent
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Anti-Transitive-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(sellingPerformer COM AGENT) means that the #$CommercialActivity COM is #$performedBy the #$Agent AGENT, who in that event actually pursues and attempts to make a sale.  AGENT may also be (and in many cases is) the #$seller of the goods or services sold, or s/he may be the #$sellingAgent representing the #$seller.")))

(defrelation sells-product-type
  :arity 2
  :domain (:and Insurance-Provider Medical-Care-Organization)
  :range Product-Type
  :annotations (Binary-Predicate
                (documentation "The predicate #$sellsProductType identifies a particular seller of a specific product.  (#$sellsProductType AGT PRODTYPE) means that the individual #$Agent AGT sells the #$ProductType PRODTYPE.  For example, the Wendy's in the Texas Student Union sells hamburgers.  The implication is that AGT typically and often sells products of PRODTYPE, not just as a one-time sale.")))

(defrelation sender-of-info
  :arity 2
  :is-primitive (:and deliberate-actors done-by information-origin)
  :domain Information-Transfer-Event
  :range Agent
  :annotations (Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "The predicate #$senderOfInfo is used to indicate the sending agent in a particular transfer of information.  (#$senderOfInfo TRANSFER SENDER) means that SENDER is an agent who is the source of information transferred in the #$InformationTransferEvent TRANSFER.  At the time of TRANSFER (and typically for some period beforehand), SENDER conceives of the information transferred in TRANSFER.  It's not the case that SENDER necessarily #$knows the `information' or has it among his/her #$beliefs, because TRANSFER could involve lying; e.g., #$GeorgeWashington's telling his father, `I didn't chop down the cherry tree'.  SENDER normally performs TRANSFER intentionally, but some transfers may be unintentional; e.g., when one repeats some gossip unwittingly within earshot of the person being discussed, the transfer to the overhearer is unintentional.  See also #$infoTransferred.")))

(defrelation senior-executives
  :arity 2
  :is-primitive (:and cotemporal has-workers)
  :domain Organization
  :range Person
  :annotations (Anti-Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Cotemporal-Objects-Slot
                (documentation "The predicate #$seniorExecutives is used to identify the upper-level managers in a particular organization.  (#$seniorExecutives ORG PERSON) means PERSON is an employee with a high executive position in the #$Organization ORG.  #$seniorExecutives relates an organization to the people who hold its principal corporate offices (#$CompanyPresident, etc.) and also positions like Chief of Staff, General, Admiral, Chief Corporate Counsel, Managing Partner, Chief Scientist, Chief Engineer, etc.")))

(defrelation sensory-response
  :arity 4
  :domains (Physical-Event
            Actor-Slot
            (:and Sensory-Reaction-Type
             (:filled-by superrelations Sensory-Attribute)))
  :range Generic-Attribute
  :annotations (Functional-Predicate
                Quaternary-Predicate
                (documentation "(#$sensoryResponse EVT ROLE SENSTYPE DEGREE) means that a #$PerceptualAgent who participates in the #$PhysicalEvent EVT in the manner ROLE has an immediate sensory reaction of the #$SensoryReactionType SENSTYPE with DEGREE of intensity. For example, Cyc's knowledge base contains a rule that says that if $E is a touching-something-very-cold event, then (#$sensoryResponse $E #$doneBy #$LevelOfDiscomfort #$Positive) --- i.e., that whoever does that touching action is likely to feel some discomfort. Note that #$sensoryResponse is one of the few predicates that are quaternary; i.e., that take four arguments.")))

(defrelation series-length
  :arity 2
  :domain Series
  :range Positive-Integer
  :annotations (Binary-Predicate
                (documentation "(#$seriesLength SER LEN) means that the series, SER, is LEN members long.  Note that some #$Series have an unknown or infinite number of members.")))

(defrelation series-ordered-by
  :arity 2
  :domain Series
  :range Binary-Predicate
  :annotations (Binary-Predicate
                (documentation "(#$seriesOrderedBy SER PRED) means that PRED is the relation that imposes an order on the members of SER.  Each member of the series stands in the relation PRED to the succeeding members of the series.  For example, if SER is a line of cars driving north, the ordering relation might be #$northOf (or ''aheadOf''). ")))

(defrelation series-ordered-by-inverse
  :arity 2
  :domain Series
  :range Binary-Predicate
  :annotations (Binary-Predicate
                (documentation "(#$seriesOrderedByInverse SER PRED) means that PRED is the relation that imposes an order on the members of SER.  Each member of the series stands in the relation PRED to the series members that come before it.  For example, if SER is a line of cars driving south, the ordering relation might be #$northOf (or ''behind'').  See also #$seriesOrderedBy.")))

(defrelation shape
  :arity 2
  :domain Partially-Tangible
  :range (:and Shape-Type (:filled-by superrelations Abstract-Shape))
  :annotations (Shape-Describing-Predicate
                Physical-Attribute-Description-Slot
                (documentation "The predicate #$shape is used to indicate the type of geometrical shape that characterizes a particular object.  (#$shape OBJ SHAPETYPE) means that the tangible object OBJ has an overall geometrical shape of the kind SHAPETYPE.  For example, the #$shape of the Transamerica Building in San Francisco is a #$PyramidShape.  Other elements of #$ShapeType include #$Square, #$Circle, #$SphereShape, #$CylinderShape, etc.")))

(defrelation shared-notes
  :arity 2
  :domain (:and Cyc_Thing Cyc-Indexed-Term)
  :range Shared-Note
  :annotations (Meta-Knowledge-Predicate
                Distributing-Meta-Knowledge-Predicate
                Binary-Predicate
                (documentation "#$sharedNotes is a predicate belonging to the Cyc collection #$DocumentationConstant.  Often KB builders wish to repeat the same documentation in the #$comment of many constants.  Rather than actually duplicating text in the KB, it is possible to create a special constant to 'hold' the documentation; this constant will be an instance of #$SharedNote.  (#$sharedNotes X N) means that N is an element of #$SharedNote whose #$comment contains shared documentation about the constant X.  Since #$sharedNotes are usually shared, it is reasonable to expect other axioms, such as (sharedNotes Y N) and (sharedNotes Z N) to be in the KB as well.")))

(defrelation shareholders
  :arity 2
  :domain Organization
  :range Agent
  :annotations (Binary-Predicate
                (documentation "The predicate #$shareholders identifies particular agents as owners of shares in a particular organization.  (#$shareholders ORG AGENT) means AGENT owns one or more shares of #$Stock in the company ORG and hence is an owner of the company and may receive dividends from the company.  #$shareholders indicates owners of a company's stock generically, whether they hold common or preferred shares.  Voting shareholders may vote (one vote per share) for the Board of Directors.  Shareholders do not normally participate in the operation of a company, and they are not personally liable for the debts of the company.")))

(defrelation shear-strength-of-object
  :arity 2
  :domain Partially-Tangible
  :range Shear-Strength
  :annotations (Interval-Based-Quantity-Slot
                Tangible-Object-Predicate
                (documentation "(#$shearStrengthOfObject OBJ DEGREE) means that the tangible object OBJ has a DEGREE amount of #$ShearStrength, i.e., resistance to shearing stress.")))

(defrelation sheet-surface-connected
  :arity 2
  :is-primitive (:and connected-to touches-directly)
  :domain Sheet-Of-Some-Stuff
  :range Partially-Tangible
  :annotations (Spatial-Predicate
                Connection-Predicate
                Inter-Existing-Object-Slot
                (documentation "(#$sheetSurfaceConnected MEMBRANE OBJ2) means that  MEMBRANE is connected all over most of one surface to a surface of OBJ2.  For example, a bi-layer membrane would have two parts #$sheetSurfaceConnected to each other.  Or, a membrane could be attached over most of its surface to an object's surface, as the #$VisceralPleura is attached to the surface of the #$Lung in the  body.  The membrane(s) may be flexible, but the surface connection is firm (i.e. no sliding can occur without a separation, tearing, or breaking occurring).")))

(defrelation sibling-disjoint-exceptions
  :arity 2
  :domain Cyc_Collection
  :range Cyc_Collection
  :annotations (Symmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "The predicate #$siblingDisjointExceptions is used to state exceptions to constraints normally imposed from #$SiblingDisjointCollection.  (#$siblingDisjointExceptions COL1 COL2) means that the relationship between the collections COL1 and COL2 is exempt from the disjointness constraint which would otherwise be imposed because COL1 and COL2 are both instances of some element of #$SiblingDisjointCollection.  (See #$SiblingDisjointCollection for a full explanation of the constraints.)   For example, #$Killing-Biological and #$PhysicallyAttackingAnAgent are both elements of #$DefaultDisjointScriptType, which in turn is an element of #$SiblingDisjointCollection.  The exception is useful in this case because it lifts the constraint that physically attacking and killing an agent must be disjoint from each other, while letting us continue to conclude that killing and attacking are each disjoint from many other kinds of actions.  By asserting (#$siblingDisjointExceptions #$Killing-Biological #$PhysicallyAttackingAnAgent), we block the disjointness constraint between those two collections, without disturbing the constraints between each of those collections and all the other instances of their parent (disjoint) collection, #$DefaultDisjointScriptType.  In other words, (#$siblingDisjointExceptions COL1 COL2) prevents COL1 and COL2 from being considered disjoint if they would otherwise be disjoint due to their being both instances of the same #$SiblingDisjointCollection.")))

(defrelation sibling-organizations
  :arity 2
  :domain Organization
  :range Organization
  :annotations (Symmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "The predicate #$siblingOrganizations relates two organizations which are immediate #$subOrganizations of a common (unspecified) parent organization.  (#$siblingOrganizations ORG1 ORG2) means that the #$Organizations ORG1 and ORG2 are sister organizations within some hierarchically structured organization; ORG1 and ORG2 are at the same `level' from the top.")))

(defrelation siblings
  :arity 2
  :is-primitive (:and biological-relatives
                      positive-vested-interest
                      acquainted-with)
  :domain Animal
  :range Animal
  :annotations (Family-Relation-Slot
                Symmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$siblings ANIM1 ANIM2) means that ANIM1 and ANIM2 are siblings.  Either they share one or more biological parents, or are siblings by adoption, marriage, or some other social arrangement.  Generally siblings are reasonably close in age (within 15 years or so) and have grown up together in the same family.")))

(defrelation simultaneous-with
  :arity 2
  :is-primitive cotemporal
  :domain Time-Point
  :range Time-Point
  :annotations (Primitive-Temporal-Relation
                Symmetric-Binary-Predicate
                Reflexive-Binary-Predicate
                Transitive-Binary-Predicate
                (documentation "(#$simultaneousWith ?X ?Y) means that #$TimePoints ?X and ?Y occur at exactly the same time. 
Note:  Individual #$TimePoints are seldom mentioned in axioms; rather, the axiom is likely to use some #$ComplexTemporalRelation, such as #$cotemporal or #$temporalBoundsIdentical, which holds between two #$TemporalThings.   These #$ComplexTemporalRelations are themselves usually defined in terms of #$PrimitiveTemporalRelations, such as #$after and #$simultaneousWith, which relate one #$TimePoint to another.")))

(defrelation singular
  :arity 2
  :domain English-Word
  :range Character-String
  :annotations (Binary-Predicate
                Intangible-Object-Predicate
                (documentation "(#$singular WORD STRING) means that STRING is the singular noun form of WORD.  For example, the #$singular form of #$Hit-TheWord is `hit'.")))

(defrelation situation-fn
  :arity 2
  :domain Cyc-Formula
  :range (:and Situation-Type (:filled-by superrelations Situation))
  :annotations (Collection-Denoting-Function
                (documentation "#$SituationFn is a Cyc function, specifically a #$CollectionDenotingFunction.  (#$SituationFn FORM) denotes a collection of situations in which the #$CycFormula FORM is true.  FORM may contain variables.  For example, FORM might describe the general situation in which a letter is addressed to a person who has filed a mail forwarding order.  If FORM is true in a particular case, then that is a situation of the (#$SituationFn FORM) kind, and related axioms may indicate inferences or actions to take.  Every collection denoted by a #$SituationFn expression is an element of (#$isa) SituationType.")))

(defrelation skill-capable-of
  :arity 3
  :domains (Animal (:and Cyc_Collection (:filled-by superrelations Situation)))
  :range Cyc_Role
  :annotations (Ternary-Predicate
                (documentation "The predicate #$skillCapableOf indicates that an agent has the skill to take a certain role in a certain type of situation or event.  (#$skillCapableOf AGT SIT-TYPE ROLE) means that a particular #$Agent AGT has the necessary skills to act in this ROLE in normal instances of SIT-TYPE.  For example, to express that #$Gumby is capable of swimming, Cyc would say (#$skillCapableOf #$Gumby #$Swimming-Generic #$performedBy).  #$skillCapableOf entails that AGT has any anatomical and/or intellectual prerequisites for performing the skill; however, it is neutral as to whether AGT has the necessary resources of time, money, opportunity, etc., to use the skill in any particular situation of SIT-TYPE.")))

(defrelation skill-level
  :arity 5
  :domains (Something-Existing
            (:and Cyc_Collection (:filled-by superrelations Event))
            Actor-Slot
            (:and Script-Performance-Attribute-Type
             (:filled-by superrelations Script-Performance-Attribute)))
  :range Generic-Attribute
  :annotations (Quintary-Predicate
                (documentation "This predicate relates performers to types of actions.  (#$skillLevel OBJ ACT-TYPE ROLE PERF-ATT LEVEL) means that the #$SomethingExisting OBJ has the ability to play the role ROLE in elements of the type of #$Event ACT-TYPE, with LEVEL degree of PERF-ATT.  For example, (#$skillLevel Joe #$DiggingAHole #$performedBy #$Agility #$High) means that, in general, Joe can dig holes with great agility.  To talk about actual performance in a particular action, use #$performanceLevel.")))

(defrelation skill-required
  :arity 4
  :domains ((:and Script-Type (:filled-by superrelations Animal-Activity))
            (:and Script-Type (:filled-by superrelations Animal-Activity))
            (:and Script-Performance-Attribute-Type
             (:filled-by superrelations Script-Performance-Attribute)))
  :range Generic-Attribute
  :annotations (Quaternary-Predicate
                (documentation "(#$skillRequired ACT-TYPE OTHER-TYPE PERF-ATT LEVEL) means that if one is to successfully perform an instance of some kind of action (ACT-TYPE), then one must be capable of performing instances of another kind of action (OTHER-TYPE) with the performance attribute PERF-ATT at a level of at least LEVEL.  For example, (#$skillRequired PlayingVolleyball ServingAVolleyball #$Competence #$Low).  If you can't even serve a volleyball at a `Low' competence level, you're not so much `playing' volleyball as developing the skills to play it.")))

(defrelation skin-color
  :arity 2
  :domain Person
  :range Color
  :annotations (Physical-Attribute-Description-Slot
                Functional-Slot
                (documentation "(#$skinColor PERSON SKINCOL) means #$Person PERSON has the #$HumanSkinColor SKINCOL.")))

(defrelation skolem-func-n-fn
  :arity 4
  :domains (Cyc-System-List Cyc-System-Symbol Non-Negative-Scalar-Interval)
  :range Cyc_Thing
  :annotations (Function-The-Mathematical-Type))

(defrelation skolem-function-fn
  :arity 3
  :domains (Cyc-System-List Cyc-System-Symbol)
  :range Cyc_Thing
  :annotations (Function-The-Mathematical-Type))

(defrelation smells
  :arity 2
  :is-primitive (:and perceives cotemporal)
  :domain Perceptual-Agent
  :range (:and Temporal-Thing Spatial-Thing)
  :annotations (Cotemporal-Objects-Slot
                Perceiving-Slot
                (documentation "(#$smells ?AGT ?OBJ) means that OBJ releases a scent (see #$Odor) which the #$PerceptualAgent ?AGT is able to perceive.  In the situation 'Joe smells the coffee burning' Cyc should know both (#$smells Joe Coffee01) and (#$smells Joe BurningOfCoffeeEvent01).")))

(defrelation social-class
  :arity 2
  :domain Person
  :range Social-Class--Lifestyle
  :annotations (Interval-Based-Quantity-Slot
                (documentation "(#$socialClass PRSN CLS) means that in the surrounding culture, the #$Person PRSN has the #$SocialClass-Lifestyle CLS.  As the name suggests, this predicate indicates PRSN's approximate social status as determined by his or her style of life -- quality of life, access to material goods and services, and social associations.  It may also depend on a cultural non-material system of social rank, based on birth, office, manners, vocal accent or other factors.  E.g., (#$socialClass #$DonaldTrump #$UpperClass) was true even when he lost his fortune and was (temporarily) bankrupt; and (#$socialClass #$BillGates #$UpperMiddleClass) was true, at least for a while, after he became a billionaire.  This is a good example of a predicate whose precise meaning, and associated heuristic rules, vary quite a bit from context to context, such as from country to country, from century to century, etc.")))

(defrelation social-participants
  :arity 2
  :is-primitive pre-actors
  :domain Social-Occurrence
  :range Agent
  :annotations (Asymmetric-Binary-Predicate
                Actor-Slot
                Irreflexive-Binary-Predicate
                (documentation "(#$socialParticipants SO AGT) means that the #$Agent AGT participates --- in some social role --- in the #$SocialOccurrence SO.  In every culture there are many specializations of this #$ActorSlot; some #$SocialOccurrences have very elaborate role structures (e.g., a lawsuit in 1990's America), and some are fairly simple (e.g., rudely bumping into someone.)  See #$SocialOccurrence.")))

(defrelation social-status
  :arity 4
  :domains (Person
            Social-Status-Attribute-Type
            (:and Existing-Object-Type (:filled-by superrelations Person)))
  :range Generic-Attribute
  :annotations (Quaternary-Predicate
                Functional-Predicate
                (documentation "(#$socialStatus PRSN STAT GROUP DEGREE) means that the #$Person PRSN has the social status type STAT (such qualities as #$Glamor, #$Credibility, etc.) at the generic strength level DEGREE (e.g., #$High, #$VeryLow, #$Low, etc.), according to the reference population group GROUP.  For example, in the context of 1980s America, it was true that (#$socialStatus #$Madonna #$Glamor #$HumanTeenager #$VeryHigh).  I.e., Madonna had a `high glamor' status among American teenagers in the 1980's.")))

(defrelation solid-fn
  :arity 2
  :domain Tangible-Stuff-Composition-Type
  :range (:and Tangible-Stuff-State-Type
               (:filled-by superrelations Solid-Tangible-Thing))
  :annotations (Collection-Denoting-Function
                (documentation "A #$CollectionDenotingFunction.  #$SolidFn takes as an argument a collection COL, membership in which is based only on physical and/or chemical composition and not on any other property (see #$TangibleStuffCompositionType).  (#$SolidFn COL) is the collection of elements of COL that are in the #$SolidStateOfMatter.  E.g., the ice cubes in my lemonade belong to the collection (#$SolidFn #$Water-Fresh).")))

(defrelation soluble-in
  :arity 2
  :domain Partially-Tangible
  :range Liquid-Tangible-Thing
  :annotations (Tangible-Substance-Predicate
                Inter-Existing-Object-Slot
                (documentation "(#$solubleIn SOLUTE SOLVENT) means that the piece of #$PartiallyTangible stuff SOLUTE will ordinarily dissolve if placed into the #$LiquidTangibleThing SOLVENT.  See also #$Solubility.")))

(defrelation solute
  :arity 2
  :is-primitive (:and constituents cotemporal)
  :domain Solution
  :range Partially-Tangible
  :annotations (Composition-Predicate
                Anti-Transitive-Binary-Predicate
                Cotemporal-Objects-Slot
                (documentation "The predicate #$solute indicates a particular #$TangibleThing in a #$Solution which is dissolved in the #$solvent of that #$Solution.")))

(defrelation solvent
  :arity 2
  :is-primitive (:and main-constituent cotemporal)
  :domain Solution
  :range Partially-Tangible
  :annotations (Composition-Predicate
                Cotemporal-Objects-Slot
                (documentation "The predicate #$solvent indicates a particular liquid in a #$Solution in which the #$solute is dissolved.")))

(defrelation space-region-portals
  :arity 2
  :is-primitive cotemporal
  :domain Interior
  :range Portal
  :annotations (Physical-Part-Predicate
                Binary-Predicate
                (documentation "(spaceRegionPortals REGION HOLE) means that HOLE is a #$Portal into the interior region REGION.  All the portals of this #$Interior space region are related to it by spaceRegionPortals.")))

(defrelation spatially-intersects
  :arity 2
  :is-primitive near
  :domain Spatial-Thing
  :range Spatial-Thing
  :annotations (Reflexive-Binary-Predicate
                Symmetric-Binary-Predicate
                (documentation "(#$spatiallyIntersects REGION1 REGION2) is true if and only if REGION1 and REGION2 share a common sub-region.")))

(defrelation spatially-intrinsic-arg
  :arity 2
  :domain Predicate
  :range Positive-Integer
  :annotations (Binary-Predicate
                (documentation "(#$spatiallyIntrinsicArg PRED N) means that the Cyc predicate PRED expresses a property that is spatially intrinsic for its argument position N. That means, if a formula using PRED



is true for some object OBJ (in the Nth argument position), we can assume the truth of every similar formula in which any spatial part of OBJ is substituted in for OBJ. For



example, since (#$spatiallyIntrinsicArg #$temperatureOfObject 1) is true, if we know (#$temperatureOfObject `Coffee007' (#$DegreeCelsius 90)), we can expect that any spatial part of `Coffee007' will also have that temperature. An example of a property that is NOT spatially intrinsic is #$massOfObject; though a whole rock may weigh two pounds, there are spatial parts of the rock that don't.  Another example of a relation that is not spatially intrinsic, but might at first seem to be, is #$constituents.  In (#$constituents `ChocolateMilk37' `Milk36'), it is not the case that every spatial part of `ChocolateMilk37' has `Milk36' among its #$constituents.  #$constituents means, rather, that every part of its first argument has some part of the second argument among its components, but that is different from the intended meaning of #$spatiallyIntrinsicArg.")))

(defrelation spectators
  :arity 2
  :is-primitive pre-actors
  :domain Event
  :range Agent
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$spectators E AGT) means that in the #$Event E,  the #$Agent AGT is an onlooker of E but not actively acting in it in any other way.   AGT will observe all or part of E.")))

(defrelation speed-of-object--translation
  :arity 2
  :domain Partially-Tangible
  :range Speed
  :annotations (Interval-Based-Quantity-Slot
                (documentation "The predicate #$speedOfObject-Translation is used to give the speed with which an object is moving in a particular translational motion.  As you should remember from freshman physics, velocity has a speed and direction.  Speed is a scalar quantity, i.e., it has no direction, only magnitude.  Thus, `100 miles per hour straight up' is a velocity, and `100 miles per hour' is the corresponding speed.")))

(defrelation sphere-fn
  :arity 2
  :domain Distance
  :range (:and Abstract-Shape Three-Dimensional-Shape)
  :annotations (Shape-Function
                (documentation "The Cyc function #$SphereFn is a #$ShapeFunction (q.v.).  (#$SphereFn D) returns an abstract #$SphereShape which has diameter D.  Examples: the #$shape of a 2-inch rubber ball is #$SphereShape; the ball #$fitsIn the shape denoted by (#$SphereFn (#$Inch 2)). The #$shape of #$PlanetEarth is also #$SphereShape; Earth #$fitsIn the shape denoted by (#$SphereFn (#$Mile 8000)).")))

(defrelation spouse
  :arity 2
  :is-primitive (:and cohabiting-family-members mate loves)
  :domain Person
  :range Person
  :annotations (Family-Relation-Slot
                Inter-Actor-Slot
                Symmetric-Binary-Predicate
                Anti-Transitive-Binary-Predicate
                (documentation "(#$spouse PERSON1 PERSON2) means the two #$Persons PERSON1 and PERSON2 are married.  
Note: in some contexts (cultures), a person is not restricted to having only one cotemporal spouse.")))

(defrelation sqrt-fn
  :arity 2
  :domain Real-Number
  :range Real-Number
  :annotations (Function-From-Quantities-To-Quantities
                (documentation "#$SqrtFn is the unary mathematical function that returns the square root of its argument; e.g., (#$SqrtFn 4) returns 2.")))

(defrelation squared-fn
  :arity 2
  :domain Real-Number
  :range Real-Number
  :annotations (Function-From-Quantities-To-Quantities
                (documentation "#$SquaredFn is the unary mathematical function that returns the square of the real number taken as its argument; e.g., (#$SquaredFn 9) returns 81.")))

(defrelation square-mile
  :annotations (Unit-Of-Measure-No-Prefix
                Fps-Unit-Of-Measure
                Unit-Of-Area
                (documentation "The measurement function used in Cyc to represent the square mile used as a unit of measure for area, within the British (FPS) system.  See also #$FPSUnitOfMeasure, #$UnitOfMeasure.")))

(defrelation start-fn
  :arity 2
  :domain Temporal-Thing
  :range Time-Point
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "#$StartFn is a function that takes a #$TemporalThing and returns the #$TimePoint it began.  Thus:  (#$startingPoint ?X (#$StartFn ?X))")))

(defrelation starting-date
  :arity 2
  :is-primitive starts-during
  :domain Temporal-Thing
  :range Date
  :annotations (Binary-Predicate
                (documentation "(#$startingDate ?X ?Y) indicates that ?Y is a #$Date such that (#$temporallySubsumes ?Y (#$StartFn ?X)). This is NOT the same as #$startingPoint (qv).  Rather, it means that ?X happened (started to happen, came into existence, etc.) sometime on that date.
Note:  the date is tied to a time interval on a calendar, but need not be a particular day; it might be a particular calendar month, a particular calendar year, etc.")))

(defrelation starting-point
  :arity 2
  :domain Temporal-Thing
  :range Time-Point
  :annotations (Temporal-Relation
                (documentation "(#$startingPoint ?X ?T) indicates that ?T is the #$TimePoint at which ?X begins, the earliest moment of its temporal extent.")))

(defrelation starts-after-ending-of
  :arity 2
  :is-primitive (:and temporally-disjoint
                      ends-after-ending-of
                      starts-after-starting-of)
  :domain Temporal-Thing
  :range Temporal-Thing
  :annotations (Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Transitive-Binary-Predicate
                Complex-Temporal-Relation
                (documentation "(#$startsAfterEndingOf AFTER BEFORE) means (#$after (#$StartFn AFTER) (#$EndFn BEFORE)).   That is, the #$startingPoint of AFTER is later than the #$endingPoint of BEFORE.



Note:  Cyc's #$startsAfterEndingOf relation is equivalent to what James Allen independently dubbed the AFTER relation.")))

(defrelation starts-after-starting-of
  :arity 2
  :is-primitive ends-after-starting-of
  :domain Temporal-Thing
  :range Temporal-Thing
  :annotations (Asymmetric-Binary-Predicate
                Transitive-Binary-Predicate
                Complex-Temporal-Relation
                Irreflexive-Binary-Predicate
                (documentation "(#$startsAfterStartingOf X Y) means (#$after (#$StartFn X) (#$StartFn Y)).  That is, the #$startingPoint of X is later than the #$startingPoint of Y.  This implies nothing about whether X and Y overlap, or how much they overlap, except that they can't be fully #$cotemporal.")))

(defrelation starts-during
  :arity 2
  :is-primitive (:and temporal-bounds-intersect starts-after-starting-of)
  :domain Temporal-Thing
  :range Temporal-Thing
  :annotations (Asymmetric-Binary-Predicate
                Complex-Temporal-Relation
                Irreflexive-Binary-Predicate
                (documentation "(#$startsDuring ?X ?Y) means ?Y covers the start of ?X, i.e. the #$startingPoint of ?X is properly contained (#$temporalBoundsContain) within ?Y.  Note that ?X and ?Y do not necessarily intersect in time, however, they would if ?Y were #$temporallyContinuous.")))

(defrelation starts-relative-to-end-of
  :arity 3
  :domains (Temporal-Thing Time--Quantity)
  :range Temporal-Thing
  :annotations (Ternary-Predicate
                (documentation " (#$startsRelativeToEndOf ?X ?D ?Y) means that the ?X starts duration ?D after ?Y ends.  That is, the #$startingPoint of ?X is after the #$endingPoint of ?Y, by an amount of time ?D.")))

(defrelation starts-relative-to-start-of
  :arity 3
  :domains (Temporal-Thing Time--Quantity)
  :range Temporal-Thing
  :annotations (Ternary-Predicate
                (documentation " (#$startsRelativeToStartOf ?X ?D ?Y) means that ?X starts duration ?D after ?Y starts.  That is, the #$startingPoint of ?X is after the #$startingPoint of ?Y, by an amount of time ?D.")))

(defrelation state-of-address
  :arity 2
  :is-primitive object-found-in-location
  :domain Contact-Location
  :range Country-Subsidiary
  :annotations (Functional-Slot
                (documentation "(#$stateOfAddress LOC STATE) means that the #$ContactLocation LOC is located in STATE.  Note that STATE may be an element of #$State-Geopolitical (q.v.), or it may belong to some other kind of #$CountrySubsidiary.  For example, #$Cycorp's #$stateOfAddress is #$Texas-State.  See also #$ContactLocation.")))

(defrelation state-of-device
  :arity 2
  :is-primitive has-attributes
  :domain Physical-Device
  :range Device-State
  :annotations (Functional-Slot
                Tangible-Object-Predicate
                (documentation "This predicate is used to identify the state of operation that a particular device is in.  (#$stateOfDevice DEV STATE) means that the #$PhysicalDevice DEV is in the #$DeviceState STATE.  Thus, (#$stateOfDevice HAL #$DeviceOff) says that the computer HAL is switched off.")))

(defrelation state-of-matter
  :arity 2
  :domain Partially-Tangible
  :range State-Of-Matter--Solid-Liquid-Gaseous
  :annotations (Tangible-Substance-Predicate
                Interval-Based-Quantity-Slot
                (documentation "The predicate #$stateOfMatter is used to indicate the physical state of a tangible thing.  (#$stateOfMatter SUBST STATE) means that the tangible substance SUBST is in the physical state STATE.  STATE is an element of #$StateOfMatter-SolidLiquidGaseous (solid, semi-solid, liquid, or gaseous).")))

(defrelation STIB
  :arity 2
  :domain Temporal-Thing
  :range Time-Interval
  :annotations (Reifiable-Function
                Individual-Denoting-Function
                (documentation "(#$STIB ?X) returns the `Short Time Interval Before' ?X.  The function #$STIB is used to state axioms which assert propositions about the world just before some #$TemporalThing.  E.g., just before some event begins, or just before some tangible object comes into being.  Whether the propositions hold beyond the bounds of the short interval specified depends the nature of the proposition.  Consider the axiom `before launching, the Space Shuttle's fuel tanks are full'. The fuel tanks are only known to be full immediately before the launching event, and for some (measurable but potentially short) time interval before that launch, and so we use #$STIB to specify the time interval in which the assertion of fullness will hold.  Before or after that time, additional axioms are required to conclude whether the tanks are full or not.  Also see:  #$STIF.")))

(defrelation STIF
  :arity 2
  :domain Temporal-Thing
  :range Time-Interval
  :annotations (Reifiable-Function
                Individual-Denoting-Function
                (documentation "(#$STIF ?X) returns the `Short Time Interval Following' ?X.  The function #$STIF is used to state axioms which assert propositions about the world just after some #$TemporalThing (i.e., after an event ends, after a tangible object ceases to exist, etc.).  Each of those propositions may or may not hold beyond the bounds of that short interval.  Consider the axiom `after swimming, the swimmer is wet'. The swimmer is only known to be wet for a short time interval immediately following the swimming event, and so we use #$STIF to specify that short time interval in which the assertion of wetness will hold.  Beyond that time, additional axioms would be required to decide whether the wetness would persist or not.  Also see: #$STIB.")))

(defrelation stock-in-fn
  :arity 2
  :domain Legal-Corporation
  :range (:and Cyc_Collection (:filled-by superrelations Stock))
  :annotations (Collection-Denoting-Function
                (documentation "#$StockInFn is a Cyc function, specifically a #$CollectionDenotingFunction. It is used to represent a collection of stock in a particular company.  (#$StockInFn COMPANY) applied to a #$LegalCorporation COMPANY returns the collection of all shares of #$Stock in that corporation.")))

(defrelation street-address-text
  :arity 2
  :domain Contact-Location
  :range Street-Address
  :annotations (Functional-Slot
                (documentation "The predicate #$streetAddressText maps from a particular place to a string representing its street address.  (#$streetAddressText LOC STREET) means that LOC is found at the number and street given in the string STREET.  See also #$ContactLocation.")))

(defrelation structure-member-isa
  :arity 2
  :domain Situation
  :range Cyc_Collection
  :annotations (Binary-Predicate
                (documentation "(#$structureMemberIsa SIT COL) means that each of the #$structureMembers of the situation SIT is an element of the collection COL.")))

(defrelation structure-members
  :arity 2
  :is-primitive parts
  :domain Situation
  :range Cyc_Thing
  :annotations (Binary-Predicate
                (documentation "#$structureMembers is a very general predicate, encompassing all the ways a #$Situation's structure can be composed out of parts.  In (#$structureMembers WHOL PRT), PRT could be a member of a #$Group or #$Series (if WHOL is a #$Group or #$Series), the #$subEvents of an #$Event (if WHOL is an #$Event), and so on.")))

(defrelation stuck-to
  :arity 2
  :is-primitive connected-to--rigidly
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Spatial-Predicate
                Connection-Predicate
                Symmetric-Binary-Predicate
                (documentation "(#$stuckTo OBJ1 OBJ2) means that OBJ1 and OBJ2 are held together by an adhesive force that is at least strong enough to support the whole weight of (the lighter of) OBJ1 or OBJ2.  Either OBJ1 or OBJ2 must be `sticky' or have a sticky surface; e.g., duct tape, honey, chewing gum, and perhaps magnetism.  #$stuckTo may represent a weak form of connection, one that may be separated by manual force.







Note: If a third object (such as glue) supplies the adhesive force holding OBJ1 and OBJ2 together, or if OBJ1 or OBJ2 were acted on non-trivially (e.g., welding, not simply contact or pressure), then see #$bondedTo and its specializations.")))

(defrelation stuff-used
  :arity 2
  :is-primitive instrument--generic
  :domain Event
  :range Partially-Tangible
  :annotations (Actor-Slot
                (documentation "The predicate #$stuffUsed relates an event to some tangible substance which facilitates that event.  (#$stuffUsed EVENT STUFF) means that STUFF is a portion of an element of #$ExistingStuffType which plays an instrumental role in EVENT.  STUFF may or may not be consumed in the course of EVENT.  Examples: portions of #$Water are #$stuffUsed in instances of #$WashingDishes, #$WashingHair, #$WashingClothesInAMachine, etc.; portions of #$EdibleOil are #$stuffUsed in some instances of #$Frying food and #$BakingBread.")))

(defrelation sub-abs-of-entity-after
  :arity 3
  :domains (Entity Something-Existing)
  :range Temporal-Thing
  :annotations (Ternary-Predicate
                (documentation "(#$subAbsOfEntityAfter ?X ?Y ?Z) indicates that ?X is an #$Entity,  ?Y is some subabstraction of ?X, and (#$contiguousAfter ?Y ?Z).  This provides one way to talk about the effects wrought by some state-changing process.  For example, for Washing001 involving Hair001, (#$subAbsOfEntityAfter Hair001 ?SUB Washing001) would imply that ?SUB is Wet.  Usually the preferred alternative is to use the #$holdsIn representation: (#$holdsIn (#$STIF Washing001) 'Hair001 is Wet').")))

(defrelation sub-abs-of-entity-before
  :arity 3
  :domains (Entity Something-Existing)
  :range Temporal-Thing
  :annotations (Ternary-Predicate
                (documentation "(#$subAbsOfEntityBefore ?X ?Y ?Z) indicates that ?X is an #$Entity,  ?Y is some subabstraction of ?X, and (#$contiguousAfter ?Z ?Y). This provides one way to talk about pre-conditions for some state-changing process.  For example, 'Egg001 was raw before being scrambled' -- if (#$subAbsOfEntityBefore Egg001 ?SUB Scrambling001), then ?SUB is raw.  Usually the preferred alternative is to use the #$holdsIn representation: (#$holdsIn (#$STIB Scrambling001) 'Egg001 is raw').")))

(defrelation sub-abs-of-entity-during
  :arity 3
  :domains (Entity Something-Existing)
  :range Temporal-Thing
  :annotations (Ternary-Predicate
                (documentation "(#$subAbsOfEntityDuring ENTITY SUB TEMP) -- SUB is a #$subAbstrac (a time-slice) of the #$Entity ENTITY, and SUB is cotemporal with the #$TemporalThing TEMP.  For example, (#$subAbsOfEntityDuring Karen KarenDuring1992 #$TheYear1992).")))

(defrelation sub-abstrac
  :arity 2
  :is-primitive (:and parts temporally-subsumes time-slices)
  :domain Something-Existing
  :range Something-Existing
  :annotations (Reflexive-Binary-Predicate
                Anti-Symmetric-Binary-Predicate
                Transitive-Binary-Predicate
                Temporal-Part-Slot
                (documentation "(#$subAbstrac WHOLE SUB) means SUB is a temporal part 
(one of the #$timeSlices) of WHOLE, where WHOLE and SUB are both elements of 
#$SomethingExisting.  Both entities and subabstractions are subabstactions of 
themselves.  So the predicate #$subAbstrac is the restriction of the predicate 
#$timeSlices to the domain, and hence also range, #$SomethingExisting.  
`AlbertEinsteinWhileAtPrinceton' is a #$subAbstrac of `AlbertEinsteinAsAnAdult',
 which in turn is a #$subAbstrac of 'AlbertEinstein', which in turn is a 
#$subAbstrac only of itself (hence 'AlbertEinstein' is an element of 
#$Entity (q.v.)).")))

(defrelation sub-agreements
  :arity 2
  :domain Agreement
  :range Agreement
  :annotations (Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                (documentation "The predicate #$subAgreements relates a particular agreement to the subordinate agreements it comprises.  (#$subAgreements AGR SUB) means that both AGR and SUB are elements of #$Agreement, and AGR has SUB as a sub-part.")))

(defrelation sub-belief-system
  :arity 2
  :domain Belief-System
  :range Belief-System
  :annotations (Taxonomic-Slot
                Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                (documentation "(#$subBeliefSystem SYS SUB) indicates that SUB is a more specialized `branch' of belief system BSYS.  Thus the #$beliefStatements of SUB will be a superset of the #$beliefStatements of BSYS (sometimes with a few changes and deletions.)  Some examples of this are:  (#$subBeliefSystem #$Islam #$ShiiteIslam), (#$subBeliefSystem #$ProtestantReligion #$PresbyterianReligion), and (#$subBeliefSystem #$MilesianSchoolBeliefs #$AnaximandersPhilosophy).")))

(defrelation sub-events
  :arity 2
  :is-primitive (:and parts temporally-subsumes)
  :domain Event
  :range Event
  :annotations (Reflexive-Binary-Predicate
                Anti-Symmetric-Binary-Predicate
                Transitive-Binary-Predicate
                Sub-Process-Slot
                Complex-Temporal-Relation
                (documentation "(#$subEvents WHOLE PART) means that the event PART is a meaningful part of the event WHOLE.  So both WHOLE and PART are elements of #$Event.  The predicate #$subEvents can be used to decompose events in time, in space, and/or in other ways.  Following a recipe often has this property:  the task is broken down into several sub-tasks, some of which happen before others, and some of which happen simultaneously but involve different ingredients.  One could also decompose `making dinner' into #$subEvents according to how dangerous they are, which might be useful if one had kids of various ages helping.  Often, a more specialized relation than #$subEvents can be used; e.g., if you have subevents that decompose an action in time only, then the more specialized predicate #$subProcesses should be used.")))

(defrelation sub-goals
  :arity 2
  :domain Goal
  :range Goal
  :annotations (Taxonomic-Slot
                Asymmetric-Binary-Predicate
                Transitive-Binary-Predicate
                (documentation "(#$subGoals G SUB) means that SUB is a subordinate goal of G.  In other words, SUB is an intermediate objective or milestone to be accomplished in the course of pursuing the overall #$Goal G.")))

(defrelation sub-groups
  :arity 2
  :is-primitive cotemporal
  :domain Group
  :range Group
  :annotations (Part-Predicate
                Reflexive-Binary-Predicate
                Transitive-Binary-Predicate
                Cotemporal-Objects-Slot
                (documentation "The predicate #$subGroups is used to relate a particular group to its subgroups.  (#$subGroups GROUP SUB) means that (1) GROUP includes all the #$groupMembers of SUB, and (2) SUB and GROUP co-exist as groups.  Examples: the stars in the constellation Big Dipper constitute a group which is one of the #$subGroups of the Milky Way galaxy; Democrats in the House of Representatives in 1997 are a subgroup of the group of U.S. House Members for that year.")))

(defrelation sub-organizations
  :arity 2
  :is-primitive (:and sub-groups affiliated-with)
  :domain Organization
  :range Organization
  :annotations (Transitive-Binary-Predicate
                Irreflexive-Binary-Predicate
                Non-Physical-Part-Predicate
                Cotemporal-Objects-Slot
                (documentation "The predicate #$subOrganizations relates a particular organization to
one of its sub-organizations. (#$subOrganizations ORG1 ORG2) means ORG2 is a
 sub-organization of ORG1, whether it is at the very next organizational level
down, e.g., (#$subOrganizations NationalLeague-Baseball NationalLeagueEast-Baseball),
or several levels down the heirarchy, e.g., (#$subOrganizations NationalLeague-Baseball NewYorkMets).")))

(defrelation sub-path-between-fn
  :arity 4
  :domains (Path--Simple Cyc_Thing Cyc_Thing)
  :range Path--Simple
  :annotations (Non-Predicate-Function
                (documentation "Given a path PATH and different points X and Y on it, (#$SubPathBetweenFn PATH X Y) gives a unique subpath SUB of PATH that is between X and Y.  This function should not be used without the context of a #$PathSystem because only with the reference to a path system can we be certain about the existence of such a subpath (e.g., Austin and Texas are different points on I-35, but there is no subpath of I35 that is between Austin and Texas).  To put this in another way, let SYS be any path system.  If PATH is a path in SYS and X and Y are different points in SYS and are also points on PATH, (#$SubPathBetweenFn PATH X Y) is the only subpath (in SYS) of PATH that is between X and Y.  See #$pathInSystem.  Note that this function is not defined on the cartesian product #$Path-Simple x #$Thing x #$Thing, but on a proper subset of it.")))

(defrelation sub-paths
  :arity 2
  :is-primitive (:and sub-paths--generic cotemporal)
  :domain Path--Simple
  :range Path--Simple
  :annotations (Reflexive-Binary-Predicate
                Cotemporal-Objects-Slot
                Anti-Symmetric-Binary-Predicate
                Transitive-Binary-Predicate
                (documentation "Provided PATH1 and PATH2 are instances of #$Path-Simple, (#$subPaths PATH1 PATH2) means that PATH2 is a sub-path of PATH1, and that any 'point' on PATH2 must also be on PATH1.")))

(defrelation sub-paths--generic
  :arity 2
  :is-primitive (:and cotemporal physical-parts)
  :domain Path--Generic
  :range Path--Generic
  :annotations (Reflexive-Binary-Predicate
                Transitive-Binary-Predicate
                Anti-Symmetric-Binary-Predicate
                Physical-Part-Predicate
                Spatial-Predicate
                Cotemporal-Objects-Slot
                (documentation "If PATH1 and PATH2 are instances of #$Path-Generic, which includes #$Path-Simple and #$Path-Cyclic, then (#$subPaths-Generic PATH1 PATH2) means that PATH2 is a sub-path of PATH1, and that any object #$onPath PATH2 must also be #$onPath PATH1.  See also #$subPaths which does not apply to #$Path-Cyclic, just to #$Path-Simple.")))

(defrelation sub-path-systems
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Reflexive-Binary-Predicate
                Transitive-Binary-Predicate
                Anti-Symmetric-Binary-Predicate
                (documentation "(#$subPathSystems SYS SUBSYS) means that the path system SUBSYS is a subsystem of the path system SYS.  Technically, this means the following: (i) Every point in SUBSYS is a point in SYS, (ii) every node in SUBSYS is a node in SYS, (iii) every link in SUBSYS is a link in SYS, and (iv) every loop in SUBSYS is a loop in SYS.  Some consequences of these conditions are as follows.  (a) Every point in SUBSYS that is a node in SYS is a node in SUBSYS.  (b) For any nodes X and Y in SUBSYS and each link LINK in SUBSYS, LINK is between X and Y in SYS iff it is between X and Y in SUBSYS.  (c) For each point X in SYS that is not a node in SYS, if X is on a link in SYS that is not in SUBSYS, X is not in SUBSYS.  (d) Isolated points and deadends in SUBSYS must be nodes in SYS.  (e) For each loop LOOP in SUBSYS, the only node in SYS on LOOP must be a node in SUBSYS.  (f) If SYS is a #$SimpleGraph-GraphTheoretic (or a #$MultiGraph), all subsystems of SYS are #$SimpleGraph-GraphTheoretics (or #$MultiGraphs).  Predicates concerning particular kinds of subsystems of path systems, i.e., predicates that take #$subPathSystems as #$genlPreds, include #$linkClosedSubSystems, #$pointClosedSubSystems, #$maximalConnectedSubSystems, #$reductionOfPathSystems, etc.")))

(defrelation sub-series
  :arity 2
  :domain Series
  :range Series
  :annotations (Binary-Predicate
                (documentation "(#$subSeries SER1 SER2) means that SER2 is a sub-series of SER1.  This means that all the members of SER2 are members of SER1, that SER1 and SER2 share the same ordering principle, and that, if the first member of SER2 is the Mth member of SER1, the Nth member of SER2 is the (N + M - 1)th member of SER1.  So a subseries is an uninterrupted ''slice'' of the whole.")))

(defrelation subset-of
  :arity 2
  :domain Set-Or-Collection
  :range Set-Or-Collection
  :annotations (Reflexive-Binary-Predicate
                Transitive-Binary-Predicate
                (documentation "(#$subsetOf SUB SUPER) means that every element of the mathematical set or collection SUB is an element of the mathematical set or collection SUPER.")))

(defrelation subsumed-by-interval-type
  :arity 2
  :domain Temporal-Thing
  :range Temporal-Object-Type
  :annotations (Binary-Predicate
                Intensional-Representation-Predicate
                (documentation "(#$subsumedByIntervalType ?X ?Y) means that a time interval of type ?Y (i.e., something which #$isa ?Y) #$temporallySubsumes ?X.  For example, (#$subsumedByIntervalType FredsBirth #$Wednesday) means that Fred was born on a Wednesday.  As another example, Cyc contains an axiom which says, in a typical modern service-providing context, that each instance of #$HairCuttingEvent is #$subsumedByIntervalType #$DaytimeWorkingHours -- i.e., it is true as a default that the typical professional haircut is given during normal daytime working hours.")))

(defrelation subsumes-interval-type
  :arity 2
  :is-primitive intersects-interval-type
  :domain Temporal-Object-Type
  :range Temporal-Object-Type
  :annotations (Transitive-Binary-Predicate
                Reflexive-Binary-Predicate
                Anti-Symmetric-Binary-Predicate
                Temporal-Relation
                (documentation "(#$subsumesIntervalType X Y) indicates that every instance of X #$temporallySubsumes some instance of Y.  For example, one of Cyc's axioms states that in the #$NorthernHemisphereMt (the context in which the location is assumed to be somewhere north of the equator) it is true that (#$subsumesIntervalType #$CalendarWinter #$January).  That is, in that micro-theory, each Winter contains a January.  In the base KB -- that is, independent of context -- it is true that (#$subsumesIntervalType #$CalendarQuarter #$CalendarMonth), which means that every calendar quarter contains at least one entire calendar month.")))

(defrelation successful-for-agents
  :arity 2
  :is-primitive performed-by
  :domain Purposeful-Action
  :range Agent
  :annotations (Actor-Slot
                (documentation "The predicate #$successfulForAgents is used to indicate that a particular agent achieves its goal in a particular action.  (#$successfulForAgents ENDEAVOR AGT) means that the #$Agent AGT is successful in accomplishing the #$PurposefulAction ENDEAVOR.  This means that each of the purposes AGT had in doing ENDEAVOR has come true.  See also #$purposeInEvent.")))

(defrelation succession--rst
  :arity 2
  :domain Linguistic-Object
  :range Linguistic-Object
  :annotations (Rst-Relation
                Transitive-Binary-Predicate
                (documentation "The discourse relation that holds between two segments of text when they describe events which are related to one another by succession.")))

(defrelation successor-fn
  :arity 2
  :domain Cyc_Integer
  :range Cyc_Integer
  :annotations (Non-Predicate-Function
                (documentation "(#$SuccessorFn ?N) denotes the next #$Integer after ?N.  This is somewhat broader than the ordinary ''successor'' function on natural numbers, since #$SuccessorFn applies to all #$Integers.")))

(defrelation super-taxons
  :arity 2
  :is-primitive genls
  :domain Biological-Taxon
  :range Biological-Taxon
  :annotations (Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Non-Physical-Part-Predicate
                (documentation "The predicate #$superTaxons is used to relate elements of #$BiologicalTaxon.  (#$superTaxons TAXON  GEN-TAXON) means that GEN-TAXON is a #$BiologicalTaxon above (i.e., more general and inclusive than) the more specific #$BiologicalTaxon TAXON.  Every instance of TAXON must therefore also be an instance of GEN-TAXON; the same holds for the #$taxonMembers relation.  Example: (#$superTaxons #$DomesticCat #$FelisGenus).  See also #$taxonMembers.")))

(defrelation suppliers
  :arity 2
  :is-primitive (:and does-business-with cotemporal)
  :domain Organization
  :range Agent
  :annotations (Cotemporal-Objects-Slot
                (documentation "The predicate #$suppliers represents a relationship between an organization and an agent.  (#$suppliers ORG AGT) means that the #$Agent AGT supplies some goods or services to the #$Organization ORG on an ongoing basis, usually for payment.")))

(defrelation supported-by
  :arity 2
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Irreflexive-Binary-Predicate
                Transitive-Binary-Predicate
                (documentation "(#$supportedBy OBJECT SUPPORTER) means that SUPPORTER is at least partially responsible for OBJECT maintaining its current position.  If OBJECT were not #$supportedBy this supporter, it would fall.")))

(defrelation surface-attribute-of-surf
  :arity 2
  :domain Surface--Physical
  :range Attribute-Value
  :annotations (Binary-Predicate
                (documentation "(surfaceAttributeOfSurf SURF SURFATT) means that the particular individual #$Surface-Physical SURF has the #$SurfaceAttribute SURFATT over most or all of its area.  It may have more than one such surface attribute.")))

(defrelation surface-parts
  :arity 2
  :is-primitive external-parts
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Transitive-Binary-Predicate
                Anti-Symmetric-Binary-Predicate
                Physical-Part-Predicate
                (documentation "(#$surfaceParts BIG LITTLE) means that LITTLE is a physical part of a surface of BIG, or that LITTLE is a physical part of BIG itself and a surface of LITTLE is part of a surface of BIG.  Positive exemplars: the skin of an orange is a #$surfaceParts of the orange, #$Texas-State is a #$surfaceParts of #$UnitedStatesOfAmerica, a window of a house is a #$surfaceParts of that house.  Borderline positive exemplars: the inside surface of a coffee cup is one of the #$surfaceParts of the cup; the inside surface of a beer-can in some contexts is a #surfaceParts of the can.  Negative exemplars:  the brain is not a #$surfaceParts of a person.")))

(defrelation surrounds-completely
  :arity 2
  :is-primitive surrounds-horizontally
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Transitive-Binary-Predicate
                Spatial-Predicate
                Asymmetric-Binary-Predicate
                (documentation "(#$surroundsCompletely OUTSIDE INSIDE) means that OUTSIDE completely surrounds INSIDE.  In other words, all rays with origins at INSIDE pass through OUTSIDE by default (with some exceptions).  OUTSIDE is not a part of INSIDE (or vice versa).  Examples: a candy bar inside its wrapper; the body of a pregnant mammalian female containing a foetus; a fish in water.")))

(defrelation surrounds-horizontally
  :arity 2
  :is-primitive cotemporal
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Spatial-Predicate
                Asymmetric-Binary-Predicate
                Cotemporal-Objects-Slot
                (documentation "(#$surroundsHorizontally OUTSIDE INSIDE) means that OUTSIDE surrounds a horizontal slice of INSIDE.  That is, there is some horizontal cross section of INSIDE such that all rays drawn horizontally from points in that cross section pass through OUTSIDE, and along each of those rays there are points which are in OUTSIDE and beyond all points of INSIDE.  Thus, (#$surroundsHorizontally OUTSIDE INSIDE) is NOT true if INSIDE shares a boundary with OUTSIDE; e.g., Texas is not surrounded by the USA.  Positive cases: water surrounds islands; foothills may surround a mountain range.  See also #$surroundsCompletely.")))

(defrelation suspended-in
  :arity 2
  :is-primitive in--immersed-fully
  :domain Partially-Tangible
  :range Fluid-Tangible-Thing
  :annotations (Spatial-Predicate
                Asymmetric-Binary-Predicate
                Anti-Transitive-Binary-Predicate
                (documentation "(#$suspendedIn OBJ FLUID) means that OBJ is fully immersed in FLUID, and OBJ is suspended in FLUID by the kind of force that supports any suspension particle.  Note that while #$suspendedIn correctly describes the condition of a #$suspendedPart in its #$suspendingFluid (e.g., a dirt particle suspended in water), #$suspendedIn can also be used more broadly (e.g., a hot air balloon is #$suspendedIn air).  See also #$Suspension.")))

(defrelation suspended-part
  :arity 2
  :is-primitive (:and constituents cotemporal)
  :domain Suspension
  :range Particle
  :annotations (Composition-Predicate
                Cotemporal-Objects-Slot
                (documentation "The predicate #$suspendedPart indicates an individual particle of #$TangibleThing which is suspended in a particular instance of #$Suspension.  Thus, (#$suspendedPart SUS PART) means that PART is a #$Particle suspended in the #$suspendingFluid of the #$Suspension SUS.  Examples: in an instance of #$CloudlikeObject, the (typical) #$suspendedPart is a #$Particle of water; in muddy water, the (typical) #$suspendedPart is a #$Particle of soil.")))

(defrelation suspending-fluid
  :arity 2
  :is-primitive (:and cotemporal main-constituent)
  :domain Suspension
  :range Partially-Tangible
  :annotations (Composition-Predicate
                Asymmetric-Binary-Predicate
                Cotemporal-Objects-Slot
                Anti-Transitive-Binary-Predicate
                (documentation "The predicate #$suspendingFluid indicates the particular fluid in which particles are suspended in a particular instance of #$Suspension.  Thus, (#$suspendingFluid SUS FLU) means that FLU is among the #$constituents of the #$Suspension SUS, FLU is a fluid (i.e., liquid OR gas), and FLU is the fluid constituent which suspends the particles in SUS.  For example, in an instance of #$CloudlikeObject, the #$suspendingFluid is the portion of #$Air that is surrounding and supporting the droplets of water vapour in the cloud.  In muddy water, the #$suspendingFluid is that instance of #$Water which is supporting the particles of soil.")))

(defrelation symbolizes
  :arity 2
  :domain Symbolic-Object
  :range Cyc_Thing
  :annotations (Asymmetric-Binary-Predicate
                (documentation "(#$symbolizes SYMBOL OBJ) means that the #$SymbolicObject SYMBOL represents the thing OBJ for some abstract agent.  E.g., the US flag #$symbolizes the USA.  It is usually true that (#$symbolizes x y) implies (#$connotes x y #$High).
Note that the 'abstract agent' may be context-specific -- a given object may represent one thing in one culture, and nothing at all or a different thing in another culture.")))

(defrelation symmetric-part-types
  :arity 2
  :domain (:and Existing-Object-Type
                (:filled-by superrelations Partially-Tangible))
  :range (:and Existing-Object-Type
               (:filled-by superrelations Partially-Tangible))
  :annotations (Binary-Predicate
                (documentation "(#$symmetricPartTypes ?BIG ?SMALL) means that every instance of ?BIG has exactly two, symmetrically positioned, instance of ?SMALL as parts.")))

(defrelation synonymous-external-concept
  :arity 3
  :domains (Cyc_Thing Indexed-Info-Source)
  :range Character-String
  :annotations (Ternary-Predicate
                (documentation "(#$synonymousExternalConcept ?TERM ?SOURCE ?STRING) means that the Cyc
concept ?TERM is synonymous with the concept named by ?STRING in the
external data source ?SOURCE.")))

(defrelation target
  :arity 2
  :is-primitive actors
  :domain Generalized-Transfer
  :range Partially-Tangible
  :annotations (Actor-Slot
                (documentation "(#$target TRANS PLACE) means that the #$performedBy (or #$directingAgent) of the event TRANS intends that the #$transferredThing end up at PLACE.")))

(defrelation tastes
  :arity 2
  :is-primitive perceives
  :domain Perceptual-Agent
  :range Temporal-Thing
  :annotations (Perceiving-Slot
                (documentation "(#$tastes AGT OBJ) means that AGT perceives the tastes of OBJ.  We can taste objects, such as lollipops, or events, such as the 'finish' of a wine, as long as they have some tangible aspect.")))

(defrelation temperature-of-object
  :arity 2
  :domain Partially-Tangible
  :range Temperature
  :annotations (Interval-Based-Quantity-Slot
                Physical-Attribute-Description-Slot
                (documentation "(#$temperatureOfObject OBJECT TEMPERATURE) means that the individual OBJECT has the #$Temperature TEMPERATURE. Note that OBJECT may be a piece of stuff -- for example, a particular spot in the ocean.")))

(defrelation temporal-bounds-contain
  :arity 2
  :is-primitive temporal-bounds-intersect
  :domain Temporal-Thing
  :range Temporal-Thing
  :annotations (Irreflexive-Binary-Predicate
                Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Complex-Temporal-Relation
                (documentation "(#$temporalBoundsContain LONGER SHORTER) means that LONGER strictly contains SHORTER.  There is a positive non-zero time after LONGER starts before SHORTER starts, and there is a positive non-zero time after SHORTER ends before LONGER ends.   That is, the #$startingPoint of LONGER is a finite amount of time earlier than the #$startingPoint of SHORTER, and the #$endingPoint of LONGER is a finite amount of time later than the #$endingPoint of SHORTER.   Naturally, #$temporalBoundsContain is a stronger relation than #$temporalBoundsIntersect.  If LONGER is #$temporallyContinuous, then (#$temporalBoundsContain LONGER SHORTER) further implies (#$temporallySubsumes LONGER SHORTER).  Note:  This Cyc temporal relation is equivalent to what James Allen independently dubbed the CONTAINS relation.")))

(defrelation temporal-bounds-identical
  :arity 2
  :is-primitive (:and temporally-cooriginating temporally-coterminal)
  :domain Temporal-Thing
  :range Temporal-Thing
  :annotations (Transitive-Binary-Predicate
                Complex-Temporal-Relation
                Symmetric-Binary-Predicate
                Reflexive-Binary-Predicate
                (documentation "(#$temporalBoundsIdentical ?X ?Y) means that ?X and ?Y are both #$temporallyCooriginating and #$temporallyCoterminal.  That is, ?X and ?Y have the same #$startingPoints and also have the same #$endingPoints.  Note that if ?X and ?Y are continuous temporal objects, such as a pair of ashtrays, then this means that they must in fact be completely #$cotemporal.")))

(defrelation temporal-bounds-intersect
  :arity 2
  :is-primitive ends-after-starting-of
  :domain Temporal-Thing
  :range Temporal-Thing
  :annotations (Reflexive-Binary-Predicate
                Symmetric-Binary-Predicate
                Complex-Temporal-Relation
                (documentation "(#$temporalBoundsIntersect ?X ?Y) means that the closed solid time interval between from the start of ?X to the end of ?X, inclusive, intersects the solid time interval from the start of ?Y and the end of ?Y, inclusive.  Clearly, if ?X and ?Y are continuous events, then the stronger assertion (#$temporallyIntersects ?X ?Y) must also hold.  But if either is a discontinuous event, it is possible to have a situation where their bounds intersect but where there is no time point in common.  For example, the discontinuous event of `Fred sleeping this week' could intersects the bounds of `Fred driving this week' even though the two events share no time points (we hope).")))

(defproperty temporally-continuous :arity 1 :domain Temporal-Thing
 :annotations
 (Unary-Predicate
  (documentation "If (temporallyContinuous TEMP-OBJ), then TEMP-OBJ occupies one continous chunk of time.  There are no time intervals between the start and end of TEMP-OBJ during which TEMP-OBJ is not occurring/existing.")))

(defrelation temporally-cooriginating
  :arity 2
  :is-primitive temporally-intersects
  :domain Temporal-Thing
  :range Temporal-Thing
  :annotations (Transitive-Binary-Predicate
                Reflexive-Binary-Predicate
                Symmetric-Binary-Predicate
                Complex-Temporal-Relation
                (documentation "(#$temporallyCooriginating ?X ?Y) means (#$simultaneousWith (#$StartFn ?X) (#$StartFn ?Y)).  That is, the #$startingPoint of ?X is the same as the #$startingPoint of ?Y.  This implies that ?X and ?Y overlap, in at least one point (namely, their #$startingPoints are the same.)")))

(defrelation temporally-coterminal
  :arity 2
  :is-primitive temporally-intersects
  :domain Temporal-Thing
  :range Temporal-Thing
  :annotations (Reflexive-Binary-Predicate
                Symmetric-Binary-Predicate
                Complex-Temporal-Relation
                Transitive-Binary-Predicate
                (documentation "(#$temporallyCoterminal ?X ?Y) means (#$simultaneousWith (#$EndFn ?X) (#$EndFn ?Y)).  That is, the #$endingPoint of ?X is the same as the #$endingPoint of ?Y.  This implies that ?X and ?Y overlap, in at least one point (namely, their #$endingPoints are the same.)")))

(defrelation temporally-disjoint
  :arity 2
  :domain Temporal-Thing
  :range Temporal-Thing
  :annotations (Complex-Temporal-Relation
                Symmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(temporallyDisjoint ?X ?Y) means that there are no time points in common between ?X and ?Y.  If you view each of them as a set of #$TimePoints, the two sets are disjoint.  For example, consider the discontinuous events `Fred sleeping this week' and `Fred driving this week'. These are presumably #$temporallyDisjoint even if they `interlock' during the week.")))

(defrelation temporally-finished-by
  :arity 2
  :is-primitive temporally-coterminal
  :domain Temporal-Thing
  :range Temporal-Thing
  :annotations (Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Transitive-Binary-Predicate
                Complex-Temporal-Relation
                (documentation "(#$temporallyFinishedBy PERIOD FINISH) means that PERIOD and FINISH are #$temporallyCoterminal, and that FINISH starts within the bounds of PERIOD.   That is, the #$endingPoint of PERIOD and FINISH are the same element of #$TimePoint, and the #$startingPoint of FINISH is no earlier than the #$startingPoint of PERIOD.



Note:  This Cyc temporal relation is equivalent to what James Allen dubbed the FINISHEDBY relation.  We liked his name better than the one we had been using, and so we renamed this predicate accordingly.")))

(defrelation temporally-intersects
  :arity 2
  :is-primitive temporal-bounds-intersect
  :domain Temporal-Thing
  :range Temporal-Thing
  :annotations (Reflexive-Binary-Predicate
                Symmetric-Binary-Predicate
                Complex-Temporal-Relation
                (documentation "(#$temporallyIntersects ?X ?Y) means that there is at least one #$TimePoint which ?X #$temporallySubsumes and ?Y #$temporallySubsumes.  If you think of ?X and ?Y as sets of #$TimePoints, then those two sets intersect.")))

(defrelation temporally-intrinsic-arg
  :arity 2
  :domain Predicate
  :range Positive-Integer
  :annotations (Binary-Predicate
                (documentation "(#$temporallyIntrinsicArg PRED N) means that PRED expresses a property that is temporally intrinsic for its argument position N. That means, if a formula using PRED







is true for some object OBJ (in the Nth argument position), we can assume the truth of every similar formula in which any temporal part of OBJ is substituted in for OBJ. For







example, since (#$temporallyIntrinsicArg #$massOfObject 1) is true, if we know (#$massOfObject `Rock37' (#$Gram 37)), we can expect that any temporal part of `Rock37', such as







`Rock37Today', will also have a mass of 37 grams. An example of a property which is not temporally intrinsic would be `average speed'. The average speed of a car







on a drive from Austin to Dallas might be 50 mph, but during particular sub-intervals of that drive the average speed could vary from 0 to 75 mph.  The collection #$CotemporalPredicate is a class of relations which 







are not temporally intrinsic but might at first seem to be, e.g., #$physicalParts. In (#$physicalParts `Joe' `JoesHead'), it is not the case







that every temporal part of `Joe' (such as `JoeToday') has `JoesHead' as a physical part.  Rather, `JoeToday' would have `JoesHeadToday' among its #$physicalParts. With #$physicalParts,







as with all other elements of #$CotemporalPredicate, every time-slice of the first argument is related to a cotemporal time-slice of the second argument, but that is not covered by







#$temporallyIntrinsicArg and its associated axioms.")))

(defrelation temporally-started-by
  :arity 2
  :is-primitive temporally-cooriginating
  :domain Temporal-Thing
  :range Temporal-Thing
  :annotations (Asymmetric-Binary-Predicate
                Transitive-Binary-Predicate
                Complex-Temporal-Relation
                Irreflexive-Binary-Predicate
                (documentation "(#$temporallyStartedBy PERIOD START) means that PERIOD and START are #$temporallyCooriginating and that START ends within the bounds of PERIOD.   That is, the #$startingPoint of PERIOD and START are the same #$TimePoint, and the #$endingPoint of START is no later than the #$endingPoint of PERIOD.







Note:  This Cyc temporal relation is equivalent to what James Allen dubbed the STARTEDBY relation.  We liked his name better than the one we had been using, and so we renamed this predicate accordingly.")))

(defrelation temporally-subsumes
  :arity 2
  :is-primitive temporally-intersects
  :domain Temporal-Thing
  :range Temporal-Thing
  :annotations (Reflexive-Binary-Predicate
                Transitive-Binary-Predicate
                Complex-Temporal-Relation
                (documentation "(#$temporallySubsumes ?X ?Y) means that all time points of ?Y are contained in ?X.   This implies that ?Y doesn't start before ?X, and doesn't end after ?X.  And if there's some time point or interval that ?X isn't happening, then neither is ?Y.  
Note:  This relation is weaker than #$cotemporal, which can be thought of as requiring that ?X and ?Y #$temporallySubsumes each other.   
Note: This relation is a strictly temporal relationship between ?X and ?Y; it is weaker than #$subEvents, which can be thought of as requiring that ?X not only #$temporallySubsumes ?Y but also that ?Y is a `part' of ?X.")))

(defrelation tensile-strength-of-substance
  :arity 2
  :domain Partially-Tangible
  :range Tensile-Strength
  :annotations (Interval-Based-Quantity-Slot
                Tangible-Substance-Predicate
                (documentation "(#$tensileStrengthOfSubstance OBJ DEGREE) indicates the relative force needed to deform the tangible OBJ.  A higher DEGREE of #$TensileStrength indicates more force is required to deform the object.")))

(defrelation term-of-unit
  :arity 2
  :domain Reifiable-Term
  :range Cyc-System-List
  :annotations (Default-Monotonic-Predicate
                Inference-Related-Bookkeeping-Predicate
                Binary-Predicate
                (documentation "#$termOfUnit is an inference-related Cyc predicate which appears in system-generated assertions; #$termOfUnit represents a mapping between a non-atomic term (NAT) and a Cyc constant that was reified by the system especially for that NAT.  Assertions with #$termOfUnit are created by the system when a certain kind of non-atomic term (NAT) first appears in a Cyc formula; such a NAT consists of a Cyc function that is an element of #$ReifiableFunction, together with the correct number and type of arguments.  When such a NAT is first used in a formula, the Cyc system automatically creates a Cyc-constant data-structure to reify the NAT.  A name is automatically assigned to the new constant (i.e., the data-structure) by the Cyc system; currently (1997), the system is using for most of those constant names a string which is identical to the NAT.  One should not be misled by that into thinking that #$termOfUnit is a specialization of #$equals. 

The predicate #$termOfUnit maps between the system-generated data-structure and the original non-atomic term.  (#$termOfUnit NAT-CONSTANT NAT-EXPRESSION) tells us that the constant data-structure NAT-CONSTANT was created to reify the value of the non-atomic term NAT-EXPRESSION.  From now on, NAT-EXPRESSION will refer to the constant NAT-CONSTANT.

Examples of non-atomic terms (NATs) include: (#$Giga #$DollarsPerYear), (#$RepairingFn #$Automobile), and (#$TheScriptFn #$WashingClothesInAMachine). See also #$NonPredicateFunction, #$ReifiableTerm.

Note: #$termOfUnit assertions are entered in the #$BaseKB because the mapping between a NAT and the constant that was reified for it holds universally.  One should view #$termOfUnit assertions as bits of bookkeeping knowledge which are very rarely, if ever, entered into the KB by hand.")))

(defrelation terrain-attributes
  :arity 2
  :is-primitive has-attributes
  :domain Geographical-Region
  :range Terrain-Attribute
  :annotations (Binary-Predicate
                (documentation "The predicate #$terrainAttributes is used to describe the type of terrain in a particular geographical region. (#$terrainAttributes REGION ATTRIB) means that #$GeographicalRegion REGION has the #$TerrainAttribute ATTRIB.  For example, the #$Matterhorn-Mount has #$terrainAttributes, #$RuggedTerrain. ")))

(defrelation territories-controlled
  :arity 2
  :domain Geopolitical-Entity
  :range (:and Agent Geographical-Region)
  :annotations (Intangible-Object-Predicate
                Anti-Symmetric-Binary-Predicate
                (documentation "(#$territoriesControlled ?REG1 ?REG2) means the ?REG2 is under the political control of ?REG1.   This refers to actaul practical political control, not mere legal or unenforced territorial claims.")))

(defrelation the-covering
  :annotations (Reifiable-Function
                Variable-Arity-Relation
                (documentation "This is a special variable-arity #$ReifiableFunction that allows one to specify a set of collections or mathematical sets which cover a given set or collection, in order to conveniently state assertions about covering (see #$covering).  For example, the fact that the collection #$CreationOrDestructionEvent is covered by the collections #$CreationEvent and #$DestructionEvent can be expressed as (#$covering #$CreationOrDestructionEvent (#$TheCovering #$CreationEvent #$DestructionEvent)).")))

(defrelation the-partition
  :annotations (Reifiable-Function
                Variable-Arity-Relation
                (documentation "This is a special variable-arity #$ReifiableFunction that allows one to specify a set of collections or mathematical sets which partition a given set or collection, in order to conveniently state assertions about partitioning (see #$partitionedInto).  For example, the fact that the collection #$Whale is partitioned into the collections #$BaleenWhale and #$ToothedWhale can be expressed as (#$partitionedInto #$Whale (#$ThePartition #$BaleenWhale #$ToothedWhale)).")))

(defrelation there-exist-at-least
  :arity 3
  :domains (Positive-Integer Cyc-El-Variable)
  :range Cyc-Formula
  :annotations (Relationship
                Quantifier
                (documentation "The predicate #$thereExistAtLeast is a specialized form of #$thereExists (q.v.).  (#$thereExistAtLeast 5 X FORM) means that there are at least five distinct objects in the Cyc universe which, when substituted for the #$CycELVariable X in the #$CycFormula FORM, make FORM true.  See #$thereExists for more information about existential quantification.")))

(defrelation there-exist-at-most
  :arity 3
  :domains (Positive-Integer Cyc-El-Variable)
  :range Cyc-Formula
  :annotations (Relationship
                Quantifier
                (documentation "The predicate #$thereExistAtMost is a specialized form of #$thereExists (q.v.).  (#$thereExistAtMost 5 X FORM) means that there are no more than five distinct objects in the (relevant)  universe of discourse which, when substituted for the #$CycELVariable X in the #$CycFormula FORM, make FORM true.  See #$thereExists for more information about existential quantification.")))

(defrelation there-exist-exactly
  :arity 3
  :domains (Positive-Integer Cyc-El-Variable)
  :range Cyc-Formula
  :annotations (Relationship
                Quantifier
                (documentation "The predicate #$thereExistExactly is a specialized form of #$thereExists (q.v.).  (#$thereExistExactly 5 X FORM) means that there are no more and no less than five distinct objects in the (relevant) universe of discourse which, when substituted for the #$CycELVariable X in the #$CycFormula FORM, make FORM true.  See #$thereExists for more information about existential quantification.")))

(defrelation there-exists
  :arity 2
  :domain Cyc-El-Variable
  :range Cyc-Formula
  :annotations (Relationship
                Quantifier
                (documentation "The predicate #$thereExists is Cyc's version of the existential quantifier of predicate calculus (i.e., the operator symbolized in one common notation by a backwards 'E').  As its two arguments, #$thereExists  takes a variable (which is an element of #$CycELVariable) and an element of #$CycFormula, respectively.  (#$thereExists VAR FORM) means that FORM is true in at least one case (and possibly more) in which all occurrences of the variable VAR in FORM are replaced by an object in the Cyc universe.  For example, to say that every person has a mother, we could assert: (#$forAll ?X (#$implies (#$isa ?X #$Person) (#$thereExists ?Y (#$mother ?X ?Y)))).   



[Developer-level footnote:  There are many `flavors' of quantification `on the market' these days; here is how the Cyc system currently handles axioms that involve #$thereExists:



When processing an FI-ASK about whether (#$thereExists VAR FORM) is true or not, Cyc determines extensionally whether or not any known VAR (anything in the knowledge base) satisfies FORM (makes it true.)



When processing an FI-PROVE about whether (#$thereExists VAR FORM) is true or not, Cyc tries to construct an intensional proof (at least at a default-true level) that there must exist some value of VAR --- which may or may not already be known in the KB -- for which FORM must be true.



When processing an FI-ASSERT in which a user or program tells Cyc that (#$thereExists VAR FORM) is true, Cyc records the assertion intensionally so that it can later serve as part of an intensional proof, when some future FI-PROVE request is processed.  It does this by creating a new #$SkolemFunction (q.v.).  



When modus ponens is used with a rule of the form (#$implies ANTECEDENT (#$thereExists VAR FORM)), and the formula ANTECEDENT is true, then Cyc will generate a new term for VAR, add that to its language, and assert that the new term satisfies FORM.]")))

(defrelation thermal-conductivity-of-object
  :arity 2
  :domain Partially-Tangible
  :range Thermal-Conductivity
  :annotations (Physical-Attribute-Description-Slot
                Tangible-Object-Predicate
                Interval-Based-Quantity-Slot
                (documentation "(#$thermalConductivityOfObject OBJ DEGREE) means that the tangible object OBJ has the #$ThermalConductivity attribute DEGREE.  Objects with higher values of DEGREE conduct heat faster and better (i.e., with less heat loss) than those with a lower #$ThermalConductivity.")))

(defrelation the-set
  :annotations (Non-Predicate-Function
                Variable-Arity-Relation
                Commutative-Relation
                (documentation "(#$TheSet E1 E2 ... En) denotes the #$Set-Mathematical consisting of the elements E1 through En.  #$TheSet is a variable arity relation, taking one or more arguments.  All the arguments must be ground terms; variables are not allowed.")))

(defrelation three-way-junction-in-system
  :arity 2
  :is-primitive junction-in-system
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Asymmetric-Binary-Predicate
                (documentation "(#$threeWayJunctionInSystem JUNCT SYS) means that JUNCT is a 3-way junction in the specified #$PathSystem SYS.  Formally, a 3-way junction in SYS is any point (actually, any node) X in SYS such that either there are exactly 3 links and no loops in SYS that X is on, or there are exactly 1 link and 1 loop in SYS that X is on.  See #$junctionInSystem.  When the junction is is simply a customary junction not based on a specified #$PathSystem, use #$ThreeWayJunctionOfPaths.")))

(defrelation time-interval-from-fn
  :arity 3
  :domains (Temporal-Thing Temporal-Thing)
  :range Time-Interval
  :annotations (Reifiable-Function
                Individual-Denoting-Function
                (documentation "(#$TimeIntervalFromFn ?X ?Y) returns the time interval between ?X and ?Y.  The #$startingPoint of that interval is the #$endingPoint of ?X, and the #$endingPoint of that interval is the #$startingPoint of ?Y.  It must be true that ?Y starts after ?X ends; i.e., (#$startsAfterEndingOf ?Y ?X).")))

(defrelation times-fn
  :annotations (Variable-Arity-Relation
                Commutative-Relation
                Function-From-Quantities-To-Quantities
                (documentation "#$TimesFn is the multiplication operator, a mathematical function.  #$TimesFn takes a variable number of quantities as arguments, and it yields a new quantity which is the result of multiplying the arguments together.  (#$TimesFn 2 3 4) returns 24.  See also #$VariableArityRelation.")))

(defrelation time-slices
  :arity 2
  :is-primitive (:and parts temporally-subsumes)
  :domain Temporal-Thing
  :range Temporal-Thing
  :annotations (Anti-Symmetric-Binary-Predicate
                Reflexive-Binary-Predicate
                Transitive-Binary-Predicate
                (documentation "(#$timeSlices WHOLE PART) means that PART is one of the temporal decompositions of WHOLE.  PART is part of WHOLE and is thus temporally included in WHOLE (see #$temporallySubsumes).  There is no other part of WHOLE that happens at the same time but is not included in PART.  Unlike #$subEvents, which can divide up an #$Event both in space and time, #$timeSlices divides up its first argument in time only.  So #$timeSlices is more specialized than #$subEvents.  On the other hand, it has broader application; #$timeSlices makes sense for any #$TemporalThing, not just #$Events; e.g., one can talk about year-long #$timeSlices of a rock.")))

(defrelation times-per-day
  :annotations (Unit-Of-Frequency
                Unit-Of-Measure-No-Prefix
                (documentation "Times per day -- unit of frequency")))

(defrelation times-per-minute
  :annotations (Unit-Of-Frequency
                Unit-Of-Measure-No-Prefix
                (documentation "Times per minute -- unit of frequency")))

(defrelation times-per-second
  :annotations (Unit-Of-Measure-No-Prefix
                Unit-Of-Frequency
                (documentation "A Cyc function, #$TimesPerSecond represents a #$UnitOfFrequency.  (#$TimesPerSecond NUMBER) denotes the frequency NUMBER times per second.  Note that this is more general than a representation of cycles per second, for which the appropriate #$UnitOfFrequency is #$Hertz.")))

(defrelation times-per-week
  :annotations (Unit-Of-Frequency
                Unit-Of-Measure-No-Prefix
                (documentation "Times per week -- unit of frequency")))

(defrelation times-per-year
  :annotations (Unit-Of-Measure-No-Prefix
                Unit-Of-Frequency
                (documentation "A Cyc function, #$TimesPerYear is a #$UnitOfFrequency.  (#$TimesPerYear NUMBER) denotes a frequency NUMBER times per year.")))

(defrelation title-of-person--string
  :arity 2
  :domain Person
  :range Character-String
  :annotations (Binary-Predicate
                (documentation "(#$titleOfPerson-String PRSN STRNG) relates the #$Person PRSN to a #$CharacterString, STRNG, which is a word for a title PRSN has.  E.g., (#$titleOfPerson-String #$Lenat ``Dr.'').  A person may have more than one title, even cotemporally.")))

(defrelation to-location
  :arity 2
  :is-primitive (:and post-actors
                      |(meaning-in-system-fn sensus--information-1997 SOURCE-DESTINATION)|)
  :domain Translocation
  :range Partially-Tangible
  :annotations (Actor-Slot
                (documentation "The predicate #$toLocation is used to indicate the ending point of a particular movement.  (#$toLocation MOVE LOC) means that LOC is where the #$objectMoving in MOVE (a #$Movement-TranslationEvent) is found when the event MOVE ends; the final location of the #$objectMoving in that event is LOC.  The #$objectMoving may or may not be #$Stationary at LOC.  If MOVE is a single-pathway translation (see #$Translation-SinglePath), then every #$objectMoving in it is found at LOC when MOVE ends.  If MOVE has multiple movers and multiple pathways (see #$Translation-MultiPath), then at least some of the #$objectMoving(s) can be found at LOC at the end of MOVE.  If MOVE is a fluid flow (see #$Translation-Flow), then at least some portion of the fluid #$objectMoving can be found at location LOC at the end of MOVE.  See also #$pathway-Complete, #$pathConnects.")))

(defrelation to-orientation
  :arity 2
  :domain Movement--Rotation
  :range Orientation-Attribute
  :annotations (Binary-Predicate
                Cyc_Role
                (documentation "This predicate indicates, for the particular rotational motion ROT, the orientation that the #$objectMoving in that event has after that motion.  (#$toOrientation ROT ORIENT) means that when ROT ends, the object that moved in ROT has the final position ORIENT, with respect to the current frame of reference.  Examples of orientations include: #$HorizontalOrientation, #$VerticalOrientation, #$UpSideDown.  See also #$fromOrientation, #$OrientationAttribute.")))

(defrelation topic-of-info-transfer
  :arity 2
  :domain Information-Transfer-Event
  :range Cyc_Thing
  :annotations (Binary-Predicate
                Cyc_Role
                (documentation "The predicate #$topicOfInfoTransfer is used to indicate what a particular communication is about.  (#$topicOfInfoTransfer TRANS TOPIC) means that TOPIC is a primary topic of the information communicated in the #$InformationTransferEvent TRANS.  For example, a result reported after an instance of #$BloodTest will contain information about the #$objectTested (viz., the blood sample); the patient's blood is thus a #$topicOfInfoTransfer of that report.")))

(defrelation to-possessor
  :arity 2
  :is-primitive post-actors
  :domain Gaining-User-Rights
  :range Agent
  :annotations (Actor-Slot
                Process-Predicate
                (documentation "This predicate identifies an #$Agent who gains some right to use an object.  (#$toPossessor GAIN AGENT) means that after the event GAIN (a #$GainingUserRights), AGENT enjoys some #$UserRightsAttribute over the #$objectOfPossessionTransfer which that agent did not have at the start of GAIN.")))

(defrelation to-state
  :arity 2
  :domain Changing-Device-State
  :range Device-State
  :annotations (Binary-Predicate
                (documentation "This predicate is used in connection with #$ChangingDeviceState, to identify the #$DeviceState a device is in immediately after the change.  (#$toState EVENT DEVICE-STATE) means that the new state of a device following the device state-changing action, EVENT, is the state DEVICE-STATE.  For example, after any X which is a #$TurningOnAnElectricalSwitch, the switch involved has (#$toState X #$DeviceOn).")))

(defrelation total-displacement
  :arity 2
  :domain Movement-Process
  :range Distance
  :annotations (Interval-Based-Quantity-Slot
                (documentation "The accumulated total displacement along the trajectory at any point in time during the duration of the moving process")))

(defrelation touches
  :arity 2
  :is-primitive near
  :domain Spatial-Thing
  :range Spatial-Thing
  :annotations (Irreflexive-Binary-Predicate
                Spatial-Predicate
                Symmetric-Binary-Predicate
                (documentation "(#$touches THIS THAT) means that THIS and THAT are in contact, directly or indirectly.  THIS #$touchesDirectly on THAT if and only if there is nothing between them.  THIS #$touches THAT indirectly if there is some very thin object or substance between them.  `Very thin' means that the distance between the surfaces of THIS and THAT is very much less than the distance between their center points.  Some examples of #$touches: an airplane touches the air around it; my feet touch the floor (even though I am wearing shoes); a blanket touches the person sleeping under it (even if there is a sheet); a hovercraft touches the water (even though a cushion of air is between them).  For cases where immediate surface contact needs to be indicated, use #$touchesDirectly (q.v.).")))

(defrelation touches-directly
  :arity 2
  :is-primitive (:and touches cotemporal)
  :domain Partially-Tangible
  :range Partially-Tangible
  :annotations (Cotemporal-Objects-Slot
                Reflexive-Binary-Predicate
                Spatial-Predicate
                Physical-Feature-Describing-Predicate
                Symmetric-Binary-Predicate
                (documentation "(#$touchesDirectly THIS THAT) means that THIS and THAT are in direct physical contact.  That is, there exists a region on both objects where the distance between their surfaces is zero.  If in doubt, use #$touches rather than #$touchesDirectly.")))

(defrelation transfer-in-sub-event
  :arity 2
  :is-primitive last-sub-events
  :domain Generalized-Transfer
  :range Transfer-In
  :annotations (Cyc_Role
                Transitive-Binary-Predicate
                Anti-Symmetric-Binary-Predicate
                (documentation "The Cyc predicate #$transferInSubEvent indicates the final stage of a particular #$GeneralizedTransfer in which the #$transferredThing reaches the destination.  For example, (#$transferInSubEvent COMM LISTENING) means that LISTENING is the final stage (see #$lastSubEvents) of the #$CommunicationAct-Single COMM.")))

(defrelation transfer-out-sub-event
  :arity 2
  :is-primitive first-sub-events
  :domain Generalized-Transfer
  :range Transfer-Out
  :annotations (Transitive-Binary-Predicate
                Anti-Symmetric-Binary-Predicate
                Reflexive-Binary-Predicate
                Cyc_Role
                (documentation "The Cyc predicate #$transferOutSubEvent indicates the initial stage of a particular #$GeneralizedTransfer in which the #$transferredThing leaves the point of origin.  For example, (#$transferOutSubEvent TRANSLOC EMISSION) means that EMISSION is the initial stage (see #$firstSubEvents) of the #$Translocation TRANSLOC.  (The #$emitter in EMISSION is a #$fromLocation of TRANSLOC.)")))

(defrelation transferred-thing
  :arity 2
  :is-primitive (:and post-actors pre-actors)
  :domain Generalized-Transfer
  :range Something-Existing
  :annotations (Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "The Cyc predicate #$transferredThing is used to identify the object whose external relationships change in some event considered generically as a `transfer'.  (#$transferredThing TRANSFER OBJ) means that OBJ is being moved, transferred, exchanged, etc., in the #$GeneralizedTransfer event TRANSFER.  In general, and if possible, it is preferable to use a more specialized instance of #$ActorSlot than #$transferredThing (e.g., #$objectMoving for physical transfer of an object; #$objectOfPossessionTransfer for an object that changes possession but not necessarily location; and so on).")))

(defrelation transformed-into
  :arity 2
  :domain Entity
  :range Entity
  :annotations (Asymmetric-Binary-Predicate
                Anti-Transitive-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "(#$transformedInto ?X ?Y) means that ?X stops existing at the instant that ?Y is created.  Furthermore, the material which made up ?X when it ceased to exist will generally make up ?Y when it is created, which in turn implies things about the location of ?Y at that moment, etc.")))

(defrelation transparency-of-object
  :arity 2
  :domain Partially-Tangible
  :range Transparency
  :annotations (Tangible-Object-Predicate
                Interval-Based-Quantity-Slot
                (documentation "(#$transparencyOfObject OBJ DEGREE) means that the tangible object OBJ has an intrinsic #$Transparency to light of the specified DEGREE.  Higher values indicate that more light will pass through the substance and with less distortion.")))

(defrelation transportees
  :arity 2
  :is-primitive object-moving
  :domain Transportation-Event
  :range Partially-Tangible
  :annotations (Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "The predicate #$transportees relates a translational motion event to the object which is transported by another one of the #$actors in that event.  (#$transportees MOVE OBJ) means that some #$transporter facilitates the conveyance of OBJ in MOVE.  For example, in a dumptruck driving event, the dirt in the back of the truck is a #$transportees.  Any humans in the truck cab (or truck bed) during the trip are also #$transportees; however, a more precise role designation for humans riding in the truck would be either #$passengers or (for the driver) #$driverActor.  See also the #$comments on #$TransportationEvent and #$transporter.")))

(defrelation transporter
  :arity 2
  :is-primitive (:and constraining-object instrument--generic object-moving)
  :domain Transportation-Event
  :range Solid-Tangible-Thing
  :annotations (Asymmetric-Binary-Predicate
                Actor-Slot
                Irreflexive-Binary-Predicate
                (documentation "This predicate relates, e.g., a sleigh-ride event to the sleigh being used to transport the people and goods.  (#$transporter MOVE OBJ) means that OBJ enables or facilitates the conveyance of what is transported (the animals, goods, people, etc. that are the #$transportees) in the #$TransportationEvent MOVE.  OBJ itself is an #$objectMoving in MOVE, so a catapult is not a #$transporter because it doesn't come with its victims.  OBJ will generally hold, support, contain, etc. the #$transportees throughout the MOVE event.  OBJ may or may not supply the motive force in the event MOVE; e.g., a child's wagon, a bicycle, a sleigh, and a paper bag can all be #$transporters.  More examples are automobiles, wheelchairs, dogsleds, and parachutes.  Carrier pigeons are transporters when performing the function for which they were bred; a horse is a #$transporter when it is being ridden but a #$providerOfMotiveForce when pulling a cart or plow or sleigh.Some cautions and refinements, however: (i) although automobiles are #$transporters, they should have the more specific role designation of #$vehicle (q.v.) because they are also #$SelfPoweredDevices.   When your car is being towed by a towtruck, and you are riding along inside as it gets towed, then in that special case the car is just a #$transporter (of you) and the towtruck is the #$vehicle of that event.  (ii) Another more specific role designation for some #$transporters -- those which are #$PhysicalDevices -- is #$deviceUsed (q.v.); e.g., the use of crutches in hobbling, ice skates in skating, and sneakers in walking.  See also the #$comment on #$TransportationEvent.  (iii) The organism locomoting in a #$LocomotionEvent may be a #$transporter if carrying something other than itself (#$CarryingWhileLocomoting qv.) .  In other cases an organism may be a #$transportees, e.g. someone riding a bike or skating.  Note that the organism must be the #$providerOfMotiveForce in these cases.")))

(defrelation transport-fn
  :arity 2
  :domain (:and Stuff-Type (:filled-by superrelations Partially-Tangible))
  :range (:and Script-Type (:filled-by superrelations Transporting-Goods))
  :annotations (Collection-Denoting-Function
                (documentation "The function (TransportFn MATERIAL) means an act of transporting materials of type MATERIAL.")))

(defrelation transport-via-fn
  :arity 2
  :domain (:and Existing-Object-Type
                (:filled-by superrelations Solid-Tangible-Thing))
  :range (:and Temporal-Stuff-Type
               (:filled-by superrelations Transportation-Event))
  :annotations (Collection-Denoting-Function
                (documentation "(#$TransportViaFn OBJ-TYPE) denotes the collection of #$TransportationEvents in each of which an instance of OBJ-TYPE is a #$transporter.  Thus (#$TransportViaFn #$RoadVehicle) is the collection of car driving, truck driving etc.. events.")))

(defrelation travel-time
  :arity 4
  :domains (Spatial-Thing
            Spatial-Thing
            (:and Script-Type
             (:filled-by superrelations Movement--Translation-Event)))
  :range Time--Quantity
  :annotations (Quaternary-Predicate
                (documentation "(#$travelTime OBJ1 OBJ2 MOVEMENT) means how long it would usually take the transported object to get from OBJ1 to OBJ2 in an event of type MOVEMENT.")))

(defrelation treatment-fn
  :arity 2
  :domain (:and Physiological-Condition-Type
                (:filled-by superrelations Ailment-Condition))
  :range (:and Script-Type
               Temporal-Stuff-Type
               (:filled-by superrelations Medical-Treatment-Event))
  :annotations (Collection-Denoting-Function
                (documentation "#$TreatmentFn is a Cyc function, and in particular a #$CollectionDenotingFunction.  (#$TreatmentFn AILMENT) denotes the subset of #$MedicalTreatmentEvent whose elements are treatments of the ailment AILMENT.  For a specific AILMENT, the collection returned as the value of (#$TreatmentFn AILMENT) may be a subset of
some more general collection of medical procedures; e.g., standard processes of (#$TreatmentFn #$Depression-PsychologicalCondition) will also
be elements of #$PsychologicalTherapy.")))

(defrelation unchanged-actors
  :arity 2
  :is-primitive (:and post-actors pre-actors)
  :domain Event
  :range Partially-Tangible
  :annotations (Irreflexive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Actor-Slot
                (documentation "(#$unchangedActors EV OBJ) means that the object OBJ remains virtually unchanged by its participation in the event EV. This means that OBJ does not appreciably move, nor does it undergo some internal change in its properties, nor is it created or destroyed in the course of EV.")))

(defrelation underground-of
  :arity 2
  :domain Place
  :range Spatial-Thing
  :annotations (Spatial-Predicate
                Asymmetric-Binary-Predicate
                (documentation "(#$undergroundOf OBJ GROUND) means that OBJ is beneath the surface of ground and has the #$locationState #$Underground.")))

(defrelation underlying-graph-fn
  :arity 3
  :domains (Cyc_Thing Multi-Graph)
  :range Cyc_Thing
  :annotations (Non-Predicate-Function
                (documentation "For each #$PathSystem SYS, (#$UnderlyingGraphFn SYS) denotes the underlying multi-graph of SYS, i.e., the unique #$MultiGraph GRAPH (or the reduction of SYS) such that (#$reductionOfPathSystems SYS GRAPH) holds.")))

(defrelation unique-part-types
  :arity 2
  :domain (:and Existing-Object-Type
                (:filled-by superrelations Partially-Tangible))
  :range (:and Existing-Object-Type
               (:filled-by superrelations Partially-Tangible))
  :annotations (Binary-Predicate
                (documentation "(#$uniquePartTypes ?BIG ?SMALL) means that every instance of ?BIG has exactly one instance of ?SMALL as a part.")))

(defrelation unit-expansions
  :arity 2
  :domain Unit-Of-Measure
  :range Cyc-System-List
  :annotations (Relationship-Predicate
                Binary-Predicate
                (documentation "The Cyc predicate #$unitExpansions is used to express the relationship between a derived unit of measurement and the units from which it is derived, e.g., miles per second from miles and seconds.  (#$unitExpansions UNIT FACTOR-LIST) means that UNIT is derived from the factors on the list UNIT-FACTOR.  UNIT-FACTOR is an instance of #$CycSystemList.  There are two kinds of items in the UNIT-FACTOR list: (1) all items except the last are themselves lists that consist of an element of #$UnitOfMeasure followed by an exponent for that unit; (2) the last element is the constant multiplier.  Some examples:





     (#$unitExpansions #$MilesPerHour (((#$Mile 1)(#$HoursDuration -1)) 1),



     (#$unitExpansions #$SpeedOfLight (((#$Mile 1)(#$SecondsDuration -1)) 186000)),



     (#$unitExpansions #$MetersPerSecondPerSecond (((#$Meter 1)(#$SecondsDuration -2)) 1).")))

(defrelation unit-multiplication-factor
  :arity 3
  :domains (Unit-Of-Measure Unit-Of-Measure)
  :range Real-Number
  :annotations (Functional-Predicate
                Ternary-Predicate
                (documentation "(#$unitMultiplicationFactor UNIT1 UNIT2 NUM) means that the conversion factor between quantities specified in units of UNIT1 and quantities specified in terms of UNIT2 is NUM.  For example, (#$unitMultiplicationFactor #$Inch #$Foot-UnitOfMeasure 12).  UNIT1 and UNIT2 must belong to the same #$InterconvertibleUnitType.  #$unitMultiplicationFactor is a simplified version of #$unitConversions which can be used when a multiplicative scaling relation exists between the two units.")))

(defrelation unity
  :annotations (Standard-Unit-Of-Measure
                Unit-Of-Measure-No-Prefix
                Dimensionless-Unit-Of-Measure
                Unit-Of-Measure
                (documentation "#$Unity is the standard unit of measure for dimensionless quantities.  Like other elements of #$UnitOfMeasure, #$Unity is a variable-arity function whose (one or two) arguments are instances of #$CycSystemRealNumber.  Unlike most other elements of #$UnitOfMeasure, #$Unity returns a dimensionless quantity, simply a real number without physical dimensions attached.  Thus, the value of (#$Unity .10) is equal to the point scalar 0.10, which is also the same quantity as (#$Percent 10).  Both (#$Unity .10) and 0.10 are legitimate instances of #$RealNumber; however, only 0.10 is a legitimate element of #$CycSystemRealNumber (q.v.).  #$Unity can be used to return a dimensionless real-number interval as well as a point value; e.g., (#$Unity 3 4) returns the interval that is the range of numbers between 3 and 4, inclusive.")))

(defrelation up-axis-points
  :arity 2
  :domain Spatial-Thing
  :range Unit-Vector-Interval
  :annotations (Spatial-Predicate
                Binary-Predicate
                (documentation "(#$upAxisPoints OBJ DIR) means OBJ's intrinsic up-axis points in the direction DIR.  An object has an intrinsic up-axis only if it has an intrisic top by virtue of its design or function.  People, rockets, cars, and cups are examples of objects with intrinsic tops.  A sphere has no intrinsic top, due to its symmetry.  If an object with an intrinsic up-axis, OBJ, is on its side, one asserts (#$upAxisPoints OBJ #$HorizontalDirection).  If OBJ is upside-down, one asserts (#$upAxisPoints OBJ #$Down-Directly) or (#$upAxisPoints OBJ #$Down-Generally), depending on how precise one wishes to be.")))

(defrelation urge-satisfied
  :arity 2
  :domain Physical-Event
  :range (:and Physical-Urge-Type
               (:filled-by superrelations Animal-Physiological-Attribute))
  :annotations (Binary-Predicate
                (documentation "(#$urgeSatisfied EVT URGETYPE) means that the sensory event EVT satisfies an instance of a physical urge of type URGETYPE.   Use the predicate, #$urgeTypeSatisfied, to stateg rules about what sorts of actions relieve what sorts of urges.  E.g., scratching relieves an #$UrgeToScratch.")))

(defrelation urge-type-satisfied
  :arity 2
  :domain (:and Script-Type (:filled-by superrelations Animal-Activity))
  :range (:and Physical-Urge-Type
               (:filled-by superrelations Animal-Physiological-Attribute))
  :annotations (Binary-Predicate
                (documentation "The urge of type arg2 is satisfied in the event of type arg1.")))

(defrelation user-rights-relation
  :arity 3
  :domains (Agent Partially-Tangible)
  :range User-Rights-Attribute
  :annotations (Ternary-Predicate
                (documentation "This predicate relates an agent to the use rights which that agent has over an object.  (#$userRightsRelation AGENT OBJECT URA) means that AGENT enjoys the #$UserRightsAttribute URA over OBJECT.  For example, if AGENT owns OBJECT, then AGENT has #$FullUseRights over it.  E.g., (#$userRightsRelation DonaldTrump TrumpCastleCasino #$FullUseRights) stopped being true when he went into debt.   See also #$UserRightsAttribute.")))

(defrelation uses-comm-convention-for-info
  :arity 3
  :domains (Abstract-Information Communication-Convention)
  :range Information-Bearing-Thing
  :annotations (Ternary-Predicate
                (documentation "(#$usesCommConventionForInfo INFO CC IBT) means that the #$InformationBearingThing IBT contains the information INFO, and INFO was encoded using the #$CommunicationConvention CC.  INFO need not be propositional (see also #$PropositionalInformationThing).")))

(defrelation vector-from-to-fn
  :arity 3
  :domains (Spatial-Thing Spatial-Thing)
  :range Unit-Vector-Interval
  :annotations (Individual-Denoting-Function
                Reifiable-Function
                (documentation "Returns a #$UnitVectorInterval which corresponds to the set of unit vectors which originate at some point in arg1 and terminate at some point in arg2.  For example, `the ball rolled towards Mecca' would be represented as (#$directionOfTranslation-Throughout BallRolling01 (#$VectorFromToFn Ball01 Mecca)).  `a ball rolling away from Mecca' would be represented as (#$directionOfTranslation-Throughout BallRolling (#$VectorFromToFn Mecca Ball)).  Note that this admits trajectories which are not directly towards a targeted object but which approach at an angle.  Note further that (#$VectorFromToFn OBJ REF) assumes that OBJ does not #$spatiallyIntersects REF.  See also #$directionBetweenObjects which is roughly interchangeable with #$VectorFromToFn.  #$directionBetweenObjects has the advantage that an arbitrarily precise direction may be specified.  #$VectorFromToFn saves the user from doing the labor involved with reifiing and from having to know the direction between ?obj1 and ?obj2.). ")))

(defrelation vehicle
  :arity 2
  :is-primitive (:and provider-of-motive-force transporter device-used)
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Anti-Transitive-Binary-Predicate
                Asymmetric-Binary-Predicate
                Actor-Slot
                Irreflexive-Binary-Predicate
                (documentation "(#$vehicle EVENT VEHICLE) means that VEHICLE is a #$TransportationDevice-Vehicle which is both the #$providerOfMotiveForce and the #$transporter in EVENT.  If an object is a #$TransportationDevice-Vehicle and plays the role of #$transporter in some moving event, then it generally  will play the role of #$vehicle in that event.  Examples: a car plays the role of #$vehicle in driving.  Note, however, that a bicycle does not play the role of #$vehicle in bike riding since it is not a provider of motive force.  A borderline non-example is someone sitting in their car while it's being pulled by a towtruck; their car is not playing the role of #$vehicle in that event.")))

(defrelation very-high-amount-fn
  :arity 2
  :domain (:and Primitive-Attribute-Type
                (:filled-by superrelations Scalar-Interval))
  :range Scalar-Interval
  :annotations (Generic-Value-Function
                (documentation "#$VeryHighAmountFn is a Cyc function, in particular, an element of #$IndividualDenotingFunction.  It is one of several functions used to denote so-called `generic' values for a wide variety of attributes.  When ATT is a type of attribute, (#$VeryHighAmountFn ATT) returns an instance of ATT which is considered `a very high amount of' ATT in the current context.  A very high amount of ATT is more than (#$MediumAmountFn ATT).")))

(defrelation very-low-amount-fn
  :arity 2
  :domain (:and Primitive-Attribute-Type
                (:filled-by superrelations Scalar-Interval))
  :range Scalar-Interval
  :annotations (Generic-Value-Function
                (documentation "#$VeryLowAmountFn is a Cyc function, in particular, an element of #$IndividualDenotingFunction.  It is one of several functions used to denote so-called `generic' amounts of a wide variety of attributes.  When ATT is a type of attribute, (#$VeryLowAmountFn ATT) returns an instance of ATT which is considered a very low amount of ATT in the current context. A very low amount of ATT is more than (#$NoAmountFn ATT) but less than (#$LowAmountFn ATT).  For example, it is bad for a politician to have (#$VeryLowAmountFn #$Credibility), though not uncommon.")))

(defrelation victim
  :arity 2
  :is-primitive (:and damages maleficiary)
  :domain Event
  :range Social-Being
  :annotations (Actor-Slot
                Asymmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "The #$Agent(s) most directly harmed by this possibly criminal act.  In so-called victimless crimes, some would consider the state to be the victim, but we will not follow that convention here.")))

(defrelation viscosity-of-substance
  :arity 2
  :domain Liquid-Tangible-Thing
  :range Viscosity
  :annotations (Physical-Attribute-Description-Slot
                Interval-Based-Quantity-Slot
                Tangible-Substance-Predicate
                (documentation "(#$viscosityOfSubstance LIQ VISC) means that the #$LiquidTangibleThing LIQ has the #$Viscosity VISC.")))

(defrelation visually-depicts
  :arity 2
  :domain Visual-Information-Source
  :range Spatial-Thing
  :annotations (Binary-Predicate
                (documentation "(#$visuallyDepicts ?IBT ?OBJ) means the object ?OBJ is depicted by the visual information source ?IBT.")))

(defrelation volatility-of-substance
  :arity 2
  :domain Partially-Tangible
  :range Volatility
  :annotations (Tangible-Substance-Predicate
                Interval-Based-Quantity-Slot
                Physical-Attribute-Description-Slot
                (documentation "(#$volatilityOfSubstance SUBST DEGREE) indicates how volatile SUBST is.  Objects with a higher DEGREE of #$Volatility evaporate more readily than objects with a lower DEGREE.")))

(defrelation volitional-cause--rst
  :arity 2
  :domain Linguistic-Object
  :range Cyc_Thing
  :annotations (Rst-Relation
                Asymmetric-Binary-Predicate
                (documentation "The discourse relation that holds between two segments of text when ARG2 specifies something which could be a cause of the volitional action described in ARG1.")))

(defrelation volt
  :annotations (Standard-Unit-Of-Measure
                Mks-Unit-Of-Measure
                Unit-Of-Measure-No-Prefix
                Unit-Of-Voltage
                (documentation "The basic unit of electrical potential in the MKS system.  It is defined as one watt per ampere.")))

(defrelation volume-contained
  :arity 2
  :domain Partially-Tangible
  :range Volume
  :annotations (Interval-Based-Quantity-Slot
                (documentation "Indicates the total volume enclosed by a given container.  (#$volumeContained ?CONT ?VOL) means that the total available volume of ?CONT is ?VOL.")))

(defrelation volume-of-object
  :arity 2
  :is-primitive |(meaning-in-system-fn sensus--information-1997 SIZE-PROPERTY-ASCRIPTION)|
  :domain Partially-Tangible
  :range Volume
  :annotations (Physical-Amount-Slot
                (documentation "(#$volumeOfObject OBJ VOL) means that the #$TangibleThing OBJ has the #$Volume VOL.")))

(defrelation waste-products
  :arity 2
  :is-primitive by-products
  :domain Creation-Or-Destruction-Event
  :range Partially-Tangible
  :annotations (Actor-Slot
                (documentation "(#$wasteProducts EV OBJ) means that OBJ is one of the by-products of EV which is disposed of, rather than used or sold.")))

(defrelation water-solubility
  :arity 2
  :domain Partially-Tangible
  :range Solubility
  :annotations (Physical-Attribute-Description-Slot
                Tangible-Object-Predicate
                Interval-Based-Quantity-Slot
                (documentation "(#$waterSolubility OBJ DEGREE) means that the tangible OBJ has this DEGREE of #$Solubility in water.  A higher value of DEGREE indicates that a substance dissolves more readily and completely than one with a lower solubility.")))

(defrelation watt
  :annotations (Standard-Unit-Of-Measure
                Mks-Unit-Of-Measure
                Unit-Of-Measure-No-Prefix
                Unit-Of-Power
                (documentation "This is the basic unit of power in the metric system and the basic #$UnitOfPower in CYC.  It is a newton-meter per second or a joule per second.")))

(defrelation wave-emission-fn
  :arity 2
  :domain (:and Wave-Propagation-Type
                (:filled-by superrelations Wave-Propagation))
  :range (:and Temporal-Stuff-Type
               Script-Type
               (:filled-by superrelations Emitting-A-Wave))
  :annotations (Collection-Denoting-Function
                (documentation "#$WaveEmissionFn is a Cyc function, specifically a #$CollectionDenotingFunction.  (#$WaveEmissionFn WAVETYPE) denotes a collection of events which is a subset of #$EmittingAWave; each element of (#$WaveEmissionFn WAVETYPE) is an event in which an instance of #$WavePropagation of the type WAVETYPE is emitted at a #$fromLocation.  For example, (#$WaveEmissionFn #$VisibleLight) denotes the collection of events in which visible light waves are emitted.")))

(defrelation wavelength
  :arity 2
  :domain Wave-Propagation
  :range Distance
  :annotations (Binary-Predicate
                (documentation "(#$wavelength WAVE LENGTH) means that the #$WavePropagation WAVE consists of waves having the length LENGTH.  LENGTH is a #$Distance measuring one complete wave in a #$WavePropagation event.")))

(defrelation wave-reception-fn
  :arity 2
  :domain (:and Wave-Propagation-Type
                (:filled-by superrelations Wave-Propagation))
  :range (:and Temporal-Stuff-Type (:filled-by superrelations Receiving-A-Wave))
  :annotations (Collection-Denoting-Function
                (documentation "#$WaveReceptionFn is a Cyc function, specifically a #$CollectionDenotingFunction. (#$WaveReceptionFn WAVETYPE) denotes a collection of events which is a subset of #$ReceivingAWave; each element of (#$WaveReceptionFn WAVETYPE) is an event in which an instance of #$WavePropagation of the type WAVETYPE is received at some #$toLocation.  For example, (#$WaveReceptionFn #$AudibleSound) denotes the collection of events in which audible sound waves are received.")))

(defrelation wave-source
  :arity 3
  :domains (Something-Existing Something-Existing)
  :range (:and Wave-Propagation-Type
               (:filled-by superrelations Wave-Propagation))
  :annotations (Ternary-Predicate
                (documentation "The predicate #$waveSource is used to indicate that a type of wave is travelling between a source and a reception point.  (#$waveSource SOURCE ENDPOINT WAVETYPE) means that there is a #$WavePropagation of type WAVETYPE propagating between the #$fromLocation SOURCE and the #$toLocation ENDPOINT.  For example, (#$waveSource VoiceOfAmerica-Seoul #$CityOfBeijingChina #$RadioWave).")))

(defrelation wave-source--direct
  :arity 3
  :is-primitive wave-source
  :domains (Something-Existing Something-Existing)
  :range (:and Wave-Propagation-Type
               (:filled-by superrelations Wave-Propagation))
  :annotations (Ternary-Predicate
                (documentation "The predicate #$waveSource-Direct is used to indicate that there is a wave propagation of some type directly between two points.  (#$waveSource-Direct SOURCE ENDPOINT WAVETYPE) means that there is a #$WavePropagation of type WAVETYPE between the #$fromLocation SOURCE and the #$toLocation ENDPOINT, and the propagation is direct in the sense that there are no significant diffusion or reflection subevents of that #$WavePropagation.")))

(defrelation wearer
  :arity 2
  :domain Wearing-Something
  :range Animal
  :annotations (Cyc_Role
                Binary-Predicate
                (documentation "The predicate #$wearer is used to indicate an individual who is wearing some article of clothing (or other wearable item) in a particular situation.  (#$wearer WEARING ANIMAL) means that ANIMAL is the wearer during WEARING, an element of #$WearingSomething (q.v.).")))

(defrelation wears-clothing
  :arity 2
  :is-primitive (:and cotemporal owns)
  :domain Partially-Tangible
  :range Something-To-Wear
  :annotations (Cotemporal-Objects-Slot
                (documentation "(#$wearsClothing ANIMAL ITEM) means that ANIMAL is wearing ITEM, an element of #$SomethingToWear.  The first argument of #$wearsClothing is loosely constrained (by #$PartiallyTangible), so that this predicate may be used to describe mannequins, animals, and other individuals (of whatever kinds) that might wear clothes, as well as humans; however, by default Cyc assumes that an individual who #$wearsClothing is an element of #$Person.  See also #$wornOn, which relates the item worn to the body part on which it is worn.")))

(defrelation weather-attributes
  :arity 2
  :is-primitive has-attributes
  :domain Outdoor-Location
  :range Weather-Attribute
  :annotations (Binary-Predicate
                (documentation "The predicate #$weatherAttributes is used to describe the weather at a particular outdoor location.  (#$weatherAttributes LOC WEATHER) means that the #$OutdoorLocation LOC has the #$WeatherAttribute WEATHER.  For example, to say that it's snowy in Lake Tahoe, we would say: (#$weatherAttributes #$LakeTahoe #$Snowy).  See also #$WeatherAttribute.")))

(defrelation width-of-object
  :arity 2
  :domain Spatial-Thing
  :range Distance
  :annotations (Physical-Amount-Slot
                (documentation "(#$widthOfObject OBJ WIDTH) means that the #$Distance across OBJ from one side boundary to the opposite side boundary is WIDTH.  Side boundaries are roughly perpendicular to the top and bottom of the object.  Note that some objects have an intrinsic default orientation (i.e., a top and bottom); for others, orientation is determined only in relation to the environment.")))

(defrelation window-has-covering
  :arity 2
  :is-primitive portal-has-covering
  :domain Window-Portal
  :range Window-The-Portal-Covering
  :annotations (Physical-Part-Predicate
                Binary-Predicate
                (documentation "A restriction of #$portalHasCovering.  This predicate can take as it's arg1 any instance of #$WindowPortal, eg., a car window, or a window in a #$ModernHumanResidence.")))

(defrelation works-with
  :arity 2
  :is-primitive cotemporal
  :domain Agent
  :range Agent
  :annotations (Cotemporal-Objects-Slot
                Symmetric-Binary-Predicate
                Irreflexive-Binary-Predicate
                (documentation "The predicate #$worksWith relates two agents who in some way work together.  The two #$Agents may be people or organizations.  (#$worksWith AGENT1 AGENT2) means that AGENT1 and AGENT2 work together or cooperate in some activity for mutual benefit.  They may or may not work for the same employer.  Some types of relationships that provide a basis for assertions using #$worksWith include:  coworkers in a company, an employee and his boss, organizations affiliated in some endeavor, a professional and her client, professionals and their representatives.  Examples: a research organization #$worksWith its shareholding companies; a #$Novelist #$worksWith his or her #$PublishingCompany; an #$EntertainmentOrArtsProfessional #$worksWith his or her agent (i.e., #$ArtistOrEntertainerRepresentative).")))

(defrelation worn-on
  :arity 2
  :is-primitive (:and touches supported-by)
  :domain Something-To-Wear
  :range Animal-Body-Part
  :annotations (Inter-Actor-Slot
                (documentation "The predicate #$wornOn is used to describe on what part of an individual's body a particular device or garment is worn.  (#$wornOn ITEM BODYPART) means that ITEM is being worn on the body part BODYPART.  #$wornOn can apply to human or animal wearers, and the items worn can include clothing, jewelry, medical devices, harnesses, carrying devices, wigs--basically, anything which can be attached to or borne upon a body part without intentionally holding or carrying it. See #$SomethingToWear for its subsets of things that can be worn.  See also #$wearsClothing, which relates the wearer, rather than the body part, to the item worn.")))

(defrelation xor
  :arity 2
  :domain Cyc-Formula
  :range Cyc-Formula
  :annotations (Commutative-Relation
                El-Relation
                (documentation "The logical connective #$xor represents exclusive-or.
  #$xor takes two arguments, each of which must be an
  element of CycFormula. (#$xor FORMULA-1 FORMULA-2) means
  that formula FORMULA-1 is true precisely when formula
  FORMULA-2 is false; in other words, one but not both of
  FORMULA-1 and FORMULA-2 is true. An EL formula that mentions 
  #$xor is translated during canonicalization into an equivalent 
  (though less compact) formula that mentions #$or, #$and, and #$not 
  and does not mention #$xor (see the expansion gaf for #$xor).")))

(defrelation year-fn
  :arity 2
  :domain Cyc_Integer
  :range Calendar-Year
  :annotations (Individual-Denoting-Function
                Non-Predicate-Function
                (documentation "(#$YearFn ?N) denotes a #$CalendarYear -- 
in particular, the year ?N in the Gregorian calendar.  
For example (#$YearFn 1966) denotes the year 1966. Non-positive 
years are permitted: (#$YearFn -1) denotes 1 B.C., (#$YearFn -2)
denotes 2 B.C., etc.) 
There is no (#$YearFn 0), just as in the Gregorian calender
there is no year 0. Note that #$YearFn -- unlike #$DayFn, 
#$MonthFn, etc. -- takes only one argument.")))

(defrelation years-duration
  :annotations (Unit-Of-Time
                Unit-Of-Measure-No-Prefix
                Unit-Of-Measure
                (documentation "This is a function that takes one or two numbers and returns, as its value, some amount of #$Time.  An expression of the form (#$YearsDuration ?min ?max) denotes a quantity of #$Time that is at least ?min years and at most ?max years.  (#$YearsDuration ?num) denotes a quantity of #$Time that is exactly ?num years.")))

(defrelation |(meaning-in-system-fn sensus--information-1997 AREA)|
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Cyc_Thing Binary-Predicate))

(defrelation |(meaning-in-system-fn sensus--information-1997 CARDINALITY)|
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Cyc_Thing Binary-Predicate))

(defrelation |(meaning-in-system-fn sensus--information-1997 CAUSAL-RELATION)|
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Cyc_Thing Binary-Predicate))

(defrelation |(meaning-in-system-fn sensus--information-1997 CAUSE-EFFECT)|
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Cyc_Thing Binary-Predicate))

(defrelation |(meaning-in-system-fn sensus--information-1997 CONTAINED)|
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Cyc_Thing Binary-Predicate))

(defrelation |(meaning-in-system-fn sensus--information-1997 DISTANCE)|
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Cyc_Thing Binary-Predicate))

(defrelation |(meaning-in-system-fn sensus--information-1997 ELEMENT)|
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Cyc_Thing Binary-Predicate))

(defrelation |(meaning-in-system-fn sensus--information-1997 ELEMENT-OF)|
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Cyc_Thing Binary-Predicate))

(defrelation |(meaning-in-system-fn sensus--information-1997 GENERALIZED-POSSESSION)|
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Cyc_Thing Binary-Predicate))

(defrelation |(meaning-in-system-fn sensus--information-1997 LESS-THAN-COMPARISON)|
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Cyc_Thing Binary-Predicate))

(defrelation |(meaning-in-system-fn sensus--information-1997 LINEAR-SIZE)|
  :arity 2
  :domain Cyc_Thing
  :range Distance
  :annotations (Cyc_Thing Physical-Amount-Slot))

(defrelation |(meaning-in-system-fn sensus--information-1997 LOCATING)|
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Cyc_Thing Binary-Predicate))

(defrelation |(meaning-in-system-fn sensus--information-1997 NOTCONTAINED)|
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Cyc_Thing Binary-Predicate))

(defrelation |(meaning-in-system-fn sensus--information-1997 OWNED-BY)|
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Cyc_Thing Binary-Predicate))

(defrelation |(meaning-in-system-fn sensus--information-1997 SIZE-PROPERTY-ASCRIPTION)|
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Cyc_Thing Physical-Amount-Slot))

(defrelation |(meaning-in-system-fn sensus--information-1997 SOURCE-DESTINATION)|
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Cyc_Thing Binary-Predicate))

(defrelation |(meaning-in-system-fn sensus--information-1997 SPATIAL-LOCATING)|
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Cyc_Thing Binary-Predicate))

(defrelation |(meaning-in-system-fn sensus--information-1997 SUBJECT-MATTER)|
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Cyc_Thing Binary-Predicate))

(defrelation |(meaning-in-system-fn sensus--information-1997 TEMPORAL-NONINCLUSIVE)|
  :arity 2
  :domain Cyc_Thing
  :range Cyc_Thing
  :annotations (Cyc_Thing Binary-Predicate))



;;; ******************** GENERAL ASSERTIONS ********************

(tell
 (:about a-few-days-duration Time--Quantity Order-Of-Magnitude-Interval
  (documentation "Duration of 2 to 10 days")))

(tell
 (:about a-few-decades-duration Time--Quantity Order-Of-Magnitude-Interval
  (documentation "Duration of 2 to 10 decades")))

(tell
 (:about a-few-hours-duration Time--Quantity Order-Of-Magnitude-Interval
  (documentation "Duration of 2 to 10 hours")))

(tell
 (:about a-few-minutes-duration Time--Quantity Order-Of-Magnitude-Interval
  (documentation "Duration of 2 to 10 minutes")))

(tell
 (:about a-few-months-duration Time--Quantity Order-Of-Magnitude-Interval
  (documentation "A few months 2-10")))

(tell
 (:about a-few-seconds-duration Order-Of-Magnitude-Interval Time--Quantity
  (documentation "Duration of 2 to 30 seconds")))

(tell
 (:about a-few-weeks-duration Time--Quantity Order-Of-Magnitude-Interval
  (documentation "Duration of 2 to 10 weeks")))

(tell
 (:about a-few-years-duration Time--Quantity Order-Of-Magnitude-Interval
  (documentation "Duration of 2 to 10 years")))

(tell
 (:about agreement-note Shared-Note
  (documentation "Elements of #$Agreement (and of its subsets) are #$Microtheory instances containing propositions representing what some number of parties have agreed upon. An #$Agreement may contain a set of #$Obligations on the part of one or more of the parties. An #$Agreement may also be just a set of beliefs that the parties have decided to share. To indicate which propositions are true in an #$Agreement, regardless of whether they are true in reality, use #$ist-Agreement. (#$ist-Agreement AGREEMENT PROP) means that PROP is a #$CycFormula expressing something that was agreed upon in AGREEMENT. Other relevant vocabulary: (#$agreeingAgents AGREEMENT AGENT) means that AGENT is one of the parties agreeing to AGREEMENT. (#$subAgreements AGREEMENT1 AGREEMENT2) means that AGREEMENT2 is a part of (is included in) AGREEMENT1. (#$governedByAgreement ACTION AGREEMENT) means that ACTION is governed by the terms of AGREEMENT. (#$agreementForbids AGREEMENT AGENT ACTION-TYPE) means that AGREEMENT forbids AGENT from performing elements of ACTION-TYPE. (#$agreementPeriod AGREEMENT TIME) means that AGREEMENT is considered to be true during the time period TIME.")))

(tell
 (:about always--time-interval Time-Interval
  (documentation "The interval of time which encompasses all time.  In more general MTs we remain agnostic as to whether this time interval has either a beginning or an end, but if it does, #$Always-TimeInterval begins when time itself begins and ends only when time ends completely.  Every other instance of #$TimeInterval is a #$timeSlices of #$Always-TimeInterval. ")))

(tell
 (:about asleep Alertness
  (documentation "#$Asleep is the #$Alertness attribute of being asleep.  #$Asleep is a specialization of #$Unconscious.  (#$holdsIn (#$YearFn 1776) (#$alertnessLevel RipVanWinkle #$Asleep)).")))

(tell
 (:about atlantic-ocean Ocean Entity
  (documentation "The main body of salt water in the #$WesternHemisphere-Region, bordering on five continents (Western coasts of Europe and Africa, Antarctica, Eastern coasts of North and South Americas).")))

(tell
 (:about awake Alertness
  (documentation "#$Awake is the #$Alertness attribute of being awake.")))

(tell
 (:about baked Preparation-Attribute
  (documentation "The attribute #$Baked is a specialized form of #$Cooked.  Food that is #$Baked has been prepared in an event of #$BakingFood, using a $#RegularOven.")))

(tell (:about bangladesh Entity Independent-Country))

(tell
 (:about base-kb Broad-Microtheory
  (documentation "#$BaseKB is the most general #$Microtheory currently in use.  Assertions in this context are `accessible' from any other #$Microtheory via the #$genlMt relation.  In the partial order of microtheories, all microtheories have access to #$BaseKB.  An assertion which is true here will by default be true in every context.  The `content' of #$BaseKB consists of very general assertions which are expected to be usable in most or all applications of Cyc, as well as Cyc's most fundamental assertions that it uses in inference, and all completely universal, timeless truths.")))

(tell
 (:about bendable Physical-Structural-Attribute
  (documentation "A physical attribute.  #$Bendable is the #$PhysicalStructuralAttribute of an object that tends to stay in the contorted shape when contorted.  Note: for something to be bendable, it must be #$Flexible.")))

(tell
 (:about bengali-language Living-Language
  (documentation "Language spoken in the Indic area.")))

(tell
 (:about blue-collar Job-Attribute
  (documentation "An attribute; an element of #$JobAttribute.  Blue collar jobs are those requiring a relatively high proportion of manual/physical labor.")))

(tell
 (:about bookkeeping-mt Microtheory
  (documentation "A #$Microtheory for stating basic #$Cyc bookkeeping information, such as assertions using #$myCreator and #$myCreationTime.")))

(tell
 (:about brazil Entity Independent-Country
  (documentation "Brazil throughout time, both political and physical aspects.")))

(tell
 (:about brittle Physical-Structural-Attribute
  (documentation "A physical attribute.  #$Brittle is the #$PhysicalStructuralAttribute of a substance which breaks easily when subjected to a low or moderate impact or application of force, such as most instances of #$Glass.")))

(tell
 (:about city-of-bandar-abbas-iran Entity City
  (documentation "Bandar Abbas (Bandar-e-'Abbas), a city in #$Iran on the north coast of the #$PersianGulf, near the #$StraitOfHormuz.  One of the #$chiefPorts of the country of #$Iran.")))

(tell
 (:about city-of-washington-dc Us-City Entity Country-Subsidiary
  Capital-City-Of-Region
  (documentation "The present (though not the original) capital city of the #$UnitedStatesOfAmerica, seat of its Federal government, which is located in the specially created Federal district between the States of Maryland and Virginia.")))

(tell
 (:about cloudless Cloudiness
  (documentation "#$Cloudless is a #$WeatherAttribute representing a specific degree of #$Cloudiness.  (#$cloudinessOfRegion LOC #$Cloudless) means that the #$OutdoorLocation LOC has no cloud cover.")))

(tell
 (:about cloudy Cloudiness
  (documentation "#$Cloudy is a #$WeatherAttribute that characterizes an #$OutdoorLocation which has at least some cloud cover -- this cloud cover not being situated at ground-level (in which case #$Foggy would be the applicable #$WeatherAttribute).")))

(tell
 (:about commissioned Work-Status
  (documentation "An attribute; an element of #$WorkStatus.  The attribute of being paid on a commission basis for work done.")))

(tell
 (:about complete-cloud-cover Cloudiness
  (documentation "#$CompleteCloudCover is a #$WeatherAttribute representing a specific degree of #$Cloudiness.  This attribute describes a location as so clouded over with a uniform layer grey or white clouds that direct sunlight is blocked out.  There are no shadows, the shape or exact location of the sun or moon is impossible to identify.")))

(tell
 (:about concave Curvature-Of-Surface
  (documentation "An attribute of a surface meaning that it is bumped or indented inward.  A concave surface has a pair of points which are both closer to a viewer than points on the surface between them.   Dependinhg on the context, it may have relatively small subregions which have convexities (e.g. wrinkles, small dents, corrugations) or are flat so long as the overall shape is concave.  Saddle-shapes, although convex in certain dimensions, are concave in others and are therefore concave.")))

(tell
 (:about conductor-resistance Electrical-Resistance
  (documentation "A measurable physical attribute.  #$ConductorResistance is the element of #$ElectricalResistance that represents a very low level of electrical resistance.  An object having #$ConductorResistance readily conducts electricity.  See also #$resistanceOfObject.")))

(tell
 (:about conducts-heat-poorly Thermal-Conductivity
  (documentation "A measurable physical attribute.  #$ConductsHeatPoorly is the element of #$ThermalConductivity that represents the level of thermal conductivity in an object that conducts virtually no heat.")))

(tell
 (:about conducts-heat-well Thermal-Conductivity
  (documentation "A measurable physical attribute.  #$ConductsHeatWell is the element of #$ThermalConductivity that represents the level of thermal conductivity in an object that conducts heat very quickly.")))

(tell
 (:about conducts-some-heat Thermal-Conductivity
  (documentation "A measurable physical attribute.  #$ConductsSomeHeat is the element of #$ThermalConductivity that represents the level of thermal conductivity in an object which conducts heat, but slowly.")))

(tell
 (:about continent-of-africa Continent Entity
  (documentation "The second largest continent, located north and south of the #$Equator in the #$EasternHemisphere-Region.  Africa is connected to Asia by the narrow #$Isthmus of Suez; it includes #$Madagascar and other offshore islands.")))

(tell
 (:about continent-of-asia Continent Entity
  (documentation "The world's largest continent, joined in the west with Europe (which may be considered a peninsula of Asia) to form the Eurasian land mass (#$ContinentOfEurasia).  The #$ContinentOfAsia occupies much of the northern half of the #$EasternHemisphere-Region.")))

(tell
 (:about continent-of-europe Continent Entity
  (documentation "The sixth largest continent; includes adjacent islands.  The #$ContinentOfEurope is separated from the #$ContinentOfAsia by the #$UralMountains.")))

(tell
 (:about continent-of-north-america Entity Continent
  (documentation "The continent in the northern and #$WesternHemisphere-Region. North America includes #$CentralAmerica-Region as well as the #$WestIndies-Archipelago as #$geographicalSubRegions.")))

(tell
 (:about continent-of-south-america Entity Continent
  (documentation "The continent in the western and southern hemisphere.")))

(tell
 (:about convex Curvature-Of-Surface
  (documentation "A surface attribute meaning that the surface's overall shape is dominated by an outward bulge or mound, or consists of projecting corners between planes.  In most contexts, it may have relatively small subregions which are concave or flat, etc., so long as overall shape is convex.  Viewing something as convex assumes a perspective.  From the opposite perspective, on the `other side', a #$Convex surface would look #$Concave.")))

(tell
 (:about cooked Preparation-Attribute
  (documentation "The attribute #$Cooked is a #$PreparationAttribute (q.v.), describing
how a given item of #$Food has been prepared.  Food becomes #$Cooked
as the result of an event of #$CookingFood.  Specialized forms of
#$Cooked include #$Steamed, #$Baked, #$Microwaved and #$Grilled.")))

(tell
 (:about cyc Cyclist The-Term
  (documentation "A computer program -- in fact, THIS computer program! -- which is also a Cyclist, hence entitled to inspect, modify, add, and delete units.")))

(tell
 (:about cyclists-mt Microtheory
  (documentation "A #$Microtheory for stating basic hierarchical (#$isa and #$genls) information pertaining to users of #$Cyc.")))

(tell
 (:about deciding-which-instrument-predicate-to-use Shared-Note
  (documentation "Which instrument predicate you use depends on what level of generality you wish your statement to apply at.  One help is to look at the argument types of each instrument predicate and decide.  Do you want it to apply to every #$PartiallyTangible which is an instrument?  Then use #$instrument-Generic since #$PartiallyTangible is its #$arg1Isa.  Are you writing a rule which really only applies to #$PhysicalDevices  Then use #$deviceUsed.  But be careful!  When you use a more specific predicate such as #$deviceUsed it may have special extra conditions in its definition aside from the #$PhysicalDevice #$arg1Isa constraint.  Also if your first stab at the rule involves #$deviceUsed in the antecedent, see if it applies more generally to #$instrument-Generic.")))

(tell
 (:about down--directly Unit-Vector--Precise Terrestrial-Direction
  (documentation "The direction straight down.  In the terrestrial context, #$Down-Directly points in the same direction as Earth's gravitational force vector.")))

(tell
 (:about down--generally Terrestrial-Direction
  (documentation "The element of #$VectorInterval that comprises the cone-shaped set of vectors pointing (from some reference point) within approximately forty-five degrees of #$Down-Directly.")))

(tell
 (:about east--directly Geographical-Direction Unit-Vector--Precise
  (documentation "Due East, an element of #$TerrestrialDirection.")))

(tell
 (:about east--generally Geographical-Direction
  (documentation "The general direction of East.  The element of #$VectorInterval that comprises the cone-shaped set of vectors pointing (from some reference point) within approximately forty-five degrees of #$East-Directly.")))

(tell
 (:about exclusive-user-rights User-Rights-Attribute
  (documentation "An attribute of an object with respect to an #$Agent, meaning that the agent who holds this kind of #$UserRightsAttribute to an object has the sole right to use that object.  There can be only one such #$Agent at a given time; that agent may be an #$Organization or an individual person.  When you rent a car, you expect #$ExclusiveUserRights of it for the duration of your rental, even though you don't own the car.")))

(tell
 (:about false Individual Truth-Value
  (documentation "An element of #$TruthValue.  #$False is logical falsehood in Cyc; this is the abstract logical notion--not to be confused with Lisp's NIL, nor with the English word `false'.")))

(tell
 (:about feminine Gender-Of-Living-Thing Linguistic-Object
  (documentation "#$Feminine is a gender, indicating either that an #$Animal or #$Plant is female, or that a word has what is called feminine gender.")))

(tell
 (:about flexible Physical-Structural-Attribute
  (documentation "A physical attribute.  #$Flexible is the #$PhysicalStructuralAttribute of a tangible object that can be flexed, twisted, contorted.  #$Flexible objects which retain their contorted shape are described as #$Bendable (q.v.).")))

(tell
 (:about foggy Weather-Attribute
  (documentation "A #$WeatherAttribute characterizing an #$OutdoorLocation covered by a ground-level cloud.")))

(tell
 (:about foldable Physical-Structural-Attribute
  (documentation "A physical attribute.  #$Foldable is the #$PhysicalStructuralAttribute of being foldable in a flexible way, like towels or paper.  Note a distinction between #$Foldable objects and #$Collapsible objects: #$Collapsible objects are #$Rigid objects collapsed by means of #$HingedJoints, while #$Foldable objects are flexible overall.")))

(tell
 (:about forward-inference-psc Problem-Solving-Cntxt
  (documentation "The problem solving context which is used during forward inference.")))

(tell
 (:about fried Preparation-Attribute
  (documentation "The attribute #$Fried is a specialized form of #$Cooked.  Food that is #$Fried has been prepared in an event of #$Frying.")))

(tell
 (:about full-time Work-Status
  (documentation "Attribute of being a full-time worker.")))

(tell
 (:about full-use-rights User-Rights-Attribute
  (documentation "An attribute of an object with respect to an #$Agent, meaning that if the #$Agent has this right to the object, it does not place any restrictions on what the #$Agent may do with the object.  If there are restrictions on what the #$Agent may do with the object, they arise from other sources, such as formal and informal laws of behavior.  E.g., even if you have #$FullUseRights to your car, you can't violate traffic laws, kill people with it, blow it up in a parking lot, etc.")))

(tell
 (:about gaseous-state-of-matter State-Of-Matter--Solid-Liquid-Gaseous
  (documentation "A basic physical state of matter.  Gaseous objects are characterized at the macroscopic level by having diffuse boundaries (when outside of containers) and by great expandability and compressibility and (in some cases) combustability.  Examples  of things that typically have this attribute are: the Earth's ionosphere; the helium in a child's balloon; the highly compressed air in a diver's scuba tank.")))

(tell
 (:about government-leader-note Shared-Note
  (documentation "The distinction between #$HeadOfGovernment and #$HeadOfState is a subtle one.  #$HeadOfGovernment is the set of #$Leaders who actually run the government.  #$HeadOfState is the set of #$Leaders who are mainly ceremonial figures, fulfilling diplomatic roles such as hosting foreign dignitaries.  For a given #$Country, these two roles may be filled by the same person, such as #$BillClinton for the #$UnitedStatesOfAmerica in 1996, or by two separate individuals; for example, in 1996 the #$HeadOfState for #$GreatBritain would be #$QueenElizabethII, while the #$HeadOfGovernment would be John Major (#$PrimeMinister-HeadOfGovernment).  Cyc constant names indicate which government role is associated with a particular title; e.g., #$Sultan-HeadOfGovernment vs. #$Sultan-HeadOfState.")))

(tell
 (:about granular Physical-Structural-Attribute
  (documentation "A physical attribute.  #$Granular is the #$PhysicalStructuralAttribute that describes a solid  that consists of granules and has a grainy texture; e.g., sand, sugar, salt.")))

(tell
 (:about grilled Preparation-Attribute
  (documentation "The attribute #$Grilled is a specialized form of #$Cooked.  Food that is #$Grilled has been prepared in an event of #$GrillingFood, using a #$BBQGrill or an #$ElectricGrill.")))

(tell (:about guest Human-Cyclist))

(tell
 (:about gusty Weather-Attribute
  (documentation "A #$WeatherAttribute indicating that the wind at an #$OutdoorLocation is subject to sudden changes in direction and intensity.")))

(tell
 (:about hemispheres-and-calendars Shared-Note
  (documentation "#$CalendarSeasons are defined by the Gregorian calendar and are synchronized with the equinoxes and solstices.  #$SeasonOfYear instances are climatic seasons, events characterized by the weather in a given region.  The relationship between #$SeasonOfYear instances and #$CalendarSeasons depends upon the hemisphere (or, more precisely, upon the lattitude.)  In the northern hemisphere, north of the tropics, a #$CalendarSummer will significantly intersect with the a #$SummerSeason each year.   But in the southern hemisphere, that same #$CalendarSummer (which is the same in both hemispheres) will intersect with what is locally, weatherwise, a #$WinterSeason.")))

(tell
 (:about hindi-language Living-Language
  (documentation "Language spoken in the Indic area.")))

(tell
 (:about horizontal-direction Terrestrial-Direction
  (documentation "The element of #$VectorInterval that comprises all the vectors which are perpendicular to #$Up-Directly and #$Down-Directly.")))

(tell
 (:about horizontal-orientation Orientation-Attribute
  (documentation "(#$orientation OBJECT #$HorizontalOrientation) means that OBJECT is horizontal with respect to the current instance of #$FrameOfReference.  A linear (#$LongAndThin) object is horizontal if and only if its longest axis lies in the horizontal plane.  A planar (#$SheetShaped) object is horizontal if and only if its two longest axes lie in the horizontal plane.  Typically, horizontal objects include dinner plates, mousepads, ice skating rinks, parking lots, and stratus clouds.")))

(tell
 (:about hourly-work Work-Status
  (documentation "An attribute; an element of #$WorkStatus.  The attribute of being paid an hourly rate for work done.")))

(tell
 (:about hpkb--user Human-Cyclist
  (documentation "The default Cyclist in the HPKB release.")))

(tell
 (:about hungry Level-Of-Hunger Order-Of-Magnitude-Interval
  (documentation "Hungry")))

(tell
 (:about indonesia--the-nation Entity Independent-Country
  (documentation "The country of Indonesia, which comprises 13500 islands. Includes both physical and political aspects.")))

(tell
 (:about insulator-resistance Electrical-Resistance
  (documentation "A measurable physical attribute.  #$InsulatorResistance is the element of #$ElectricalResistance that represents a very high level of electrical resistance.  An object having #$InsulatorResistance conducts no electricity at all.  See also #$resistanceOfObject.")))

(tell
 (:about intended-function Capacity-Attribute
  (documentation "An element of #$CapacityAttribute.  The attribute #$IntendedFunction characterizes an entity participating in a situation as doing so in its intended function.")))

(tell
 (:about interval-entry Format
  (documentation "Arguments to Cyc predicates may have specified formats that constrain their values.  #$IntervalEntry is the format used to constrain argument positions that must be filled with measurable quantities.  If #$IntervalEntry is the entry format of some Nth argument to a predicate PRED, then all assertions with PRED that contain the same particular values in their other arguments must have, in the Nth (i.e., #$IntervalEntry) argument, quantitative values that `overlap'.  (See #$ScalarInterval.)  #$IntervalEntry is provided because, for functional arguments like the second argument to #$volumeOfObject, we know that a single `real' value does exist, though we may have various ways of concluding limits on that value in the form of intervals.  As long as all the intervals overlap, those assertions are not contradictory.  For more explanation, see #$Format and the related predicates #$arg1Format, #$arg2Format, etc.")))

(tell
 (:about isa-vs-main-constituent-vs-constituents Shared-Note
  (documentation "When to use #$isa, #$mainConstituent, or #$constituents.  We develop the following example as a basis for explaining the differences.  

Consider X, where (#$isa X #$Water). If we add some other substance(s) to X, to the point where the mixture acquires some salient characteristic(s) different from #$Water while retaining all the main properties, then we should assert (#$mainConstituent X W), where W is the original water -- i.e., (#$isa W #$Water) -- and X is the whole new mixture of W with some other stuff(s).  Suppose we add enough enough other stuff that the physical properties of the mixture become significantly different from those of water; then we should assert only (#$constituents X W).  

#$isa - Use #$isa if X would commonly be referred to as `water', including cases in which a small number of minor characteristics are different due to some admixture.   

Examples (arguably, 3 and 4 are borderline cases): 

1. An instance of (#$PureFn #$Water) #$isa #$Water.  
2. An instance of #$Water-Ingestible #$isa #$Water (but may have trace constituents).
3. An instance of #$PoolWater #$isa #$Water (but has some #$Chlorine as a salient #$constituents). 
4. An instance of #$SeaWater #$isa #$Water (but has some #$Salt-NaCl as a salient #$constituents).  


#$mainConstituent - Use #$mainConstituent when X contains other substances besides water, would NOT commonly referred to as `water', and yet has MOST of the material properties of water.  As a rule, most of the properties of the #$mainConstituent transfer to the substance it's a part of.  Often such substances have at least one important and/or perceptible characteristic (due to admixture) that is quite different from the properties of water.  

Examples: 

1. An instance of #$Lemonade is NOT called `water' but has water as a #$mainConstituent.  It tastes quite different from water.  It has nutritional (caloric) value.  It is a human-made beverage.  
2. An instance of #$Coffee-Beverage is NOT called `water' but has water as a #$mainConstituent.  It tastes quite different from water.  It contains caffeine.  Also, a specific inference about coffee's (lack of) transparency should override the transparency which would otherwise be inferred from the material properties of its #$mainConstituent.  
3. Aqueous hydrochloric acid has many of the properties of its main constituent, water -- for example, transparency, viscosity, density, freezing point, etc.  But it also has the very important difference that it is highly acidic, caustic, etc. -- and attributing to it water's potability would be disastrous.

#$constituents - Use #$constituents when X is NOT commonly referred to as `water' and has FEW properties of water, even though X contains water.  

Examples:

1. An instance of (#$SolidFn #$Gelatin) is NOT called `water', and though it has water among its #$constituents, gelatin has very few of the properties of water. 
2. An instance of #$Concrete is NOT called `water'; though it has water among its #$constituents, it has none of the salient characteristics of water.
3. An instance  of #$Mud is NOT called `water' and has few characteristics of water, though water is among its #$constituents.  Its #$mainConstituent is some portion of #$Soil.")))

(tell
 (:about job-capacity Capacity-Attribute
  (documentation "the attribute of performing something as a job")))

(tell
 (:about layered Physical-Structural-Attribute
  (documentation "The physical structural attribute of being layered, laminate, or made of #$Layers, like stratified rock or an onion.  An object that is #$Layered has two or more parts that are each #$Layers.")))

(tell
 (:about liquid-state-of-matter State-Of-Matter--Solid-Liquid-Gaseous
  (documentation "A basic physical state of matter.  Liquid objects are characterized at the macroscopic level by special qualities of flow, such as being #$Pourable and conforming to the bottom of whatever container they occupy.  Examples of things that typically have this attribute are: a `piece' of the Pacific Ocean in the tropics; a lump of mercury at room temperature; the blood in the circulatory system of a living mammal; and some molten silver about to be poured into a teapot mold.")))

(tell
 (:about list-the-format Format
  (documentation "A Format or datatype.  Multiple copies of entries, & any number of entries, are OK; and order matters; i.e., if you change the order of two different elements of a list, the resultant list is not equal to the original one")))

(tell
 (:about long-and-thin Physical-Structural-Attribute Abstract-Shape
  (documentation "A physical attribute.  #$LongAndThin is the #$PhysicalStructuralAttribute that characterizes a tangible object which has one dimension whose length exceeds that of each of the other two dimensions by at least a factor of three.  E.g., pencils, straws, telephone wire, submarines, skyscrapers. Cf. #$SheetShaped.")))

(tell
 (:about main-function Capacity-Attribute
  (documentation "An element of #$CapacityAttribute.  The attribute #$MainFunction characterizes an entity participating in a situation as doing so in its main function.  It is frequently used to indicate a device employed in doing its #$primaryFunction, or an organization engaged in the work it was created to do.")))

(tell
 (:about masculine Gender-Of-Living-Thing Linguistic-Object
  (documentation "#$Masculine is a gender, indicating either that an #$Animal or #$Plant is male, or that a word has what is called masculine gender.")))

(tell
 (:about mediterranean-sea Sea Entity
  (documentation "A strategically important small sea between southern Europe, western Asia (the Levant), and northern Africa.")))

(tell
 (:about meta-assertions-for-poly-canonicalizing-assertions Shared-Note
  (documentation "If one wishes to state a fact M about an assertion A, i.e. if one wishes to assert the meta-assertion M(A) and if A canonicalizes into multiple assertions, a_1, a_2...a_n,then one must do a non-standard procedure.  Due to the way the canonicalizer currently (Nov 96) handles meta-assertions, rather than simply asserting M(A), one must distribute the meta-assertion over the results of canonicalization.  That is one must assert M(a_1), M(a_2)...M(a_n). Consider the following example:  Suppose one wanted to assert 
`if a movement occurs then there is a friction #$subEvents, unless the movement is frictionless.'
The way one asserts this is by first asserting the fact without the `unless', i.e.

(ke-assert '(#$implies
	     (#$isa ?MOV #$MovementEvent)
              (#$thereExists ?FRIC
	      (#$and
	       (#$isa ?FRIC #$FrictionProcess)
	       (#$subEvents ?MOV ?FRIC)))) #$BaseKB)

Because there is an #$and with two literals on the right hand side of this rule it canonicalizes into two assertions which then become part of the KB.  One must next find these assertions as they appear in the KB:

(#$implies
 (#$and
  (#$isa ?MOV #$MovementEvent)
  (#$termOfUnit ?FRIC-EVENT146 (#$SKF-29707602 ?MOV)))
 (#$isa ?FRIC-EVENT146 #$FrictionProcess))

(#$implies
 (#$and
  (#$isa ?MOV #$MovementEvent)
  (#$termOfUnit ?FRIC-EVENT146 (#$SKF-29707602 ?MOV)))
 (#$subEvents ?MOV ?FRIC-EVENT146)).

Now using these one may state the `unless' part of the rule:

(ke-assert
  '(#$exceptWhen
    (#$isa ?MOV #$FrictionlessMotion)
    (#$implies
     (#$and
      (#$isa ?MOV #$MovementEvent)
      (#$termOfUnit ?FRIC-EVENT146 (#$SKF-29707602 ?MOV)))
     (#$isa ?FRIC-EVENT146 #$FrictionProcess)))
  #$BaseKB)

(ke-assert
  '(#$exceptWhen
    (#$isa ?MOV #$FrictionlessMotion)
    (#$implies
     (#$and
      (#$isa ?MOV #$MovementEvent)
      (#$termOfUnit ?FRIC-EVENT146 (#$SKF-29707602 ?MOV)))
     (#$subEvents ?MOV ?FRIC-EVENT146)))

  #$BaseKB).

This #$SharedNote is true about any #$Relationship which has #$Assertion as an argument type.")))

(tell
 (:about microwaved Preparation-Attribute
  (documentation "The attribute #$Microwaved is a specialized form of #$Cooked.  Food that is #$Microwaved has been prepared in an event of #$Microwaving, using a #$MicrowaveOven.")))

(tell
 (:about misty--physical-state Physical-Structural-Attribute
  (documentation "A physical attribute.  #$Misty-PhysicalState is the #$PhysicalStructuralAttribute that characterizes mist; i.e., being a mixture of a gaseous substance with suspended particles of liquid.")))

(tell
 (:about moderately-alert Alertness
  (documentation "#$ModeratelyAlert is an #$Alertness attribute which is a specialization of #$Awake.  It is the normal state of an #$Animal which is awake but paying particular attention to its environment.  It is a higher #$alertnessLevel than #$Sleepy, but lower than #$VeryAlert.")))

(tell
 (:about non-exclusive-user-rights User-Rights-Attribute
  (documentation "An attribute of an object with respect to an #$Agent, meaning that the #$Agent has non-exclusive use of the object.  All #$Agents can claim this use-right to an object if any #$Agent can.  This attribute is not the same as #$GroupUserRightsAttribute, as there is no specific group to which #$Agents must belong in order to claim this right.  This is typically used for things so fundamental we hardly consider them `rights.'  E.g., the right to breathe air, use public parking lots, walk the streets as a free person, drive on public roads, etc.  If you think about it, though, you'll realize that there is an implicit `group' that can exercise each of those rights.  So think of it this way:  one can define the group explicitly as a group, and then assert that each member has #$GroupUserRightsAttribute (e.g., the group of licensed drivers has the right to drive on public roads), or one could define a context, a #$Microtheory, in which performers of actions defaulted to members of that group, and in that context the right (e.g., the right to drive on a public road) would be a #$NonExclusiveUserRights.")))

(tell
 (:about north--directly Geographical-Direction Unit-Vector--Precise
  (documentation "Due North, an element of #$TerrestrialDirection.")))

(tell
 (:about north--generally Geographical-Direction
  (documentation "The general direction of North.  The element of #$VectorInterval that comprises the cone-shaped set of vectors pointing (from some reference point) within approximately forty-five degrees of #$North-Directly.")))

(tell
 (:about north-east--directly Geographical-Direction Unit-Vector--Precise
  (documentation "The precise Northeast direction from any geographic point other than a pole.")))

(tell
 (:about north-east--generally Geographical-Direction
  (documentation "The general direction of NorthEast.  The #$VectorInterval comprising the cone-shaped set of vectors pointing (from some reference point) within approximately forty-five degrees of pointing in the same direction as #$NorthEast-Directly.")))

(tell
 (:about north-west--directly Geographical-Direction Unit-Vector--Precise
  (documentation "The precise Northwest direction from any geographic point other than a pole.")))

(tell
 (:about north-west--generally Geographical-Direction
  (documentation "The general direction of NorthWest.  The #$VectorInterval comprising the cone-shaped set of vectors pointing (from some reference point) within approximately forty-five degrees of pointing in the same direction as #$NorthWest-Directly.")))

(tell
 (:about note-about-giving-generic-value-functions-numeric-values Shared-Note
  (documentation "In some contexts, users may wish to ground elements of #$GenericValueFunction by linking them to numeric `real world' measurements.  E.g. In a driving-on-the-highway-context, one might wish to define (#$MediumAmountFn #$Speed) as `between 50 and 60 miles per hour'.  The way to assert this is as follows:  (#$and (#$minQuantValue (#$MediumAmountFn #$Speed) (#$MilesPerHour 50))(#$maxQuantValue (#$MediumAmountFn #$Speed)(#$MilesPerHour 60))).")))

(tell
 (:about note-about-predicate-categories Shared-Note
  (documentation "Predicates in Cyc are organized into collections.  While some, like #$BinaryPredicate, are logically well-founded and are referenced in axioms and in the code which implements Cyc, others, though based on some intuitively plausible criteria, are involved in few (if any) axioms and are therefore not integral to Cyc's ontology.  Collections which fall into the latter class are generally under review at this time and are flagged with this #$sharedNotes.")))

(tell
 (:about note-about-scalar-interval-max-and-min Shared-Note
  (documentation "If there are two arguments to a #$UnitOfMeasure function, as in (#$Meter 5 6), the first number is interpreted as the (inclusive) minimum, and the second number as the (inclusive) maximum.  Thus, (#$Meter 5 6) means `between 5 and 6 meters long, inclusive'.  If only one argument follows an element of #$UnitOfMeasure, as in (#$Meter 3), it is interpreted as a shorthand for (#$Meter 3 3).  In other words, (#$Meter 3 3) means `exactly 3 meters'.  When a function belonging to #$UnitOfMeasure is applied to a single argument, the value it returns must be an element of #$ScalarPointValue.")))

(tell
 (:about note-about-stating-exceptions-in-cyc-l Shared-Note
  (documentation "The formula
  (#$exceptWhen
    P(?x0 ... ?xn)
    Q(?x0 ... ?xn)))

states that, in situations where assertion Q would apply to a set of
bindings for variables ?x0 ... ?xn, the conclusion is allowed 
`except when'
  P(?x0 ... ?xn)
is true for these variable bindings.  The formula
  (#$exceptFor [term] Q(?x0))
states that, in situations where assertion Q would apply to a variable
?x0, the conclusion is allowed `except for' the situations where [term]
is the binding for ?x0.  To be well-formed, Q must be a rule with
exactly one free variable.

By definition, #$exceptFor is merely syntactic sugar:
  (#$exceptFor [term] Q(?x0)) 
  <=> 
  (#$exceptWhen (equals ?x0 [term]) Q(?x0))
Since an #$exceptWhen statement is a meta-statement about some rule 
Q(?x0 ... ?xn), the statement is not well-formed if Q(?x0 ... ?xn) is
not already an assertion in the KB.  Also, strictly speaking, P and Q in
the #$exceptWhen merely must share some variables rather than all
variables as it's been written above.

These constructs replace `abnormal' at the EL (epistemological level).  Old assertions of the form:

  (#$implies
    P(?x0 ... ?xn)
    (abnormal R(?x0 ... ?xn) Q(?x0 ... ?xn)))

become:

  (#$exceptWhen
    P(?x0 ... ?xn)
    Q(?x0 ... ?xn))

The predicate `abnormal' has not actually gone away, but was modified for use as the HL (Heuristic Level) implementation of #$exceptWhen.  Like #$termOfUnit, `abnormal' should be viewed as an inference-maintained predicate, and human beings should not be manually asserting things using `abnormal.' 

;;;
;; EXAMPLES
;;;

Rule1: `birds fly'
(#$implies
  (#$isa ?BIRD #$Bird)
  (#$behaviorCapable ?BIRD #$Flying-FlappingWings #$performedBy))

Exception1: `for penguins, the ``birds fly'' rule does not apply'
(#$exceptWhen (#$isa ?BIRD #$Penguin) [Rule1])

Exception2: `the ``birds fly'' rule does not apply to Tweety'
(#$exceptFor Tweety [Rule1])

Exception3: `for an animal with an injured wing, the ``birds fly'' rule does not apply'
(#$exceptWhen
  (#and (#$anatomicalParts ?BIRD ?WING) (#$isa ?WING #$Wing-AnimalBodyPart) (#$hasPhysiologicalAttributes ?WING #$Injured))
  [Rule1])

Rule2: ``dogs who like the same cat like each other''
(#$implies
 (?and  (#$isa ?DOG1 #$Dog) (#$isa ?DOG2 #$Dog) (#$isa ?CAT #$Cat) (#$likesAsFriend ?DOG1 ?CAT) (#$likesAsFriend ?DOG2 ?CAT))
 (#$likesAsFriend ?DOG1 ?DOG2))

Exception3: `Rex does not like other dogs according to ``Rule2'''
(#$exceptWhen (#$equals ?DOG1 Rex) [Rule2])

Exception4: `Fifi is not liked by other dogs according to `Rule2'''
(#$exceptWhen (#$equals ?DOG2 Fifi) [Rule2])

Exception5: `Morris is not such a cat according to ``Rule2'''
(#$exceptWhen (#$equals ?CAT Morris) [Rule2])")))

(tell
 (:about note-for-unit-of-measure-with-prefix-and-no-prefix Shared-Note
  (documentation "Elements of #$UnitOfMeasureNoPrefix denote units of measure that don't have a multiplicative prefix (e.g. `kilo', `micro', `billion').  #$Inch and #$MetersPerSecond are such elements.  On the other hand, elements of #$UnitOfMeasureWithPrefix do have multiplicative prefixes; examples include #$CentimetersPerSecond, (#$Micro #$Gram), #$KiloWatt, and #$GramsPerMilliliter.  We need these constants in order to prevent references to terms such as ((#$Micro (#$Micro #$Gram)) 5) or ((#$Kilo (#$CentimetersPerSecond)) 3.2).  If we didn't have these restrictions, equal quantities would allow for an undesirable level of possible names for a quantity, e.g. ((#$Micro (#$Kilo #$Gram)) 1) would refer to the same quantity as ((#$Kilo (#$Micro #$Gram)) 1) would refer to the same quantity as (#$Gram .001), etc.")))

(tell
 (:about now Time-Point Indexical-Concept
  (documentation "#$Now is a special #$TimePoint which denotes the `current' moment.  The exact interpretation will vary from one context to another.  In a problem solving context it often means `the time at which the inference is occuring'.")))

(tell
 (:about opaque Transparency
  (documentation "#$Opaque is a #$PhysicalAttribute representing a specific degree of #$Transparency.  #$Opaque objects do not transmit light.  See also #$transparencyOfObject.")))

(tell
 (:about pacific-ocean Ocean Entity
  (documentation "The main body of salt water in the #$EasternHemisphere-Region, bordering on five continents (Western coast of North and South Americas, Australia, Antarctica, and Eastern coast of Asia).")))

(tell
 (:about partial-cloud-cover Cloudiness
  (documentation "#$PartialCloudCover is a #$WeatherAttribute representing a specific degree of #$Cloudiness.  This attribute describes a location as having some cloud cover but not enough to completely block out all direct sunlight.  Direct sunlight comes and goes as clouds occluding the sun pass.")))

(tell
 (:about parts-format Format
  (documentation "Argument positions of Cyc predicates may have specified formats that constrain how many and what kind of terms may occupy that position, given some fixed set of terms in the other argument positions of the predicate.  If a predicate P has #$PartsFormat for argument position N, then given some particular set of terms that occupy the other argument positions of P, there may be multiple assertions with different terms in position N (keeping the other arguments fixed), but only so long as the terms in position N are all #$physicalParts of the same #$PartiallyTangible.  For example, the #$arg1Format of #$physicalParts is #$PartsFormat.  This allows us to represent that JosephsRightThumbnail is a #$physicalParts of JosephsRightThumb, of JosephsRightHand, and of Joseph.  This is more restrictive than #$SetTheFormat, which allows multiple unrelated values.  In contrast, specifying only (#$arg1Format #$physicalParts #$SetTheFormat) would not prevent JosephsRightThumb from being a #$physicalParts of both JosephsRightHand and of JamesRightHand.")))

(tell
 (:about part-time Work-Status
  (documentation "An attribute; an element of #$WorkStatus.  The attribute of being a part-time worker.")))

(tell
 (:about paste--form Physical-Structural-Attribute
  (documentation "A physical attribute.  #$Paste-Form is the #$PhysicalStructuralAttribute which describes solids that are pastelike in texture and consistency.  They are very easily deformed, and they tend to remain in the deformed shape afterwards, provided that they don't collapse under their own weight.")))

(tell
 (:about plus-infinity Non-Negative-Number Non-Negative-Scalar-Interval
  Real-Number
  (documentation "#$PlusInfinity represents an infinitely large positive number (roughly akin to aleph-null).")))

(tell
 (:about pointy-ended Physical-Structural-Attribute
  (documentation "Includes anything which tapers to a pointy or sharp end--pens, pencils, needles, pins, nails, and wood-screws, but not wires (no taper).  Most knives would be included, but only because they have pointy ends.  A knife with a rounded ended and a sharp blade would not be included.")))

(tell
 (:about portugal Entity Independent-Country
  (documentation "The nation of Portugal as it has existed throughout time; includes both its physical and its political aspects.")))

(tell
 (:about pourable Physical-Structural-Attribute
  (documentation "A physical attribute.  #$Pourable is the structural attribute of a tangible thing that is capable of flowing.  #$Pourable things don't have intrinsic shape, but instead take the shape of their containers.  When acted on by a force, a #$Pourable thing changes shape at a rate proportional to the force.  (In addition, #$Pourable things may be easily separated into multiple pieces; however, such a separation is not a breaking or shearing.)  Semisolid mobs of particles, such as portions of sand or snow, are #$Pourable; but a gelatin-like semisolid is not.  See also #$SemiSolidTangibleThing.")))

(tell
 (:about powdery Physical-Structural-Attribute
  (documentation "A physical attribute.  #$Powdery is the #$PhysicalStructuralAttribute which describes a solid that has the form of a powder.  #$Powdery stuff is #$Pourable and composed of multiple granules of solids.")))

(tell
 (:about primary-role-use-rights User-Rights-Attribute
  (documentation "An attribute of an object with respect to an #$Agent, meaning that the agent who holds this kind of #$UserRightsAttribute to an object is allowed to use that object in events where it performs its #$primaryFunction.  A rental agreement typically gives the renter this kind of right to use of an object (such as a car, residence, videotape, etc.)  Just because you rent a car, though, does not give you the right to sell it, burn it up, or repaint it.")))

(tell
 (:about primary-user-rights User-Rights-Attribute
  (documentation "An attribute of an object with respect to an #$Agent, meaning that the agent who holds this kind of #$UserRightsAttribute to an object has priority to use that object, over other agents who can also claim a right to use it.  E.g., parents have #$PrimaryUserRights to the family car.  Note that the attribute #$PrimaryUserRights makes sense only for objects to which #$GroupUserRightsAttributes apply, since there must be multiple authorized users in order for priority of claims to occur.")))

(tell
 (:about rainy Raininess
  (documentation "The #$WeatherAttribute that characterizes an #$OutdoorLocation at which it is raining.")))

(tell
 (:about right-side-up Orientation-Attribute
  (documentation "(#$orientation OBJECT #$RightSideUp) means that OBJECT's intrinsic top (e.g., the lid of a teapot) is above (#$above-Directly) its intrinsic bottom (e.g., bowl of a teapot).")))

(tell
 (:about rigid Physical-Structural-Attribute
  (documentation "A physical attribute.  #$Rigid is the #$PhysicalStructuralAttribute of solids which are stiff--neither flexible nor foldable nor elastic.  Examples of rigid things: bricks, wooden boards, steel.  Non-rigid things: sand, rubber, cloth.  Borderline: lampshades.")))

(tell
 (:about salaried Work-Status
  (documentation "An attribute; an element of #$WorkStatus.  The attribute of being a salaried worker in some organization.")))

(tell
 (:about sanskrit-language Living-Language Dead-Language
  (documentation "This language was originally spoken in the Indic area and is now a dead language. Its sacred literature, however, was  transmitted orally and eventually written in the then-current Devanagari script")))

(tell
 (:about semiconductor-resistance Electrical-Resistance
  (documentation "A measurable physical attribute.  #$SemiconductorResistance is the element of #$ElectricalResistance that represents the level of resistance found in instances of #$SemiconductorStuff.  See also #$resistanceOfObject.")))

(tell
 (:about semi-solid-state-of-matter State-Of-Matter--Solid-Liquid-Gaseous
  (documentation "One of the basic physical states of matter.  Semi-solid objects are characterized at the macroscopic level by (a) their ability to flow under the application of pressure, combined with (b) their high viscosity.  Examples of things that are typically in this #$stateOfMatter: a squirt of toothpaste on your brush, or a lump of bread dough, at normal room temperatures.  At higher temperatures:  a lava flow, a lump of molten glass about to be blown into a vase, etc.")))

(tell
 (:about sensus--information-1997 Cyc_Knowledge-Base
  (documentation "SENSUS is a #$KnowledgeBase, created by the Information Sciences Institute at USC.  An earlier version of it was knownas Pangloss, and it was devloped primarily in order tosupport machine translation.")))

(tell
 (:about set-the-format Format
  (documentation "Any argument place of a Cyc predicate may have a specified format that constrains its possible value(s).  If an argument position has #$SetTheFormat as its entry format, then --- given some fixed set of values for the other arguments to that predicate --- any number of assertions can still be true in the KB with different terms in that argument position.  E.g., the #$arg1Format for #$mother is #$SetTheFormat, since a woman can have any number of children.  See also #$Format, and contrast with #$SingleEntry.")))

(tell
 (:about sharp-edged Physical-Structural-Attribute
  (documentation "Includes anything which has a sharp edge.  Includes knives, scissors, and broken glass.  Does not include the right angle at the edge of a desk--that's not sharp enough.  Does not include the edge of a cotton sheet--that's not hard enough to be sharp.  Does not include a needle--it may be sharp, but it's not an edge.  For needles, nails, etc., see #$PointyEnded.")))

(tell
 (:about sheet-shaped Physical-Structural-Attribute
  (documentation "A physical attribute.  #$SheetShaped is the element of #$PhysicalStructuralAttribute that describes a tangible object that is flat and spread out, planar, and neither fully crumpled nor compactly folded.  In one of the dimensions it is much smaller than in the other two.  Bedspreads, ice over ponds, and sheets of paint on a house are all possible examples of objects having this attribute.  For describing a sheet of something (e.g., waxed paper, aluminum foil, cloth) regardless of its configuration, use #$SheetOfSomeStuff.")))

(tell
 (:about simple-contact-acquaintance Acquaintance-Attribute
  (documentation "The attribute which specifies that persons X and Y have met each other at least once, and probably would be able to recall this, and even recognize each other, if they meet again.  I.e., (#$acquaintances X Y #$SimpleContactAcquaintance) implies (#$acquaintances Y X #$SimpleContactAcquaintance); that is, if X has met Y, then Y has met X.  This assumes that there was a meeting event in which (earlier subabstractions of) X and Y interacted, that both were minimally conscious, etc.")))

(tell
 (:about single-entry Format
  (documentation "Argument places of Cyc predicates may have specified formats that constrain their values.  #$SingleEntry is a format constraint used to indicate that there is at most one value in a certain argument place, when all other arguments are fixed.  For example, the #$arg2Format  of #$mother is #$SingleEntry, since an animal can only have one mother.  See also #$Format, and contrast with #$SetTheFormat.")))

(tell
 (:about sitting-posture Posture
  (documentation "The attribute that describes, most generically, an #$Animal in a seated position.  The exact nature of the position depends upon the typical body structure of the animal's species.")))

(tell
 (:about sleepy Alertness
  (documentation "#$Sleepy is the #$Alertness attribute which is a specialization of #$Awake.  It is the state an animal normally passes through before #$GoingToSleep.")))

(tell
 (:about snowy Weather-Attribute
  (documentation "The #$WeatherAttribute that characterizes an #$OutdoorLocation at which it is snowing.")))

(tell
 (:about solid-state-of-matter State-Of-Matter--Solid-Liquid-Gaseous
  (documentation "One of the basic physical states of matter.  Solid objects are characterized at the macroscopic level by definite, persistent boundaries, independent of container.  Examples of things that typically have this #$AttributeValue are: a piece of wood, a lump of coal, a quartz crystal, a gold ingot stored in Fort Knox, a human skull.")))

(tell
 (:about south--directly Geographical-Direction Unit-Vector--Precise
  (documentation "Due South, an element of #$TerrestrialDirection.")))

(tell
 (:about south--generally Geographical-Direction
  (documentation "The general direction of South.  The element of #$VectorInterval that comprises the cone-shaped set of vectors pointing (from some reference point) within approximately forty-five degrees of pointing in the same direction as #$South-Directly.")))

(tell
 (:about south-east--directly Geographical-Direction Unit-Vector--Precise
  (documentation "The precise Southeast direction from any geographic point other than a pole.")))

(tell
 (:about south-east--generally Geographical-Direction
  (documentation "The general direction of SouthEast.  The #$VectorInterval comprising the cone-shaped set of vectors pointing (from some reference point) within approximately forty-five degrees of pointing in the same direction as #$SouthEast-Directly.")))

(tell
 (:about south-west--directly Geographical-Direction Unit-Vector--Precise
  (documentation "The precise Southwest direction from any geographic point other than a pole.")))

(tell
 (:about south-west--generally Geographical-Direction
  (documentation "The general direction of SouthWest.  The #$VectorInterval comprising the cone-shaped set of vectors pointing (from some reference point) within approximately forty-five degrees of pointing in the same direction as #$SouthWest-Directly.")))

(tell
 (:about spanish-language Living-Language
  (documentation "The indigenous language of #$Spain and, secondarily, most of Central and South America")))

(tell
 (:about starving Order-Of-Magnitude-Interval Level-Of-Hunger
  (documentation "A #$LevelOfHunger (q.v.) one step beyond #$Hungry.  Note: this
constant expresses a static #$AnimalPhysiologicalAttribute, not a
dynamic process.  For the #$Event that involves #$Starving, see
#$Starvation.")))

(tell
 (:about steamed Preparation-Attribute
  (documentation "The attribute #$Steamed is a specialized form of #$Cooked.  Food that is #$Steamed has been prepared in an event of #$SteamingFood.")))

(tell
 (:about sub-abs Format
  (documentation "If the predicate P has entry format #$SubAbs for one of its argument positions N, then, given some fixed set of arguments in the other positions, mutiple assertions may be added to the KB so long as each term appearing in argument position N is a #$subAbstrac of some common #$Entity. Note that the case where the entity itself appears as arg N is allowed, since for all x, (#$subAbstrac X X) is true.  Let's consider an example.  The #$arg2Format of #$laterSubAbstractions is #$SubAbs.  Thus Cyc will allow one to assert that #$laterSubAbstractions of SamZilkerAsATeenager include SamZilkerAsAnAdult, and SamZilkerDuringHisFirstMarriage, etc., so long as all of those are known to be subabstractions of the very same entity, in this case the one representing Sam Zilker.")))

(tell
 (:about sunny Weather-Attribute
  (documentation "The #$WeatherAttribute that characterizes an #$OutdoorLocation at which the sun is shining brightly.")))

(tell
 (:about superconductor-resistance Electrical-Resistance
  (documentation "A measurable physical attribute.  #$SuperconductorResistance is the element of #$ElectricalResistance that describes an object which has absolutely no resistance to the passage of electricity.  That level of resistance is found only in superconductors.")))

(tell
 (:about switzerland Entity Independent-Country
  (documentation "The nation of Switzerland as it has existed throughout time; includes both its physical and its political aspects.")))

(tell
 (:about temporary-work Work-Status
  (documentation "An attribute; an element of #$WorkStatus.  The attribute of being a temporary worker for an organization.")))

(tell
 (:about terrestrial-frame-of-reference Frame-Of-Reference
  (documentation "The terrestrial frame of reference is the unique individual #$FrameOfReference that generally regards the surface of the #$PlanetEarth as fixed in the background space.  It permits fixed notions of #$VerticalOrientation and #$HorizontalOrientation.  There are multiple standard coordinate systems based on the #$TerrestrialFrameOfReference, including #$latitude and #$longitude, Earth-Centered Cartesian, and others.  Various local frames of reference and coordinate systems assume the #$TerrestrialFrameOfReference.")))

(tell
 (:about the-empty-set Set--Mathematical
  (documentation "#$TheEmptySet is the empty set, i.e., the set that has no element and is sometimes called the null.  Note that #$TheEmptySet is not an instance of #$Collection.")))

(tell
 (:about the-start-of-the-common-era Time-Point
  (documentation "This is the instant of time between the years BC and AD.")))

(tell
 (:about translucent Transparency
  (documentation "#$Translucent is a #$PhysicalAttribute representing a specific degree of #$Transparency.  #$Translucent objects can transmit light, but not enough to see clear images.  See also #$transparencyOfObject.")))

(tell
 (:about transparent Transparency
  (documentation "#$Transparent is a #$PhysicalAttribute representing a specific degree of #$Transparency.  #$Transparent objects transmit enough light to see clear images.  See also #$transparencyOfObject.")))

(tell
 (:about true Individual Truth-Value
  (documentation "An element of #$TruthValue.  #$True is logical truth in Cyc; this is the abstract logical notion--not to be confused with Lisp's T, nor with the English word `true'.")))

(tell
 (:about unconscious Alertness
  (documentation "#$Unconscious is the #$Alertness attribute of being #$Unconscious.  It is the opposite of #$Awake.  A specialization of this attribute is #$Asleep.")))

(tell
 (:about underground Attribute-Value
  (documentation "The attribute of a location or region that means that it is below the surface of the ground of a particular place.")))

(tell
 (:about up--directly Unit-Vector--Precise Terrestrial-Direction
  (documentation "The direction straight up.  In the terrestrial context, #$Up-Directly points in the opposite direction of Earth's gravitational force vector.")))

(tell
 (:about up--generally Terrestrial-Direction
  (documentation "The element of #$VectorInterval which comprises the cone-shaped set of vectors pointing (from some reference point) within approximately forty-five degrees of #$Up-Directly.")))

(tell
 (:about upright-posture Posture
  (documentation "The attribute that describes an #$Animal in an upright, i.e. vertically extended, #$Posture.  (#$postureOfAnimal ?ANIM #$UprightPosture) is implied by walking and running, as well as by standing.")))

(tell
 (:about up-side-down Orientation-Attribute
  (documentation "(#$orientation OBJECT #$UpSideDown) means that OBJECT's intrinsic bottom (e.g., the hull of a ship) is above (#$above-Directly) its intrinsic top (e.g., the masthead).  Many things don't work properly when upside down, e.g., sailboats, salad bowls, newspapers.")))

(tell
 (:about vertical-direction Terrestrial-Direction
  (documentation "The element of #$VectorInterval that comprises all the vectors that are parallel to #$Up-Directly and #$Down-Directly.")))

(tell
 (:about vertical-orientation Orientation-Attribute
  (documentation "(#$orientation OBJECT #$VerticalOrientation) means that OBJECT is vertical with respect to the current instance of #$FrameOfReference.  A linear (#$LongAndThin) object is vertical if and only if its longest dimension is perpendicular to horizontal (#$HorizontalDirection).  A planar (#$SheetShaped) object has #$VerticalOrientation if and only if its planar surface is perpendicular to the current horizontal plane.  Typically, vertical objects include window panes, skyscrapers, trees, radio towers, and walls.")))

(tell
 (:about very-alert Alertness
  (documentation "#$VeryAlert is an #$Alertness attribute which is a specialization of #$Awake.  It is the state of an #$Animal paying particular attention to its environment (or a specific aspect thereof).  It is the state an #$Antelope is in after smelling a #$Lion, or a burglar is in after hearing the front door open.")))

(tell
 (:about west--directly Geographical-Direction Unit-Vector--Precise
  (documentation "Due West, an element of #$TerrestrialDirection.")))

(tell
 (:about west--generally Geographical-Direction
  (documentation "The general direction of West.  The element of #$VectorInterval that comprises the cone-shaped set of vectors pointing (from some reference point) within approximately forty-five degrees of #$West-Directly.")))

(tell
 (:about white-collar Job-Attribute
  (documentation "An attribute; an element of #$JobAttribute.  White collar jobs are those requiring little or no manual/physical labor; they are usually indoor jobs.")))

(tell
 (:about |(government-fn Country)| Regional-Government
  |(group-fn Intelligent-Agent)|))

(tell
 (:about |(government-fn indonesia--the-nation)| Regional-Government
  (documentation "GOVERNMENT OF INDONESIA")))

(tell
 (:about |(high-amount-fn Compressibility)| Scalar-Interval Compressibility
  (documentation "Can be compressed almost any amount")))

(tell
 (:about |(high-amount-fn Corrosion-Resistance)| Scalar-Interval
  Corrosion-Resistance))

(tell
 (:about |(high-amount-fn Elasticity)| Scalar-Interval Elasticity
  (documentation "completely re-expands almost instantly after compression")))

(tell (:about |(high-amount-fn Flammability)| Scalar-Interval Flammability))

(tell (:about |(high-amount-fn Malleability)| Scalar-Interval Malleability))

(tell (:about |(high-amount-fn Porosity)| Scalar-Interval Porosity))

(tell (:about |(high-amount-fn Raininess)| Scalar-Interval Raininess))

(tell (:about |(high-amount-fn Rigidity)| Scalar-Interval Rigidity))

(tell
 (:about |(high-amount-fn Shear-Strength)| Scalar-Interval Shear-Strength))

(tell
 (:about |(high-amount-fn Tensile-Strength)| Scalar-Interval Tensile-Strength))

(tell (:about |(high-amount-fn Visibility)| Scalar-Interval Visibility))

(tell
 (:about |(low-amount-fn Compressibility)| Scalar-Interval Compressibility
  (documentation "can be compressed somewhat")))

(tell (:about |(low-amount-fn Ductility)| Scalar-Interval Ductility))

(tell
 (:about |(low-amount-fn Elasticity)| Scalar-Interval Elasticity
  (documentation "re-expands somewhat after compression, but not all the way back")))

(tell (:about |(low-amount-fn Fragility)| Scalar-Interval Fragility))

(tell (:about |(low-amount-fn Hardness)| Scalar-Interval Hardness))

(tell (:about |(low-amount-fn Malleability)| Scalar-Interval Malleability))

(tell (:about |(low-amount-fn Porosity)| Scalar-Interval Porosity))

(tell (:about |(low-amount-fn Raininess)| Scalar-Interval Raininess))

(tell
 (:about |(low-amount-fn Relative-Humidity)| Scalar-Interval
  Relative-Humidity))

(tell (:about |(low-amount-fn Rigidity)| Scalar-Interval Rigidity))

(tell (:about |(low-amount-fn Shear-Strength)| Scalar-Interval Shear-Strength))

(tell
 (:about |(low-amount-fn Tensile-Strength)| Scalar-Interval Tensile-Strength))

(tell (:about |(low-amount-fn Visibility)| Scalar-Interval Visibility))

(tell
 (:about |(medium-amount-fn Bio-Deterioration-Resistance)| Scalar-Interval
  Bio-Deterioration-Resistance))

(tell
 (:about |(medium-amount-fn Compressibility)| Scalar-Interval Compressibility
  (documentation "Can be compressed to less than half its volume")))

(tell
 (:about |(medium-amount-fn Corrosion-Resistance)| Scalar-Interval
  Corrosion-Resistance))

(tell
 (:about |(medium-amount-fn Elasticity)| Scalar-Interval Elasticity
  (documentation "will eventually re-expand after compression")))

(tell (:about |(medium-amount-fn Flammability)| Scalar-Interval Flammability))

(tell (:about |(medium-amount-fn Fragility)| Scalar-Interval Fragility))

(tell (:about |(medium-amount-fn Hardness)| Scalar-Interval Hardness))

(tell (:about |(medium-amount-fn Porosity)| Scalar-Interval Porosity))

(tell (:about |(medium-amount-fn Raininess)| Scalar-Interval Raininess))

(tell (:about |(medium-amount-fn Rigidity)| Rigidity Scalar-Interval))

(tell
 (:about |(medium-amount-fn Shear-Strength)| Scalar-Interval Shear-Strength))

(tell
 (:about |(medium-amount-fn Tensile-Strength)| Scalar-Interval
  Tensile-Strength))

(tell
 (:about |(no-amount-fn Compressibility)| Scalar-Interval Compressibility
  (documentation "essentially cannot be compressed")))

(tell (:about |(no-amount-fn Ductility)| Scalar-Interval Ductility))

(tell
 (:about |(no-amount-fn Elasticity)| Scalar-Interval Elasticity
  (documentation "does not re-expand at all after compression")))

(tell (:about |(no-amount-fn Flammability)| Scalar-Interval Flammability))

(tell (:about |(no-amount-fn Malleability)| Scalar-Interval Malleability))

(tell (:about |(no-amount-fn Porosity)| Scalar-Interval Porosity))

(tell (:about |(no-amount-fn Rigidity)| Scalar-Interval Rigidity))

(tell (:about |(no-amount-fn Volatility)| Scalar-Interval Volatility))

(tell (:about |(STIB (year-fn -902))| Time-Interval))

(tell
 (:about |(the-covering Creation-Event Destruction-Event)| Set--Mathematical))

(tell
 (:about |(the-covering Gaining-User-Rights Losing-User-Rights)|
  Set--Mathematical))

(tell
 (:about |(the-covering Movement--Translation-Event Movement--Rotation)|
  Set--Mathematical))

(tell
 (:about
  |(the-covering Organizational-Transfer-In Organizational-Transfer-Out)|
  Set--Mathematical))

(tell (:about |(the-covering Transfer-In Transfer-Out)| Set--Mathematical))

(tell
 (:about |(the-partition Adult-Animal Juvenile-Animal)| Set--Mathematical
  Disjoint-Set-Or-Collection))

(tell
 (:about |(the-partition Artifact Inanimate-Thing--Natural)| Set--Mathematical
  Disjoint-Set-Or-Collection))

(tell
 (:about |(the-partition Corner--2d Corner--3d)| Set--Mathematical
  Disjoint-Set-Or-Collection))

(tell
 (:about |(the-partition Dusk Dawn)| Set--Mathematical
  Disjoint-Set-Or-Collection))

(tell
 (:about |(the-partition Female-Person Male-Person)| Set--Mathematical
  Disjoint-Set-Or-Collection))

(tell
 (:about |(the-partition Intangible Partially-Tangible)| Set--Mathematical
  Disjoint-Set-Or-Collection))

(tell
 (:about |(the-partition Invertebrate Vertebrate)| Set--Mathematical
  Disjoint-Set-Or-Collection))

(tell
 (:about |(the-partition Non-Leap-Year Leap-Year)| Set--Mathematical
  Disjoint-Set-Or-Collection))

(tell
 (:about |(the-partition Non-Person-Animal Person)| Set--Mathematical
  Disjoint-Set-Or-Collection))

(tell
 (:about |(the-partition Non-Powered-Device Powered-Device)| Set--Mathematical
  Disjoint-Set-Or-Collection))

(tell
 (:about |(the-partition Set--Mathematical Cyc_Collection)| Set--Mathematical
  Disjoint-Set-Or-Collection))

(tell
 (:about |(the-partition Set-Or-Collection Individual)| Set--Mathematical
  Disjoint-Set-Or-Collection))

(tell
 (:about |(the-partition Translation--Flow Translation--Complete)|
  Set--Mathematical Disjoint-Set-Or-Collection))

(tell
 (:about |(very-high-amount-fn Bio-Deterioration-Resistance)| Scalar-Interval
  Bio-Deterioration-Resistance))

(tell
 (:about |(very-high-amount-fn Corrosion-Resistance)| Scalar-Interval
  Corrosion-Resistance))

(tell
 (:about |(very-high-amount-fn Flammability)| Scalar-Interval Flammability))

(tell (:about |(very-high-amount-fn Fragility)| Scalar-Interval Fragility))

(tell (:about |(very-high-amount-fn Hardness)| Scalar-Interval Hardness))

(tell (:about |(very-high-amount-fn Porosity)| Scalar-Interval Porosity))

(tell
 (:about |(very-high-amount-fn Relative-Humidity)| Scalar-Interval
  Relative-Humidity))

(tell (:about |(very-high-amount-fn Rigidity)| Scalar-Interval Rigidity))

(tell
 (:about |(very-high-amount-fn Shear-Strength)| Scalar-Interval
  Shear-Strength))

(tell
 (:about |(very-high-amount-fn Tensile-Strength)| Scalar-Interval
  Tensile-Strength))

(tell (:about |(very-low-amount-fn Ductility)| Scalar-Interval Ductility))

(tell
 (:about |(very-low-amount-fn Flammability)| Scalar-Interval Flammability))

(tell (:about |(very-low-amount-fn Fragility)| Scalar-Interval Fragility))

(tell (:about |(very-low-amount-fn Hardness)| Scalar-Interval Hardness))

(tell
 (:about |(very-low-amount-fn Malleability)| Scalar-Interval Malleability))

(tell (:about |(very-low-amount-fn Porosity)| Scalar-Interval Porosity))

(tell
 (:about |(very-low-amount-fn Relative-Humidity)| Scalar-Interval
  Relative-Humidity))

(tell (:about |(very-low-amount-fn Rigidity)| Scalar-Interval Rigidity))

(tell
 (:about |(very-low-amount-fn Shear-Strength)| Scalar-Interval Shear-Strength))

(tell
 (:about |(very-low-amount-fn Tensile-Strength)| Scalar-Interval
  Tensile-Strength))



;;; ******************** SYMBOLIZED FUNCTION VALUES ********************

(tell (gaseous-fn Water |(gaseous-fn Water)|))

(tell (government-fn Country |(government-fn Country)|))

(tell
 (government-fn indonesia--the-nation |(government-fn indonesia--the-nation)|))

(tell (group-fn Currency |(group-fn Currency)|))

(tell (group-fn Event |(group-fn Event)|))

(tell (group-fn Intelligent-Agent |(group-fn Intelligent-Agent)|))

(tell (group-fn Spatial-Thing |(group-fn Spatial-Thing)|))

(tell (high-amount-fn Compressibility |(high-amount-fn Compressibility)|))

(tell
 (high-amount-fn Corrosion-Resistance |(high-amount-fn Corrosion-Resistance)|))

(tell (high-amount-fn Elasticity |(high-amount-fn Elasticity)|))

(tell (high-amount-fn Flammability |(high-amount-fn Flammability)|))

(tell (high-amount-fn Malleability |(high-amount-fn Malleability)|))

(tell (high-amount-fn Porosity |(high-amount-fn Porosity)|))

(tell (high-amount-fn Raininess |(high-amount-fn Raininess)|))

(tell (high-amount-fn Rigidity |(high-amount-fn Rigidity)|))

(tell (high-amount-fn Shear-Strength |(high-amount-fn Shear-Strength)|))

(tell (high-amount-fn Tensile-Strength |(high-amount-fn Tensile-Strength)|))

(tell (high-amount-fn Visibility |(high-amount-fn Visibility)|))

(tell (juvenile-fn Person |(juvenile-fn Person)|))

(tell (liquid-fn Water |(liquid-fn Water)|))

(tell (liquid-fn Water--Saline |(liquid-fn Water--Saline)|))

(tell (low-amount-fn Compressibility |(low-amount-fn Compressibility)|))

(tell (low-amount-fn Ductility |(low-amount-fn Ductility)|))

(tell (low-amount-fn Elasticity |(low-amount-fn Elasticity)|))

(tell (low-amount-fn Fragility |(low-amount-fn Fragility)|))

(tell (low-amount-fn Hardness |(low-amount-fn Hardness)|))

(tell (low-amount-fn Malleability |(low-amount-fn Malleability)|))

(tell (low-amount-fn Porosity |(low-amount-fn Porosity)|))

(tell (low-amount-fn Raininess |(low-amount-fn Raininess)|))

(tell (low-amount-fn Relative-Humidity |(low-amount-fn Relative-Humidity)|))

(tell (low-amount-fn Rigidity |(low-amount-fn Rigidity)|))

(tell (low-amount-fn Shear-Strength |(low-amount-fn Shear-Strength)|))

(tell (low-amount-fn Tensile-Strength |(low-amount-fn Tensile-Strength)|))

(tell (low-amount-fn Visibility |(low-amount-fn Visibility)|))

(tell (making-fn Visual-Image |(making-fn Visual-Image)|))

(tell
 (meaning-in-system-fn sensus--information-1997
  "ADDRESSEE-ORIENTED-VERBAL-PROCESS"
  |(meaning-in-system-fn sensus--information-1997
 ADDRESSEE-ORIENTED-VERBAL-PROCESS)|))

(tell
 (meaning-in-system-fn sensus--information-1997
  "NON-ADDRESSEE-ORIENTED-VERBAL-PROCESS"
  |(meaning-in-system-fn sensus--information-1997
 NON-ADDRESSEE-ORIENTED-VERBAL-PROCESS)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "ABSTRACT-OBJECT"
  |(meaning-in-system-fn sensus--information-1997 ABSTRACT-OBJECT)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "AMBIENT-PROCESS"
  |(meaning-in-system-fn sensus--information-1997 AMBIENT-PROCESS)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "AREA"
  |(meaning-in-system-fn sensus--information-1997 AREA)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "CARDINALITY"
  |(meaning-in-system-fn sensus--information-1997 CARDINALITY)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "CAUSAL-RELATION"
  |(meaning-in-system-fn sensus--information-1997 CAUSAL-RELATION)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "CAUSE-EFFECT"
  |(meaning-in-system-fn sensus--information-1997 CAUSE-EFFECT)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "CONTAINED"
  |(meaning-in-system-fn sensus--information-1997 CONTAINED)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "DECOMPOSABLE-OBJECT"
  |(meaning-in-system-fn sensus--information-1997 DECOMPOSABLE-OBJECT)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "DIRECTED-ACTION"
  |(meaning-in-system-fn sensus--information-1997 DIRECTED-ACTION)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "DISTANCE"
  |(meaning-in-system-fn sensus--information-1997 DISTANCE)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "ELEMENT"
  |(meaning-in-system-fn sensus--information-1997 ELEMENT)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "ELEMENT-OF"
  |(meaning-in-system-fn sensus--information-1997 ELEMENT-OF)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "GAS-MATERIAL"
  |(meaning-in-system-fn sensus--information-1997 GAS-MATERIAL)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "GENERALIZED-POSSESSION"
  |(meaning-in-system-fn sensus--information-1997 GENERALIZED-POSSESSION)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "INTENSIVE"
  |(meaning-in-system-fn sensus--information-1997 INTENSIVE)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "INTERPERSONAL-THING"
  |(meaning-in-system-fn sensus--information-1997 INTERPERSONAL-THING)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "LANGUAGE"
  |(meaning-in-system-fn sensus--information-1997 LANGUAGE)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "LANGUAGE-RELATED-OBJECT"
  |(meaning-in-system-fn sensus--information-1997 LANGUAGE-RELATED-OBJECT)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "LESS-THAN-COMPARISON"
  |(meaning-in-system-fn sensus--information-1997 LESS-THAN-COMPARISON)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "LINEAR-SIZE"
  |(meaning-in-system-fn sensus--information-1997 LINEAR-SIZE)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "LIQUID-MATERIAL"
  |(meaning-in-system-fn sensus--information-1997 LIQUID-MATERIAL)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "LOCATING"
  |(meaning-in-system-fn sensus--information-1997 LOCATING)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "MISC-STUFF"
  |(meaning-in-system-fn sensus--information-1997 MISC-STUFF)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "NAMED-OBJECT"
  |(meaning-in-system-fn sensus--information-1997 NAMED-OBJECT)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "NON-CONSCIOUS-BEING"
  |(meaning-in-system-fn sensus--information-1997 NON-CONSCIOUS-BEING)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "NON-DIRECTED-ACTION"
  |(meaning-in-system-fn sensus--information-1997 NON-DIRECTED-ACTION)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "NONDECOMPOSABLE-OBJECT"
  |(meaning-in-system-fn sensus--information-1997 NONDECOMPOSABLE-OBJECT)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "NOTCONTAINED"
  |(meaning-in-system-fn sensus--information-1997 NOTCONTAINED)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "ONE-OR-TWO-D-LOCATION"
  |(meaning-in-system-fn sensus--information-1997 ONE-OR-TWO-D-LOCATION)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "ORDERED-SET"
  |(meaning-in-system-fn sensus--information-1997 ORDERED-SET)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "ORDERING-RELATION"
  |(meaning-in-system-fn sensus--information-1997 ORDERING-RELATION)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "OWNED-BY"
  |(meaning-in-system-fn sensus--information-1997 OWNED-BY)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "PHYSICAL-MATERIAL"
  |(meaning-in-system-fn sensus--information-1997 PHYSICAL-MATERIAL)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "REPRESENTATIONAL-OBJECT"
  |(meaning-in-system-fn sensus--information-1997 REPRESENTATIONAL-OBJECT)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "SENSE-AND-MEASURE-QUALITY"
  |(meaning-in-system-fn sensus--information-1997 SENSE-AND-MEASURE-QUALITY)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "SEPARABLE-ENTITY"
  |(meaning-in-system-fn sensus--information-1997 SEPARABLE-ENTITY)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "SET"
  |(meaning-in-system-fn sensus--information-1997 SET)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "SIZE"
  |(meaning-in-system-fn sensus--information-1997 SIZE)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "SIZE-PROPERTY-ASCRIPTION"
  |(meaning-in-system-fn sensus--information-1997 SIZE-PROPERTY-ASCRIPTION)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "SOLID-MATERIAL"
  |(meaning-in-system-fn sensus--information-1997 SOLID-MATERIAL)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "SOURCE-DESTINATION"
  |(meaning-in-system-fn sensus--information-1997 SOURCE-DESTINATION)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "SPATIAL-LOCATING"
  |(meaning-in-system-fn sensus--information-1997 SPATIAL-LOCATING)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "STRIVING"
  |(meaning-in-system-fn sensus--information-1997 STRIVING)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "SUBJECT-MATTER"
  |(meaning-in-system-fn sensus--information-1997 SUBJECT-MATTER)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "TEMPORAL-NONINCLUSIVE"
  |(meaning-in-system-fn sensus--information-1997 TEMPORAL-NONINCLUSIVE)|))

(tell
 (meaning-in-system-fn sensus--information-1997 "TIME-INTERVAL"
  |(meaning-in-system-fn sensus--information-1997 TIME-INTERVAL)|))

(tell
 (medium-amount-fn Bio-Deterioration-Resistance
  |(medium-amount-fn Bio-Deterioration-Resistance)|))

(tell (medium-amount-fn Compressibility |(medium-amount-fn Compressibility)|))

(tell
 (medium-amount-fn Corrosion-Resistance
  |(medium-amount-fn Corrosion-Resistance)|))

(tell (medium-amount-fn Elasticity |(medium-amount-fn Elasticity)|))

(tell (medium-amount-fn Flammability |(medium-amount-fn Flammability)|))

(tell (medium-amount-fn Fragility |(medium-amount-fn Fragility)|))

(tell (medium-amount-fn Hardness |(medium-amount-fn Hardness)|))

(tell (medium-amount-fn Porosity |(medium-amount-fn Porosity)|))

(tell (medium-amount-fn Raininess |(medium-amount-fn Raininess)|))

(tell (medium-amount-fn Rigidity |(medium-amount-fn Rigidity)|))

(tell (medium-amount-fn Shear-Strength |(medium-amount-fn Shear-Strength)|))

(tell
 (medium-amount-fn Tensile-Strength |(medium-amount-fn Tensile-Strength)|))

(tell (mob-fn Mountain |(mob-fn Mountain)|))

(tell (mob-fn Particle |(mob-fn Particle)|))

(tell (mob-fn Precipitation-Particle |(mob-fn Precipitation-Particle)|))

(tell (no-amount-fn Compressibility |(no-amount-fn Compressibility)|))

(tell (no-amount-fn Ductility |(no-amount-fn Ductility)|))

(tell (no-amount-fn Elasticity |(no-amount-fn Elasticity)|))

(tell (no-amount-fn Flammability |(no-amount-fn Flammability)|))

(tell (no-amount-fn Malleability |(no-amount-fn Malleability)|))

(tell (no-amount-fn Porosity |(no-amount-fn Porosity)|))

(tell (no-amount-fn Rigidity |(no-amount-fn Rigidity)|))

(tell (no-amount-fn Volatility |(no-amount-fn Volatility)|))

(tell (solid-fn Concrete |(solid-fn Concrete)|))

(tell (solid-fn Earth-Stuff |(solid-fn Earth-Stuff)|))

(tell (solid-fn Glass |(solid-fn Glass)|))

(tell (solid-fn Metal |(solid-fn Metal)|))

(tell (solid-fn Plastic |(solid-fn Plastic)|))

(tell (solid-fn Water |(solid-fn Water)|))

(tell (STIB (year-fn -902) |(STIB (year-fn -902))|))

#| Variable arity:
(tell
 (the-covering Creation-Event Destruction-Event
  |(the-covering Creation-Event Destruction-Event)|))
|#

#| Variable arity:
(tell
 (the-covering Gaining-User-Rights Losing-User-Rights
  |(the-covering Gaining-User-Rights Losing-User-Rights)|))
|#

#| Variable arity:
(tell
 (the-covering Movement--Translation-Event Movement--Rotation
  |(the-covering Movement--Translation-Event Movement--Rotation)|))
|#

#| Variable arity:
(tell
 (the-covering Organizational-Transfer-In Organizational-Transfer-Out
  |(the-covering Organizational-Transfer-In Organizational-Transfer-Out)|))
|#

#| Variable arity:
(tell
 (the-covering Transfer-In Transfer-Out
  |(the-covering Transfer-In Transfer-Out)|))
|#

#| Variable arity:
(tell
 (the-partition Adult-Animal Juvenile-Animal
  |(the-partition Adult-Animal Juvenile-Animal)|))
|#

#| Variable arity:
(tell
 (the-partition Artifact Inanimate-Thing--Natural
  |(the-partition Artifact Inanimate-Thing--Natural)|))
|#

#| Variable arity:
(tell
 (the-partition Corner--2d Corner--3d |(the-partition Corner--2d Corner--3d)|))
|#

#| Variable arity:
(tell (the-partition Dusk Dawn |(the-partition Dusk Dawn)|))
|#

#| Variable arity:
(tell
 (the-partition Female-Person Male-Person
  |(the-partition Female-Person Male-Person)|))
|#

#| Variable arity:
(tell
 (the-partition Intangible Partially-Tangible
  |(the-partition Intangible Partially-Tangible)|))
|#

#| Variable arity:
(tell
 (the-partition Invertebrate Vertebrate
  |(the-partition Invertebrate Vertebrate)|))
|#

#| Variable arity:
(tell
 (the-partition Non-Leap-Year Leap-Year
  |(the-partition Non-Leap-Year Leap-Year)|))
|#

#| Variable arity:
(tell
 (the-partition Non-Person-Animal Person
  |(the-partition Non-Person-Animal Person)|))
|#

#| Variable arity:
(tell
 (the-partition Non-Powered-Device Powered-Device
  |(the-partition Non-Powered-Device Powered-Device)|))
|#

#| Variable arity:
(tell
 (the-partition Set--Mathematical Cyc_Collection
  |(the-partition Set--Mathematical Cyc_Collection)|))
|#

#| Variable arity:
(tell
 (the-partition Set-Or-Collection Individual
  |(the-partition Set-Or-Collection Individual)|))
|#

#| Variable arity:
(tell
 (the-partition Translation--Flow Translation--Complete
  |(the-partition Translation--Flow Translation--Complete)|))
|#

(tell
 (transport-fn Gaseous-Tangible-Thing |(transport-fn Gaseous-Tangible-Thing)|))

(tell
 (transport-fn Liquid-Tangible-Thing |(transport-fn Liquid-Tangible-Thing)|))

(tell (transport-fn Person |(transport-fn Person)|))

(tell
 (transport-fn Semi-Solid-Tangible-Thing
  |(transport-fn Semi-Solid-Tangible-Thing)|))

(tell
 (transport-fn Solid-Tangible-Thing |(transport-fn Solid-Tangible-Thing)|))

(tell (transport-via-fn Animal |(transport-via-fn Animal)|))

(tell
 (transport-via-fn Device--User-Powered
  |(transport-via-fn Device--User-Powered)|))

(tell
 (very-high-amount-fn Bio-Deterioration-Resistance
  |(very-high-amount-fn Bio-Deterioration-Resistance)|))

(tell
 (very-high-amount-fn Corrosion-Resistance
  |(very-high-amount-fn Corrosion-Resistance)|))

(tell (very-high-amount-fn Flammability |(very-high-amount-fn Flammability)|))

(tell (very-high-amount-fn Fragility |(very-high-amount-fn Fragility)|))

(tell (very-high-amount-fn Hardness |(very-high-amount-fn Hardness)|))

(tell (very-high-amount-fn Porosity |(very-high-amount-fn Porosity)|))

(tell
 (very-high-amount-fn Relative-Humidity
  |(very-high-amount-fn Relative-Humidity)|))

(tell (very-high-amount-fn Rigidity |(very-high-amount-fn Rigidity)|))

(tell
 (very-high-amount-fn Shear-Strength |(very-high-amount-fn Shear-Strength)|))

(tell
 (very-high-amount-fn Tensile-Strength
  |(very-high-amount-fn Tensile-Strength)|))

(tell (very-low-amount-fn Ductility |(very-low-amount-fn Ductility)|))

(tell (very-low-amount-fn Flammability |(very-low-amount-fn Flammability)|))

(tell (very-low-amount-fn Fragility |(very-low-amount-fn Fragility)|))

(tell (very-low-amount-fn Hardness |(very-low-amount-fn Hardness)|))

(tell (very-low-amount-fn Malleability |(very-low-amount-fn Malleability)|))

(tell (very-low-amount-fn Porosity |(very-low-amount-fn Porosity)|))

(tell
 (very-low-amount-fn Relative-Humidity
  |(very-low-amount-fn Relative-Humidity)|))

(tell (very-low-amount-fn Rigidity |(very-low-amount-fn Rigidity)|))

(tell
 (very-low-amount-fn Shear-Strength |(very-low-amount-fn Shear-Strength)|))

(tell
 (very-low-amount-fn Tensile-Strength |(very-low-amount-fn Tensile-Strength)|))

(tell (wave-emission-fn Audible-Sound |(wave-emission-fn Audible-Sound)|))

(tell (wave-emission-fn Visible-Light |(wave-emission-fn Visible-Light)|))

