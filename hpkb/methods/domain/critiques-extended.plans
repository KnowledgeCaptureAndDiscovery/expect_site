(in-package "EVALUATION")
(use-package '("EXPECT" "PLANET"))
(loom::use-loom "EVALUATION" :dont-create-context-p t)



(setf *top-level-goal*      
;     '(estimate (obj force-ratio)
;       (available-to (inst-of task-action)))

  '(evaluate (obj (inst-of coa))
    (with-respect-to not-all-forces-arrayed))
	   
    )


(setq *exe-top-level-goal* 
    '(evaluate (obj |BlueBrigadeCOA2-4Mt|)
	       (with-respect-to not-all-forces-arrayed))


;    '(estimate (obj force-ratio)
;               (available-to |Destroy3|))
    )

(setq *exe-top-level-goals* 
  '(
;    (estimate (obj (spec-of combat-power))
;     (of |BlueTaskForce1|)
;     (with-respect-to |Destroy4|))
    
    
    (estimate (obj force-ratio)
     (available-to |Destroy3|))
    
    (estimate (obj amount)
     (of force-ratio)
     (needed-by-set |Destroy3|))
    
    (estimate (obj force-ratio)
     (available-to |Block3|))
    
    (estimate (obj amount)
     (of force-ratio)
     (needed-by-set |Block3|))

    (estimate (obj force-ratio)
     (available-to |Block4|))
    
    (estimate (obj amount)
     (of force-ratio)
     (needed-by-set |Block4|))
    
    (evaluate (obj |BlueBrigadeCOA2-4Mt|)
     (with-respect-to no-main-effort-identified))
    
    (evaluate (obj |BlueBrigadeCOA2-4Mt|)
     (with-respect-to no-fire-task-identified))
    
    (evaluate (obj |BlueBrigadeCOA2-4Mt|)
     (with-respect-to security-unit-identified))
    (evaluate (obj |BlueBrigadeCOA2-4Mt|)
     (with-respect-to rear-unit-identified))
	  
	  )
	)

(setf *top-level-goals*
   '(
     (evaluate (obj (inst-of coa))
	       (with-respect-to not-all-forces-arrayed))
     (evaluate (obj (inst-of coa))
		    (with-respect-to no-reserve-unit-identified))
     

     (estimate (obj force-ratio)
       (available-to (inst-of task-action)))

       (estimate (obj amount) 
	  (of force-ratio)
	 (needed-by-set (inst-of task-action)))
    ))

(def-expect-action 'check-not-arrayed)

(def-expect-action 'evaluate-ratio)

(def-expect-action 'or-objs)

#|
(defmacro defplan (name &key capability result-type method primitivep)
  `(push '((name ,name) 
	 (capability ,capability) 
	 (result-type ,result-type)
	 (method ,method)
	 (primitivep ,primitivep)
	 )
         *domain-plans*))
|#
;; **********************************************************************
;; **********************************************************************
;; FEASIBILITY
;; **********************************************************************
;; **********************************************************************

;;; Since force-ratio is a locally-computed resource, we just need to
;;; fill in how much is needed and available in each military-task.
;;; No, now we have actual code to calculate combat power


(defplan evaluate-combat-power-of-a-COA
    :capability (evaluate (obj (?c is (inst-of coa)))
			  (with-respect-to (?p is (spec-of combat-power))))
    :result-type (set-of (inst-of boolean))
    :method (evaluate-ratio (obj ?c)
			    (for (critical-event-of ?c))))


;(defplan evaluate-force-ratio-for-task-actions
;    :capability (evaluate-ratio (obj (?c is (inst-of coa)))
;		(for (?ce is (inst-of task-action))))
;    :result-type (inst-of boolean)
;    :method (is-less-or-equal
;	     (obj (estimate (obj (inst amount))
;			    (of (inst force-ratio))
;			    (needed-by-set ?ce)))
;	     (than (estimate (obj (inst force-ratio))
;			(available-to ?ce)))))

(def-expect-action 'estimate)
(def-expect-action 'check-if)
(def-expect-action 'find-the-evaluation-aspects)
(def-expect-action 'find-the-instances)
(def-expect-action 'count-the-elements)
(def-expect-action 'check-no-amount-needed)
(def-expect-action 'compute-attrition)
(def-expect-action 'estimate-general-attrition)

(defrelation with-respect-to :is-primitive expect-action-role)
(defrelation needed-by :is-primitive expect-action-role)
(defrelation needed-by-set :is-primitive expect-action-role)
(defrelation considering :is-primitive expect-action-role)
(defrelation available-to :is-primitive expect-action-role)

(defplan required-force-ratio-for-set-of-tasks
    :capability (estimate (obj (inst amount)) 
			  (of (inst force-ratio))
			  (needed-by-set 
			   (?s is (inst-of task-action))))
    :result-type (inst-of number)
    :method (estimate (obj amount) (of force-ratio)
		      (needed-by ?s)))


(defplan compute-force-ratio
  :capability (estimate (obj (inst force-ratio))
		    (available-to (?o is (inst-of task-action))))
  :result-type (inst-of number)
  :method (divide (obj (add (obj 
		          (estimate (obj (spec-of combat-power)) 
				(of (who ?o))
				(with-respect-to ?o)))))
	        (by (add (obj 
	                    (estimate (obj (spec-of combat-power))
				(of (unit-acted-on ?o))
				(with-respect-to ?o))))))
)


(defplan compute-combat-power
    :capability (estimate (obj (?o is (spec-of combat-power)))
			  (of (?u is (inst-of military-unit)))
			  (with-respect-to (?t is (inst-of task-action))))
    :result-type (inst-of number)
    :method (compute-attrition (obj (estimate (obj (spec-of combat-power))
					      (of ?u)))
			       (of ?u)
                               (with-respect-to ?t))
    )

(defplan compute-combat-power-for-unit
    :capability (estimate (obj (?o is (spec-of combat-power)))
			  (of (?u is (inst-of military-unit))))
    :result-type (inst-of number)
    :method (estimate (obj (spec-of combat-power))
		      (of ?u)
		      (with (|echelonOfUnit| ?u))))

(defplan compute-combat-power-for-subunits-brigade 
    :capability (estimate (obj (?o is (spec-of combat-power)))
			  (of (?u is (inst-of military-unit)))
			  (with (inst |Brigade-UnitDesignation|)))
    :result-type (inst-of number)
    :method (add (obj (estimate (obj (spec-of combat-power))
				(of (sub-unit ?u)))))
    )




#|
(defplan compute-combat-power-for-subunits-regiment 
    :capability (estimate (obj (?o is (spec-of combat-power)))
			  (of (?u is (inst-of military-unit)))
			  (with (inst |Regiment-UnitDesignation|)))
    :result-type (inst-of number)
    :method (find (obj (spec-of EXPECT::maximum))
	        (of (append
	     (add (obj (estimate (obj (spec-of combat-power))
			(of (sub-unit ?u))
			(with (sub-echelon |Regiment-UnitDesignation|)))))
	     (add (obj (estimate (obj (spec-of combat-power))
			     (of (spec-of armored-subunit))
			     (for ?u)))
		  (to (estimate (obj (spec-of combat-power))
			    (of (spec-of mechanized-subunit))
			    (for ?u))) )    
	     )))
    )
|#

(defplan compute-combat-power-for-subunits-regiment 
    :capability (estimate (obj (?o is (spec-of combat-power)))
			  (of (?u is (inst-of military-unit)))
			  (with (inst |Regiment-UnitDesignation|)))
    :result-type (inst-of number)
    :method (add (obj (estimate (obj (spec-of combat-power))
				(of (sub-unit ?u)))))
    )

;; default is 0.1
(defplan compute-combat-power-for-general ; default
    :capability (estimate (obj (?o is (spec-of combat-power)))
			  (of (?u is (inst-of military-unit)))
			  (with (?e is (inst-of |MilitaryEchelon|))))
    :result-type (inst-of number)
    :method 0.1
    )

(defplan compute-combat-power-for-battalion
    :capability (estimate (obj (?o is (spec-of combat-power)))
			  (of (?u is (inst-of military-unit)))
			  (with (inst |Battalion-UnitDesignation|)))
    :result-type (inst-of number)
    :method (if (there-is-not-any (obj (|equipmentOfUnit| ?u)))
		then (add (obj (estimate (obj (spec-of combat-power))
					 (of (sub-unit ?u)))))
		else (find (obj (spec-of EXPECT::maximum))
			   (of (find (obj (spec-of combat-power))
				     (of (|echelonOfUnit| ?u))
				     (with (|equipmentOfUnit| ?u)) ;; To do 
				     (with-respect-to (spec-of M2-Bn))))))
    )

(defplan compute-combat-power-for-company
    :capability (estimate (obj (?o is (spec-of combat-power)))
			  (of (?u is (inst-of military-unit)))
			  (with (inst |Company-UnitDesignation|)))
    :result-type (inst-of number)
    :method (divide (obj (add (obj (find (obj (spec-of combat-power))
					 (of |Battalion-UnitDesignation|)
					 (with (|equipmentOfUnit| ?u))
					 (with-respect-to (spec-of M2-Bn))))))
		    (by 4))
    :annotations ((:source "COA 2, Memo-7"))
    )

;; the default value for all units is 0.1
(defplan compute-combat-power-default
    :capability (find (obj (?o is (spec-of combat-power)))
		      (of (?u is (inst-of |MilitaryEchelon|)))
		      (with (?a is (inst-of |Artifact|)))
		      (with-respect-to (?m is (spec-of M2-Bn))))
    :result-type (inst-of number)
    :method 1)

;; **********************************************************************
;; compute attrition
;; **********************************************************************
(defplan compute-attrited-force-values
    :capability (compute-attrition (obj (?x is (inst-of number)))
				   (of (?u is (inst-of military-unit)))
				   (with-respect-to (?o is (inst-of task-action))))
    :result-type (inst-of number)
    :method (multiply (obj ?x)
		      (by (multiply (obj (estimate
					  (obj (spec-of attrition-rate))
					  (of ?u)
					  (for ?o)))
				    (by (estimate-general-attrition
					 (obj ?u)
					 (for (main-operation-of (coa-of-ce ?o)))))))))


(defplan estimate-attrition-for-military-unit-wrt-coa
    :capability (estimate-general-attrition (obj (?u is (inst-of military-unit)))
					    (for (?op is (inst-of |MilitaryOperation|))))
    :result-type (inst-of number)
    :method (if (there-is-not-any (obj 
				   (|sustainsAttritionDuringEvent| ?op ?u)))
		then 1
		else (divide (obj (|sustainsAttritionDuringEvent| ?op ?u))
			     (by 100))))

(defplan estimate-attrition-for-military-unit-wrt-task
    :capability (estimate (obj (?a is (spec-of attrition-rate)))
			  (of (?u is (inst-of military-unit)))
			  (for (?o is (inst-of task-action))))
    :result-type (inst-of number)
    :method (if (there-is-not-any (obj (all-events-before ?o)))
		then 1
		else (multiply (obj (find (obj (spec-of attrition-rate))
					  (of ?u)
					  (for (all-events-before ?o))))))
    )

(defplan accrue-attrition-values-from-previous-tasks-and-coa
    :capability (find (obj (?a is (spec-of attrition-rate)))
		      (of (?u is (inst-of military-unit)))
		      (for (?k is (inst-of task-action))))
    :result-type (inst-of number)
    :method (divide (obj 
		     (if (there-is-not-any (obj (|sustainsAttritionDuringEvent| ?k ?u)))
			 then 100
			 else (|sustainsAttritionDuringEvent| ?k ?u)))
		    (by 100))    
    :annotations ((:source "Attrition Assumptions"))
    )

;; **********************************************************************
;; Required Ratio (from KF 713x -- )
;; **********************************************************************

(defplan default-required-force-ratio-general
  :capability (estimate (obj (inst amount)) (of (inst force-ratio))
                        (needed-by (?o is (inst-of task-action))))
  :result-type (inst-of number)
  :method 1)
	
;; Destroy ans seize could be 3:1 page 134 CP Spec., Dec 2.
;; Assumed fix to Attack (against fixed defences)
(defplan default-required-force-ratio-for-Defendfromhastyposition
  :capability (estimate (obj (inst amount)) (of (inst force-ratio))
                        (needed-by (?o is (inst-of Defendfromhastyposition-MilitaryOperation))))
  :result-type (inst-of number)
  :method 2/5
  :annotations ((:source "KF 713.1")))


(defplan default-required-force-ratio-for-Counterattack
  :capability (estimate (obj (inst amount)) (of (inst force-ratio))
                        (needed-by (?o is (inst-of |Counterattack-MilitaryOperation|))))
  :result-type (inst-of number)
  :method 1
  :annotations ((:source "KF 713.1")))


(defplan default-required-force-ratio-for-delay-military-task
  :capability (estimate (obj (inst amount)) (of (inst force-ratio))
                        (needed-by (?o is (inst-of delay))))
  :result-type (inst-of number)
  :method 1/6
  :annotations ((:source "KF 713.1")))

(defplan default-required-force-ratio-for-defeat-military-task
  :capability (estimate (obj (inst amount)) (of (inst force-ratio))
                        (needed-by (?o is (inst-of |Defeat-MilitaryTask|))))
  :result-type (inst-of number)
  :method (if (determine-whether-there-are-any
	       (obj (spec-of |MilitaryDefensiveOperation|))
	       (in (main-operation-of (coa-of-ce ?o))))
	      then 1
	      else 3)
  :annotations ((:source "KF 713.1")))


(defplan default-required-force-ratio-for-destroy-military-task
  :capability (estimate (obj (inst amount)) (of (inst force-ratio))
                        (needed-by (?o is (inst-of |Destroy-MilitaryTask|))))
  :result-type (inst-of number)
  :method (if (determine-whether-there-are-any
	       (obj (spec-of |MilitaryDefensiveOperation|))
	       (in (main-operation-of (coa-of-ce ?o))))
	      then 1
	      else 3)
  :annotations ((:source "KF 713.1")))

(defplan default-required-force-ratio-for-MilitaryAttack
  :capability (estimate (obj (inst amount)) (of (inst force-ratio))
                        (needed-by (?o is (inst-of |MilitaryAttack|))))
  :result-type (inst-of number)
  :method 3
  :annotations ((:source "KF 713.1")))

(defplan default-required-force-ratio-for-MilitaryOffensiveOperation
  :capability (estimate (obj (inst amount)) (of (inst force-ratio))
                        (needed-by (?o is (inst-of |MilitaryOffensiveOperation|))))
  :result-type (inst-of number)
  :method 3
  :annotations ((:source "KF 713.1, KF 522.2")))


(defplan default-required-force-ratio-for-Attackprepareddefence
  :capability (estimate (obj (inst amount)) (of (inst force-ratio))
                        (needed-by (?o is (inst-of Attackprepareddefence-MilitaryOperation))))
  :result-type (inst-of number)
  :method 3
  :annotations ((:source "KF 713.1")))



(defplan default-required-force-ratio-for-Attackhastydefence
  :capability (estimate (obj (inst amount)) (of (inst force-ratio))
                        (needed-by (?o is (inst-of Attackhastydefence-MilitaryOperation))))
  :result-type (inst-of number)
  :method 2.5
  :annotations ((:source "KF 713.1")))

(defplan default-required-force-ratio-for-fix-military-task
  :capability (estimate (obj (inst amount)) (of (inst force-ratio))
                        (needed-by (?o is (inst-of fix))))
  :result-type (inst-of number)
  :method 2
  :annotations ((:source "KF 713.3")))

;; Assumed fix to Attack (against fixed defences)
(defplan default-required-force-ratio-for-penetrate-military-task
  :capability (estimate (obj (inst amount)) (of (inst force-ratio))
                        (needed-by (?o is (inst-of penetrate))))
  :result-type (inst-of number)
  :method 2
  :annotations ((:source "COA 1 in CP Spec")))

(defplan default-required-force-ratio-for-block-military-task
  :capability (estimate (obj (inst amount)) (of (inst force-ratio))
                        (needed-by (?o is (inst-of |Block-MilitaryTask|))))
  :result-type (inst-of number)
  :method 1/3
  :annotations ((:source "COA 2, Memo-7")))


(defplan default-required-force-ratio-for-hasty-defense
  :capability (estimate (obj (inst amount)) (of (inst force-ratio))
                        (needed-by (?o is (inst-of hasty-defense))))
  :result-type (inst-of number)
  :method 2/5
  :annotations ((:source "KF 713.1"))
  )

(defplan default-required-force-ratio-for-Defendfrompreparedposition
  :capability (estimate (obj (inst amount)) (of (inst force-ratio))
                        (needed-by (?o is (inst-of Defendfrompreparedposition-MilitaryOperation))))
  :result-type (inst-of number)
  :method 1/3
  :annotations ((:source "KF 713.1")))

(defplan default-required-force-ratio-for-MilitaryDefensiveOperation
  :capability (estimate (obj (inst amount)) (of (inst force-ratio))
                        (needed-by (?o is (inst-of |MilitaryDefensiveOperation|))))
  :result-type (inst-of number)
  :method 1/3
  :annotations ((:source "KF 713.1")))

;; check if the main operation or the main task is defensive
(defplan determine-whether-there-are-any-defensive-operation
    :capability (determine-whether-there-are-any
		 (obj (?d is (spec-of |MilitaryDefensiveOperation|)))
		 (in (?o is (inst-of |MilitaryOperation|))))
    :result-type (inst-of boolean)
    :method (or
	     (is-it-a (obj ?o)
			  (of (spec-of |MilitaryDefensiveOperation|)))
	     (or-objs (obj (is-it-a (obj (|taskOfOperation| ?o))
				    (of (spec-of defensive-task))))))
    :annotations ((:source "overall mission, Jim Donlon's comment"))
    )

;; **********************************************************************
;; Combat Power Values from Section 6, Memo-8
;; **********************************************************************
(defplan compute-combat-power-for-Bn-with-BradleyFightingVehicle-M2
    :capability (find (obj (?o is (spec-of combat-power)))
		      (of (inst |Battalion-UnitDesignation|))
		      (with (?a is (inst-of |BradleyFightingVehicle-M2|)))
		      (with-respect-to (?m is (spec-of M2-Bn))))
    :result-type (inst-of number)
    :method 1
    :annotations ((:source "Section 6, Memo-8"))
    )


(defplan compute-combat-power-for-Bn-with-M1A2AbramsTank
    :capability (find (obj (?o is (spec-of combat-power)))
		      (of (inst |Battalion-UnitDesignation|))
		      (with (?a is (inst-of |M1A2AbramsTank|)))
		      (with-respect-to (?m is (spec-of M2-Bn))))
    :result-type (inst-of number)
    :method 1.21    
    :annotations ((:source "Section 6, Memo-8"))
    )


;; M198?
(defplan compute-combat-power-for-Bn-with-Howitzer-155mmSelfPropelled
    :capability (find (obj (?o is (spec-of combat-power)))
		      (of (inst |Battalion-UnitDesignation|))
		      (with (?a is (inst-of |Howitzer-155mmSelfPropelled|)))
		      (with-respect-to (?m is (spec-of M2-Bn))))
    :result-type (inst-of number)
    :method 1.02
    :annotations ((:source "Section 6, Memo-8"))
    )


;;2S1 Bn??
(defplan compute-combat-power-for-Bn-with-Howitzer-122mmSelfPropelled
    :capability (find (obj (?o is (spec-of combat-power)))
		      (of (inst |Battalion-UnitDesignation|))
		      (with (?a is (inst-of |Howitzer-122mmSelfPropelled|)))
		      (with-respect-to (?m is (spec-of M2-Bn))))
    :result-type (inst-of number)
    :method 0.65
    :annotations ((:source "Section 6, Memo-8"))
    )

;;2S3 Bn??
(defplan compute-combat-power-for-Bn-with-Howitzer-152mmSelfPropelled
    :capability (find (obj (?o is (spec-of combat-power)))
		      (of (inst |Battalion-UnitDesignation|))
		      (with (?a is (inst-of |Howitzer-152mmSelfPropelled|)))
		      (with-respect-to (?m is (spec-of M2-Bn))))
    :result-type (inst-of number)
    :method 0.79
    :annotations ((:source "Section 6, Memo-8"))
    )


(defplan compute-combat-power-for-Bn-with-BattleTank-T64
    :capability (find (obj (?o is (spec-of combat-power)))
		      (of (inst |Battalion-UnitDesignation|))
		      (with (?a is (inst-of |BattleTank-T64|)))
		      (with-respect-to (?m is (spec-of M2-Bn))))
    :result-type (inst-of number)
    :method 0.50
    :annotations ((:source "Section 6, Memo-8"))
    )

(defplan compute-combat-power-for-Bn-with-BattleTank-T62
    :capability (find (obj (?o is (spec-of combat-power)))
		      (of (inst |Battalion-UnitDesignation|))
		      (with (?a is (inst-of |BattleTank-T62|)))
		      (with-respect-to (?m is (spec-of M2-Bn))))
    :result-type (inst-of number)
    :method 0.38
    :annotations ((:source "Section 6, Memo-8"))
    )



(defplan compute-combat-power-for-Bn-with-ArmoredPersonnelCarrier-BTR60
    :capability (find (obj (?o is (spec-of combat-power)))
		      (of (inst |Battalion-UnitDesignation|))
		      (with (?a is (inst-of |ArmoredPersonnelCarrier-BTR60|)))
		      (with-respect-to (?m is (spec-of M2-Bn))))
    :result-type (inst-of number)
    :method 0.41
    :annotations ((:source "Section 6, Memo-8"))
    )

(defplan compute-combat-power-for-Bn-with-BMP-2
    :capability (find (obj (?o is (spec-of combat-power)))
		      (of (inst |Battalion-UnitDesignation|))
		      (with (?a is (inst-of |BMP-2|)))
		      (with-respect-to (?m is (spec-of M2-Bn))))
    :result-type (inst-of number)
    :method 0.58
    :annotations ((:source "Section 6, Memo-8"))
    )


(defplan compute-combat-power-for-Bn-with-MultipleRocketLauncherSystem-MLRS
    :capability (find (obj (?o is (spec-of combat-power)))
		      (of (inst |Battalion-UnitDesignation|))
		      (with (?a is (inst-of |MultipleRocketLauncherSystem-MLRS|)))
		      (with-respect-to (?m is (spec-of M2-Bn))))
    :result-type (inst-of number)
    :method 0.65
    :annotations ((:source "Section 6, Memo-8"))
    )

;; **********************************************************************
;; **********************************************************************
;; CORRECTNESS
;; **********************************************************************
;; **********************************************************************

(defplan check-not-all-forces-arrayed
  :capability (evaluate (obj (?c is (inst-of coa)))
		    (with-respect-to (inst not-all-forces-arrayed)))
  :result-type (inst-of boolean)
  :method (there-are-any
	   (obj (filter (obj (sub-unit (|WHO| (coa-operation ?c))))
			(with (check-not-arrayed 
			       (obj (sub-unit (|WHO| (coa-operation ?c))))
			       (of (coa-operation ?c)))))))
  )

(defplan check-unit-arrayed
    :capability (check-not-arrayed (obj (?u is (inst-of military-unit)))
				   (of (?o is (inst-of |MilitaryOperation|))))
    :result-type (inst-of boolean)
    :method (if (not (or (there-are-any (obj (assigned-action ?u)))
		    (determine-whether
		     (obj ?u)
		     (is-a (spec-of set-member))
		     (of (append (|reserveUnitInMission| ?o)
				 (|securityUnitInMission| ?o)
				 (|unitOperatingInRear| ?o))))))
	      then true
	      else false)
    )

#|
(defplan check-unit-not-arrayed
    :capability (check-not-arrayed (obj (?u is (inst-of military-unit)))
				   (of (?o is (inst-of |MilitaryOperation|))))
    :result-type (inst-of boolean)
    :method (if (and (there-is-not-any (obj (assigned-action ?u)))
		     (check-not-arrayed (obj ?u)
					(in (spec-of |RESERVE-COA|))
					(of ?o))
		     (check-not-arrayed (obj ?u)
					(in (spec-of |SECURITY-COA|))
					(of ?o))
		     (check-not-arrayed (obj ?u)
					(in (spec-of |REAR-COA|))
					(of ?o)))
	      then true
	      else false))

(defplan check-unit-is-not-reserve-unit-in-mission
    :capability (check-not-arrayed (obj (?u is (inst-of military-unit)))
				   (in (?r is (spec-of |RESERVE-COA|)))
				   (of (?o is (inst-of |MilitaryOperation|))))
    :result-type (inst-of boolean)
    :method (determine-whether
	     (obj ?u)
	     (is-a (spec-of set-member))
	     (of (|reserveUnitInMission| ?o)))
    )

(defplan check-unit-is-not-security-unit-in-mission
    :capability (check-not-arrayed (obj (?u is (inst-of military-unit)))
				   (in (?r is (spec-of |SECURITY-COA|)))
				   (of (?o is (inst-of |MilitaryOperation|))))
    :result-type (inst-of boolean)
    :method (determine-whether
	     (obj ?u)
	     (is-a (spec-of set-member))
	     (of (|securityUnitInMission| ?o)))
    )
  
(defplan check-unit-is-not-unit-operating-in-rear
    :capability (check-not-arrayed (obj (?u is (inst-of military-unit)))
				   (in (?r is (spec-of |REAR-COA|)))
				   (of (?o is (inst-of |MilitaryOperation|))))
    :result-type (inst-of boolean)
    :method (determine-whether
	     (obj ?u)
	     (is-a (spec-of set-member))
	     (of (|unitOperatingInRear| ?o)))
    )
  
|#
;; **********************************************************************
;; **********************************************************************
;; COMPLETENESS
;; **********************************************************************
;; **********************************************************************

(defplan check-main-effort
  :capability (evaluate (obj (?c is (inst-of coa)))
		    (with-respect-to (inst no-main-effort-identified)))
  :result-type (inst-of boolean)
  :method (there-is-not-any
	   (obj (|unitAssignedMainOpEffort| (coa-operation ?c)))))

(defplan check-reserve-unit
  :capability (evaluate (obj (?c is (inst-of coa)))
		    (with-respect-to (inst no-reserve-unit-identified)))
  :result-type (inst-of boolean)
  :method (there-is-not-any
	   (obj (|reserveUnitInMission| (coa-operation ?c)))))

(defplan check-security-unit
  :capability (evaluate (obj (?c is (inst-of coa)))
		    (with-respect-to (inst no-security-unit-identified)))
  :result-type (inst-of boolean)
  :method (there-is-not-any
	   (obj (|securityUnitInMission| (coa-operation ?c)))))

(defplan check-rear-unit
  :capability (evaluate (obj (?c is (inst-of coa)))
		    (with-respect-to (inst no-rear-unit-identified)))
  :result-type (inst-of boolean)
  :method (there-is-not-any
	   (obj (|unitOperatingInRear| (coa-operation ?c)))))

(defplan check-fire-task
  :capability (evaluate (obj (?c is (inst-of coa)))
		    (with-respect-to (inst no-fire-task-identified)))
  :result-type (inst-of boolean)
  :method (there-is-not-any
	   (obj (|fireOperationTask| (coa-operation ?c)))))


;; **********************************************************************
;; primitive methods
;; **********************************************************************
(defplan THERE-IS-NOT-ANY--thing
    :capability (there-is-not-any
		  (obj (?l is (set-of (inst-of thing))))
		  )
    :result-type (inst-of boolean)
    :method (primitive-determine-whether-there-are-no-thing ?l)
    :primitivep t)

(defplan THERE-ARE-ANY--thing
    :capability (there-are-any
		  (obj (?l is (set-of (inst-of thing))))
		  )
    :result-type (inst-of boolean)
    :method (primitive-determine-whether-there-are-thing ?l)
    :primitivep t)

(defplan THERE-IS-NOT-object--thing
    :capability (there-is-not-any
		  (obj (?l is (inst-of thing)))
		  )
    :result-type (inst-of boolean)
    :method (primitive-determine-whether-there-are-no-thing ?l)
    :primitivep t)

(defplan THERE-ARE-ANY-object--thing
    :capability (there-are-any
		  (obj (?l is (inst-of thing)))
		  )
    :result-type (inst-of boolean)
    :method (primitive-determine-whether-there-are-thing ?l)
    :primitivep t)

(defplan or-boolean-objects
    :capability (or-objs
		  (obj (?l is (set-of (inst-of boolean))))
		  )
    :result-type (inst-of boolean)
    :method (primitive-or-boolean-objects ?l)
    :primitivep t)



(defun kb-get-cardinality (i r c)
  (if (and (EXPECT::kb-relation-p r)
   (EXPECT::kb-instance-p i)
   (EXPECT::kb-concept-p c))
      (loom::get-role-cardinality (EXPECT::kb-find-object i) 
  (EXPECT::kb-find-object r) :qualification 
  (EXPECT::kb-find-object c))
    0))

(defun primitive-determine-whether-there-are-no-thing (x)
  (if x
      'FALSE
    'TRUE))

(defun primitive-determine-whether-there-are-thing (x)
  (if x
	'TRUE
        'FALSE))

(defun primitive-or-boolean-objects (x)
  (cond ((null x)
	 'TRUE)
	((listp x)
	 (if (member 'TRUE x)
	     'TRUE
	   'FALSE))
	(t 'FALSE)))

