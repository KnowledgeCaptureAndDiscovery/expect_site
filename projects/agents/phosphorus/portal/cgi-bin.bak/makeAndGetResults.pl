#!/local/bin/perl

use CGI;
use XML::DOM;

$DATADIR = "/nfs/web/htdocs/expect/projects/agents/phosphorus/portal/groups/elves";

#####################################
# Global Variables
#####################################
$CGI;              # Cgi Handle
$USER;             # User Name
$AGENT="";
$AGENTNAME="";
$XMLDATA="";
$REQUESTSTRING;
$SERVER = "nitro.isi.edu";
$PORT = 4000;
$EMAIL;
$USERDIR;

#####################################
# Initializtion Function
#####################################

sub Initialize {
    $CGI = CGI->new();
    $USER = $CGI->param("user");
    $EMAIL = $CGI->param("email");
    $AGENTNAME = $CGI->param("agentname");
    $USERDIR = "$DATADIR/$AGENTNAME/users"; 
	 @temp = split(/-/,$AGENTNAME);
	 foreach $word(@temp) {
		  @letters = split(//,$word);
	     $letters[0] =~ tr/a-z/A-Z/;
		  $tmp = join("",@letters);
		  $AGENT .= $tmp;
	 }
	 print "Content-type: text/html\n\n";
}

sub PrintHead {
	 $|=1;
	 print<<Marker;
<html>
<head><title>$AGENT Monitoring</title></head>
<font face='Arial,Helvetica' size=-1>
<h4> Here is the result for the first request from the $AGENTNAME agent</h4>
Marker
}

sub PrintError {
	 print "<font color=red><b>ERROR: $!</b></font>\n<br>";
	 print "</html>\n";
}

sub MakeXMLData {
	$file = "$DATADIR/$AGENTNAME/tag-mapping.xml";
	local(%mapping);
	if(-f $file) {
        my $parser = XML::DOM::Parser->new();
	     my $doc = $parser->parsefile($file);
		  @param2=();
		  @maps2=();
        foreach my $map ($doc->getElementsByTagName('ParameterName')){
			  $val = $map->getFirstChild->getNodeValue;
           push(@param2,$val);
	     }
        foreach my $map ($doc->getElementsByTagName('TransName')){
			  $val = $map->getFirstChild->getNodeValue;
           push(@maps2,$val);
	     }
		  $i=0;
		  $len = @param2;
		  for($i=0; $i<$len; $i++) {
				$t1 = $param2[$i];
				$t2 = $maps2[$i];
				$mapping{$t1}=$t2;
		  }
		  $i=0;
		  while(1) {
				$tval = $CGI->param("arg$i");
				$param = $CGI->param("argval$i");
				if($param eq "") { last; }
				$newtag = $mapping{$param};
				$XMLDATA .= "<$newtag>$tval</$newtag>";
				$i++;
		  }
    }
}

sub MakeRequestString {
	 MakeXMLData();
	 local($tmp)="";
	 $tmp .= "($AGENT,(ask-one\n";
	 $tmp .= "  :sender PhosphorusPortal\n";
	 $tmp .= "  :receiver TheseusMA\n";
	 $tmp .= "  :reply-with t123\n";
	 $tmp .= "  :content (\n";
	 $tmp .= "     :domain ft\n";
	 $tmp .= "     :wrapper addGridTask\n";
	 $tmp .= "     :agentname $AGENTNAME\n";
	 $tmp .= "     :sinput \"<OBJECT>$XMLDATA</OBJECT>\"\n";
	 $tmp .= ")\n";
	 $tmp .= ")\n";
	 $tmp .= "EOL\n";
	 $REQUESTSTRING = $tmp;
}

sub ConnectToServer {
	if(! -d "$USERDIR/$EMAIL") {
     system("mkdir -p \"$USERDIR/$EMAIL\"");
     system("touch \"$USERDIR/$EMAIL/log\"");
   }

   open(FILE,">>$USERDIR/$EMAIL/log");
   $date = `date`;
   print FILE "----$date-----\n";     

	use IO::Socket;
	my $sock = new IO::Socket::INET (
                                  PeerAddr => "$SERVER",
                                  PeerPort => "$PORT",
                                  Proto => 'tcp',
                                 );
   if (!$sock) {return 0;}
	$| = 1;
   print $sock "$REQUESTSTRING\n";

   #  ---- For Testing ----
	#$line = "(reply   :sender flight-status :receiver PhosphorusPortal :in-reply-to\n >\"<OBJECT>";
	#$line .= "( <airline>delta air lines</airline><flight>11</flight><date>12/12/2001</date>";
	#$line .= "<IN_DAIRPORT>LAX</IN_DAIRPORT><email>jeanoh\@isi.edu</email><hfax>3108220751</hfax>";
	#$line .= "<cfax></cfax></OBJECT>\":content (<message><subject>Departs in 2.5 hours</subject>";
	#$line .= "<content> Dear jeanoh_at_isi_edu,\n";
	#$line .= "  this message was generated by your flight monitoring elf.\n";
   #$line .= "      -- Electric elves\n";
   #$line .= "</content><shortcontent></shortcontent></message>))\n";


   # Uncomment if expecting more than 1 Message
   #for(;;) {
     $sock->recv($line,1024);
	  $line =~ s/\n/\01/g;
	  
	 #($junk,$line) = split(/:in-reply-to\01*\s*\>\s*\"/,$line,2);
	  #($line,$content) = split(/\"\s*:\s*content\01*\s*\(/,$line,2);
	  #$line =~ s/\01/\n/g;
	  print FILE "$line\n"; 
	  $line =~ s/\</&lt;/g;
	  $line =~ s/\>/&gt;/g;
	  print "<pre>$line<\/pre>\n";
	  #$content =~ s/\01/\n/g;
	  #$content =~ s/\</&lt;/g;
	  #$content =~ s/\>/&gt;/g;

	  #print "<b>In Reply To: \n<br><pre>$line<\/pre><\/b><br>\n";
	  #print "<b>Content: \n<br><pre>$content<\/pre><\/b><br>\n";
	  #if(!$line) {
	#		last;
	#  }
   #}
   close ($sock);
   print FILE "\n";
   close(FILE);    	
   return 1;
}




#####################################
# Main
#####################################
{
	 Initialize();
	 PrintHead();
	 MakeRequestString();
	 if(!ConnectToServer()) {
		  PrintError();
	 }
}
