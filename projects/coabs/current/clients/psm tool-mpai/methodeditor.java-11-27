
//
// Top-level class for a method editor
//

import javax.swing.*;
import javax.swing.text.*;
import javax.swing.event.*;
import javax.swing.tree.*;
import java.awt.*;
import java.awt.event.*;

import java.io.*;
import java.util.*;

import Connection.*;

public class MethodEditor extends JFrame {

    public LispSocketAPI lc = null;

    private StyleContext sc;
    private Style replaceHighlight, withHighlight;
    private ActiveText capArea = null; //, bodyArea = null;
    private AltNode altTop = null;
    private JTree bodyArea = null;
    private DefaultTreeModel treeModel;
    private JTextField oldField = null, newField = null, searchField = null;

    private LayedData treeNL = null, oldObj = null, newObj = null;
    private String methodName = null;

    private MethodEditor self;

    private static final int SELECTING_OLD = 1;
    private static final int SELECTING_NEW = 2;
    private int state = SELECTING_OLD;

    // This added when I used the StylePad example.
    Hashtable runAttr;

    public MethodEditor(String passed_methodName, LispSocketAPI passed_lc) {
        super("Method Editor");
        
        lc = passed_lc;
        methodName = passed_methodName;

        makeEditor();
    }

    public MethodEditor(String passed_methodName, LispSocketAPI passed_lc, boolean mainWindow) {
        super("Method Editor");
        
        lc = passed_lc;
        methodName = passed_methodName;

        makeEditor();

        // Close up on window closing if this is the main window.
        if (mainWindow == true) {
	  addWindowListener(new WindowAdapter() {
	      public void windowClosing(WindowEvent e) {
		try {lc.close(); } catch (IOException ie) {}
		System.exit(0);
	      }
	  });
        }
    }

    // I use this class to store the information at the nodes in the
    // alternatives tree.
    public class AltNode extends DefaultMutableTreeNode {
        public String text = null;  // English text
        public String path = null; // a string of numbers for the path.
        public boolean isHeader = false;  // A header is the title for a group.
        public boolean highlighted = false; //set by search, used in rendering.
        public boolean newRelation = false; // whether to create a new role.
        public boolean newObject = false;  // there's surely a more elegant way
        public String newDomain = "";
        public String newRange = "";
        public String newObjectType = "";

        public AltNode (String ptext, String ppath, boolean pisHeader) {
	  super(ptext);	  // make the text be the user object.
	  text = ptext;
	  path = ppath;
	  isHeader = pisHeader;
        }
    }


    public void makeEditor() {

        self = this;

        sc = new StyleContext();
        runAttr = new Hashtable();

        getContentPane().setLayout(new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));
        
        JPanel donePane = new JPanel();
        donePane.setLayout(new FlowLayout(FlowLayout.LEFT));
        JButton doneBut = new JButton("done");
        doneBut.addActionListener(new ActionListener() {
	  public void actionPerformed(ActionEvent e) {
	      lc.sendLispCommand("(expect::tcl-nl-commit-notify)");
	      lc.safeReadLine();
	      //lc.sendLispCommand("(expect::update-local-errors-in-existing-plan-after-modif expect::*edited-method*)");
	      lc.sendLispCommand("(expect::ka-process-plan-modification (list 'expect::substitute-plan expect::*edited-method*))");
	      lc.safeReadLine();
	      self.respondToDone();  // see comments with this method definition
	  }
        });
        donePane.add(doneBut);
        getContentPane().add(donePane);

        capArea = new CapText(sc);
        JScrollPane capScrollPane = new JScrollPane(capArea);
        capScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        capScrollPane.setPreferredSize(new Dimension(500,100));

        getContentPane().add(capScrollPane);

        JPanel oldTextPane = new JPanel();
        oldTextPane.setLayout(new FlowLayout(FlowLayout.LEFT));
        JLabel oldLabel = new JLabel("Replace");
        oldTextPane.add(oldLabel);
        oldField = new JTextField(40);
        oldField.setForeground(Color.red);
        oldTextPane.add(oldField);
        getContentPane().add(oldTextPane);

        JPanel newTextPane = new JPanel();
        newTextPane.setLayout(new FlowLayout(FlowLayout.LEFT));
        JLabel newLabel = new JLabel("With");
        newLabel.setSize(oldLabel.getSize());
        newTextPane.add(newLabel);
        newField = new JTextField(40);
        newField.setForeground(Color.green);
        newTextPane.add(newField);
        getContentPane().add(newTextPane);

        JPanel butPane = new JPanel();
        butPane.setLayout(new FlowLayout(FlowLayout.LEFT));
        JButton updateBut = new JButton("Update");
        updateBut.addActionListener(new ActionListener() {
	  public void actionPerformed(ActionEvent e) {
	      if (//bodyArea.selected != null &&
		  bodyArea.getSelectionPath() != null) {
		  AltNode dt = (AltNode)
		      bodyArea.getLastSelectedPathComponent();
		  if (//newField.getText().equals(bodyArea.selected.deepText()) == true
		      newField.getText().equals(dt.text) == true) {
		      readMethod("(let ((*package* \"EXPECT\")) (expect::tcl-update '" + oldObj.name + " nil '(" + // bodyArea.selected.name + " '" + bodyArea.selected.index + "))");
				 dt.path + ")))");
		  }
	      } else if (newObj != null && 
			 newField.getText().equals(newObj.deepText()) == true) {  
		  // perhaps the field comes from the body
		  readMethod("(let ((*package* \"EXPECT\")) (expect::tcl-update " 
			     + oldObj.name + " " + newObj.name + " nil))");
	      } else if (newField.getText() != null) {
		  // Something was typed in the "with" field.
		  readMethod("(let ((*package* \"EXPECT\")) (expect::tcl-update '" + oldObj.name + " nil nil '" + newField.getText() + "))");
	      }
	      if (newField.getText() != null) {
		setState(SELECTING_OLD);
	      }
	      displayMethod();
	  }
        });
        JButton undoBut = new JButton("Undo");
        undoBut.addActionListener(new ActionListener() {
	  public void actionPerformed(ActionEvent e) {
	      readMethod("(let ((*package* \"EXPECT\")) (expect::tcl-undo))");
	      setState(SELECTING_OLD);
	      displayMethod();
	  }
        });
        butPane.add(undoBut);
        butPane.add(updateBut);
        JButton clearBut = new JButton("Clear");
        clearBut.addActionListener(new ActionListener() {
	  public void actionPerformed(ActionEvent e) {
	      setState(SELECTING_OLD);
	  }
        });
        butPane.add(clearBut);

        JLabel searchLabel = new JLabel("Search for:");
        butPane.add(searchLabel);

        searchField = new JTextField(20);
         searchField.addKeyListener(new KeyAdapter() {
	  public void keyTyped(KeyEvent e) {
	      if (e.getKeyChar() == '\n' || e.getKeyChar() == '\r') {
		// bodyAread.higlight..
		self.highlightMatches(searchField.getText());
		//self.searchForTerms(searchField.getText());
	      }
	  }
        });
        butPane.add(searchField);

        JButton searchBut = new JButton("Search");
        searchBut.addActionListener(new ActionListener() {
	  public void actionPerformed(ActionEvent e) {
	      // bodyArea.highlight..
	      //self.highlightMatches(searchField.getText());
	      self.searchForTerms(searchField.getText());
	  }
        });
        butPane.add(searchBut);


        JButton nextBut = new JButton("Next");
        nextBut.addActionListener(new ActionListener() {
	  public void actionPerformed(ActionEvent e) {
	      AltNode selectedNode = null; // if a highlighted node is currently selected.
	      if (bodyArea.getSelectionPath() != null) {
		selectedNode = (AltNode)bodyArea.getLastSelectedPathComponent();
		if (selectedNode.highlighted == false)
		    selectedNode = null;
	      }
	      // First step past the current node, then look for the
	      // next highlighted node. If nothing found, after,
	      // return the first node found.
	      AltNode firstMatch = null;
	      boolean pastSelected = false, found = false;
	      AltNode currentNode = null;
	      for(Enumeration en = altTop.depthFirstEnumeration();
		found == false && en.hasMoreElements();) {
		currentNode = (AltNode)en.nextElement();
		if (currentNode.highlighted == true) {
		    if (firstMatch == null)
		        firstMatch = currentNode;
		    if (selectedNode == null || pastSelected == true)
		        found = true;
		}
		if (currentNode == selectedNode)
		    pastSelected = true;
	      }
	      if (found == false && firstMatch != null) {
		found = true;
		currentNode = firstMatch;
	      }
	      if (found == true) {
		TreePath currentPath = new TreePath(currentNode.getPath());
		bodyArea.setSelectionPath(currentPath);
		bodyArea.scrollPathToVisible(currentPath);
	      }
	  }
        });
        butPane.add(nextBut);

        getContentPane().add(butPane);

        /* bodyArea = new ActiveText(sc) {
	  public void actionPerformed(MouseEvent e) {
	      if (state == SELECTING_NEW) {
		newField.setText(selected.deepText());
	      }
	  }
        }; */
        altTop = new AltNode("Alternatives", " ", true);
        treeModel = new DefaultTreeModel(altTop);
        bodyArea = new JTree(treeModel);
        bodyArea.getSelectionModel().setSelectionMode
	  (TreeSelectionModel.SINGLE_TREE_SELECTION);
        bodyArea.addTreeSelectionListener(new TreeSelectionListener() {
	  public void valueChanged(TreeSelectionEvent e) {
	      AltNode n = (AltNode) bodyArea.getLastSelectedPathComponent();
	      if (n == null) return;
	      if (n.newRelation == true) {
		// Need to make sure the relation gets added
		// automatically to the alternatives and selected.
		new RelationEditor(lc, n.newDomain, n.newRange) {
		    public void respondToDone() {
		        TreePath tp = bodyArea.getLeadSelectionPath();
		        AltNode top = (AltNode)tp.getParentPath().getParentPath().getLastPathComponent();
		        addAlternatives
			  (top, "(expect::print-alts-for-alternative '("
			   + top.path + "))");
		    }
		};
	      } else if (n.newObject == true) {
		new InstanceEditor(lc, n.newObjectType){
		    public void respondToDone() {
		        TreePath tp = bodyArea.getLeadSelectionPath();
		        AltNode top = (AltNode)tp.getParentPath().getParentPath().getLastPathComponent();
		        if (top != null)
			  addAlternatives
			      (top, "(expect::print-alts-for-alternative '("
			       + top.path + "))");
		    }
		};
	      } else if (n.isHeader == false) {
		newField.setText(n.text);
		String command = "(expect::print-alts-for-alternative '("
		    + n.path + "))";
		addAlternatives(n, command);
	      }
	  }
        });
        bodyArea.setCellRenderer(new AltCellRenderer());
        JScrollPane bodyScrollPane = new JScrollPane(bodyArea);
        bodyScrollPane.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        bodyScrollPane.setPreferredSize(new Dimension(500,500));

        getContentPane().add(bodyScrollPane);

        // null and "" are probably the same, but I'm not sure.
        if (methodName == "" || methodName == null) {
	  JButton choose = new JButton("Choose method: ");
	  choose.addActionListener(new ActionListener() {
	      public void actionPerformed(ActionEvent e) {
		new planReader(lc, self);
	      }});
	  butPane.add(choose);
        } else {
	  readAndDisplayMethod();
        }

        // added on top of the normal and highlighted styles that come
        // with ActiveText.
        Style heading = sc.addStyle("bold", capArea.normalStyle);
        StyleConstants.setBold(heading, true);

        replaceHighlight = capArea.highlightStyle;

        // Highlighted to replace something with (secondary highlight style).
        withHighlight = sc.addStyle("with", capArea.highlightStyle);
        StyleConstants.setForeground(withHighlight, Color.green);

        pack();
        setVisible(true);
    }

    public void setState (int newState) {
        if (newState == SELECTING_OLD) {
	  capArea.removeSelection();
	  //bodyArea.removeSelection();
	  //bodyArea.setText("");
	  //bodyArea.lData = null;
	  altTop.removeAllChildren();// seems to work here, but not for other nodes
	  newObj = null;
	  treeModel.reload();
	  oldField.setText("");
	  newField.setText("");
	  capArea.highlightStyle = replaceHighlight;
	  //bodyArea.highlightStyle = replaceHighlight;
	  state = SELECTING_OLD;
        } else if (newState == SELECTING_NEW) {
	  //bodyArea.highlightStyle = withHighlight;
	  capArea.highlightStyle = withHighlight;
	  state = SELECTING_NEW;
        }
    }

    class planReader extends JFrame implements ListSelectionListener {
        private MethodEditor superEd;
        private Vector plans;
        public planReader(LispSocketAPI lc, MethodEditor me) {
	  superEd = me;
	  lc.sendLispCommand("(expect::tcl-show-methods)");
	  plans = lc.readList();
	  JList methods = new JList(plans);
	  methods.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
	  CBRenderer renderer = new CBRenderer();
	  methods.setCellRenderer(renderer);
	  methods.addListSelectionListener(this);
	  getContentPane().add(methods);
	  pack();
	  setVisible(true);
        }

        public void valueChanged(ListSelectionEvent e) {
	  JList jl = (JList) e.getSource();
	  Vector plan = (Vector) plans.elementAt(jl.getSelectedIndex());
	  methodName = (String) plan.elementAt(2);
	  superEd.readAndDisplayMethod();
        }
    }
	
    class CBRenderer extends JLabel
        implements ListCellRenderer {
        public CBRenderer() {
	  setOpaque(true);
	  setHorizontalAlignment(CENTER);
	  setVerticalAlignment(CENTER);
        }
        public Component getListCellRendererComponent(
					    JList list,
					    Object value,
					    int index,
					    boolean isSelected,
					    boolean cellHasFocus)
        {
	  if (isSelected) {
	      setBackground(list.getSelectionBackground());
	      setForeground(list.getSelectionForeground());
	  } else {
	      setBackground(list.getBackground());
	      setForeground(list.getForeground());
	  }
	  setText((String)((Vector)value).elementAt(2));
	  return this;
        }
    }   

    public void readMethod(String command) {
        lc.sendLispCommand(command);
        Vector indexedNL = lc.readList();

        // Currently all lists have length 1, extra nesting added by the
        // new server.
        indexedNL = (Vector)indexedNL.elementAt(0);
        //System.out.println("Read: " + indexedNL);

        // Hack to make treeNL an overall object that points to both
        // pieces of linked text.
        treeNL = new LayedData(0);
        treeNL.children = new Vector();
        Vector subNL = (Vector) indexedNL.elementAt(1);
        treeNL.children.addElement(makeTreeNL((Vector)subNL.elementAt(1)));
        subNL = (Vector) indexedNL.elementAt(2);
        treeNL.children.addElement(makeTreeNL((Vector)subNL.elementAt(1)));

        // install the LayedData in the capability active text object
        capArea.lData = treeNL;
    }
		
    public void readAndDisplayMethod(String name) {
        methodName = name;
        readAndDisplayMethod();
    }
	
    public void readAndDisplayMethod() {
        readMethod("(let ((*package* (find-package \"EXPECT\"))) (expect::tcl-display-method-text '" + methodName + "))");
        displayMethod();
    }

    public void displayMethod() {
        Document doc = capArea.getDocument();

        try {
	  doc.remove(0, doc.getLength());
	  doc.insertString(doc.getLength(), "In order to",
		         capArea.sc.getStyle("bold"));
	  capArea.displayLayedData((LayedData)treeNL.children.elementAt(0));
	  doc.insertString(doc.getLength(), "\n\n", capArea.normalStyle);
	  capArea.displayLayedData((LayedData)treeNL.children.elementAt(1));
        } catch (BadLocationException ble) {
	  System.err.println("Couldn't display initial text in method editor");
        }
    }

    // Parse the 4-element list structure of lisp's linked text into LayedData.
    public LayedData makeTreeNL(Vector linkedNL) {
        LayedData res = new LayedData();

        Vector english = (Vector)linkedNL.elementAt(0);
        if (english.size() > 0) {
	  res.text = (String)english.elementAt(0);
        }
        res.name = (String)linkedNL.elementAt(2);
        if (linkedNL.elementAt(3).equals("NIL") == false) {	// always true now
	  Vector lkids = (Vector)linkedNL.elementAt(3);
	  res.children = new Vector();
	  for(int i = 0; i < lkids.size(); i++) {
	      res.children.addElement(makeTreeNL((Vector)lkids.elementAt(i)));
	  }
        }
        return res;
    }

    // Specialise action in the active text for the capability.
    public class CapText extends ActiveText {

        public CapText(StyleContext sc) {
	  super(sc);
        }

        // the already present list of choices for the user
	java.util.Vector ListPresent;
	String LispCommand = null;

        public void actionPerformed(MouseEvent e) {
	System.out.println("In actionPerformed of CapText");
	  if (state == SELECTING_OLD) 
	  {
	      System.out.println("in SELECTING_OLD");

	      oldField.setText(selected.deepText());
	      oldObj = selected;
	      
	      LispCommand = "(expect::index-is-list? " + selected.name + ")";
	      lc.sendLispCommand(LispCommand);
	      
	      String ResultString = null;
	      int IsList = 0;

	      try
	      {
	          System.out.println("In try of actionPerformed of Captext");
	          ResultString = lc.safeReadLine();
		  
	          System.out.println("ResultString = " + ResultString);
		  System.out.println("ResultLength = " + ResultString.length());
		  if(ResultString.length() > 0)
		  {
		      System.out.println("before ResultInteger = new Integer(ResultString);");
		      Integer ResultInteger = new Integer(ResultString);
	          
	              System.out.println("before IsList = ResultInteger.intValue()");
		      IsList = ResultInteger.intValue();
                  }
		  else
		  {
		      IsList = 0;
		  }
	      }
	      catch(Connection.FactoryException e1)
	      {
	          System.out.println("in catch");
	          System.err.println("Error in verifying a list");
		  System.err.println(e1.toString());
	      }

              //IsList = 1; //hack to check whether the choices are showing up
	      if(IsList == 1)
	      {
	          lc.sendLispCommand("(expect::possible-fillers-of-list " + selected.name + ")");
  	          ListPresent = lc.readList();
	          ListPresent.addElement("second element");
	          System.out.println(ListPresent.toString());

		  //convert the Vector elements to a list
                  java.awt.List choices = new java.awt.List();
	          for(int i = 0; i < ListPresent.size(); i++) 
	             choices.add(ListPresent.get(i).toString());

		  //instantiate a frame for the user to choose entries
	          Frame ListOptions = new ListChoices(choices);
	          ListOptions.resize(300,300);
	          ListOptions.show();

		  //the choices obtained after the 
	          String NewChoices = new String();
		  NewChoices = choices.getSelectedItem();
		  System.out.println("Choices are : " + NewChoices);
		  // TODO : further processing of the choices
              }
	      else
	      {
	          addAlternatives(altTop,
		 "(expect::print-alts-for-index " + selected.name + ")");
              }	    
	  } else if (state == SELECTING_NEW) {
	      System.out.println("in SELECTING_NEW");
	      newField.setText(selected.deepText());
	      newObj = selected;
	  }
        }
    }

    public void addAlternatives(AltNode topNode, String command) {
        String line;
        //Document doc = bodyArea.getDocument();
        //bodyArea.lData = new LayedData();
        //Style boldStyle = bodyArea.sc.getStyle("bold");
        AltNode category = null;
        int group, alt;
        
        while (treeModel.getChildCount(topNode) > 0)
	  treeModel.removeNodeFromParent((AltNode)treeModel.getChild(topNode, 0));
        lc.sendLispCommand(command);
        // try {
        // doc.remove(0, doc.getLength());
        line = lc.safeReadLine();
        group = -1; alt = 0;
        while(line.equals("done") == false) {
	  Vector data = lc.readList(line);
	  if (data.elementAt(0).equals("ALT-TYPE") == true) {
	      /* LayedData header = 
	         new LayedData("\n" + (String) data.elementAt(1) + "\n");
	         header.normalStyle = boldStyle;
	         header.active = false;
	         bodyArea.lData.addChild(header);
	      */
	      // First, make the children of the previous category
	      // visible if there are four or fewer (somewhat arbitrary)
	      if (group > -1 && category.getChildCount() < 5 &&
		category.getChildCount() > 0) {
		bodyArea.scrollPathToVisible(new TreePath(((AltNode)category.getFirstChild()).getPath()));
	      }
	      // Then move on to the new category.
	      group++;
	      alt = 0;
	      category = new AltNode((String)data.elementAt(1), 
			         topNode.path + " " + group + " ",
			         true);
	      treeModel.insertNodeInto(category, topNode, 
				 topNode.getChildCount());
	      if (group == 0) 
		bodyArea.scrollPathToVisible(new TreePath(category.getPath()));
	  } else {
	      if (data.elementAt(0).equals("NIL") == false &&
		((Vector)data.elementAt(0)).size() > 0) {
		//LayedData child = bodyArea.lData.addChild((String)((Vector)data.elementAt(0)).elementAt(0));
		//child.index = alt++;
		//child.name = "" + group;
		AltNode child =
		    new AltNode((String)((Vector)data.elementAt(0)).elementAt(0), 
			      category.path + " " + alt++ + " ",
			      false);
		try {
		    if (data.size() > 1 &&
		        ((Vector)data.elementAt(1)).size() > 0) {
		        String token = (String)((Vector)data.elementAt(1)).elementAt(0);
		        if (token.equals(":NEW-RELATION") == true) {
			  child.newRelation = true;
			  child.newDomain = (String)((Vector)data.elementAt(1)).elementAt(2);
			  child.newRange = (String)((Vector)data.elementAt(1)).elementAt(3);
		        } else if (token.equals(":NEW-OBJECT") == true) {
			  child.newObject = true;
			  child.newObjectType = (String)((Vector)data.elementAt(1)).elementAt(2);
		        }
		    }
		} catch (ClassCastException cce) {} // if it's not a vector
		treeModel.insertNodeInto(child, category, 
				     category.getChildCount());
	      }
	  }
	  line = lc.safeReadLine();
        }
        lc.safeReadLine();   // Consume the function return.
        // bodyArea.displayLayedData();
        // } catch (BadLocationException ble) {}
        // Make the children visible if there is only one cateogory
        if (topNode.getChildCount() == 1)
	  bodyArea.expandPath(new TreePath(((AltNode)topNode.getFirstChild()).getPath()));
        setState(SELECTING_NEW);
    }

    public void highlightMatches(String matchText) {
        boolean found = false;
        for(Enumeration e = altTop.depthFirstEnumeration(); 
	  e.hasMoreElements();) {
	  AltNode dt = (AltNode)e.nextElement();
	  if (dt.text.indexOf(matchText) > -1) {
	      dt.highlighted = true;
	      // make the first match visible.
	      if (found == false) {
		found = true;
		bodyArea.scrollPathToVisible(new TreePath(dt.getPath()));
	      }
	  } else {
	      dt.highlighted = false;
	  }
        }
        bodyArea.repaint(bodyArea.getBounds(null));
    }

    public void searchForTerms(String matchText) {
        addAlternatives(altTop, 
		    "(expect::print-alts-matching-string \"" + matchText + "\")");
    }

    private class AltCellRenderer extends DefaultTreeCellRenderer {
        public Component getTreeCellRendererComponent(
		        JTree tree, Object value, boolean sel,
                            boolean expanded, boolean leaf, int row,
                            boolean hasFocus) {
            super.getTreeCellRendererComponent(
                            tree, value, sel,
                            expanded, leaf, row,
                            hasFocus);
	  AltNode dt = (AltNode)value;
	  // Make the font red if this node should be highlighted.
            if (dt.highlighted == true) {
                setForeground(Color.red);
            }
            return this;
        }
    }

    // This method can be specialized to alter the behaviour of the
    // method editor when the user clicks "done". Note that the normal
    // behavour still happens as well if you specialize this, you just
    // get to add more actions. See the critique wizard's
    // WizardMethodLine for an example of using this.
    public void respondToDone() {
    }

    public static void main(String[] args) {
        LispSocketAPI mainlc = new LispSocketAPI("camelot.isi.edu", "5679");
        String methodName = "";
        System.out.println(args.length + " args:");
        for(int i = 0; i < args.length; i++)
	  System.out.println(i + ": " + args[i]);
        if (args.length > 0) {
	  methodName = args[0];
        }
        MethodEditor me = new MethodEditor(methodName, mainlc, true);
    }

}

