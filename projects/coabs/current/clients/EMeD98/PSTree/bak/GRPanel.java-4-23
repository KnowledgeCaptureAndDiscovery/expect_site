//File: treePanel.java
//
// Copyright (C) 1998 by Jihie Kim
// All Rights Reserved
//

package PSTree;

import java.io.PrintStream;
import com.sun.java.swing.tree.*;
import com.sun.java.swing.JFrame;
import com.sun.java.swing.JPanel;
import com.sun.java.swing.JScrollPane;
import com.sun.java.swing.JButton;
import com.sun.java.swing.JComponent;
import com.sun.java.swing.event.TreeSelectionListener;
import com.sun.java.swing.event.TreeSelectionEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.event.WindowEvent;
import java.awt.event.WindowAdapter;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.Component;
import java.awt.Dimension;

import com.sun.java.swing.JOptionPane;
import java.util.Stack;

import Connection.ExpectServer;
import xml2jtml.methodDefRenderer;
import Tree.expandableTree;
import Tree.expandableTreeNode;
import Tree.ViewFrame;

public class GRPanel extends JPanel {
  JScrollPane sp;
  GRRenderer app;
  expandableTree tree;
  String xmlInput;

  JPanel buttons;
  private JButton selectButton;
  private JButton hideDetailsButton;
  private JButton showDetailsButton;
  private JButton nodeDetailsButton;
  private JButton partialMatchButton;

  ExpectServer es;
  String type;
  PSundefinedGoalsPanel gPanel;
  public GRPanel(String Stype, ExpectServer theServer,
		 PSundefinedGoalsPanel ugPanel) {
    gPanel = ugPanel;
    es = theServer;
    type = Stype;
    if (type.equals("method-relation")) {
      xmlInput = es.getMethodRelationTree(type);
    }
    else if (type.equals("allRfml")) {
      xmlInput = es.getPSMethodRelAll(type); 
    }
    else if (type.equals("completedRfml")) {
      xmlInput = es.getPSMethodRelation(type);
    }
    else {
      System.out.println("invalid type:"+type);
    }
    //System.out.println("type:"+type+"\n xml:"+xmlInput);
    app = new GRRenderer(xmlInput,es);
    tree = app.getTree();
    tree.setCellRenderer(new GRCellRenderer());
    sp = new JScrollPane(tree);
    tree.expandTree();
    tree.addTreeSelectionListener(new TreeSelectionListener() {
      
      public void valueChanged(TreeSelectionEvent e) {
	expandableTreeNode current = tree.getSelectedNode();
	String content = (String) current.getUserObject();
	if (content.startsWith("[UNDEFINED")) {
	  int result = JOptionPane.showConfirmDialog(null, "Do you want to define the method?");
    
	  if (result == JOptionPane.YES_OPTION) {
	    gPanel.setSelectedNode (current.getID());
	    gPanel.createMethod();
	  }
	  else if(result == JOptionPane.NO_OPTION)
	    JOptionPane.showMessageDialog(null, "well, you may want to modify/add other methods then.");
	}
      }
    });


    setLayout(new BorderLayout());
    selectButton = new JButton("Method Def");
    selectButton.addActionListener (new selectListener());
    hideDetailsButton = new JButton("Summary");
    hideDetailsButton.addActionListener (new hideDetailsListener());
    showDetailsButton = new JButton("Details");
    showDetailsButton.addActionListener (new showDetailsListener());
    nodeDetailsButton = new JButton("Node Details");
    nodeDetailsButton.addActionListener (new nodeDetailsListener());

    partialMatchButton = new JButton("Show potential match for incomplete goals");
    partialMatchButton.addActionListener (new partialMatchListener());

    buttons = new JPanel();
    buttons.setLayout(new GridLayout(1,0));
    buttons.add(selectButton);
    buttons.add(nodeDetailsButton);

    buttons.add(hideDetailsButton);
    buttons.add(showDetailsButton);
    buttons.add(partialMatchButton);

    showDetailsButton.setEnabled(false);
 
    add("Center",sp);
    add("South",buttons);

  }
    
  public void reload () {
    
  }

  class hideDetailsListener implements ActionListener {
    public void actionPerformed (ActionEvent e) {
      hideDetails();
    }
  }

  private void hideDetails() {
    showDetailsButton.setEnabled(true);
    hideDetailsButton.setEnabled(false);
    tree.setCellRenderer(new GRSmallCellRenderer());
    //sp = new JScrollPane(tree);
    repaint();
  }

  class showDetailsListener implements ActionListener {
    public void actionPerformed (ActionEvent e) {
      showDetails();
    }
  }

  private void showDetails() {
    showDetailsButton.setEnabled(false);
    hideDetailsButton.setEnabled(true);
    tree.setCellRenderer(new GRCellRenderer());

    repaint();
  }

  class nodeDetailsListener implements ActionListener {
    public void actionPerformed (ActionEvent e) {
      nodeDetails();
    }
  }

  private void nodeDetails() {
    
    expandableTreeNode current = tree.getSelectedNode();
    if (current == null) {
      JOptionPane.showMessageDialog(null, "Please select a node first");
    }
    else {
      String name = tree.getSelectedName();
    
      String content = (String) current.getUserObject();
      ViewFrame ed = new ViewFrame("Node", name, content);
    }
  }

  class selectListener implements ActionListener {
    public void actionPerformed (ActionEvent e) {
      select();
    }
  }

  private void select() {
    expandableTreeNode current = tree.getSelectedNode();
    String content = (String) current.getUserObject();
    if (content.startsWith("[UNDEFINED")) {
      JOptionPane.showMessageDialog(null, "method is not defined yet");
      return;
    }
    String name = tree.getSelectedName();
    if (name!= null) name = name.trim();
   
    if (name == null||name.equals("NIL") ||
	name.equals("covering-or-input") || name.equals("set"))
      JOptionPane.showMessageDialog(null, "No method built for this goal");
    else {
      methodDefRenderer defRenderer = new methodDefRenderer();
      String definition = defRenderer.toHtml(es.getMethodDef(name));
      ViewFrame ed = new ViewFrame("Method", name, definition);
    }
  }

  class partialMatchListener implements ActionListener {
    public void actionPerformed (ActionEvent e) {
      partialMatch();
    }
  }

  public void partialMatch() {
    partialMatchFrame gf = new partialMatchFrame(es, this);
  }

  public static void main(String[] args) { 
    ExpectServer es = new ExpectServer();
    GRPanel tpanel = new GRPanel("allRfml",es, null);
    JFrame frame = new JFrame("Method Tree");
     frame.addWindowListener(new WindowAdapter() {
        public void windowClosing(WindowEvent e) {
                  System.exit(0);
        }
      });
     frame.getContentPane().add(tpanel);
     frame.setSize(700, 500);
     frame.setVisible(true);

  }


}
