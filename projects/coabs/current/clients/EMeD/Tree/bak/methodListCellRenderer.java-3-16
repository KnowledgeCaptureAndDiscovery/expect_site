/*
 * @(#)methodListCellRenderer.java	1.8 98/01/07
 *
 * Copyright (c) 1997 Sun Microsystems, Inc. All Rights Reserved.
 *
 * This software is the confidential and proprietary information of Sun
 * Microsystems, Inc. ("Confidential Information").  You shall not
 * disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Sun.
 *
 * SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF THE
 * SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE, OR NON-INFRINGEMENT. SUN SHALL NOT BE LIABLE FOR ANY DAMAGES
 * SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR DISTRIBUTING
 * THIS SOFTWARE OR ITS DERIVATIVES.
 *
 */
package Tree;

import javax.swing.*;
import java.util.Vector;
import javax.swing.tree.*;
import java.awt.*;
import javax.swing.text.JTextComponent;


public class methodListCellRenderer extends JTextArea implements TreeCellRenderer
{
    /** Font used if the string to be displayed isn't a font. */
    static protected Font             defaultFont;
    /** Icon to use when the item is collapsed. */
    static protected ImageIcon        collapsedIcon;
    /** Icon to use when the item is expanded. */
    static protected ImageIcon        expandedIcon;
    static protected ImageIcon        lockIcon;

  static protected ImageIcon        leftIcon;
  static protected ImageIcon       rightIcon;
  static protected final Color SelectedBackgroundColor = Color.yellow;//new Color(0, 0, 128);
  static protected final Color rfmlColor = new Color(0,150,50);
  static protected final Color warningColor = Color.gray;//new Color(150,50,50);
  static protected final Color highlightColor = Color.blue;

  boolean partitionInfo;
  boolean potentialInfo;
    /** Color to use for the background when selected. */
  FontMetrics fm;
  searchMethodsRenderer searchResultsRenderer;

  static Icon theIcon = null;
    static
    {
      leftIcon =new ImageIcon("images/bracket.gif");
      rightIcon =new ImageIcon("images/bracket2.gif");
	try {
	    defaultFont = new Font("Dialog", Font.BOLD, 12);
	    collapsedIcon =new ImageIcon("images/collapsed.gif");
	    expandedIcon = new ImageIcon("images/expanded.gif");
	    lockIcon = null;//new ImageIcon("images/foot.gif");
	} catch (Exception e) {}
	try {
	  collapsedIcon =new ImageIcon("images/collapsed.gif");
	  expandedIcon = new ImageIcon("images/expanded.gif");
	  lockIcon = null;//new ImageIcon("images/foot.gif");
	} catch (Exception e) {
	    System.out.println("Couldn't load images: " + e);
	}
	
    }
  
    /** Whether or not the item that was last configured is selected. */
    protected boolean            selected;

    /**
      * This is messaged from JTree whenever it needs to get the size
      * of the component or it wants to draw it.
      * This attempts to set the font based on value, which will be
      * a TreeNode.
      */

  String lines[] = new String[50];
  int rowIdx;
  int colIdx;
  int inputWidth;
  public methodListCellRenderer (searchMethodsRenderer sRenderer) {
    searchResultsRenderer = sRenderer; 
    fm = getFontMetrics(defaultFont);
   
  }
 
  public void setIcon (ImageIcon ic) {
    theIcon = ic;
  }
  public Icon getIcon () {
    return theIcon;
  }
  public int getIconTextGap () {
    return 4;
  }
  public Component getTreeCellRendererComponent(JTree tree, Object value,
						boolean selected, boolean expanded,
						boolean leaf, int row,
						boolean hasFocus) {
	Font            font;
	String          stringValue = tree.convertValueToText(value, selected,
					   expanded, leaf, row, hasFocus);

	/* Set the text. */
	//System.out.println(" stringValue:"+stringValue);

	setText(stringValue);
	/* Tooltips used by the tree. */
	//setToolTipText(stringValue);

	int idx;
	rowIdx = 0;colIdx = 0;
	String temp = stringValue;
	partitionInfo = false;
	potentialInfo = false;
	while ((idx = temp.indexOf("\n")) >= 0) {
	  lines[rowIdx] = temp.substring(0,idx);
	  //System.out.println("new string:"+lines[rowIdx]+"**"+lines[rowIdx].length());
	  
	  temp = temp.substring(idx+1);
	  inputWidth = Math.max(inputWidth, fm.stringWidth(lines[rowIdx]));
	  colIdx = Math.max(colIdx, lines[rowIdx].length());
	  rowIdx++;
	}
	lines[rowIdx] = temp;
	if (lines[rowIdx].indexOf ("can be") > 0)
	  partitionInfo = true;
	else if (lines[0].indexOf ("Potential") >= 0) {
	  potentialInfo = true;
	}
	inputWidth = Math.max(inputWidth, fm.stringWidth(lines[rowIdx]));
	colIdx = Math.max(colIdx, lines[rowIdx].length());
	rowIdx++;

	/* Set the image. */
	if(expanded)
	    setIcon(expandedIcon);
	else if(!leaf)
	    setIcon(collapsedIcon);
	else
	    setIcon(lockIcon);
	    
	/* Set the color and the font based on the SampleData userObject. */
	setFont(defaultFont);
	/* Update the selected flag for the next paint. */
	this.selected = selected;
	//setRows(rowIdx);
	if (rowIdx == 1) // label
	  setColumns(colIdx);
	return this;
    }


  private void drawStringWithHighlights (Graphics g, String line, int offset, int gap) {
    String word;
    int wordLocation, currentInputWidth, currentLoc;
    Color oldColor = g.getColor();
    boolean foundKeyword;

    Vector highlightedWords = searchResultsRenderer.getKeywords();
    currentLoc = 0;
    if (highlightedWords == null) {
      g.drawString(line,offset,gap);
      return;
    }
    while (currentLoc <line.length()) {
      foundKeyword = false;
      currentInputWidth = fm.stringWidth(line.substring(0,currentLoc));
      for (int i=0; i<highlightedWords.size(); i++) {
	word = (String) highlightedWords.elementAt(i);
	if (line.toLowerCase().startsWith(word, currentLoc)) {
	  foundKeyword = true;
	  g.setColor (highlightColor);
	  g.drawString(line.substring(currentLoc, currentLoc+word.length()),
		       offset+currentInputWidth,gap);
	  g.setColor (oldColor);
	  currentLoc = currentLoc+ word.length();
	  break;
	}
      }
      if (!foundKeyword) {
	g.drawString(line.substring(currentLoc, currentLoc+1),
		     offset+currentInputWidth,gap);
	currentLoc++;
      }
    }
  }
    
   Image offscreen;
    Dimension offscreensize;
    public void paint(Graphics g) {
	Color            bColor;
	Icon             currentI = getIcon();

	
	Dimension d = getSize();
	//System.out.println("size:"+d.width+","+d.height);
	if(selected)
	    bColor = SelectedBackgroundColor;
	else if(getParent() != null)
	    bColor = getParent().getBackground();
	else
	    bColor = getBackground();
	g.setColor(bColor);

	int  offset;
	

	if(currentI != null && getText() != null) {
	  //System.out.println(" == with icon");
	  //offset = currentI.getIconWidth() + getIconTextGap();
	  offset = currentI.getIconWidth() + getIconTextGap();
	  //System.out.println("offset:"+ offset);
	  
	  g.fillRect(0, 0, inputWidth, (getHeight() - 1)*rowIdx);
	  
	}
	else {
	  g.fillRect(0, 0, inputWidth, (getHeight()-1)*rowIdx);
	  offset = 5;
	  
	}
	int h = getHeight();
	int hoff = 15;
	g.setFont(defaultFont);

	if (currentI !=null)  g.drawImage(((ImageIcon)currentI).getImage(), 0, rowIdx*7, null);
	 // method
	
	if (rowIdx == 1) { // label 
	  g.setFont(new Font("Dialog", Font.BOLD, 12)); 
	  if (partitionInfo) g.setColor(rfmlColor);
	  else g.setColor(Color.black);
	  drawStringWithHighlights(g,lines[0], offset, hoff);
	}
	else {
	  int gap=0;
	  for (int i=0; i<rowIdx;i++) {
	    gap = i*(h/rowIdx) + hoff;
	    if (i==0 && lines[i].indexOf("no direct match") >=0) { 
	      g.setColor(Color.red);
	    }
	    else if (partitionInfo) {
	      g.setColor(rfmlColor);
	    }
	    else if (potentialInfo) {
	      g.setColor(warningColor);
	    }
	    else {
	      g.setColor(Color.black);
	    }
	   
	    drawStringWithHighlights(g, lines[i], offset, gap);
	
	    g.setColor(bColor);	
	  }  
	}
	
    }
    
  
}
