
;;; Current state of the KB (2/3/2001 11:38.58, KM 1.4.3.3)

(reset-kb)

(disable-slot-checking)      ;;; (Temporarily disable while rebuilding KB state)

(disable-classification)     ;;; (Temporarily disable while rebuilding KB state)

;;; ----------

(*abnormal has 
  (instance-of (Temperature-Scalar)))

;;; ----------

(*adolescent has 
  (instance-of (Age-Scalar)))

;;; ----------

(*aggressive has 
  (instance-of (Trait-Scalar)))

;;; ----------

(*arid has 
  (instance-of (Wetness-Scalar)))

;;; ----------

(*back has 
  (instance-of (Face)))

;;; ----------

(*big has 
  (instance-of (Size-Scalar)))

;;; ----------

(*boiling has 
  (instance-of (Temperature-Scalar)))

;;; ----------

(*boney has 
  (instance-of (Consistency-Scalar)))

;;; ----------

(*bottom has 
  (instance-of (Face)))

;;; ----------

(*breakable has 
  (instance-of (Breakability-Scalar)))

;;; ----------

(*brittle has 
  (instance-of (Breakability-Scalar)))

;;; ----------

(*Celcius has 
  (instance-of (UoM-Temperature)))

;;; ----------

(*cold has 
  (instance-of (Temperature-Scalar)))

;;; ----------

(*cold-hot-scale has 
  (instance-of (Temperature-Scale))
  (scale ((:seq *cold *warm *hot))))

;;; ----------

(*compressible has 
  (instance-of (Density-Scalar)))

;;; ----------

(*crystalline has 
  (instance-of (Consistency-Scalar)))

;;; ----------

(*damp has 
  (instance-of (Wetness-Scalar)))

;;; ----------

(*day has 
  (instance-of (UoM-Time)))

;;; ----------

(*deep has 
  (instance-of (Depth-Scalar)))

;;; ----------

(*deep-rooted has 
  (instance-of (Depth-Scalar)))

;;; ----------

(*delicate has 
  (instance-of (Breakability-Scalar)))

;;; ----------

(*dry has 
  (instance-of (Taste-Scalar
                Wetness-Scalar)))

;;; ----------

(*dry-to-sweet has 
  (instance-of (Taste-Scale))
  (scale ((:seq *dry *sweet))))

;;; ----------

(*elderly has 
  (instance-of (Age-Scalar)))

;;; ----------

(*empty has 
  (instance-of (Capacity-Scalar)))

;;; ----------

(*empty-full-scale has 
  (instance-of (Capacity-Scale))
  (scale ((:seq *empty *full))))

;;; ----------

(*Farenheight has 
  (instance-of (UoM-Temperature)))

;;; ----------

(*fine has 
  (instance-of (Width-Scalar)))

;;; ----------

(*foot has 
  (instance-of (UoM-Length)))

;;; ----------

(*fragile has 
  (instance-of (Breakability-Scalar)))

;;; ----------

(*freezing has 
  (instance-of (Temperature-Scalar)))

;;; ----------

(*freezing-boiling-scale has 
  (instance-of (Temperature-Scale))
  (scale ((:seq *freezing *boiling))))

;;; ----------

(*front has 
  (instance-of (Face)))

;;; ----------

(*fruity has 
  (instance-of (Taste-Scalar)))

;;; ----------

(*full has 
  (instance-of (Capacity-Scalar)))

;;; ----------

(*full-bodied has 
  (instance-of (Taste-Scalar)))

;;; ----------

(*gallon has 
  (instance-of (UoM-Volume)))

;;; ----------

(*gigantic has 
  (instance-of (Size-Scalar)))

;;; ----------

(*glassy has 
  (instance-of (Consistency-Scalar)))

;;; ----------

(*grainy has 
  (instance-of (Consistency-Scalar)))

;;; ----------

(*grams has 
  (instance-of (UoM-Mass)))

;;; ----------

(*grams/liter has 
  (instance-of (UoM-Density)))

;;; ----------

(*granitic has 
  (instance-of (Consistency-Scalar)))

;;; ----------

(*gritty has 
  (instance-of (Consistency-Scalar)))

;;; ----------

(*hard has 
  (instance-of (Density-Scalar)))

;;; ----------

(*hefty has 
  (instance-of (Mass-Scalar)))

;;; ----------

(*high has 
  (instance-of (Height-Scalar)))

;;; ----------

(*hot has 
  (instance-of (Temperature-Scalar)))

;;; ----------

(*hour has 
  (instance-of (UoM-Time)))

;;; ----------

(*huge has 
  (instance-of (Area-Scalar)))

;;; ----------

(*inch has 
  (instance-of (UoM-Length)))

;;; ----------

(*juvenile has 
  (instance-of (Age-Scalar)))

;;; ----------

(*Kelvin has 
  (instance-of (UoM-Temperature)))

;;; ----------

(*kilograms has 
  (instance-of (UoM-Mass)))

;;; ----------

(*kilograms/gallon has 
  (instance-of (UoM-Density)))

;;; ----------

(*large has 
  (instance-of (Size-Scalar
                Volume-Scalar)))

;;; ----------

(*left has 
  (instance-of (Face)))

;;; ----------

(*light has 
  (instance-of (Mass-Scalar)))

;;; ----------

(*light-to-hefty has 
  (instance-of (Mass-Scale))
  (scale ((:seq *light *hefty))))

;;; ----------

(*liter has 
  (instance-of (UoM-Volume)))

;;; ----------

(*little has 
  (instance-of (Size-Scalar)))

;;; ----------

(*long has 
  (instance-of (Length-Scalar)))

;;; ----------

(*low has 
  (instance-of (Height-Scalar)))

;;; ----------

(*microscopic has 
  (instance-of (Size-Scalar)))

;;; ----------

(*middle-aged has 
  (instance-of (Age-Scalar)))

;;; ----------

(*mild has 
  (instance-of (Temperature-Scalar)))

;;; ----------

(*minute has 
  (instance-of (UoM-Time)))

;;; ----------

(*moist has 
  (instance-of (Wetness-Scalar)))

;;; ----------

(*month has 
  (instance-of (UoM-Time)))

;;; ----------

(*mouth-watering has 
  (instance-of (Taste-Scalar)))

;;; ----------

(*narrow has 
  (instance-of (Width-Scalar)))

;;; ----------

(*normal has 
  (instance-of (Temperature-Scalar)))

;;; ----------

(*old has 
  (instance-of (Age-Scalar)))

;;; ----------

(*oval has 
  (instance-of (Shape-Scalar)))

;;; ----------

(*oversized has 
  (instance-of (Size-Scalar)))

;;; ----------

(*petrous has 
  (instance-of (Density-Scalar)))

;;; ----------

(*right has 
  (instance-of (Face)))

;;; ----------

(*rocky has 
  (instance-of (Consistency-Scalar)))

;;; ----------

(*rough has 
  (instance-of (Texture-Scalar)))

;;; ----------

(*round has 
  (instance-of (Shape-Scalar)))

;;; ----------

(*salty has 
  (instance-of (Taste-Scalar)))

;;; ----------

(*semihard has 
  (instance-of (Density-Scalar)))

;;; ----------

(*shallow has 
  (instance-of (Depth-Scalar)))

;;; ----------

(*shallow-deep-scale has 
  (instance-of (Depth-Scale))
  (scale ((:seq *shallow *deep))))

;;; ----------

(*short has 
  (instance-of (Height-Scalar
                Length-Scalar)))

;;; ----------

(*short-long-scale has 
  (instance-of (Length-Scale))
  (scale ((:seq *short *long))))

;;; ----------

(*short-to-tall has 
  (instance-of (Height-Scale))
  (scale ((:seq *short *average *tall))))

;;; ----------

(*slender has 
  (instance-of (Width-Scalar)))

;;; ----------

(*small has 
  (instance-of (Size-Scalar
                Volume-Scalar)))

;;; ----------

(*small-to-large has 
  (instance-of (Size-Scale))
  (scale ((:seq *microscopic *tiny *small *large *gigantic))))

;;; ----------

(*smooth has 
  (instance-of (Texture-Scalar)))

;;; ----------

(*soft has 
  (instance-of (Density-Scalar)))

;;; ----------

(*soft-to-hard has 
  (instance-of (Density-Scale))
  (scale ((:seq *soft *semihard *hard))))

;;; ----------

(*solid has 
  (instance-of (Density-Scalar)))

;;; ----------

(*spacious has 
  (instance-of (Area-Scalar)))

;;; ----------

(*spicey has 
  (instance-of (Taste-Scalar)))

;;; ----------

(*square has 
  (instance-of (Shape-Scalar)))

;;; ----------

(*square-inch has 
  (instance-of (UoM-Area)))

;;; ----------

(*square-meter has 
  (instance-of (UoM-Area)))

;;; ----------

(*steep has 
  (instance-of (Depth-Scalar)))

;;; ----------

(*sticky has 
  (instance-of (Wetness-Scalar)))

;;; ----------

(*stony has 
  (instance-of (Consistency-Scalar)))

;;; ----------

(*submissive has 
  (instance-of (Trait-Scalar)))

;;; ----------

(*sweet has 
  (instance-of (Taste-Scalar)))

;;; ----------

(*tall has 
  (instance-of (Height-Scalar)))

;;; ----------

(*tangy has 
  (instance-of (Taste-Scalar)))

;;; ----------

(*teenage has 
  (instance-of (Age-Scalar)))

;;; ----------

(*tenuous has 
  (instance-of (Width-Scalar)))

;;; ----------

(*thick has 
  (instance-of (Thickness-Scalar
                Width-Scalar)))

;;; ----------

(*thin has 
  (instance-of (Thickness-Scalar
                Width-Scalar)))

;;; ----------

(*thin-to-thick has 
  (instance-of (Width-Scale))
  (scale ((:seq *thin *thick))))

;;; ----------

(*tiny has 
  (instance-of (Area-Scalar
                Size-Scalar)))

;;; ----------

(*top has 
  (instance-of (Face)))

;;; ----------

(*triangular has 
  (instance-of (Shape-Scalar)))

;;; ----------

(*unbreakable has 
  (instance-of (Breakability-Scalar)))

;;; ----------

(*undersized has 
  (instance-of (Size-Scalar)))

;;; ----------

(*undersized-to-oversized has 
  (instance-of (Size-Scale))
  (scale ((:seq *undersized *oversized))))

;;; ----------

(*warm has 
  (instance-of (Temperature-Scalar)))

;;; ----------

(*wet has 
  (instance-of (Wetness-Scalar)))

;;; ----------

(*wide has 
  (instance-of (Width-Scalar)))

;;; ----------

(*woody has 
  (instance-of (Density-Scalar)))

;;; ----------

(*yard has 
  (instance-of (UoM-Length)))

;;; ----------

(*year has 
  (instance-of (UoM-Time)))

;;; ----------

(*young has 
  (instance-of (Age-Scalar)))

;;; ----------

(*young-to-old has 
  (instance-of (Age-Scale))
  (scale ((:seq *young *middle-aged *old))))

;;; ----------

(3prime-Untranslated-Region has 
  (superclasses (RNA-Region)))

;;; ----------

(5-Carbon-Sugar has 
  (superclasses (Sugar))
  (subclasses (Ribose
               Deoxyribose)))

;;; ----------

(5prime-Untranslated-Region has 
  (superclasses (RNA-Region)))

;;; ----------

(7-Methyl-Guanosine has 
  (superclasses (Organelle)))

;;; ----------

(A-Site has 
  (superclasses (Binding-Site)))

;;; ----------

(Absorb has 
  (superclasses (Take-In))
  (required-slot (object
                  destination
                  agent))
  (primary-slot (source
                 path))
  (cmap-correspondence ((:seq agent "the absorb'er")
                        (:seq object "the Fluid being absorbed")
                        (:seq destination "final location")
                        (:seq source "original location")
                        (:seq path "the portal")))
  (test-case ('((*Plant has (instance-of (Organism))) (*Water has (instance-of (Fluid))) (*Absorb has (instance-of (Absorb)) (agent (*Plant)) (object (*Water))) (do-and-next *Absorb) ((the object of *Absorb) isa Fluid)))))

(every Absorb has 
  (object ((a Fluid)))
  (destination ((a Place)))
  (agent ((must-be-a Living-Entity)))
  (source ((must-be-a Place)))
  (path ((must-be-a Portal))))

;;; ----------

(abuts has 
  (instance-of (Relation))
  (domain (Place))
  (range (Place))
  (inverse (abuts))
  (cardinality (N-to-N))
  (situation-specific (t))
  (fluent-status (*Non-Fluent)))

;;; ----------

(Acid has 
  (superclasses (Molecule)))

;;; ----------

(Acidic-Amino-Acid has 
  (superclasses (Amino-Acid
                 Anion))
  (subclasses (Glutamic-Acid
               Aspartic-Acid)))

;;; ----------

(Action has 
  (superclasses (Event))
  (primary-slot (agent
                 object
                 instrument))
  (secondary-slot (subevent))
  (cmap-correspondence ((:seq object "direct object of the change")
                        (:seq agent "doer")
                        (:seq instrument "instrument")))
  (subclasses (Virus-Invades-Cell-Scenario-fixed
               Virus-Invades-Cell-Scenario
               Bacterial-RNA-Transcription-Scenario
               Unobstruct
               Transfer
               Take-Control
               Repair
               Remove
               Perceive
               Obstruct
               Move
               Disconnect
               Create
               Connect
               Break))
  (domain-of (defeats
              result
              next-events
              prev-events
              first-subevents
              primitive-actions
              all-subevents
              subevents
              parent-events
              disjunctive-next-events))
  (range-of (next-events
             prev-events
             first-subevents
             primitive-actions
             all-subevents
             subevents
             parent-events
             disjunctive-next-events)))

(every Action has 
  (object ((must-be-a Thing)))
  (instrument ((must-be-a Tangible-Entity)))
  (subevent ((must-be-a Action)))
  (actions ((if (has-value (the subevent-order of Self)) then (forall (the subevent-order of Self) where (t) (the actions of It)) else Self)))
  (pcs-list ((the del-list of Self)))
  (agent ((must-be-a Living-Entity with (the-possible-goals ((the add-list of Self))) (the-excluded-goals ((the del-list of Self))) (goal ((possible-values (the the-possible-goals of (the agent of Self))) (excluded-values (the excluded-goals of (the agent of Self))))))))
  (mcs-list ((the pcs-list of Self)))
  (all-subevents ((Self subevent)
                  (the all-subevents of (Self subevent))))
  (primitive-actions ((the primitive-actions of (Self subevent))
                      ((if (not (Self subevent)) then (Self))))))

;;; ----------

(actions has 
  (instance-of (Slot)))

;;; ----------

(Adenine has 
  (superclasses (Purine)))

;;; ----------

(Adenosine has 
  (superclasses (Nucleoside)))

(every Adenosine has 
  (has-part ((a Ribose)
             (a Adenine))))

;;; ----------

(Adenosine-Monophosphate has 
  (superclasses (Ribonucleotide
                 Nucleoside-Monophosphate)))

;;; ----------

(Adenosine-Triphosphate has 
  (superclasses (Ribonucleotide
                 Nucleoside-Triphosphate)))

;;; ----------

(Admit has 
  (superclasses (Unobstruct))
  (required-slot (object
                  the-enclosure))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "object")
                        (:seq agent "admitter")))
  (test-case ('((*child has (instance-of (Object)) (location ((a Place with (is-outside ((the location of *cinema))))))) (*cinema has (instance-of (Enclosure))) (a Shut-Out with (object (*child)) (the-enclosure (*cinema))) (do-and-next (thelast Shut-Out)) (exists (the Be-Shut-Out object-of of *child)) (a Move-Into with (object (*child)) (the-enclosure (*cinema))) (not (try-do (thelast Move-Into))) (a Admit with (object (*child)) (the-enclosure (*cinema))) (do-and-next (thelast Admit)) (not (exists (the Be-Shut-Out object-of of *child))) (do-and-next (thelast Move-Into))))))

(every Admit has 
  (the-enclosure ((a Enclosure)))
  (object ((a Tangible-Entity with (location ((constraint ((TheValue isa Place) and (TheValue /= (the encloses of (the location of (the the-enclosure of Self)))))))))))
  (defeats ((allof (the object-of of (the object of Self)) where (((the the-enclosure of It) = (the the-enclosure of Self)) and ((the classes of It) = Be-Shut-Out)))))
  (pcs-list ((:triple (the object of Self) object-of (a Be-Shut-Out with (the-enclosure ((the the-enclosure of Self)))))))
  (del-list ((forall (the defeats of Self) (:set (:triple It object (the object of Self)) (:triple It the-enclosure (the the-enclosure of Self))))))
  (preparatory-step ((a Shut-Out with (the-enclosure ((the the-enclosure of Self))) (object ((the object of Self)))))))

;;; ----------

(after has 
  (instance-of (Relation))
  (domain (Temporal-Interval))
  (range (Temporal-Interval))
  (inverse (before))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(age has 
  (instance-of (Property))
  (domain (Entity))
  (range (Value))
  (range2 (Thing))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (inverse (age-of))
  (cardinality (N-to-N)))

;;; ----------

(age-of has 
  (inverse (age))
  (instance-of (Slot))
  (situation-specific ((t))))

;;; ----------

(Age-Scalar has 
  (superclasses (Scalar-Value))
  (instances (*young
              *juvenile
              *teenage
              *adolescent
              *middle-aged
              *old
              *elderly)))

;;; ----------

(Age-Scale has 
  (superclasses (Scale))
  (instances (*young-to-old)))

;;; ----------

(agent has 
  (primary-slot-of (Endocytose
                    Phagocytose
                    Pinocytose
                    Action
                    Admit
                    Attach
                    Block
                    Breach
                    Break-Contact
                    Break
                    Come-Into-Contact
                    Come-Together
                    Confine
                    Connect
                    Copy
                    Create
                    Deliver
                    Destroy
                    Detach
                    Disperse
                    Emit
                    Exude
                    Form
                    Lose
                    Make-Contact
                    Move-From
                    Move-Into
                    Move-Out-Of
                    Move-Through
                    Move-To
                    Move-Together
                    Move
                    Obstruct
                    Produce
                    Receive
                    Release
                    Remove
                    Replicate
                    Restrain
                    Ruin
                    Shut-Out
                    Slide
                    State
                    Take-Apart
                    Take-In
                    Transfer
                    Unblock
                    Unobstruct
                    Unrestrain))
  (instance-of (Relation))
  (required-slot-of (Absorb
                     Be-Held
                     Carry
                     Dispatch
                     Donate
                     Eject
                     Enter
                     Excrete
                     Exit
                     Expel
                     Extrude
                     Feed
                     Give
                     Go-To
                     Hold
                     Leave
                     Let-Fall
                     Let-Go-Of
                     Locomotion
                     Obtain
                     Penetrate
                     Relinquish
                     Secrete
                     Send
                     Supply
                     Take-Up
                     Take
                     Traverse))
  (superslots (causer
               causer-of))
  (domain (Event))
  (range (Living-Entity))
  (inverse (agent-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(agent-of has 
  (inverse (agent))
  (instance-of (Slot)))

;;; ----------

(Alanine has 
  (superclasses (Nonpolar-Amino-Acid)))

;;; ----------

(all-subevents has 
  (instance-of (Slot))
  (domain (Action))
  (range (Action))
  (cardinality (N-to-N)))

;;; ----------

(Amino-Acid has 
  (subclasses (Neutral-Amino-Acid
               Polar-Amino-Acid
               Nonpolar-Amino-Acid
               Formyl-Methionine
               Basic-Amino-Acid
               Acidic-Amino-Acid))
  (superclasses (Monomer)))

(every Amino-Acid has 
  (has-part ((a Carboxyl-Terminal-End)
             (a Amino-Terminal-End))))

;;; ----------

(Amino-Acid-Binding-Region has 
  (superclasses (Organelle)))

;;; ----------

(Amino-Acid-Codon has 
  (superclasses (RNA-Regulatory-Region)))

;;; ----------

(Amino-Acyl-TRNA-Synthetase has 
  (superclasses (Anabolic-Enzyme)))

;;; ----------

(Amino-Terminal-End has 
  (superclasses (Protein-Region)))

;;; ----------

(Anabolic-Enzyme has 
  (subclasses (Polymerase
               Amino-Acyl-TRNA-Synthetase))
  (superclasses (Enzyme)))

;;; ----------

(animacy has 
  (instance-of (Property))
  (domain (Entity))
  (range (Value))
  (inverse (animacy-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(animacy-of has 
  (inverse (animacy))
  (instance-of (Slot)))

;;; ----------

(Anion has 
  (subclasses (Acidic-Amino-Acid)))

;;; ----------

(aperture has 
  (instance-of (Slot)))

;;; ----------

(Aqueous-Solution has 
  (superclasses (Chemical-Solution))
  (subclasses (Cytosol)))

;;; ----------

(area has 
  (instance-of (Property))
  (domain (Tangible-Entity))
  (range (Value))
  (range2 (Thing))
  (inverse (area-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(area-of has 
  (inverse (area))
  (instance-of (Slot)))

;;; ----------

(Area-Scalar has 
  (superclasses (Scalar-Value))
  (instances (*tiny
              *huge
              *spacious)))

;;; ----------

(Area-Scale has 
  (superclasses (Scale)))

;;; ----------

(Arginine has 
  (superclasses (Basic-Amino-Acid)))

;;; ----------

(Asparagine has 
  (superclasses (Uncharged-Polar-Amino-Acid)))

;;; ----------

(Aspartic-Acid has 
  (superclasses (Acidic-Amino-Acid)))

;;; ----------

(Attach has 
  (superclasses (Connect))
  (required-slot (the-major-object
                  the-minor-object))
  (primary-slot (agent
                 instrument))
  (cmap-correspondence ((:seq the-major-object "the object being attached to")
                        (:seq the-minor-object "the object being attached")))
  (test-case ('((*bumper has (instance-of (Object))) (*sticker has (instance-of (Object))) (a Attach with (the-minor-object (*sticker)) (the-major-object (*bumper))) (do-and-next (thelast Attach)) (oneof (the Be-Attached-To object-of of *sticker) where ((the the-major-object of It) includes *bumper))))))

(every Attach has 
  (object ((the the-major-object of Self)
           (the the-minor-object of Self)))
  (the-major-object ((a Tangible-Entity)))
  (the-minor-object ((a Tangible-Entity)))
  (instrument ((must-be-a Tangible-Entity)))
  (resulting-state ((a Be-Attached-To)))
  (pcs-list ((:triple (the the-minor-object of Self) location (the location of (the the-major-object of Self)))))
  (add-list ((:triple (the resulting-state of Self) the-major-object (the the-major-object of Self))
             (:triple (the resulting-state of Self) the-minor-object (the the-minor-object of Self))))
  (preparatory-step ((a Move with (object ((the the-minor-object of Self))) (destination ((the location of (the the-major-object of Self))))))))

;;; ----------

(away-from has 
  (secondary-slot-of (Move))
  (instance-of (Relation))
  (domain (Event))
  (range (Place))
  (inverse (away-from-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-1)))

;;; ----------

(away-from-of has 
  (inverse (away-from))
  (instance-of (Slot)))

;;; ----------

(Axis has 
  (superclasses (Intangible-Entity)))

;;; ----------

(Bacteria has 
  (superclasses (Procaryote)))

(every Bacteria has 
  (has-part ((a Cytoplasm with (content ((a DNA) (a MRNA) (a DNA-Polymerase) (a RNA-Polymerase) (a Ribosome) (a Regulatory-Protein) (a TRNA) (a Deoxyribonucleotide))))
             (a Plasma-Membrane with (location ((a Place with (encloses ((the location of (the Cytoplasm has-part of Self))))))))
             (a Cell-Wall with (location ((a Place with (encloses ((the location of (the Plasma-Membrane has-part of Self)))))))))))

;;; ----------

(Bacterial-DNA has 
  (superclasses (DNA)))

(every Bacterial-DNA has 
  (location ((a Place)))
  (has-part ((a Gene)
             (a Promoter)
             (a Terminator))))

;;; ----------

(Bacterial-RNA-Transcription-Scenario has 
  (superclasses (Action)))

(every Bacterial-RNA-Transcription-Scenario has 
  (location ((the location of (the object of Self))))
  (instrument ((a RNA-Polymerase)))
  (object ((a Bacterial-DNA)))
  (result ((a RNA-Transcript)))
  (subevent-order ((the Make-Contact subevent of Self)
                   (the Move-Through subevent of Self)
                   (the Transcribe subevent of Self)
                   (the Detach subevent of Self)
                   (the Break-Contact subevent of Self)))
  (subevent ((a Make-Contact with (object ((the RNA-Polymerase instrument of Self))) (destination ((the Bacterial-DNA object of Self))))
             (a Move-Through with (object ((the RNA-Polymerase instrument of Self))) (path ((the location of Self))) (rate (*Rapidly)) (source ((the location of (the Make-Contact subevent of Self)))) (destination ((the Promoter region of (the Bacterial-DNA object of Self)))))
             (a Transcribe with (instrument ((the RNA-Polymerase instrument of Self))) (object ((the object of Self))) (result ((the result of Self))) (source ((the Promoter region of (the Bacterial-DNA object of Self)))) (path ((the Gene region of (the Bacterial-DNA object of Self)))) (destination ((the Terminator region of (the Bacterial-DNA object of Self)))))
             (a Detach with (the-major-object ((the RNA-Polymerase instrument of Self))) (the-minor-object ((the result of Self))) (location ((the Terminator region of (the Bacterial-DNA object of Self)))))
             (a Break-Contact with (object ((the RNA-Polymerase instrument of Self) (the Bacterial-DNA object of Self))) (location ((the Terminator region of (the Bacterial-DNA object of Self))))))))

;;; ----------

(Barrier has 
  (superclasses (Separator))
  (subclasses (Enclosure))
  (primary-slot (the-from-loc
                 the-to-loc
                 the-through-loc))
  (test-case ('((*Rio has (instance-of (Barrier))) (the prevents of *Rio)))))

(every Barrier has 
  (prevents ('(every Move with (source ((the1 of #,(Self between location)))) (destination ((the2 of #,(Self between location)))) (path ((a Place with (path-of (#,(Self)))))))
             '(every Move with (source ((the2 of #,(Self between location)))) (destination ((the1 of #,(Self between location)))) (path ((a Place with (path-of (#,(Self))))))))))

;;; ----------

(Base has 
  (superclasses (Molecule))
  (subclasses (Nitrogenous-Base)))

;;; ----------

(Basic-Amino-Acid has 
  (subclasses (Lysine
               Histidine
               Arginine))
  (superclasses (Cation
                 Amino-Acid)))

;;; ----------

(Be-Attached-To has 
  (superclasses (Be-Connected))
  (required-slot (the-major-object
                  the-minor-object))
  (primary-slot (instrument))
  (cmap-correspondence ((:seq the-major-object "the object attached to")
                        (:seq the-minor-object "the object attached"))))

(every Be-Attached-To has 
  (object ((the the-major-object of Self)
           (the the-minor-object of Self)))
  (the-major-object ((a Tangible-Entity with (size (*large)))))
  (the-minor-object ((a Tangible-Entity)))
  (resulting-state-of ((must-be-a Attach with (the-major-object ((the the-major-object of Self))) (the-minor-object ((the the-minor-object of Self))))))
  (defeated-by ((must-be-a Detach with (the-major-object ((the the-major-object of Self))) (the-minor-object ((the the-minor-object of Self)))))))

;;; ----------

(Be-Blocked has 
  (superclasses (Be-Obstructed))
  (required-slot (object
                  location))
  (cmap-correspondence ((:seq object "the object blocked")
                        (:seq location "the blocked place"))))

(every Be-Blocked has 
  (object ((constraint ((TheValue isa Place) and (TheValue = (the location of Self))))))
  (location ((constraint ((TheValue isa Place) and (TheValue = (the object of Self))))))
  (resulting-state-of ((must-be-a Block with (location ((the location of Self))) (object ((the object of Self))))))
  (defeated-by ((must-be-a Unblock with (object ((the object of Self))) (location ((the location of Self)))))))

;;; ----------

(Be-Broken has 
  (superclasses (State))
  (subclasses (Be-Ruined)))

(every Be-Broken has 
  (object ((a Object)))
  (defeated-by ((must-be-a Repair with (object ((the object of Self))))))
  (resulting-state-of ((must-be-a Break with (object ((the object of Self)))))))

;;; ----------

(Be-Confined has 
  (superclasses (Be-Obstructed))
  (required-slot (object
                  location
                  the-enclosure))
  (cmap-correspondence ((:seq object "the object shut-out")
                        (:seq location "the place inside the enclosure")
                        (:seq the-enclosure "the confining enclosure"))))

(every Be-Confined has 
  (the-enclosure ((a Enclosure)))
  (object ((a Tangible-Entity with (location ((the location of Self))))))
  (location ((constraint ((TheValue isa Place) and (TheValue = (the encloses of (the location of (the the-enclosure of Self))))))))
  (resulting-state-of ((must-be-a Confine with (object ((the object of Self))) (the-enclosure ((the the-enclosure of Self))))))
  (defeated-by ((must-be-a Release with (object ((the object of Self))) (the-enclosure ((the the-enclosure of Self)))))))

;;; ----------

(Be-Connected has 
  (subclasses (Be-Attached-To))
  (superclasses (State))
  (required-slot (object))
  (primary-slot (instrument))
  (cmap-correspondence ((:seq object "the two connected objects ")
                        (:seq instrument "the connector"))))

(every Be-Connected has 
  (instrument ((must-be-a Tangible-Entity)))
  (object ((a Tangible-Entity called "O1" with (location ((a Place with (abuts ((if (exists (the instrument of Self)) then (the location of (the instrument of Self)) else (the location of ((the object of Self) called "O2")))))))))
           (a Tangible-Entity called "O2" with (location ((a Place with (abuts ((if (exists (the instrument of Self)) then (the location of (the instrument of Self)) else (the location of ((the object of Self) called "O1")))))))))))
  (resulting-state-of ((must-be-a Connect with (object ((the object of Self))) (the-connector ((the instrument of Self))))))
  (defeated-by ((must-be-a Disconnect with (object ((the object of Self))) (the-connector ((the instrument of Self)))))))

;;; ----------

(Be-Held has 
  (superclasses (Be-Obstructed))
  (required-slot (object
                  agent))
  (cmap-correspondence ((:seq object "the object being held")
                        (:seq agent "the holder"))))

(every Be-Held has 
  (agent ((a Tangible-Entity)))
  (object ((a Tangible-Entity)))
  (resulting-state-of ((must-be-a Hold with (object ((the object of Self))) (agent ((the agent of Self))))))
  (defeated ((must-be-a Let-Go-Of with (object ((the object of Self))) (agent ((the agent of Self)))))))

;;; ----------

(Be-Obstructed has 
  (subclasses (Be-Supported
               Be-Shut-Out
               Be-Restrained
               Be-Held
               Be-Confined
               Be-Blocked))
  (superclasses (State))
  (required-slot (object))
  (cmap-correspondence ((:seq object "the object being obstructed"))))

(every Be-Obstructed has 
  (object ((a Tangible-Entity)))
  (resulting-state-of ((must-be-a Obstruct with (object ((the object of Self))))))
  (defeated-by ((must-be-a Unobstruct with (object ((the object of Self)))))))

;;; ----------

(Be-Restrained has 
  (superclasses (Be-Obstructed))
  (required-slot (object))
  (cmap-correspondence ((:seq object "the object being restrained"))))

(every Be-Restrained has 
  (resulting-state-of ((must-be-a Restrain with (object ((the object of Self))))))
  (defeated-by ((must-be-a Unrestrain with (object ((the object of Self)))))))

;;; ----------

(Be-Ruined has 
  (superclasses (Be-Broken)))

(every Be-Ruined has 
  (object ((a Tangible-Entity)))
  (defeated-by ((must-be-a Repair with (object ((the object of Self))))))
  (resulting-state-of ((must-be-a Ruin with (object ((the object of Self)))))))

;;; ----------

(Be-Shut-Out has 
  (superclasses (Be-Obstructed))
  (required-slot (object
                  location
                  the-enclosure))
  (cmap-correspondence ((:seq object "the object shut-out")
                        (:seq location "the outside region"))))

(every Be-Shut-Out has 
  (the-enclosure ((a Enclosure)))
  (object ((a Tangible-Entity with (location ((the location of Self))))))
  (location ((constraint ((TheValue isa Place) and (TheValue = (the does-not-enclose of (the location of (the the-enclosure of Self)))))))))

;;; ----------

(Be-Supported has 
  (superclasses (Be-Obstructed))
  (required-slot (object))
  (primary-slot (instrument))
  (cmap-correspondence ((:seq object "the object prevented from Falling")
                        (:seq instrument "the support"))))

(every Be-Supported has 
  (object ((a Tangible-Entity)))
  (instrument ((must-be-a Tangible-Entity))))

;;; ----------

(Be-Touching has 
  (superclasses (State))
  (required-slot (object))
  (cmap-correspondence ((:seq object "the things touching")))
  (test-case ('((new-situation) (*O1 has (instance-of (Tangible-Entity))) (*O2 has (instance-of (Tangible-Entity))) (a Be-Touching with (object (*O1 *O2)))))))

(every Be-Touching has 
  (object ((a Tangible-Entity called "O1" with (location ((a Place with (abuts ((the location of ((the object of Self) called "O2"))))))))
           (a Tangible-Entity called "O2" with (location ((a Place with (abuts ((the location of ((the object of Self) called "O1")))))))))))

;;; ----------

(before has 
  (inverse (after))
  (instance-of (Relation))
  (domain (Time-Interval))
  (range (Time-Interval))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(beneficiary has 
  (required-slot-of (Donate))
  (instance-of (Relation))
  (domain (Event))
  (range (Organism))
  (inverse (beneficiary-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(beneficiary-of has 
  (inverse (beneficiary))
  (instance-of (Slot)))

;;; ----------

(between has 
  (primary-slot-of (Separator)))

;;; ----------

(Binding-Site has 
  (subclasses (TRNA-Initiator-Site
               Ribosome-Binding-Site
               P-Site
               MRNA-Site
               E-Site
               A-Site))
  (superclasses (Place)))

;;; ----------

(Block has 
  (superclasses (Obstruct))
  (required-slot (object
                  location))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "the place blocked")
                        (:seq agent "blocker")
                        (:seq location "location")))
  (test-case ('((*path has (instance-of (Place))) (a Block with (object (*path))) (do-and-next (thelast Block)) (exists (the Be-Blocked object-of of *path)) (a Move with (object (*car)) (path (*path))) (not (try-do (thelast Move)))))))

(every Block has 
  (object (((a Place) & (the location of Self))))
  (location ((the object of Self)))
  (resulting-state ((a Be-Blocked)))
  (add-list ((:triple (the resulting-state of Self) location (the location of Self))
             (:triple (the resulting-state of Self) object (the object of Self)))))

;;; ----------

(Bond has 
  (superclasses (Connector))
  (subclasses (Phospho-Diester-Bond
               Hydrogen-Bond
               Covalent-Bond)))

;;; ----------

(Bound-Ribosome has 
  (superclasses (Ribosome)))

;;; ----------

(Breach has 
  (superclasses (Break))
  (required-slot (object
                  result))
  (primary-slot (agent))
  (cmap-correspondence ((:seq agent "the breacher")
                        (:seq object "the barrier breached")
                        (:seq result "the resulting portal")))
  (test-case ('((*Barrier has (instance-of (Barrier))) (*Breacher has (instance-of (Tangible-Entity))) (*Portal has (instance-of (Portal))) (a Breach with (agent (*Breacher)) (object (*Barrier)) (result (*Portal))) (do-and-next (thelast Breach)) ((the is-part-of of *Portal) = *Barrier))))
  (subclasses (Penetrate)))

(every Breach has 
  (object ((a Barrier)))
  (result ((a Portal)))
  (agent ((must-be-a Tangible-Entity with (agent-of ((a Create with (result ((the result of Self)))))))))
  (add-list ((forall (the result of Self) (:triple It is-part-of (the object of Self))))))

;;; ----------

(Break has 
  (subclasses (Ruin
               Destroy
               Breach))
  (superclasses (Action))
  (required-slot (object))
  (primary-slot (agent
                 instrument
                 by-means-of))
  (cmap-correspondence ((:seq object "the thing broken")
                        (:seq agent "the breaker")
                        (:seq by-means-of "the precipitating event")))
  (test-case ('((*Vase has (instance-of (Object))) (a Break with (object (*Vase))) (do-and-next (thelast Break)) (exists (the Be-Broken object-of of *Vase))))))

(every Break has 
  (object ((a Tangible-Entity)))
  (resulting-state ((a Be-Broken)))
  (add-list ((:triple (the resulting-state of Self) object (the object of Self)))))

;;; ----------

(Break-Contact has 
  (superclasses (Disperse))
  (required-slot (object
                  source))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "the things breaking contact")
                        (:seq source "the starting location of the objects")
                        (:seq agent "the one that causes the breaking contact"))))

(every Break-Contact has 
  (object ((exactly 2 Tangible-Entity)))
  (destination ((exactly 0 Place)))
  (path ((exactly 0 Place)))
  (resulting-state ((a Be-Touching)))
  (del-list ((forall (the object of Self) ((:triple It object-of (the+ Be-Touching with (object ((the object of Self))))))))))

;;; ----------

(breakability has 
  (instance-of (Property))
  (domain (Tangible-Entity))
  (range (Value))
  (inverse (breakability-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-1)))

;;; ----------

(breakability-of has 
  (inverse (breakability))
  (instance-of (Slot)))

;;; ----------

(Breakability-Scalar has 
  (superclasses (Scalar-Value))
  (instances (*breakable
              *fragile
              *brittle
              *delicate
              *unbreakable)))

;;; ----------

(by-means-of has 
  (primary-slot-of (Break
                    Copy
                    Create
                    Destroy
                    Form
                    Remove
                    Replicate
                    Ruin
                    Take-Apart))
  (instance-of (Relation))
  (domain (Event))
  (range (Event))
  (inverse (means-by-which))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(capability has 
  (instance-of (Relation))
  (domain (Entity))
  (range (To-Be))
  (inverse (capability-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(capability-of has 
  (inverse (capability))
  (instance-of (Slot)))

;;; ----------

(capacity has 
  (instance-of (Property))
  (domain (Tangible-Entity))
  (range (Value))
  (range2 (Thing))
  (inverse (capacity-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(capacity-of has 
  (inverse (capacity))
  (instance-of (Slot)))

;;; ----------

(Capacity-Scalar has 
  (superclasses (Scalar-Value))
  (instances (*empty
              *full)))

;;; ----------

(Capacity-Scale has 
  (superclasses (Scale))
  (instances (*empty-full-scale)))

;;; ----------

(Carbohydrate has 
  (superclasses (Organic-Molecule))
  (subclasses (Sugar)))

;;; ----------

(Carboxy-Terminal-End has 
  (superclasses (Protein-Region)))

;;; ----------

(Carboxyl-Terminal-End has 
  (superclasses (Organelle)))

;;; ----------

(Cardinal-Value has 
  (superclasses (Value)))

;;; ----------

(Carry has 
  (superclasses (Move))
  (required-slot (agent
                  object))
  (primary-slot (source
                 destination
                 path))
  (cmap-correspondence ((:seq agent "the carrier")
                        (:seq object "the thing carried")
                        (:seq source "original location")
                        (:seq destination "final location")
                        (:seq path "through")))
  (test-case ('((*Carry has (instance-of (Carry)) (agent (*agent)) (object (*object))) (the subevent of *Carry)))))

(every Carry has 
  (agent ((a Object)))
  (object ((a Object)))
  (subevent ((a Locomotion with (agent ((the agent of Self))) (source ((the source of Self))) (destination ((the destination of Self))) (time ((a Time-Interval with (during ((the time of (the Hold subevent of Self))))))))
             (a Hold with (agent ((the agent of Self))) (object ((the object of Self))))))
  (causes ((a Move with (agent ((the agent of Self))) (object ((the object of Self))) (source ((the source of Self))) (destination ((the destination of Self))) (path ((the path of Self))) (time ((a Time-Interval with (during ((the time of Self))))))))))

;;; ----------

(Catalytic-Enzyme has 
  (superclasses (Enzyme))
  (subclasses (Proteolytic-Enzyme
               Protease)))

;;; ----------

(Categorical-Value has 
  (superclasses (Value)))

;;; ----------

(Cation has 
  (subclasses (Basic-Amino-Acid)))

;;; ----------

(caused-by has 
  (inverse (causes))
  (instance-of (Slot)))

;;; ----------

(causer has 
  (instance-of (Relation))
  (subslots (agent))
  (inverse (causer-of))
  (domain (Event))
  (range (Object))
  (cardinality (N-to-N))
  (situation-specific (t))
  (fluent-status (*Inertial-Fluent)))

;;; ----------

(causer-of has 
  (instance-of (Relation))
  (subslots (agent))
  (domain (Object))
  (range (Event))
  (inverse (causer))
  (cardinality (N-to-N))
  (fluent-status (*Inertial-Fluent)))

;;; ----------

(causes has 
  (instance-of (Relation))
  (required-slot-of (Eject
                     Let-Fall))
  (domain (Event))
  (range (Event))
  (inverse (caused-by))
  (situation-specific (t))
  (cardinality (N-to-N))
  (subslots (resulting-state)))

;;; ----------

(Cell has 
  (superclasses (Living-Entity))
  (subclasses (Eucaryotic-Cell)))

(every Cell has 
  (has-part ((a Plasma-Membrane with (encloses ((the location of (the Cytoplasm has-part of Self)))))
             (a Cytoplasm))))

;;; ----------

(Cell-Wall has 
  (superclasses (Enclosure)))

(every Cell-Wall has 
  (location ((a Place with (encloses ((the location of (a Plasma-Membrane))))))))

;;; ----------

(Chain has 
  (subclasses (RNA-Chain
               Peptide-Chain))
  (superclasses (Shape)))

;;; ----------

(Charged-Polar-Amino-Acid has 
  (superclasses (Polar-Amino-Acid)))

;;; ----------

(Chemical-Bond has 
  (superclasses (Connector
                 Chemical-Object)))

;;; ----------

(Chemical-Group has 
  (superclasses (Chemical-Object))
  (subclasses (Methyl-Group)))

;;; ----------

(Chemical-Mixture has 
  (superclasses (Chemical-Substance))
  (subclasses (Colloid)))

;;; ----------

(Chemical-Object has 
  (subclasses (Molecule
               Chemical-Group
               Chemical-Bond))
  (superclasses (Inanimate-Object)))

;;; ----------

(Chemical-Solution has 
  (subclasses (Aqueous-Solution))
  (superclasses (Chemical-Substance)))

;;; ----------

(Chemical-Substance has 
  (subclasses (Chemical-Solution
               Chemical-Mixture))
  (superclasses (Substance)))

;;; ----------

(Chromosome has 
  (superclasses (Nucleoprotein)))

(every Chromosome has 
  (has-part ((a Eucaryotic-DNA)
             (a Histone))))

;;; ----------

(Cliche has 
  (superclasses (Thing))
  (subclasses (Reflexive-Cliche)))

;;; ----------

(cmap-correspondence has 
  (instance-of (KM-Slot))
  (domain (Thing))
  (range (Thing))
  (cardinality (N-to-N)))

;;; ----------

(Colloid has 
  (superclasses (Chemical-Mixture))
  (subclasses (Protoplasm)))

(every Colloid has 
  (has-part ((a Organic-Substance)
             (a Inorganic-Substance))))

;;; ----------

(color has 
  (instance-of (Property))
  (domain (Tangible-Entity))
  (range (Value))
  (inverse (color-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-1)))

;;; ----------

(color-of has 
  (inverse (color))
  (instance-of (Slot)))

;;; ----------

(Come-Into-Contact has 
  (superclasses (Come-Together))
  (required-slot (object
                  subevent
                  destination))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "the things that came into contact")
                        (:seq subevent "for every object there's a go-to")
                        (:seq destination "the ending location of the objects")
                        (:seq agent "the one that causes the making contact"))))

(every Come-Into-Contact has 
  (resulting-state ((a Be-Touching)))
  (add-list ((:triple (the resulting-state of Self) object (the object of Self))))
  (subevent ((forall (the object of Self) (a Go-To with (object (It)) (destination ((the destination of Self))))))))

;;; ----------

(Come-Together has 
  (subclasses (Come-Into-Contact))
  (superclasses (Move-Together))
  (required-slot (object
                  destination
                  subevent))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "the things moved")
                        (:seq agent "the mover")
                        (:seq destination "moved to")
                        (:seq destination "moved toward")
                        (:seq subevent "the Move of each object")))
  (test-case ('((*safety has (instance-of (Object))) (*running-back has (instance-of (Object))) (*goal-line has (instance-of (Place))) (a Come-Together with (object (*running-back *safety)) (destination (*goal-line))) (do-and-next (thelast Come-Together)) ((the location of *safety) = *goal-line) ((the location of *running-back) = *goal-line) (forall (the subevent of (thelast Come-Together)) ((It isa Go-To) and ((:set *running-back *safety) includes (the object of It))))))))

(every Come-Together has 
  (subevent ((forall (the object of Self) (a Go-To with (object (It)) (agent ((the agent of Self))) (destination ((the destination of Self))))))))

;;; ----------

(Condition has 
  (range-of (goal)))

;;; ----------

(Confine has 
  (superclasses (Obstruct))
  (required-slot (object
                  the-enclosure))
  (primary-slot (agent
                 location))
  (cmap-correspondence ((:seq object "the object confined")
                        (:seq agent "confiner")))
  (test-case ('((*prisoner has (instance-of (Object))) (*prison-cell has (instance-of (Enclosure))) (a Confine with (object (*prisoner)) (the-enclosure (*prison-cell))) (not (the Be-Confined object-of of *prisoner)) (do-and-next (thelast Confine)) (exists (the Be-Confined object-of of *prisoner)) (a Move-Out-Of with (object (*prisoner)) (the-enclosure (*prison-cell))) (not (try-do (thelast Move-Out-Of))) (a Release with (object (*prisoner)) (the-enclosure (*prison-cell))) (do-and-next (thelast Release)) (not (exists (the Be-Confined object-of of *prisoner))) (do-and-next (thelast Move-Out-Of)) ((the is-outside of (the location of *prisoner)) = (the location of *prison-cell))))))

(every Confine has 
  (resulting-state ((a Be-Confined)))
  (the-enclosure ((a Enclosure)))
  (object ((a Tangible-Entity with (location ((the location of Self))))))
  (location ((constraint ((TheValue isa Place) and (TheValue = (the encloses of (the location of (the the-enclosure of Self))))))))
  (add-list ((:triple (the resulting-state of Self) object (the object of Self))
             (:triple (the resulting-state of Self) the-enclosure (the the-enclosure of Self)))))

;;; ----------

(Connect has 
  (subclasses (Attach))
  (superclasses (Action))
  (required-slot (object))
  (primary-slot (agent
                 instrument
                 the-connector))
  (cmap-correspondence ((:seq object "the 2 objects being connected")
                        (:seq instrument "thing used to make the connection")
                        (:seq the-connector "the connector")))
  (test-case ('((*block1 has (instance-of (Object))) (*block2 has (instance-of (Object))) (a Connect with (object (*block1 *block2))) (do-and-next (thelast Connect)) (oneof (the Be-Connected object-of of *block2) where ((the object of It) includes *block1))))))

(every Connect has 
  (object ((exactly 2 Tangible-Entity)
           (a Tangible-Entity called "O1")
           (a Tangible-Entity called "O2")))
  (instrument ((must-be-a Tangible-Entity)))
  (resulting-state ((a Be-Connected)))
  (the-connector ((the instrument of (the resulting-state of Self))))
  (pcs-list ((forall (the object of Self) (:triple It object-of (mustnt-be-a Be-Connected with (object ((the object of Self))) (instrument ((the the-connector of Self))))))
             (if (has-value (the instrument of Self)) then (:triple (the instrument of Self) object-of (mustnt-be-a Be-Broken with (object ((the instrument of Self))))))
             (if (has-value (the the-connector of Self)) then (:triple (the the-connector of Self) object-of (mustnt-be-a Be-Broken with (object ((the the-connector of Self))))))))
  (add-list ((:triple (the resulting-state of Self) object (the object of Self))
             (if (has-value (the the-connector of Self)) then (:triple (the resulting-state of Self) instrument (the the-connector of Self)))))
  (prepatory-step ((:default (if (allof (the object-of of ((the object of Self) called "O1")) where (((the classes of It) = Be-Connected) and ((the object of It) includes ((the object of Self) called "O2")))) then (a Disconnect with (object ((the object of Self))) (agent ((the agent of Self))))))
                   (:default (a Come-Together with (object ((the object of Self))) (agent ((the agent of Self)))))
                   (:default (if (has-value (the agent of Self)) then (a Move with (object ((the agent of Self))) (destination ((a Place with (is-at ((the destination of (the Come-Together prepatory-step of Self))))))))))))
  (dcs-list ((:triple (the location of ((the object of Self) called "O1")) is-at (the location of ((the object of Self) called "O2")))
             (if (has-value (the agent of Self)) then (:triple (the location of (the agent of Self)) is-at (the location of ((the object of Self) called "O2"))))))
  (interrupted-by ((must-be-a Break with (object ((the instrument of Self))))
                   (must-be-a Break with (object ((the the-connector of Self)))))))

;;; ----------

(Connector has 
  (subclasses (Chemical-Bond
               Bond))
  (superclasses (Inanimate-Object)))

;;; ----------

(consistency has 
  (instance-of (Property))
  (domain (Tangible-Entity))
  (range (Value))
  (range2 (Thing))
  (inverse (consistency-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-1)))

;;; ----------

(consistency-of has 
  (inverse (consistency))
  (instance-of (Slot)))

;;; ----------

(Consistency-Scalar has 
  (superclasses (Scalar-Value))
  (instances (*gritty
              *grainy
              *glassy
              *crystalline
              *granitic
              *rocky
              *stony
              *boney)))

;;; ----------

(Container has 
  (superclasses (Enclosure))
  (primary-slot (shape
                 intersect))
  (test-case ('((*Container has (instance-of (Container))) ((*Container shape) = (*HollowVolume)))))
  (domain-of (content)))

(every Container has 
  (shape (*HollowVolume))
  (intersect ((must-be-a Portal))))

;;; ----------

(content has 
  (instance-of (Relation))
  (domain (Container))
  (range (Tangible-Entity))
  (inverse (content-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(content-of has 
  (inverse (content))
  (instance-of (Slot)))

;;; ----------

(Copy has 
  (superclasses (Create))
  (required-slot (result
                  object))
  (primary-slot (agent
                 instrument
                 by-means-of))
  (cmap-correspondence ((:seq result "the copy")
                        (:seq object "the original")
                        (:seq agent "copier")
                        (:seq instrument "the instrument")
                        (:seq by-means-of "the event needed for the copy")))
  (subclasses (Replicate)))

(every Copy has 
  (object ((a Tangible-Entity)))
  (add-list ((:triple Self result (an instance of (the instance-of of (the object of Self))))))
  (instrument ((must-be-a Tangible-Entity)))
  (by-means-of ((must-be-a Event))))

;;; ----------

(Covalent-Bond has 
  (superclasses (Bond)))

;;; ----------

(Create has 
  (subclasses (Transcribe
               Produce
               Form
               Copy))
  (superclasses (Action))
  (required-slot (result))
  (primary-slot (agent
                 instrument
                 by-means-of))
  (cmap-correspondence ((:seq result "the thing created")
                        (:seq agent "the creator")
                        (:seq instrument "the instrument")
                        (:seq by-means-of "the event needed for the create")))
  (test-case ('((new-situation) (a Create with (result (*Cake))) (do-and-next (thelast Create)) ((the result of (thelast Create)) = *Cake)))))

(every Create has 
  (agent ((must-be-a Living-Entity)))
  (instrument ((must-be-a Tangible-Entity)))
  (by-means-of ((must-be-a Event)))
  (add-list ((:triple Self result (a Tangible-Entity)))))

;;; ----------

(Cysteine has 
  (superclasses (Uncharged-Polar-Amino-Acid)))

;;; ----------

(Cytidine has 
  (superclasses (Nucleoside)))

(every Cytidine has 
  (has-part ((a Ribose)
             (a Cytosine))))

;;; ----------

(Cytidine-Monophosphate has 
  (superclasses (Ribonucleotide
                 Nucleoside-Monophosphate)))

;;; ----------

(Cytidine-Triphosphate has 
  (superclasses (Ribonucleotide
                 Nucleoside-Triphosphate)))

;;; ----------

(Cytoplasm has 
  (superclasses (Protoplasm)))

;;; ----------

(Cytosine has 
  (superclasses (Pyrimidine)))

;;; ----------

(Cytosol has 
  (superclasses (Aqueous-Solution)))

;;; ----------

(Dalton has 
  (superclasses (Unit-of-Measurement)))

;;; ----------

(dcs-list has 
  (instance-of (Slot)))

;;; ----------

(defeated has 
  (instance-of (Slot)))

;;; ----------

(defeated-by has 
  (instance-of (Slot))
  (inverse (defeats)))

;;; ----------

(defeats has 
  (instance-of (Relation))
  (domain (Action))
  (range (State))
  (inverse (defeated-by))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (inherit-with-overrides (t))
  (cardinality (N-to-N)))

;;; ----------

(Deliberate-Act has 
  (subclasses (Invade)))

;;; ----------

(Deliver has 
  (superclasses (Receive))
  (required-slot (recipient
                  object))
  (primary-slot (agent
                 donor
                 instrument))
  (cmap-correspondence ((:seq agent "deliverer")
                        (:seq donor "donor")
                        (:seq instrument "instrument")
                        (:seq object "the thing delivered")
                        (:seq recipient "recipient")))
  (test-case ('((*Pizza has (instance-of (Tangible-Entity))) (*Dominoes has (instance-of (Tangible-Entity)) (possesses (*Pizza))) (*Delivery-Guy has (instance-of (Tangible-Entity))) (*Albert has (instance-of (Tangible-Entity))) (*Deliver has (instance-of (Deliver)) (donor (*Dominoes)) (agent (*Delivery-Guy)) (recipient (*Albert)) (object (*Pizza))) (do-and-next *Deliver) ((the possesses of *Dominoes) = nil) ((the possesses of *Albert) = *Pizza) ((the agent of *Deliver) = *Delivery-Guy) (((the agent of *Deliver) /= (the donor of *Deliver)) and ((the agent of *Deliver) /= (the recipient of *Deliver)))))))

(every Deliver has 
  (agent ((constraint ((TheValue /= (the donor of Self)) and (TheValue /= (the recipient of Self)))))))

;;; ----------

(density has 
  (instance-of (Property))
  (domain (Tangible-Entity))
  (range (Value))
  (range2 (Thing))
  (inverse (density-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(density-of has 
  (inverse (density))
  (instance-of (Slot)))

;;; ----------

(Density-Scalar has 
  (superclasses (Scalar-Value))
  (instances (*soft
              *compressible
              *solid
              *semihard
              *hard
              *woody
              *petrous)))

;;; ----------

(Density-Scale has 
  (superclasses (Scale))
  (instances (*soft-to-hard)))

;;; ----------

(Deoxyadenosine-Monophosphate has 
  (superclasses (Deoxyribonucleotide
                 Nucleoside-Monophosphate)))

;;; ----------

(Deoxyadenosine-Triphosphate has 
  (superclasses (Deoxyribonucleotide
                 Nucleoside-Triphosphate)))

;;; ----------

(Deoxycytidine-Monophosphate has 
  (superclasses (Deoxyribonucleotide
                 Nucleoside-Monophosphate)))

;;; ----------

(Deoxycytidine-Triphosphate has 
  (superclasses (Deoxyribonucleotide
                 Nucleoside-Triphosphate)))

;;; ----------

(Deoxyguanosine-Monophosphate has 
  (superclasses (Deoxyribonucleotide
                 Nucleoside-Monophosphate)))

;;; ----------

(Deoxyguanosine-Triphosphate has 
  (superclasses (Deoxyribonucleotide
                 Nucleoside-Triphosphate)))

;;; ----------

(Deoxyribonucleotide has 
  (subclasses (Deoxythymidine-Triphosphate
               Deoxythymidine-Monophosphate
               Deoxyguanosine-Triphosphate
               Deoxyguanosine-Monophosphate
               Deoxycytidine-Triphosphate
               Deoxycytidine-Monophosphate
               Deoxyadenosine-Triphosphate
               Deoxyadenosine-Monophosphate))
  (superclasses (Nucleotide)))

(every Deoxyribonucleotide has 
  (has-part ((a Nucleoside with (has-part ((a Deoxyribose)))))))

;;; ----------

(Deoxyribose has 
  (superclasses (5-Carbon-Sugar)))

;;; ----------

(Deoxythymidine-Monophosphate has 
  (superclasses (Deoxyribonucleotide
                 Nucleoside-Monophosphate)))

;;; ----------

(Deoxythymidine-Triphosphate has 
  (superclasses (Deoxyribonucleotide
                 Nucleoside-Triphosphate)))

;;; ----------

(depth has 
  (instance-of (Property))
  (domain (Tangible-Entity))
  (range (Value))
  (range2 (Thing))
  (inverse (depth-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(depth-of has 
  (inverse (depth))
  (instance-of (Slot)))

;;; ----------

(Depth-Scalar has 
  (superclasses (Scalar-Value))
  (instances (*shallow
              *deep-rooted
              *steep
              *deep)))

;;; ----------

(Depth-Scale has 
  (superclasses (Scale))
  (instances (*shallow-deep-scale)))

;;; ----------

(destination has 
  (required-slot-of (Endocytose
                     Phagocytose
                     Pinocytose
                     Absorb
                     Come-Into-Contact
                     Come-Together
                     Go-To
                     Make-Contact
                     Move-To
                     Move-Together
                     Take-In))
  (instance-of (Relation))
  (primary-slot-of (Carry
                    Eject
                    Emit
                    Enter
                    Excrete
                    Exit
                    Expel
                    Extrude
                    Exude
                    Fall
                    Leave
                    Move-From
                    Move-Into
                    Move-Out-Of
                    Move-Through
                    Move
                    Secrete
                    Send
                    Slide
                    Traverse))
  (secondary-slot-of (Move))
  (domain (Event))
  (range (Place))
  (inverse (destination-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-1)))

;;; ----------

(destination-of has 
  (inverse (destination))
  (instance-of (Slot)))

;;; ----------

(Destroy has 
  (superclasses (Break))
  (required-slot (object))
  (primary-slot (agent
                 instrument
                 by-means-of))
  (cmap-correspondence ((:seq agent "the destroyer")
                        (:seq object "the object destroyed")
                        (:seq by-means-of "an event necessary to the destruction")
                        (:seq instrument "instrument of the destruction")))
  (subclasses (Divide)))

(every Destroy has 
  (object ((a Tangible-Entity)))
  (agent ((must-be-a Tangible-Entity)))
  (instrument ((must-be-a Tangible-Entity)))
  (by-means-of ((must-be-a Event))))

;;; ----------

(Detach has 
  (superclasses (Disconnect))
  (required-slot (the-major-object
                  the-minor-object))
  (primary-slot (agent
                 instrument))
  (cmap-correspondence ((:seq the-minor-object "the object being detached")
                        (:seq the-major-object "the object being detached from")))
  (test-case ('((*bumper has (instance-of (Object))) (*sticker has (instance-of (Object))) (a Attach with (the-minor-object (*sticker)) (the-major-object (*bumper))) (not ((the object of (the Be-Attached-To object-of of *sticker)) includes *bumper)) (do-and-next (thelast Attach)) ((the object of (the Be-Attached-To object-of of *sticker)) includes *bumper) (a Detach with (the-minor-object (*sticker)) (the-major-object (*bumper))) (do-and-next (thelast Detach)) ((the defeats of (thelast Detach)) includes ((thelast Be-Attached-To))) (not ((the object of (the Be-Attached-To object-of of *sticker)) includes *bumper))))))

(every Detach has 
  (object ((the the-major-object of Self)
           (the the-minor-object of Self)))
  (the-major-object ((a Tangible-Entity)))
  (the-minor-object ((a Tangible-Entity)))
  (instrument ((must-be-a Tangible-Entity)))
  (defeats ((allof (the object-of of (the the-minor-object of Self)) where (((the the-major-object of It) = (the the-major-object of Self)) and ((the classes of It) = Be-Attached-To)))))
  (del-list ((forall (the defeats of Self) (:set (:triple It the-major-object (the the-major-object of Self)) (:triple It the-minor-object (the the-minor-object of Self)) (forall2 (the object of Self) (:triple It object It2))))))
  (pcs-list ((:triple (the the-major-object of Self) location (the location of Self)))))

;;; ----------

(direction has 
  (required-slot-of (Fall))
  (instance-of (Property))
  (domain (Event))
  (range (Direction))
  (inverse (direction-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-1)))

;;; ----------

(Direction has 
  (superclasses (Intangible-Entity))
  (range-of (direction)))

;;; ----------

(direction-of has 
  (inverse (direction))
  (instance-of (Slot)))

;;; ----------

(Disconnect has 
  (subclasses (Detach))
  (superclasses (Action))
  (required-slot (object))
  (primary-slot (instrument
                 the-connector))
  (cmap-correspondence ((:seq object "the objects being disconnected")))
  (test-case ('((*block1 has (instance-of (Object))) (*block2 has (instance-of (Object))) (a Connect with (object (*block1 *block2))) (not ((the object of (the Be-Connected object-of of *block2)) includes *block1)) (do-and-next (thelast Connect)) (oneof (the Be-Connected object-of of *block2) where ((the object of It) includes *block1)) (a Disconnect with (object (*block1 *block2))) (do-and-next (thelast Disconnect)) ((the defeats of (thelast Disconnect)) includes ((thelast Be-Connected))) (not ((the object of (the Be-Connected object-of of *block2)) includes *block1))))))

(every Disconnect has 
  (instrument ((must-be-a Tangible-Entity)))
  (object ((a Tangible-Entity called "O1")
           (a Tangible-Entity called "O2")))
  (the-connector ((must-be-a Tangible-Entity)))
  (defeats ((allof (the object-of of ((the object of Self) called "O1")) where (((the classes of It) = Be-Connected) and ((the object of It) includes ((the object of Self) called "O2")) and ((the instrument of It) = (the the-connector of Self))))))
  (del-list ((forall (the defeats of Self) (:triple It object (the object of Self)))
             (if (has-value (the the-connector of Self)) then (forall (the defeats of Self) (:triple It instrument (the the-connector of Self))))))
  (prepatory-step ((:default (if (not (the defeats of Self)) then (a Connect with (object ((the object of Self))) (agent ((the agent of Self))))))
                   (:default (if (has-value (the agent of Self)) then (a Move with (object ((the agent of Self))) (destination ((a Place with (is-at ((the location of ((the object of Self) called "O1"))))))))))))
  (dcs-list ((:triple (the location of ((the object of Self) called "O1")) is-at (the location of ((the object of Self) called "O2")))
             (if (has-value (the agent of Self)) then (:triple (the location of (the agent of Self)) is-at (the location of ((the object of Self) called "O2")))))))

;;; ----------

(disjunctive-next-events has 
  (superclasses (next-events))
  (instance-of (Slot))
  (domain (Action))
  (range (Action))
  (cardinality (N-to-N)))

;;; ----------

(Dispatch has 
  (superclasses (Relinquish))
  (required-slot (agent
                  donor
                  object))
  (primary-slot (recipient
                 instrument))
  (cmap-correspondence ((:seq object "the thing dispatched")
                        (:seq agent "dispatcher")
                        (:seq donor "donor")
                        (:seq recipient "recipient")
                        (:seq instrument "instrument"))))

(every Dispatch has 
  (agent ((a Entity))))

;;; ----------

(Disperse has 
  (subclasses (Break-Contact))
  (superclasses (Move-From))
  (required-slot (object
                  subevent
                  source))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "the things being dispersed")
                        (:seq agent "the disperser")
                        (:seq source "dispersed from")
                        (:seq subevent "subevents")))
  (test-case ('((*Tim has (instance-of (Organism))) (*Ken has (instance-of (Organism))) (*Mall has (instance-of (Place))) (*Tim has (location (*Mall))) (*Ken has (location (*Mall))) (a Disperse with (object (*Ken *Tim)) (source (*Mall))) (do-and-next (thelast Disperse)) ((the location of *Tim) /= *Mall) ((the location of *Ken) /= *Mall) (forall (the subevent of (thelast Disperse)) ((It isa Move-From) and ((:set *Tim *Ken) includes (the object of It))))))))

(every Disperse has 
  (object ((exactly 2 Tangible-Entity)
           (a Tangible-Entity called "O1")
           (a Tangible-Entity called "O2")))
  (subevent ((forall (the object of Self) ((a Move-From with (object (It)) (agent ((the agent of Self))))))))
  (destination ((exactly 0 Place)))
  (path ((exactly 0 Place))))

;;; ----------

(Divide has 
  (superclasses (Destroy)))

(every Divide has 
  (add-list ((:triple Self result (an instance of (the instance-of of (the object of Self)) with (material ((forall (the material of (the object of Self)) ((an instance of (the instance-of of It)))))) (animacy ((the animacy of (the object of Self)))) (breakability ((the breakability of (the object of Self)))) (color ((the color of (the object of Self)))) (consistency ((the consistency of (the object of Self)))) (density ((the density of (the object of Self)))) (sentience ((the sentience of (the object of Self)))) (sex ((the sex of (the object of Self)))) (smell ((the smell of (the object of Self)))) (taste ((the taste of (the object of Self)))) (temperature ((the temperature of (the object of Self)))) (texture ((the texture of (the object of Self)))) (trait ((the trait of (the object of Self)))) (wetness ((the wetness of (the object of Self))))) called "result1")
             (:triple Self result (an instance of (the instance-of of (the object of Self)) with (material ((forall (the material of (the object of Self)) ((an instance of (the instance-of of It)))))) (animacy ((the animacy of (the object of Self)))) (breakability ((the breakability of (the object of Self)))) (color ((the color of (the object of Self)))) (consistency ((the consistency of (the object of Self)))) (density ((the density of (the object of Self)))) (sentience ((the sentience of (the object of Self)))) (sex ((the sex of (the object of Self)))) (smell ((the smell of (the object of Self)))) (taste ((the taste of (the object of Self)))) (temperature ((the temperature of (the object of Self)))) (texture ((the texture of (the object of Self)))) (trait ((the trait of (the object of Self)))) (wetness ((the wetness of (the object of Self))))) called "result2"))))

;;; ----------

(DNA has 
  (subclasses (Bacterial-DNA))
  (superclasses (Nucleic-Acid)))

;;; ----------

(DNA-3-End has 
  (superclasses (DNA-Region)))

;;; ----------

(DNA-5-End has 
  (superclasses (DNA-Region)))

;;; ----------

(DNA-Coding-Region has 
  (superclasses (DNA-Region))
  (subclasses (Transcription-Unit
               Operon
               Genome
               Exon
               DNA-Codon)))

(every DNA-Coding-Region has 
  (has-part ((a Gene)
             (a Promoter)
             (a Terminator)
             (at-least 1 Enhancer)
             (a Enhancer))))

;;; ----------

(DNA-Codon has 
  (superclasses (DNA-Coding-Region)))

(every DNA-Codon has 
  (has-part ((exactly 3 Nucleotide)
             (a Nucleotide called "First")
             (a Nucleotide called "Middle")
             (a Nucleotide called "Last"))))

;;; ----------

(DNA-Molecule has 
  (superclasses (Macromolecule
                 Nucleic-Acid))
  (subclasses (Procaryotic-DNA
               Eucaryotic-DNA)))

(every DNA-Molecule has 
  (has-part ((a DNA-Strand called "Strand1" with (object-of ((a Be-Connected with (object (((the has-part of Self) called "Strand2"))) (instrument ((a Hydrogen-Bond)))))))
             (a DNA-Strand called "Strand2"))))

;;; ----------

(DNA-Non-Coding-Region has 
  (superclasses (DNA-Region))
  (subclasses (Non-Transcribed-Region
               DNA-Regulatory-Region)))

(every DNA-Non-Coding-Region has 
  (has-part ((a Promoter-Region)
             (a Terminator-Region))))

;;; ----------

(DNA-Polymerase has 
  (superclasses (Polymerase))
  (subclasses (Procaryotic-DNA-Polymerase
               Eucaryotic-DNA-Polymerase)))

;;; ----------

(DNA-Region has 
  (subclasses (DNA-Non-Coding-Region
               DNA-Coding-Region
               DNA-5-End
               DNA-3-End))
  (superclasses (Nucleic-Acid-Region)))

;;; ----------

(DNA-Regulatory-Region has 
  (superclasses (DNA-Non-Coding-Region))
  (subclasses (Enhancer
               Terminator
               Terminator-Region
               Promoter)))

;;; ----------

(DNA-Regulatory-Site has 
  (superclasses (Regulatory-Site))
  (subclasses (Terminator-Site
               Promoter-Region)))

;;; ----------

(DNA-Strand has 
  (subclasses (DNA-Strand-2
               DNA-Strand-1))
  (superclasses (Strand
                 Macromolecule
                 Nucleic-Acid)))

(every DNA-Strand has 
  (has-part ((a Deoxyadenosine-Monophosphate)
             (a Deoxycytidine-Monophosphate)
             (a Deoxyguanosine-Monophosphate)
             (a Deoxythymidine-Monophosphate)
             (a DNA-Codon)
             (a DNA-Coding-Region)
             (a DNA-Non-Coding-Region)
             (a DNA-5-End)
             (a DNA-3-End))))

;;; ----------

(DNA-Strand-1 has 
  (superclasses (DNA-Strand)))

;;; ----------

(DNA-Strand-2 has 
  (superclasses (DNA-Strand)))

;;; ----------

(DNA-Virus has 
  (superclasses (Virus)))

(every DNA-Virus has 
  (has-part (Protein-Coat
             Viral-DNA)))

;;; ----------

(does-not-enclose has 
  (instance-of (Slot))
  (inverse (is-outside)))

;;; ----------

(Donate has 
  (superclasses (Give))
  (required-slot (beneficiary
                  recipient
                  agent
                  donor
                  object))
  (primary-slot (instrument))
  (cmap-correspondence ((:seq beneficiary "beneficiary")
                        (:seq object "the thing donated")
                        (:seq agent "donor")
                        (:seq donor "donor")
                        (:seq recipient "recipient")
                        (:seq instrument "instrument")))
  (test-case ('((*TV has (instance-of (Tangible-Entity))) (*Mary has (instance-of (Tangible-Entity)) (possesses (*TV))) (*Salvation-Army has (instance-of (Tangible-Entity))) (*Donate has (instance-of (Donate)) (donor (*Mary)) (recipient (*Salvation-Army)) (beneficiary (*Salvation-Army)) (object (*TV))) (do-and-next *Donate) ((the possesses of *Mary) /= *TV) ((the possesses of *Salvation-Army) = *TV) ((the possesses of (the beneficiary of *Donate)) = *TV)))))

(every Donate has 
  (beneficiary ((a Tangible-Entity))))

;;; ----------

(donor has 
  (primary-slot-of (Deliver
                    Obtain
                    Receive
                    Transfer))
  (required-slot-of (Dispatch
                     Donate
                     Feed
                     Give
                     Lose
                     Relinquish
                     Send
                     Supply
                     Take))
  (instance-of (Relation))
  (domain (Transfer))
  (range (Living-Entity))
  (inverse (donor-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(donor-of has 
  (inverse (donor))
  (instance-of (Slot)))

;;; ----------

(Double-Helix has 
  (superclasses (Helix)))

;;; ----------

(during has 
  (instance-of (Relation))
  (domain (Time-Interval))
  (range (Time-Interval))
  (inverse (temporally-contains))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(during-condition has 
  (instance-of (KM-Slot-Group))
  (domain (Event))
  (inverse (during-condition-of))
  (cardinality (N-to-N))
  (fluent-status (*Non-Fluent)))

;;; ----------

(during-condition-of has 
  (inverse (during-condition))
  (instance-of (Slot)))

;;; ----------

(E-Site has 
  (superclasses (Binding-Site)))

;;; ----------

(Eject has 
  (superclasses (Move-Out-Of))
  (required-slot (object
                  agent
                  source
                  causes))
  (primary-slot (destination
                 path))
  (cmap-correspondence ((:seq agent "the eject'er")
                        (:seq object "the ejected thing")))
  (test-case ('((*fighterjet has (instance-of (Enclosure))) (*pilot has (instance-of (Organism))) (a Eject with (agent (*fighterjet)) (object (*pilot))) ((the agent of (the causes of (thelast Eject))) = *pilot)))))

(every Eject has 
  (agent ((a Enclosure)))
  (object ((a Organism)))
  (causes ((a Exit with (agent ((the object of Self))) (source ((the source of Self)))))))

;;; ----------

(EM-Wave has 
  (superclasses (Substance)))

;;; ----------

(Emit has 
  (superclasses (Move-From))
  (required-slot (object
                  source))
  (primary-slot (agent
                 destination
                 path))
  (cmap-correspondence ((:seq object "the thing emitted")
                        (:seq the-enclosure "the enclosure")
                        (:seq destination "final location")
                        (:seq agent "the mover")
                        (:seq source "original location")
                        (:seq path "the portal")))
  (test-case ('((*Sun has (instance-of (Place))) (*Earth has (instance-of (Place))) (*SunLight has (instance-of (EM-Wave))) (*SunLight has (location (*Sun))) ((*SunLight location) = *Sun) (a Emit with (object (*SunLight)) (source ((in-situation (the1 of (the before-situation of (thelast Move-From))) (*SunLight location)))) (destination (*Earth))) (do-and-next (thelast Emit)) ((*SunLight location) = *Earth) ((*SunLight location) /= *Sun)))))

(every Emit has 
  (object ((constraint ((TheValue &? (a Fluid)) or (TheValue &? (a Particulate-Matter)) or (TheValue &? (a EM-Wave))))))
  (source ((if ((has-value (the agent of Self)) or (has-value (the instrument of Self))) then ((constraint (TheValue = (the location of (the agent of Self))) or (TheValue = (the location of (the instrument of Self)))) else t)))))

;;; ----------

(enabled-by has 
  (inverse (enables))
  (instance-of (Slot)))

;;; ----------

(enables has 
  (required-slot-of (Supply))
  (instance-of (Relation))
  (domain (Event))
  (range (Event))
  (inverse (enabled-by))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(encloses has 
  (instance-of (Slot))
  (inverse (is-inside)))

;;; ----------

(Enclosure has 
  (subclasses (Container
               Protein-Coat
               Membrane
               Cell-Wall))
  (superclasses (Barrier))
  (test-case ('((*Box has (instance-of (Enclosure))) ((the is-inside of (the encloses of (the location of *Box))) = (the location of *Box)) ((the is-outside of (the does-not-enclose of (the location of *Box))) = (the location of *Box))))))

(every Enclosure has 
  (location ((a Place with (encloses ((a Place with (is-inside ((the location of Self)))))) (does-not-enclose ((a Place with (is-outside ((the location of Self)))))) (between ((:args (the encloses of Self) (the does-not-enclose of Self))))))))

;;; ----------

(Endocytose has 
  (superclasses (Take-Up))
  (required-slot (object
                  destination))
  (primary-slot (agent
                 source
                 path))
  (cmap-correspondence ((:seq agent "the endocytose'er")
                        (:seq object "the endocytosed")
                        (:seq destination "final location")
                        (:seq source "original location")
                        (:seq path "the portal")))
  (subclasses (Pinocytose
               Phagocytose)))

(every Endocytose has 
  (agent ((a Cell))))

;;; ----------

(Endoplasmic-Reticulum has 
  (superclasses (Membrane
                 Organelle)))

;;; ----------

(Enhancer has 
  (superclasses (DNA-Regulatory-Region)))

;;; ----------

(Ensemble has 
  (subclasses (Polyribosome)))

;;; ----------

(entailed-by has 
  (inverse (entails))
  (instance-of (Slot)))

;;; ----------

(entails has 
  (instance-of (Relation))
  (domain (Event))
  (range (Event))
  (inverse (entailed-by))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(Enter has 
  (superclasses (Move-Into
                 Reflexive-Cliche))
  (required-slot (agent
                  object
                  the-enclosure))
  (primary-slot (object
                 destination
                 source
                 path))
  (cmap-correspondence ((:seq agent "the enter'er")
                        (:seq object "the enter'er")
                        (:seq the-enclosure "the enclosure")
                        (:seq destination "final location")
                        (:seq source "original location")
                        (:seq path "the portal")))
  (test-case ('((*Johns-Location has (instance-of (Place))) (*John has (instance-of (Organism)) (location (*Johns-Location))) (*Door has (instance-of (Portal))) (*House-Location has (instance-of (Place))) (*House has (instance-of (Enclosure)) (location (*House-Location))) (a Enter with (agent (*John)) (the-enclosure (*House)) (path (*Door))) (do-and-next (thelast Enter)) ((the path of (thelast Enter)) = *Door) ((the content of *House) = *John) ((the is-inside of (the location of *John)) = *House-Location) ((the is-outside of (the location of *John)) /= *House-Location))))
  (subclasses (Invade)))

;;; ----------

(Entity has 
  (superclasses (Thing))
  (subclasses (Force
               Tangible-Entity
               Intangible-Entity))
  (domain-of (age
              animacy
              capability
              function
              goal
              time-of-existence))
  (range-of (instrument
             object
             result)))

;;; ----------

(Enzyme has 
  (subclasses (Ubiquitin-Binding-Enzyme
               Peptidyl-Transferase
               Enzyme-Complex
               Catalytic-Enzyme
               Anabolic-Enzyme))
  (superclasses (Protein)))

;;; ----------

(Enzyme-Complex has 
  (superclasses (Enzyme))
  (subclasses (SnRNP)))

;;; ----------

(Eucaryote has 
  (superclasses (Organism)))

(every Eucaryote has 
  (has-part ((a Eucaryotic-Cell))))

;;; ----------

(Eucaryotic-Cell has 
  (superclasses (Cell)))

(every Eucaryotic-Cell has 
  (has-part ((a Nucleus)
             (a Cytoplasm with (has-part ((a Endoplasmic-Reticulum) (a Golgi-Body) (a Lysosome) (a Peroxisome) (a Mitochondrion) (a Vesicle) (a Proteasome) (a Ubiquitin) (a Ubiquinated-Protein) (a Free-Ribosome) (a Guanosine-Triphosphate) (a Adenosine-Triphosphate) (a Cytidine-Triphosphate) (a Uridine-Triphosphate) (a Primary-RNA-Transcript) (a Eucaryotic-RRNA) (a Eucaryotic-TRNA) (a Eucaryotic-MRNA) (a SnRNP) (a Ubiquitin-Binding-Enzyme)))))))

;;; ----------

(Eucaryotic-Cytoplasm has 
  (superclasses (Protoplasm)))

(every Eucaryotic-Cytoplasm has 
  (has-part ((a Cytosol)
             (a Endoplasmic-Reticulum)
             (a Golgi-Body)
             (a Lysosome)
             (a Peroxisome)
             (a Mitochondrion)
             (a Vesicle)
             (a Proteasome)
             (a Ubiquitin)
             (a Ubiquinated-Protein)
             (a Free-Ribosome)
             (a Guanosine-Triphosphate)
             (a Adenosine-Triphosphate)
             (a Cytidine-Triphosphate)
             (a Uridine-Triphosphate)
             (a Primary-RNA-Transcript)
             (a Eucaryotic-RRNA)
             (a Eucaryotic-TRNA)
             (a Eucaryotic-MRNA)
             (a Translation-Initiation-Factor)
             (a Ribosome-Release-Factor)
             (a Chaperone)
             (exactly 4 SnRNP)
             (a SnRNP)
             (a SnRNP)
             (a SnRNP)
             (a SnRNP))))

;;; ----------

(Eucaryotic-DNA has 
  (superclasses (DNA-Molecule)))

(every Eucaryotic-DNA has 
  (has-part ((exactly 2 DNA-Strand)
             (a DNA-Strand called "DS1" with (has-part ((a DNA-Coding-Region with (has-part ((at-least 1 Gene) (a Gene with (has-part ((a Intron with (length ((at-least 80 Nucleotide) (at-most 10000 Nucleotide)))) (at-least 1 Exon) (a Promoter-Region) (a Terminator) (a Spacer-DNA-Region))))))))))
             (a DNA-Strand called "DS2" with (has-part ((a DNA-Coding-Region with (has-part ((at-least 1 Gene) (a Gene with (has-part ((a Intron with (length ((at-least 80 Nucleotide) (at-most 10000 Nucleotide)))) (at-least 1 Exon) (a Promoter-Region) (a Terminator) (a Spacer-DNA-Region)))))))))))))

;;; ----------

(Eucaryotic-DNA-Polymerase has 
  (superclasses (DNA-Polymerase)))

;;; ----------

(Eucaryotic-Gene has 
  (superclasses (Transcription-Unit)))

(every Eucaryotic-Gene has 
  (has-part ((a Intron with))))

;;; ----------

(Eucaryotic-MRNA has 
  (superclasses (MRNA)))

(every Eucaryotic-MRNA has 
  (has-part ((a 5-Untranslated-Region)
             (a RNA-Translated-Region)
             (a 3-Untranslated-Region)
             (a Poly-A-Tail))))

;;; ----------

(Eucaryotic-Ribosome has 
  (superclasses (Ribosome)))

(every Eucaryotic-Ribosome has 
  (mass ((exactly 4200000 Dalton)))
  (has-part ((a Ribonucleoprotein called "RNP1" with (size (*large)) (mass ((exactly 2800000 Dalton))) (has-part ((a MRNA-Site) (a A-Site) (a P-Site) (a E-Site) (exactly 3 RRNA) (exactly 49 Ribosomal-Protein))))
             (a Ribonucleoprotein called "RNP2" with (size (*small)) (mass ((exactly 1400000 Dalton))) (has-part ((a MRNA-Site) (a TRNA-Initiator-Site) (a RRNA) (exactly 1 Ribosomal-Protein)))))))

;;; ----------

(Eucaryotic-RNA-Polymerase has 
  (superclasses (RNA-Polymerase)))

;;; ----------

(Eucaryotic-RNA-Transcript has 
  (superclasses (RNA-Transcript))
  (subclasses (Primary-RNA-Transcript)))

;;; ----------

(Eucaryotic-RRNA has 
  (superclasses (RRNA)))

;;; ----------

(Eucaryotic-TRNA has 
  (superclasses (TRNA)))

;;; ----------

(Event has 
  (subclasses (Action
               State))
  (superclasses (Thing))
  (primary-slot (time))
  (cmap-correspondence ((:seq time "when")))
  (domain-of (agent
              away-from
              beneficiary
              by-means-of
              causer
              causes
              destination
              direction
              during-condition
              enables
              entails
              experiencer
              frequency
              inhibits
              instrument
              manner
              object
              path
              prevents
              rate
              recipient
              resulting-state
              source
              subevent-order
              subevent
              time
              toward))
  (range-of (by-means-of
             causer-of
             causes
             enables
             entails
             inhibits
             prevents
             subevent-order
             subevent)))

(every Event has 
  (time ((must-be-a Time-Interval)))
  (causer ((must-be-a Entity with (capability (Self)) (causer-of ((a In-Control with (object ((the instrument of Self))) (time ((a Time-Interval with (temporally-overlaps ((the time of Self))))))))) (location ((if (has-value (the instrument of Self)) then (constraint (TheValue has (abuts ((the location of (the instrument of Self))))))))) (time-of-existence ((a Time-Interval with (temporally-overlaps ((the time-of-existence of (the object of Self)) (if (has-value (the beneficiary of Self)) then (the time-of-existence of (the beneficiary of Self))) (if (has-value (the experiencer of Self)) then (the time-of-existence of (the experiencer of Self))) (if (has-value (the instrument of Self)) then (the time-of-existence of (the instrument of Self))) (if (has-value (the recipient of Self)) then (the time-of-existence of (the recipient of Self)))))))))))
  (beneficiary ((must-be-a Living-Entity with (goal ((a ToBe with (role (beneficiary)) (event (Self))))) (time-of-existence ((a Time-Interval with (temporally-overlaps ((the time-of-existence of (the object of Self)) (if (has-value (the causer of Self)) then (the time-of-existence of (the causer of Self))) (if (has-value (the experiencer of Self)) then (the time-of-existence of (the experiencer of Self))) (if (has-value (the instrument of Self)) then (the time-of-existence of (the instrument of Self))) (if (has-value (the recipient of Self)) then (the time-of-existence of (the recipient of Self)))))))))))
  (donor ((must-be-a Living-Entity with (time-of-existence ((a Time-Interval with (temporally-overlaps ((the time-of-existence of (the object of Self)) (if (has-value (the causer of Self)) then (the time-of-existence of (the causer of Self))) (if (has-value (the experiencer of Self)) then (the time-of-existence of (the experiencer of Self))) (if (has-value (the instrument of Self)) then (the time-of-existence of (the instrument of Self))) (if (has-value (the recipient of Self)) then (the time-of-existence of (the recipient of Self)))))))))))
  (instrument ((must-be-a Entity with (location ((constraint (TheValue has (abuts ((the location of (the causer of Self)))))))) (time-of-existence ((a Time-Interval with (temporally-overlaps ((the time-of-existence of (the object of Self)) (if (has-value (the beneficiary of Self)) then (the time-of-existence of (the beneficiary of Self))) (if (has-value (the experiencer of Self)) then (the time-of-existence of (the experiencer of Self))) (if (has-value (the causer of Self)) then (the time-of-existence of (the causer of Self))) (if (has-value (the recipient of Self)) then (the time-of-existence of (the recipient of Self)))))))))))
  (object ((must-be-a Entity with (time-of-existence ((a Time-Interval with (temporally-overlaps ((if (has-value (the beneficiary of Self)) then (the time-of-existence of (the beneficiary of Self))) (if (has-value (the experiencer of Self)) then (the time-of-existence of (the experiencer of Self))) (if (has-value (the causer of Self)) then (the time-of-existence of (the causer of Self))) (if (has-value (the recipient of Self)) then (the time-of-existence of (the recipient of Self)))))))))))
  (recipient ((must-be-a Living-Entity with (time-of-existence ((a Time-Interval with (temporally-overlaps ((the time-of-existence of (the object of Self)) (if (has-value (the beneficiary of Self)) then (the time-of-existence of (the beneficiary of Self))) (if (has-value (the causer of Self)) then (the time-of-existence of (the causer of Self))) (if (has-value (the object of Self)) then (the time-of-existence of (the object of Self)))))))))))
  (result ((must-be-a Entity with (time-of-existence ((a Time-Interval with (temporally-overlaps ((the time-of-existence of (the object of Self)) (if (has-value (the beneficiary of Self)) then (the time-of-existence of (the beneficiary of Self))) (if (has-value (the recipient of Self)) then (the time-of-existence of (the recipient of Self)))))))))))
  (pcs-list ((if (has-value (the instrument of Self)) then (forall (the instrument of Self) ((:triple (It) instance-of (mustnt-be-a Entity with (function ((a To-Be with (role (instrument)) (in-event (Self))))) (object-of ((a Be-Broken with (object (It))))))))))))
  (test-case ('((Knife has (superclasses (Tangible-Entity))) (every Knife has (function ((a To-Be with (role (instrument)) (in-event ((the instrument-of of (Self)))))))) (*K has (instance-of (Knife)) (object-of ((a Be-Ruined)))) (Cut has (superclasses (Event))) (every Cut has (instrument ((a Knife)))) (a Cut with (instrument (*K))) (new-situation) (try-do (thelast Cut))))))

;;; ----------

(Excrete has 
  (superclasses (Expel))
  (required-slot (agent
                  object
                  source))
  (primary-slot (destination
                 path))
  (cmap-correspondence ((:seq object "the thing exuded")
                        (:seq the-enclosure "the enclosure")
                        (:seq destination "final location")
                        (:seq agent "the mover")
                        (:seq source "original location")
                        (:seq path "the portal")))
  (test-case ('((Waste has (superclasses (Tangible-Entity))) (*runner-location has (instance-of (Place))) (*runner has (instance-of (Enclosure)) (location (*runner-location))) (*sweat has (instance-of (Tangible-Entity))) (*sweat has (location ((a Place with (is-inside (*runner-location)))))) (*runner has (content (*sweat))) ((the content of *runner) = *sweat) ((the is-inside of (the location of *sweat)) = (*runner-location)) (a Excrete with (agent (*runner)) (object (*sweat))) (do-and-next (thelast Excrete)) ((the content of *runner) = nil) ((the is-outside of (the location of *sweat)) = (*runner-location)) ((the encloses of (*runner-location)) /= (the location of *sweat))))))

(every Excrete has 
  (object ((a Waste))))

;;; ----------

(Exit has 
  (superclasses (Move-Out-Of
                 Reflexive-Cliche))
  (required-slot (agent
                  the-enclosure))
  (primary-slot (object
                 source
                 destination
                 path))
  (cmap-correspondence ((:seq agent "the exit'er")
                        (:seq object "the exit'er")
                        (:seq the-enclosure "the enclosure")
                        (:seq destination "final location")
                        (:seq source "original location")
                        (:seq path "the portal")))
  (test-case ('((*Door has (instance-of (Portal))) (*House-Location has (instance-of (Place))) (*House has (instance-of (Enclosure)) (has-part (*Door)) (location (*House-Location))) (*Inside-The-House has (instance-of (Place)) (is-inside (*House-Location))) (*John has (instance-of (Organism)) (location (*Inside-The-House))) (*House has (content (*John))) (a Exit with (agent (*John)) (the-enclosure (*House))) ((the content of *House) = *John) ((the is-inside of (the location of *John)) = *House-Location) (do-and-next (thelast Exit)) ((the content of *House) = nil) ((the is-outside of (the location of *John)) = *House-Location) ((the does-not-enclose of *House-Location) includes (the location of *John))))))

;;; ----------

(Exon has 
  (superclasses (Gene-Region
                 DNA-Coding-Region)))

;;; ----------

(Expel has 
  (subclasses (Extrude
               Excrete))
  (superclasses (Move-Out-Of))
  (required-slot (object
                  agent
                  source))
  (primary-slot (destination
                 path))
  (cmap-correspondence ((:seq agent "the expeller")
                        (:seq object "the expelled thing")))
  (test-case ('((*Mouth has (instance-of (Portal))) (*Johns-Location has (instance-of (Place))) (*John has (instance-of (Enclosure)) (has-part (*Mouth)) (location (*Johns-Location))) (*Food has (instance-of (Tangible-Entity))) (*Food has (location ((a Place with (is-inside (*Johns-Location)))))) (*John has (content (*Food))) ((the content of *John) = *Food) ((the location of *Food) = (the encloses of (the location of *John))) (a Expel with (agent (*John)) (object (*Food))) (do-and-next (thelast Expel)) ((the content of *John) = nil) ((the is-outside of (the location of *Food)) = (the location of *John)) ((the encloses of (the location of *John)) /= (the location of *Food))))))

(every Expel has 
  (agent ((a Enclosure)))
  (the-enclosure ((the agent of Self))))

;;; ----------

(experiencer has 
  (required-slot-of (State))
  (instance-of (Relation))
  (domain (Event))
  (range (Organism))
  (inverse (experiencer-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(experiencer-of has 
  (inverse (experiencer))
  (instance-of (Slot)))

;;; ----------

(Extrude has 
  (superclasses (Expel))
  (required-slot (agent
                  object
                  source))
  (primary-slot (destination
                 path))
  (cmap-correspondence ((:seq object "the thing extruded")
                        (:seq the-enclosure "the enclosure")
                        (:seq destination "final location")
                        (:seq agent "the mover")
                        (:seq source "original location")
                        (:seq path "the portal")))
  (test-case ('((*Mouth has (instance-of (Portal))) (*earth-location has (instance-of (Place))) (*earth has (instance-of (Enclosure)) (location (*earth-location))) (*lava has (instance-of (Tangible-Entity)) (location ((a Place with (is-inside (*earth-location)))))) (*earth has (content (*lava))) ((the content of *earth) = *lava) ((the is-inside of (the location of *lava)) = *earth-location) (a Extrude with (agent (*earth)) (object (*lava))) (do-and-next (thelast Extrude)) ((the content of *earth) = nil) ((the is-outside of (the location of *lava)) = *earth-location) ((the encloses of *earth-location) /= (the location of *lava))))))

(every Extrude has 
  (agent ((a Tangible-Entity)))
  (object ((a Substance))))

;;; ----------

(Exude has 
  (superclasses (Move-Out-Of))
  (required-slot (object
                  the-enclosure
                  rate))
  (primary-slot (agent
                 source
                 destination
                 path))
  (cmap-correspondence ((:seq object "the thing exuded")
                        (:seq the-enclosure "the enclosure")
                        (:seq destination "final location")
                        (:seq agent "the mover")
                        (:seq source "original location")
                        (:seq path "the portal")))
  (test-case ('((*oil has (instance-of (Substance)) (wetness (*sticky))) (*earth-location has (instance-of (Place))) (*earth has (instance-of (Enclosure)) (location (*earth-location))) (a Exude with (object (*oil)) (the-enclosure (*earth))) (do-and-next (thelast Exude)) ((the is-inside of (the location of *oil)) /= *earth-location) ((the is-outside of (the location of *oil)) = *earth-location)))))

(every Exude has 
  (object ((a Substance with (wetness (*sticky)))))
  (rate (Slowly)))

;;; ----------

(Face has 
  (superclasses (Intangible-Entity))
  (instances (*front
              *back
              *left
              *right
              *top
              *bottom)))

;;; ----------

(Fall has 
  (superclasses (Move))
  (required-slot (object
                  direction))
  (primary-slot (source
                 destination
                 path))
  (cmap-correspondence ((:seq object "the thing falling")
                        (:seq source "starting point")
                        (:seq destination "terminal point")
                        (:seq path "moved through")))
  (test-case ('((*meteor has (instance-of (Tangible-Entity))) (*trailer has (instance-of (Tangible-Entity))) (a Fall with (object (*meteor)) (destination ((the location of *trailer)))) (do-and-next (thelast Fall)) ((the location of *meteor) = (the location of *trailer))))))

(every Fall has 
  (direction ((constraint ((TheValue isa Direction) and (TheValue = *down)))))
  (agent ((exactly 0 Living-Entity)))
  (pcs-list ((:triple (the object of Self) object-of (mustnt-be-a Be-Supported)))))

;;; ----------

(Feed has 
  (superclasses (Supply))
  (required-slot (recipient
                  agent
                  donor
                  object))
  (primary-slot (instrument))
  (cmap-correspondence ((:seq object "food")
                        (:seq agent "feeder")
                        (:seq donor "donor")
                        (:seq recipient "recipient")
                        (:seq instrument "instrument")))
  (test-case ('((*Food has (instance-of (Food))) (*Mother-Teresa has (instance-of (Living-Entity)) (possesses (*Food))) (*Children has (instance-of (Tangible-Entity))) (*Feed has (instance-of (Feed)) (donor (*Mother-Teresa)) (recipient (*Children)) (object (*Food))) (do-and-next *Feed) ((the possesses of *Mother-Teresa) /= *Food) ((the possesses of *Children) = *Food) ((the enables of *Feed) isa Obtain)))))

(every Feed has 
  (donor ((a Living-Entity)))
  (object ((a Food))))

;;; ----------

(First-Ribonucleotide has 
  (superclasses (Ribonucleotide)))

;;; ----------

(first-subevents has 
  (instance-of (Slot))
  (domain (Action))
  (range (Action))
  (cardinality (N-to-1)))

;;; ----------

(Fluid has 
  (superclasses (Substance)))

;;; ----------

(Food has 
  (superclasses (Substance)))

;;; ----------

(Force has 
  (superclasses (Entity))
  (subclasses (Pressure)))

;;; ----------

(Form has 
  (superclasses (Create))
  (required-slot (result))
  (primary-slot (agent
                 instrument
                 by-means-of
                 the-created-out-of))
  (cmap-correspondence ((:seq result "the thing formed")
                        (:seq instrument "the instrument")
                        (:seq by-means-of "the event needed")
                        (:seq the-created-out-of "the substance from which it is formed")))
  (test-case ('((*statue has (instance-of (Object))) (*clay has (instance-of (Substance))) (a Form with (result (*statue)) (the-created-out-of (*clay))) (do-and-next (thelast Form)) ((the material of (the result of (thelast Form))) = *clay) ((the material of *statue) = *clay)))))

(every Form has 
  (result ((a Tangible-Entity with (material ((the the-created-out-of of Self))))))
  (instrument ((must-be-a Tangible-Entity)))
  (by-means-of ((must-be-a Event)))
  (the-created-out-of ((must-be-a Substance))))

;;; ----------

(Formyl-Methionine has 
  (superclasses (Amino-Acid)))

;;; ----------

(Free-Nucleotide has 
  (superclasses (Nucleotide)))

;;; ----------

(Free-Ribosome has 
  (superclasses (Ribosome)))

;;; ----------

(frequency has 
  (instance-of (Property))
  (domain (Event))
  (range (Value))
  (inverse (frequency-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-1)))

;;; ----------

(frequency-of has 
  (inverse (frequency))
  (instance-of (Slot)))

;;; ----------

(function has 
  (instance-of (Relation))
  (domain (Entity))
  (range (To-Be))
  (inverse (function-of))
  (cardinality (N-to-N))
  (situation-specific (t))
  (fluent-status (*Inertial-Fluent)))

;;; ----------

(function-of has 
  (inverse (function))
  (instance-of (Slot)))

;;; ----------

(Functional-MRNA-Transcript has 
  (superclasses (RNA-Transcript)))

(every Functional-MRNA-Transcript has 
  (has-part ((a 7-Methyl-Guanosine with (object-of ((a Be-Connected with (object ((the First-Ribonucleotide has-part of Self))) (instrument ((a 5-5-Phosphodiester-Bond)))))))
             (a Methyl-Group with (object-of ((a Be-Connected with (object ((the First-Ribonucleotide has-part of Self)))))))
             (a First-Ribonucleotide))))

;;; ----------

(Functional-RNA-Transcript has 
  (superclasses (RNA-Transcript))
  (subclasses (Functional-Vertebrate-MRNA-Transcript)))

;;; ----------

(Functional-Vertebrate-MRNA-Transcript has 
  (superclasses (Functional-RNA-Transcript)))

(every Functional-Vertebrate-MRNA-Transcript has 
  (has-part ((a 7-Methyl-Guanosine with (object-of ((a Be-Connected with (object ((the First-Ribonucleotide has-part of Self))) (instrument ((a 5-5-Phosphodiester-Bond)))))))
             (a Methyl-Group with (object-of ((a Be-Connected with (object ((the Second-Ribonucleotide has-part of Self)))))))
             (a Second-Ribonucleotide)
             (a First-Ribonucleotide))))

;;; ----------

(Gene has 
  (superclasses (Transcription-Unit)))

(every Gene has 
  (has-part ((a Protein-Start-Codon))))

;;; ----------

(Gene-Region has 
  (subclasses (Intron
               Exon))
  (superclasses (Nucleic-Acid-Region)))

;;; ----------

(Gene-Transcript has 
  (superclasses (RNA-Transcript)))

;;; ----------

(Genome has 
  (superclasses (DNA-Coding-Region)))

(every Genome has 
  (has-part ((a Gene))))

;;; ----------

(Give has 
  (subclasses (Supply
               Send
               Donate))
  (superclasses (Relinquish
                 Receive))
  (required-slot (recipient
                  agent
                  donor
                  object))
  (primary-slot (instrument))
  (cmap-correspondence ((:seq object "the thing given")
                        (:seq agent "giver")
                        (:seq donor "donor")
                        (:seq recipient "recipient")
                        (:seq instrument "instrument")))
  (test-case ('((*Purple-Shirt has (instance-of (Tangible-Entity))) (*Randy has (instance-of (Tangible-Entity)) (possesses (*Purple-Shirt))) (*Samuel has (instance-of (Tangible-Entity))) (a Give with (donor (*Randy)) (recipient (*Samuel)) (object (*Purple-Shirt))) (do-and-next (thelast Give)) ((the possesses of *Samuel) = *Purple-Shirt) ((the possesses of *Randy) = nil) ((the is-possessed-by of *Purple-Shirt) = *Samuel) (((the agent of (thelast Give)) = *Randy) and ((the donor of (thelast Give)) = *Randy))))))

;;; ----------

(Glutamic-Acid has 
  (superclasses (Acidic-Amino-Acid)))

;;; ----------

(Glutamine has 
  (superclasses (Uncharged-Polar-Amino-Acid)))

;;; ----------

(Glycine has 
  (superclasses (Nonpolar-Amino-Acid)))

;;; ----------

(Go-To has 
  (superclasses (Move-To
                 Reflexive-Cliche))
  (required-slot (agent
                  object
                  destination))
  (primary-slot (source
                 path))
  (cmap-correspondence ((:seq object "the thing moved")
                        (:seq agent "the mover")
                        (:seq source "moved from")
                        (:seq destination "moved to")
                        (:seq path "moved through")
                        (:seq toward "moved toward")
                        (:seq away-from "moved away from"))))

(every Go-To has 
  (agent ((a Organism))))

;;; ----------

(goal has 
  (instance-of (Relation))
  (domain (Entity))
  (range (Condition))
  (inverse (goal-of))
  (cardinality (N-to-N))
  (situation-specific (t))
  (fluent-status (*Inertial-Fluent)))

;;; ----------

(goal-of has 
  (inverse (goal))
  (instance-of (Slot)))

;;; ----------

(Golgi-Body has 
  (superclasses (Organelle)))

;;; ----------

(Guanine has 
  (superclasses (Purine)))

;;; ----------

(Guanosine has 
  (superclasses (Nucleoside))
  (subclasses (RNA-Cap)))

(every Guanosine has 
  (has-part ((a Ribose)
             (a Guanine))))

;;; ----------

(Guanosine-Monophosphate has 
  (superclasses (Ribonucleotide
                 Nucleoside-Monophosphate)))

;;; ----------

(Guanosine-Triphosphate has 
  (superclasses (Ribonucleotide
                 Nucleoside-Triphosphate)))

;;; ----------

(has-on-it has 
  (inverse (is-on))
  (instance-of (Slot)))

;;; ----------

(has-part has 
  (instance-of (Relation))
  (domain (Tangible-Entity))
  (range (Tangible-Entity))
  (inverse (is-part-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (1-to-N)))

;;; ----------

(height has 
  (instance-of (Property))
  (domain (Tangible-Entity))
  (range (Value
          Thing))
  (inverse (height-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(height-of has 
  (inverse (height))
  (instance-of (Slot)))

;;; ----------

(Height-Scalar has 
  (superclasses (Scalar-Value))
  (instances (*low
              *high
              *short
              *tall)))

;;; ----------

(Height-Scale has 
  (superclasses (Scale))
  (instances (*short-to-tall)))

;;; ----------

(Helix has 
  (subclasses (Double-Helix))
  (superclasses (Shape)))

;;; ----------

(Heterocyclic-Compound has 
  (superclasses (Ring-Compound))
  (subclasses (Pyrimidine
               Purine)))

;;; ----------

(Histidine has 
  (superclasses (Basic-Amino-Acid)))

;;; ----------

(Histone has 
  (superclasses (Regulatory-Protein)))

;;; ----------

(Hold has 
  (superclasses (Obstruct))
  (required-slot (object
                  agent))
  (cmap-correspondence ((:seq object "object")
                        (:seq agent "holder")))
  (test-case ('((*toy-train has (instance-of (Tangible-Entity))) (*little-johny has (instance-of (Living-Entity))) (a Hold with (object (*toy-train)) (agent (*little-johny))) (not (the Be-Held object-of of *toy-train)) (do-and-next (thelast Hold)) (exists (the Be-Held object-of of *toy-train)) (*Move1 has (instance-of (Move)) (object (*toy-train))) (*Move2 has (instance-of (Move)) (object (*toy-train)) (agent (*little-johny))) (not (try-do *Move1)) (try-do *Move2) (a Let-Go-Of with (object (*toy-train)) (agent (*little-johny))) (do-and-next (thelast Let-Go-Of)) (not (exists (the Be-Held object-of of *toy-train))) (*Move3 has (instance-of (Move)) (object (*toy-train))) (try-do *Move3)))))

(every Hold has 
  (object ((a Tangible-Entity)))
  (agent ((a Living-Entity)))
  (resulting-state ((a Be-Held)))
  (add-list ((:triple (the resulting-state of Self) agent (the agent of Self))))
  (dcs-list ((:triple (the location of (the agent of Self)) is-at (the location of (the object of Self)))))
  (interrupted-by ((must-be-a Let-Go-Of with (object ((the object of Self))) (agent ((the agent of Self)))))))

;;; ----------

(Hydrogen-Bond has 
  (superclasses (Bond)))

;;; ----------

(Identify has 
  (superclasses (Perceive))
  (subclasses (Recognize)))

;;; ----------

(In-Control has 
  (superclasses (State)))

;;; ----------

(Inanimate-Object has 
  (subclasses (Separator
               Portal-Covering
               Connector
               Chemical-Object))
  (superclasses (Object)))

;;; ----------

(inhibited-by has 
  (inverse (inhibits))
  (instance-of (Slot)))

;;; ----------

(inhibits has 
  (instance-of (Relation))
  (domain (Event))
  (range (Event))
  (inverse (inhibited-by))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(Inorganic-Molecule has 
  (superclasses (Molecule))
  (subclasses (Phosphate)))

;;; ----------

(Inorganic-Substance has 
  (superclasses (Substance)))

;;; ----------

(instrument has 
  (primary-slot-of (Action
                    Attach
                    Be-Attached-To
                    Be-Connected
                    Be-Supported
                    Break
                    Connect
                    Copy
                    Create
                    Deliver
                    Destroy
                    Detach
                    Disconnect
                    Dispatch
                    Donate
                    Feed
                    Form
                    Give
                    Lose
                    Obtain
                    Produce
                    Receive
                    Release
                    Relinquish
                    Remove
                    Replicate
                    Ruin
                    Send
                    State
                    Supply
                    Support
                    Take-Apart
                    Take
                    Transfer
                    Unobstruct))
  (instance-of (Relation))
  (domain (Event))
  (range (Entity))
  (inverse (instrument-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(instrument-of has 
  (inverse (instrument))
  (instance-of (Slot)))

;;; ----------

(Intangible-Entity has 
  (subclasses (Unit-of-Measurement
               Scale
               Place
               Face
               Direction
               Axis))
  (superclasses (Entity)))

;;; ----------

(interrupted-by has 
  (instance-of (Slot)))

;;; ----------

(intersect has 
  (primary-slot-of (Container))
  (instance-of (Slot))
  (required-slot-of (Portal)))

;;; ----------

(Intron has 
  (superclasses (Gene-Region
                 Non-Coding-Region)))

(every Intron has 
  (has-part ((a Intron-Beginning-Sequence)
             (a Intron-End-Sequence)
             (a Intron-Branch-Sequence))))

;;; ----------

(Intron-Beginning-Sequence has 
  (superclasses (Regulatory-Region)))

;;; ----------

(Intron-Branch-Sequence has 
  (superclasses (Regulatory-Region)))

;;; ----------

(Intron-End-Sequence has 
  (superclasses (Regulatory-Region)))

;;; ----------

(Invade has 
  (superclasses (Enter
                 Deliberate-Act))
  (primary-slot (purpose
                 opposition))
  (cmap-correspondence ((:seq agent "the invader")
                        (:seq object "the thing invaded")))
  (domain-of (opposition)))

(every Invade has 
  (purpose ((a State)))
  (opposition ((the wall of (the recipient of Self))))
  (subevent ((a Penetrate with (object ((the wall of (the recipient of Self)))) (agent ((the agent of Self))))
             (a Take-Control with (agent ((the agent of Self))) (object ((the recipient of Self)))))))

;;; ----------

(is-above has 
  (instance-of (Relation))
  (domain (Place))
  (range (Place))
  (fluent-status (*Inertial-Fluent))
  (inverse (is-below))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(is-along has 
  (instance-of (Relation))
  (domain (Place))
  (range (Place))
  (inverse (is-along))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(is-at has 
  (instance-of (Relation))
  (domain (Place))
  (range (Place))
  (inverse (is-at-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(is-at-of has 
  (inverse (is-at))
  (instance-of (Slot)))

;;; ----------

(is-behind has 
  (instance-of (Relation))
  (domain (Place))
  (range (Place))
  (inverse (is-in-front-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(is-below has 
  (inverse (is-above))
  (instance-of (Slot)))

;;; ----------

(is-between has 
  (instance-of (Relation))
  (domain (Place))
  (range (Place))
  (range2 (Place))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (inverse (()))
  (cardinality (N-to-N)))

;;; ----------

(is-in-front-of has 
  (inverse (is-behind))
  (instance-of (Slot)))

;;; ----------

(is-inside has 
  (instance-of (Relation))
  (domain (Place))
  (range (Place))
  (inverse (encloses))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-1)))

;;; ----------

(is-on has 
  (instance-of (Relation))
  (domain (Place))
  (range (Place))
  (inverse (has-on-it))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(is-outside has 
  (instance-of (Relation))
  (domain (Place))
  (range (Place))
  (inverse (does-not-enclose))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(is-over has 
  (instance-of (Relation))
  (domain (Place))
  (range (Place))
  (inverse (is-under))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(is-part-of has 
  (instance-of (Slot))
  (inverse (has-part)))

;;; ----------

(is-possessed-by has 
  (inverse (possesses))
  (instance-of (Slot)))

;;; ----------

(is-under has 
  (inverse (is-over))
  (instance-of (Slot)))

;;; ----------

(Isoleucine has 
  (superclasses (Nonpolar-Amino-Acid)))

;;; ----------

(KM-Slot has 
  (superclasses (Slot))
  (instances (cmap-correspondence
              primary-slot
              required-slot
              secondary-slot
              test-case)))

;;; ----------

(KM-Slot-Group has 
  (superclasses (Relation))
  (domain (Thing))
  (range (Thing))
  (inverse (()))
  (cardinality (N-to-N))
  (fluent-status (*Non-Fluent))
  (instances (during-condition
              subevent-order)))

;;; ----------

(Lariat has 
  (superclasses (Shape)))

;;; ----------

(Leave has 
  (superclasses (Move-From
                 Reflexive-Cliche))
  (required-slot (agent
                  object
                  source))
  (primary-slot (destination
                 path))
  (cmap-correspondence ((:seq object "the thing moved")
                        (:seq agent "the mover")
                        (:seq source "moved from")
                        (:seq destination "moved to")
                        (:seq path "moved through")
                        (:seq toward "moved toward")
                        (:seq away-from "moved away from")))
  (test-case ('((new-situation) (*Boston has (instance-of (Place))) (*Austin has (instance-of (Place))) (*John has (instance-of (Organism))) (*John has (location (*Boston))) ((*John location) = *Boston) (a Leave with (agent (*John)) (source ((*John location))) (destination (*Austin))) (do-and-next (thelast Leave)) ((*John location) = *Austin) ((*John location) /= *Boston)))))

;;; ----------

(length has 
  (instance-of (Property))
  (domain (Tangible-Entity))
  (range (Value
          Thing))
  (inverse (length-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(length-of has 
  (inverse (length))
  (instance-of (Slot)))

;;; ----------

(Length-Scalar has 
  (superclasses (Scalar-Value))
  (instances (*short
              *long)))

;;; ----------

(Length-Scale has 
  (superclasses (Scale))
  (instances (*short-long-scale)))

;;; ----------

(Let-Fall has 
  (superclasses (Unobstruct))
  (required-slot (object
                  agent
                  causes))
  (cmap-correspondence ((:seq object "object")
                        (:seq agent "causer")
                        (:seq causes "causes"))))

(every Let-Fall has 
  (object ((a Tangible-Entity)))
  (agent ((a Living-Entity)))
  (causes ((a Fall with (object ((the object of Self))))))
  (defeats ((allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Supported))))
  (pcs-list ((:triple (the object of Self) object-of (a Be-Supported))))
  (del-list ((forall (the defeats of Self) (:triple It object (the object of Self)))))
  (prepatory-step ((:default (a Move with (object ((the agent of Self))) (destination ((a Place with (is-at ((the location of (the object of Self)))))))))))
  (interrupted-by ((must-be-a Support with (object ((the object of Self)))))))

;;; ----------

(Let-Go-Of has 
  (superclasses (Unobstruct))
  (required-slot (object
                  agent))
  (cmap-correspondence ((:seq object "object")
                        (:seq agent "agent"))))

(every Let-Go-Of has 
  (object ((a Tangible-Entity)))
  (agent ((a Living-Entity)))
  (defeats ((allof (the object-of of (the object of Self)) where (((the classes of It) = Be-Held) and ((the agent of It) = (the agent of Self))))))
  (del-list ((forall (the defeats of Self) (:set (:triple It object (the object of Self)) (:triple It agent (the agent of Self))))))
  (dcs-list ((:triple (the location of (the agent of Self)) is-at (the location of (the object of Self)))))
  (interrupted-by ((must-be-a Hold with (object ((the object of Self))) (agent ((the agent of Self)))))))

;;; ----------

(Leucine has 
  (superclasses (Nonpolar-Amino-Acid)))

;;; ----------

(Living-Entity has 
  (subclasses (Virus
               Organism
               Cell))
  (superclasses (Organic-Structure))
  (range-of (agent
             donor)))

;;; ----------

(location has 
  (instance-of (Relation))
  (required-slot-of (Be-Blocked
                     Be-Confined
                     Be-Shut-Out
                     Block
                     Separator
                     Shut-Out))
  (primary-slot-of (Confine
                    Tangible-Entity))
  (domain (Tangible-Entity))
  (range (Place))
  (inverse (location-of))
  (cardinality (N-to-1))
  (situation-specific (t))
  (fluent-status (*Inertial-Fluent)))

;;; ----------

(location-of has 
  (inverse (location))
  (instance-of (Slot)))

;;; ----------

(Locomotion has 
  (superclasses (Move
                 Reflexive-Cliche))
  (required-slot (agent))
  (primary-slot (object))
  (cmap-correspondence ((:seq agent "the mover")
                        (:seq object "the mover")))
  (test-case ('((new-situation) (*Boston has (instance-of (Place))) (*Austin has (instance-of (Place))) (*John has (instance-of (Organism))) (*John has (location (*Boston))) (a Locomotion with (agent (*John)) (source (*Boston)) (destination (*Austin))) (do-and-next (thelast Locomotion)) ((the location of *John) = *Austin)))))

;;; ----------

(Lose has 
  (superclasses (Transfer))
  (required-slot (object
                  donor))
  (primary-slot (agent
                 recipient
                 instrument))
  (cmap-correspondence ((:seq object "the thing lost")
                        (:seq agent "causer")
                        (:seq donor "donor")
                        (:seq recipient "recipient")
                        (:seq instrument "instrument")))
  (test-case ('((*Mark has (instance-of (Tangible-Entity))) (*Book has (instance-of (Tangible-Entity))) (*Mark has (instance-of (Tangible-Entity)) (possesses (*Book))) (*Lose has (instance-of (Lose)) (donor (*Mark)) (object (*Book))) (do-and-next *Lose) ((the possesses of *Mark) = nil) ((the is-possessed-by of *Book) /= *Mark))))
  (subclasses (Take
               Relinquish)))

(every Lose has 
  (donor ((a Tangible-Entity))))

;;; ----------

(Lysine has 
  (superclasses (Basic-Amino-Acid)))

;;; ----------

(Lysosome has 
  (superclasses (Organelle)))

;;; ----------

(Macromolecule has 
  (subclasses (Polynucleotide
               Nucleoprotein
               Nucleic-Acid
               Polypeptide
               Polysaccharide))
  (superclasses (Molecule)))

;;; ----------

(Make-Contact has 
  (superclasses (Move-Together))
  (required-slot (object
                  subevent
                  destination))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "the things making contact")
                        (:seq subevent "a move to and a making contact")
                        (:seq destination "the ending location of the objects")
                        (:seq agent "the one that causes the making contact"))))

(every Make-Contact has 
  (resulting-state ((a Be-Touching)))
  (add-list ((:triple (the resulting-state of Self) object (the object of Self)))))

;;; ----------

(manner has 
  (instance-of (Property))
  (domain (Event))
  (range (Value))
  (inverse (manner-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(manner-of has 
  (inverse (manner))
  (instance-of (Slot)))

;;; ----------

(mass has 
  (instance-of (Property))
  (domain (Tangible-Entity))
  (range (Value
          Thing))
  (inverse (mass-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(mass-of has 
  (inverse (mass))
  (instance-of (Slot)))

;;; ----------

(Mass-Scalar has 
  (superclasses (Scalar-Value))
  (instances (*light
              *hefty)))

;;; ----------

(Mass-Scale has 
  (superclasses (Scale))
  (instances (*light-to-hefty)))

;;; ----------

(material has 
  (instance-of (Relation))
  (domain (Tangible-Entity))
  (range (Substance))
  (inverse (material-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(material-of has 
  (inverse (material))
  (instance-of (Slot)))

;;; ----------

(mcs-list has 
  (instance-of (Slot)))

;;; ----------

(means-by-which has 
  (inverse (by-means-of))
  (instance-of (Slot)))

;;; ----------

(Membrane has 
  (subclasses (Smooth-Endoplasmic-Reticulum
               Rough-Endoplasmic-Reticulum
               Plasma-Membrane
               Nuclear-Envelope
               Endoplasmic-Reticulum))
  (superclasses (Enclosure)))

;;; ----------

(Methionine has 
  (superclasses (Nonpolar-Amino-Acid)))

;;; ----------

(Methyl-Group has 
  (superclasses (Chemical-Group)))

;;; ----------

(Methyl-Guanine has 
  (superclasses (Ribonucleotide)))

;;; ----------

(Methylated-Ribonucleotide has 
  (superclasses (Ribonucleotide)))

(every Methylated-Ribonucleotide has 
  (has-part ((a Ribonucleotide)
             (a Methyl-Group with (object-of ((a Be-Connected with (object ((the Ribonucleotide has-part of Self))))))))))

;;; ----------

(Mitochondrion has 
  (superclasses (Organelle)))

;;; ----------

(Molecule has 
  (subclasses (Organic-Molecule
               Macromolecule
               Inorganic-Molecule
               Base
               Acid))
  (superclasses (Chemical-Object)))

;;; ----------

(Monomer has 
  (subclasses (Nucleotide
               Monosaccharide
               Amino-Acid))
  (superclasses (Organic-Molecule)))

;;; ----------

(Monophosphate has 
  (superclasses (Phosphate)))

;;; ----------

(Monosaccharide has 
  (superclasses (Monomer)))

;;; ----------

(Move has 
  (subclasses (Move-To
               Move-Through
               Move-From
               Locomotion
               Fall
               Carry))
  (superclasses (Action))
  (required-slot (object))
  (primary-slot (agent
                 source
                 destination
                 path))
  (secondary-slot (destination
                   toward
                   away-from))
  (cmap-correspondence ((:seq object "the thing moved")
                        (:seq agent "the mover")
                        (:seq source "moved from")
                        (:seq destination "moved to")
                        (:seq path "moved through")
                        (:seq toward "moved toward")
                        (:seq away-from "moved away from")))
  (test-case ('((new-situation) (*Boston has (instance-of (Place))) (*Austin has (instance-of (Place))) (*John has (instance-of (Tangible-Entity))) (*John has (location (*Boston))) (a Move with (object (*John)) (source (*Boston)) (destination (*Austin))) (do-and-next (thelast Move)) ((the location of *John) = *Austin) ((in-situation (the1 of (the prev-situation of (curr-situation))) (the location of *John)) = *Boston) ((the location of *John) /= *Boston) (not (*Boston &? *Austin))))))

(every Move has 
  (object ((a Tangible-Entity)))
  (source ((must-be-a Place)))
  (destination ((must-be-a Place)))
  (away-from ((must-be-a Place)))
  (toward ((must-be-a Place)))
  (path ((must-be-a Place)))
  (pcs-list ((if (has-value (the source of Self)) then (forall (the object of Self) ((:triple (It) location (the source of Self)))))
             (forall (the object of Self) (forall2 (the object-of of It) (if (It2 isa Be-Held) then ((:triple (It2) agent (the agent of Self))))))
             (forall (the object of Self) ((:triple (It) object-of (mustnt-be-a Be-Restrained))))
             (if (has-value (the Be-Held object-of of (the object of Self))) then (:triple (the agent of Self) agent-of (a Be-Held with (object ((the object of Self))) (agent ((the agent of Self))))))
             (if (has-value (the path of Self)) then ((:triple (the path of Self) object-of (mustnt-be-a Be-Blocked))))))
  (add-list ((if (has-value (the destination of Self)) then (forall (the object of Self) ((:triple It location (the destination of Self)))))))
  (del-list ((if (has-value (the source of Self)) then (forall (the object of Self) ((:triple It location (the source of Self)))))))
  (agent ((must-be-a Living-Entity with (the-possible-goals ((:triple (the object or Self) location (a Place with (is-along ((the path of Self))))))))))
  (during-condition ((if (has-value (the path of Self)) then ((:triple (the object of Self) location (the path of Self))))))
  (preparatoy-step ((if (has-value (the source of Self)) then (a Move with (object ((the object of Self))) (destination ((the Source of Self)))))
                    (forall (the object of Self) ((a Release with (object (It)))))
                    (if (has-value (the path of Self)) then ((a Unblock with (object (the path of Self)))))))
  (interrupted-by ((must-be-a Block with (object ((the path of Self)))))))

;;; ----------

(Move-From has 
  (subclasses (Move-Out-Of
               Leave
               Emit
               Disperse))
  (superclasses (Move))
  (required-slot (object
                  source))
  (primary-slot (agent
                 destination
                 path))
  (cmap-correspondence ((:seq object "the thing moved")
                        (:seq agent "the mover")
                        (:seq source "moved from")
                        (:seq destination "moved to")
                        (:seq path "moved through")
                        (:seq toward "moved toward")
                        (:seq away-from "moved away from")))
  (test-case ('((*Boston has (instance-of (Place))) (*Austin has (instance-of (Place))) (*John has (instance-of (Organism))) (*John has (location (*Boston))) ((*John location) = *Boston) (a Move-From with (object (*John)) (source ((in-situation (the1 of (the before-situation of (thelast Move-From))) (*John location)))) (destination (*Austin))) (do-and-next (thelast Move-From)) ((*John location) = *Austin) ((*John location) /= *Boston)))))

(every Move-From has 
  (object ((a Tangible-Entity)))
  (source ((must-be-a Place)))
  (destination ((must-be-a Place)))
  (path ((must-be-a Place))))

;;; ----------

(Move-Into has 
  (subclasses (Take-Up
               Take-In
               Enter))
  (superclasses (Move-To))
  (required-slot (object
                  the-enclosure))
  (primary-slot (agent
                 destination
                 source
                 path))
  (cmap-correspondence ((:seq object "the thing moved")
                        (:seq the-enclosure "the enclosure")
                        (:seq destination "final location")
                        (:seq agent "the mover")
                        (:seq source "original location")
                        (:seq path "the portal")))
  (test-case ('((*Troy-Location has (instance-of (Place))) (*Troy has (instance-of (Enclosure)) (location (*Troy-Location))) (*TrojanHorse has (instance-of (Object)) (location ((a Place with (is-outside (*Troy-Location)))))) (a Move-Into with (the-enclosure (*Troy)) (object (*TrojanHorse))) (do-and-next (thelast Move-Into)) ((the is-inside of (the location of *TrojanHorse)) = *Troy-Location) ((the content of *Troy) = *TrojanHorse)))))

(every Move-Into has 
  (object ((a Tangible-Entity)))
  (the-enclosure ((a Enclosure)))
  (destination ((a Place with (is-inside ((the location of (the the-enclosure of Self)))))))
  (source ((constraint (TheValue = (the location of (the object of Self))))
           (a Place with (is-outside ((the location of (the the-enclosure of Self)))))))
  (path ((a Portal with (is-inside ((the location of (the the-enclosure of Self)))))))
  (pcs-list ((forall (the object of Self) ((:triple It object-of (mustnt-be-a Be-Shut-Out with (the-enclosure ((the the-enclosure of Self)))))))
             (if (has-value (the the-portal-covering of Self)) then ((:triple (the-portal-covering of Self) object-of (a Be-Open with (object ((the the-portal-covering of Self)))))))))
  (add-list ((forall (the object of Self) ((:triple (the the-enclosure of Self) content It)))))
  (the-portal-covering ((the Portal-Covering has-part of (the the-enclosure of Self))))
  (prepartory-action ((a Open with (object ((the the-portal-covering of Self))))
                      (forall (the object of Self) ((a Admit with (object (It)) (the-enclosure ((the the-enclosure of Self))))))))
  (interrupted-by ((must-be-a Close with (object ((the the-portal-covering of Self)))))))

;;; ----------

(Move-Out-Of has 
  (subclasses (Secrete
               Exude
               Expel
               Exit
               Eject))
  (superclasses (Move-From))
  (required-slot (object
                  the-enclosure))
  (primary-slot (agent
                 source
                 destination
                 path))
  (cmap-correspondence ((:seq object "the thing moved")
                        (:seq the-enclosure "the enclosure")
                        (:seq destination "final location")
                        (:seq agent "the mover")
                        (:seq source "original location")
                        (:seq path "the portal")))
  (test-case ('((*student has (instance-of (Tangible-Entity))) (*bag has (instance-of (Enclosure))) (*book has (instance-of (Tangible-Entity))) (a Move-Out-Of with (agent (*student)) (object (*book)) (the-enclosure (*bag))) (do-and-next (thelast Move-Out-Of)) ((the is-inside of (the location of *book)) /= (the location of *bag)) ((the is-outside of (the location of *book)) = (the location of *bag))))))

(every Move-Out-Of has 
  (object ((a Tangible-Entity)))
  (the-enclosure ((a Enclosure)))
  (destination ((a Place with (is-outside ((the location of (the the-enclosure of Self)))))))
  (source ((constraint (TheValue = (the location of (the object of Self))))
           (a Place with (is-inside ((the location of (the the-enclosure of Self)))))))
  (path ((a Portal with (is-part-of ((the the-enclosure of Self))))))
  (pcs-list ((forall (the object of Self) ((:triple It object-of (mustnt-be-a Be-Confined with (the-enclosure ((the the-enclosure of Self)))))))
             (if (has-value (the the-portal-covering of Self)) then ((:triple (the-portal-covering of Self) object-of (a Be-Open with (object ((the the-portal-covering of Self)))))))))
  (del-list ((forall (the object of Self) ((:triple (the the-enclosure of Self) content It)))))
  (the-portal-covering ((the Portal-Covering has-part of (the the-enclosure of Self))))
  (prepartory-action ((a Open with (object ((the the-portal-covering of Self))))
                      (forall (the object of Self) ((a Release with (object (It)) (the-enclose ((the the-enclosure of Self))))))))
  (interrupted-by ((must-be-a Close with (object ((the the-portal-covering of Self)))))))

;;; ----------

(Move-Through has 
  (superclasses (Move))
  (required-slot (object
                  path))
  (primary-slot (agent
                 source
                 destination))
  (cmap-correspondence ((:seq object "the thing moved")
                        (:seq agent "the mover")
                        (:seq source "moved from")
                        (:seq destination "moved to")
                        (:seq path "moved through")))
  (test-case ('((*Indiana has (instance-of (Place))) (*David has (instance-of (Tangible-Entity))) (*Move-Through has (instance-of (Move-Through)) (object (*David)) (path (*Indiana))) (do-and-next *Move-Through) ((the path of *Move-Through) = *Indiana) ((theoneof (theN 3 of (the during-condition of *Move-Through)) where (t)) = *Indiana))))
  (subclasses (Traverse
               Slide)))

(every Move-Through has 
  (path ((a Place))))

;;; ----------

(Move-To has 
  (subclasses (Move-Together
               Move-Into
               Go-To))
  (superclasses (Move))
  (required-slot (object
                  destination))
  (primary-slot (agent
                 source
                 path))
  (cmap-correspondence ((:seq object "the thing moved")
                        (:seq agent "the mover")
                        (:seq source "moved from")
                        (:seq destination "moved to")
                        (:seq path "moved through")
                        (:seq toward "moved toward")
                        (:seq away-from "moved away from")))
  (test-case ('((*Somewhere has (instance-of (Place))) (*Something has (instance-of (Tangible-Entity))) (*A-Move has (instance-of (Move)) (object (*Something)) (destination (*Somewhere))) ((the destination of *A-Move) = *Somewhere)))))

(every Move-To has 
  (object ((a Tangible-Entity)))
  (destination ((a Place)))
  (source ((must-be-a Place)))
  (path ((must-be-a Place))))

;;; ----------

(Move-Together has 
  (subclasses (Make-Contact
               Come-Together))
  (superclasses (Move-To))
  (required-slot (object
                  destination
                  subevent))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "the things moved")
                        (:seq agent "the mover")
                        (:seq destination "moved to")
                        (:seq subevent "the Move of each object")))
  (test-case ('((*soccer-ball has (instance-of (Object))) (*soccer-player has (instance-of (Object))) (*midfield has (instance-of (Place))) (a Move-Together with (object (*soccer-ball *soccer-player)) (destination (*midfield))) (do-and-next (thelast Move-Together)) ((the location of *soccer-ball) = *midfield) ((the location of *soccer-player) = *midfield) (forall (the subevent of (thelast Move-Together)) ((It isa Move-To) and ((:set *soccer-player *soccer-ball) includes (the object of It))))))))

(every Move-Together has 
  (object ((exactly 2 Tangible-Entity)
           (a Tangible-Entity called "O1")
           (a Tangible-Entity called "O2")))
  (destination ((exactly 1 Place)))
  (source ((exactly 0 Place)))
  (path ((exactly 0 Place)))
  (subevent ((forall (the object of Self) (a Move-To with (object (It)) (agent ((the agent of Self))) (destination ((the destination of Self))))))))

;;; ----------

(MRNA has 
  (subclasses (Procaryotic-MRNA
               Eucaryotic-MRNA))
  (superclasses (RNA)))

(every MRNA has 
  (has-part ((a RNA-5-End)
             (a Ribosome-Binding-Site with (location ()))
             (a Protein-Initiator-Codon)
             (a RNA-Translated-Region)
             (a Protein-Stop-Codon))))

;;; ----------

(MRNA-Site has 
  (superclasses (Binding-Site)))

;;; ----------

(Nascent-Protein has 
  (superclasses (Protein)))

(every Nascent-Protein has 
  (has-part ((a Amino-Terminal-End with (has-part ((a Methionine)))))))

;;; ----------

(Neutral-Amino-Acid has 
  (superclasses (Amino-Acid)))

;;; ----------

(next-events has 
  (instance-of (Slot))
  (domain (Action))
  (range (Action))
  (cardinality (N-to-N))
  (inverse (prev-events))
  (subclasses (disjunctive-next-events)))

;;; ----------

(Nitrogenous-Base has 
  (subclasses (Pyrimidine
               Purine))
  (superclasses (Base)))

;;; ----------

(Non-Coding-Region has 
  (subclasses (Intron)))

;;; ----------

(Non-Transcribed-Region has 
  (superclasses (DNA-Non-Coding-Region))
  (subclasses (Spacer-DNA-Region)))

;;; ----------

(Noncoding-Region has 
  (superclasses (Place)))

;;; ----------

(Nonpolar-Amino-Acid has 
  (subclasses (Valine
               Tryptophan
               Proline
               Phenylalanine
               Methionine
               Leucine
               Isoleucine
               Glycine
               Alanine))
  (superclasses (Amino-Acid)))

;;; ----------

(Nuclear-Envelope has 
  (superclasses (Membrane)))

(every Nuclear-Envelope has 
  (has-part ((a Nuclear-Envelope-Pore))))

;;; ----------

(Nuclear-Envelope-Pore has 
  (superclasses (Portal)))

(every Nuclear-Envelope-Pore has 
  (location ((a Place with (encloses ((the location of (a Nucleoplasm))))))))

;;; ----------

(Nucleic-Acid has 
  (subclasses (Viral-Nucleic-Acid
               DNA
               DNA-Strand
               DNA-Molecule))
  (superclasses (Macromolecule)))

;;; ----------

(Nucleic-Acid-Region has 
  (subclasses (RNA-Region
               Gene-Region
               DNA-Region))
  (superclasses (Region)))

;;; ----------

(Nucleoplasm has 
  (superclasses (Protoplasm)))

(every Nucleoplasm has 
  (content ((a Chromosome)
            (a Eucaryotic-MRNA)
            (a Eucaryotic-TRNA)
            (a Eucaryotic-Ribosome)
            (a Eucaryotic-DNA-Polymerase)
            (a Eucaryotic-RNA-Polymerase)
            (a Deoxyguanosine-Triphosphate)
            (a Deoxyadenosine-Triphosphate)
            (a Deoxycytidine-Triphosphate)
            (a Deoxythymidine-Triphosphate)
            (a Guanosine-Triphosphate)
            (a Adenosine-Triphosphate)
            (a Cytidine-Triphosphate)
            (a Thymidine-Triphosphate)
            (a Amino-Acyl-TRNA-Synthetase))))

;;; ----------

(Nucleoprotein has 
  (subclasses (SnRNP
               Sigma-Factor
               Ribosome
               Ribonucleoprotein
               Polyribosome
               Chromosome))
  (superclasses (Macromolecule)))

;;; ----------

(Nucleoside has 
  (subclasses (Uridine
               Thymidine
               Guanosine
               Cytidine
               Adenosine))
  (superclasses (Organic-Molecule)))

(every Nucleoside has 
  (has-part ((a Pentose)
             (a Nitrogenous-Base))))

;;; ----------

(Nucleoside-Monophosphate has 
  (subclasses (Uridine-Monophosphate
               Thymidine-Monophosphate
               Guanosine-Monophosphate
               Deoxythymidine-Monophosphate
               Deoxyguanosine-Monophosphate
               Deoxycytidine-Monophosphate
               Deoxyadenosine-Monophosphate
               Cytidine-Monophosphate
               Adenosine-Monophosphate))
  (superclasses (Nucleotide)))

(every Nucleoside-Monophosphate has 
  (has-part ((a Monophosphate))))

;;; ----------

(Nucleoside-Triphosphate has 
  (subclasses (Uridine-Triphosphate
               Thymidine-Triphosphate
               Guanosine-Triphosphate
               Deoxythymidine-Triphosphate
               Deoxyguanosine-Triphosphate
               Deoxycytidine-Triphosphate
               Deoxyadenosine-Triphosphate
               Cytidine-Triphosphate
               Adenosine-Triphosphate))
  (superclasses (Nucleotide)))

(every Nucleoside-Triphosphate has 
  (has-part ((a Triphosphate)
             (a Nucleoside))))

;;; ----------

(Nucleotide has 
  (subclasses (Ribonucleotide
               Nucleoside-Triphosphate
               Nucleoside-Monophosphate
               Free-Nucleotide
               Deoxyribonucleotide))
  (superclasses (Organic-Acid
                 Monomer)))

(every Nucleotide has 
  (has-part ((at-least 1 Phosphate)
             (at-most 3 Phosphate)
             (a Nucleoside with (has-part ((a Pentose) (a Nitrogenous-Base with (one-of ((a Purine) (a Pyrimidine))))))))))

;;; ----------

(Nucleus has 
  (superclasses (Organelle)))

(every Nucleus has 
  (has-part ((a Nucleoplasm)
             (a Nuclear-Envelope with (location ((a Place with (encloses ((the Nucleoplasm has-part of Self))))))))))

;;; ----------

(Object has 
  (subclasses (Inanimate-Object
               Organic-Structure))
  (superclasses (Tangible-Entity))
  (domain-of (causer-of))
  (range-of (causer)))

;;; ----------

(object has 
  (required-slot-of (Endocytose
                     Phagocytose
                     Pinocytose
                     Absorb
                     Admit
                     Be-Blocked
                     Be-Confined
                     Be-Connected
                     Be-Held
                     Be-Obstructed
                     Be-Restrained
                     Be-Shut-Out
                     Be-Supported
                     Be-Touching
                     Block
                     Breach
                     Break-Contact
                     Break
                     Carry
                     Come-Into-Contact
                     Come-Together
                     Confine
                     Connect
                     Copy
                     Deliver
                     Destroy
                     Disconnect
                     Dispatch
                     Disperse
                     Donate
                     Eject
                     Emit
                     Enter
                     Excrete
                     Expel
                     Extrude
                     Exude
                     Fall
                     Feed
                     Give
                     Go-To
                     Hold
                     Leave
                     Let-Fall
                     Let-Go-Of
                     Lose
                     Make-Contact
                     Move-From
                     Move-Into
                     Move-Out-Of
                     Move-Through
                     Move-To
                     Move-Together
                     Move
                     Obstruct
                     Obtain
                     Penetrate
                     Receive
                     Release
                     Relinquish
                     Remove
                     Repair
                     Replicate
                     Restrain
                     Ruin
                     Secrete
                     Send
                     Shut-Out
                     Slide
                     Supply
                     Support
                     Take-Apart
                     Take-In
                     Take
                     Transfer
                     Traverse
                     Unblock
                     Unobstruct
                     Unrestrain))
  (instance-of (Relation))
  (primary-slot-of (Action
                    Enter
                    Exit
                    Locomotion))
  (domain (Event))
  (range (Entity))
  (inverse (object-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(object-of has 
  (inverse (object))
  (instance-of (Slot)))

;;; ----------

(Obstruct has 
  (subclasses (Support
               Shut-Out
               Restrain
               Hold
               Confine
               Block))
  (superclasses (Action))
  (required-slot (object))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "the object obstructed")
                        (:seq agent "obstructor")))
  (test-case ('((*pedestrian has (instance-of (Object))) (a Obstruct with (object (*pedestrian))) (do-and-next (thelast Obstruct)) (exists (the Be-Obstructed object-of of *pedestrian)) (a Move with (object (*car)) (path (*path))) (try-do (thelast Move))))))

(every Obstruct has 
  (object ((a Entity)))
  (agent ((must-be-a Living-Entity)))
  (resulting-state ((a Be-Obstructed)))
  (add-list ((:triple (the resulting-state of Self) object (the object of Self))
             (if (has-value (the agent of Self)) then (:triple (the resulting-state of Self) agent (the agent of Self)))))
  (prepatory-action ((:default (if (has-value (the agent of Self)) then (a Move with (object ((the agent of Self))) (destination ((a Place with (is-at ((the location of (the object of Self)))))))))))))

;;; ----------

(Obtain has 
  (superclasses (Receive))
  (required-slot (agent
                  recipient
                  object))
  (primary-slot (donor
                 instrument))
  (cmap-correspondence ((:seq object "the thing obtained")
                        (:seq agent "obtainer")
                        (:seq donor "donor")
                        (:seq recipient "recipient")
                        (:seq instrument "instrument")))
  (test-case ('((*Johnathan has (instance-of (Tangible-Entity))) (*Big-Green-Book has (instance-of (Tangible-Entity))) (a Obtain with (agent (*Johnathan)) (object (*Big-Green-Book))) (do-and-next (thelast Obtain)) ((the possesses of *Johnathan) = *Big-Green-Book) ((the is-possessed-by of *Big-Green-Book) = *Johnathan) ((the agent of (thelast Obtain)) = (the recipient of (thelast Obtain))))))
  (subclasses (Take)))

(every Obtain has 
  (agent ((the recipient of Self)))
  (recipient ((the agent of Self))))

;;; ----------

(Operon has 
  (superclasses (DNA-Coding-Region)))

(every Operon has 
  (has-part ((at-least 2 Gene)
             (a DNA-Non-Coding-Region))))

;;; ----------

(opposition has 
  (primary-slot-of (Invade))
  (instance-of (Relation))
  (domain (Invade))
  (range (Tangible-Entity))
  (inverse (opposition-of))
  (cardinality (N-to-N))
  (situation-specific (t))
  (fluent-status (*Non-Fluent)))

;;; ----------

(opposition-of has 
  (inverse (opposition))
  (instance-of (Slot)))

;;; ----------

(Organelle has 
  (subclasses (Vesicle
               Peroxisome
               Nucleus
               Mitochondrion
               Lysosome
               Golgi-Body
               Endoplasmic-Reticulum
               Carboxyl-Terminal-End
               Amino-Acid-Binding-Region
               7-Methyl-Guanosine))
  (superclasses (Organic-Structure)))

;;; ----------

(Organic-Acid has 
  (subclasses (Nucleotide))
  (superclasses (Organic-Substance)))

;;; ----------

(Organic-Molecule has 
  (subclasses (Ring-Compound
               Nucleoside
               Monomer
               Carbohydrate))
  (superclasses (Molecule)))

;;; ----------

(Organic-Structure has 
  (subclasses (Living-Entity
               Organelle))
  (superclasses (Object)))

;;; ----------

(Organic-Substance has 
  (subclasses (Organic-Acid))
  (superclasses (Substance)))

;;; ----------

(Organism has 
  (subclasses (Procaryote
               Eucaryote))
  (superclasses (Organic-Structure
                 Living-Entity))
  (range-of (beneficiary
             experiencer
             recipient))
  (domain-of (possesses
              sentience
              sex
              trait)))

(every Organism has 
  (has-part (Cell)))

;;; ----------

(P-Site has 
  (superclasses (Binding-Site)))

;;; ----------

(parent-events has 
  (inverse (subevents))
  (instance-of (Slot))
  (domain (Action))
  (range (Action))
  (cardinality (N-to-N)))

;;; ----------

(Particulate-Matter has 
  (superclasses (Substance)))

;;; ----------

(path has 
  (primary-slot-of (Endocytose
                    Phagocytose
                    Pinocytose
                    Absorb
                    Carry
                    Eject
                    Emit
                    Enter
                    Excrete
                    Exit
                    Expel
                    Extrude
                    Exude
                    Fall
                    Go-To
                    Leave
                    Move-From
                    Move-Into
                    Move-Out-Of
                    Move-To
                    Move
                    Secrete
                    Send
                    Take-In))
  (instance-of (Relation))
  (required-slot-of (Move-Through
                     Penetrate
                     Slide
                     Traverse))
  (domain (Event))
  (range (Place))
  (inverse (path-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(path-of has 
  (inverse (path))
  (instance-of (Slot)))

;;; ----------

(Penetrate has 
  (superclasses (Breach))
  (required-slot (agent
                  object
                  path))
  (cmap-correspondence ((:seq object "the barrier penetrated")
                        (:seq agent "the penetrator")))
  (test-case ('((*AgentPenetrate has (instance-of (Tangible-Entity))) (*Enclosure has (instance-of (Enclosure))) (a Penetrate with (agent (*AgentPenetrate)) (object (*Enclosure))) (do-script (thelast Penetrate)) ((*Enclosure has-part) = (the path of (thelast Penetrate)))))))

(every Penetrate has 
  (agent ((a Object)))
  (object ((a Barrier)))
  (path ((the result of (the Breach subevent of Self))))
  (subevent-order ((the Breach subevent of Self)
                   (the Traverse subevent of Self)))
  (subevent ((a Breach with (agent ((the agent of Self))) (object ((the object of Self))))
             (a Traverse with (agent ((the agent of Self))) (path ((the result of (the Breach subevent of Self))))))))

;;; ----------

(Pentose has 
  (superclasses (Sugar)))

;;; ----------

(Peptide-Chain has 
  (superclasses (Chain)))

;;; ----------

(Peptidyl-Transferase has 
  (superclasses (Enzyme)))

;;; ----------

(Perceive has 
  (subclasses (Identify))
  (superclasses (Action)))

(every Perceive has 
  (object ((a Entity)))
  (causer ((must-be-a Entity))))

;;; ----------

(Peroxisome has 
  (superclasses (Organelle)))

;;; ----------

(Phagocytose has 
  (superclasses (Endocytose))
  (required-slot (object
                  destination))
  (primary-slot (agent
                 source
                 path))
  (cmap-correspondence ((:seq agent "the phagocytose'er")
                        (:seq object "the phagocytosed")
                        (:seq destination "final location")
                        (:seq source "original location")
                        (:seq path "the portal"))))

(every Phagocytose has 
  (object ((a Particulate-Matter))))

;;; ----------

(Phenylalanine has 
  (superclasses (Nonpolar-Amino-Acid)))

;;; ----------

(Phosphate has 
  (subclasses (Triphosphate
               Monophosphate))
  (superclasses (Inorganic-Molecule)))

;;; ----------

(Phospho-Diester-Bond has 
  (superclasses (Bond)))

;;; ----------

(Pinocytose has 
  (superclasses (Endocytose))
  (required-slot (object
                  destination))
  (primary-slot (agent
                 source
                 path))
  (cmap-correspondence ((:seq agent "the pinocytose'er")
                        (:seq object "the pinocytosed")
                        (:seq destination "final location")
                        (:seq source "original location")
                        (:seq path "the portal"))))

(every Pinocytose has 
  (object ((a Soluble-Substance))))

;;; ----------

(Place has 
  (subclasses (Region
               Portal
               Regulatory-Site
               Regulatory-Region
               Noncoding-Region
               Binding-Site))
  (superclasses (Intangible-Entity))
  (domain-of (abuts
              is-above
              is-along
              is-at
              is-behind
              is-between
              is-inside
              is-on
              is-outside
              is-over))
  (range-of (abuts
             away-from
             destination
             is-above
             is-along
             is-at
             is-behind
             is-between
             is-inside
             is-on
             is-outside
             is-over
             location
             path
             region
             source
             toward))
  (range2-of (is-between)))

(every Place has 
  (is-above ((must-be-a Place)))
  (is-along ((must-be-a Place)))
  (is-at ((must-be-a Place)))
  (is-behind ((must-be-a Place)))
  (is-inside ((must-be-a Place)))
  (encloses ((must-be-a Place)))
  (is-outside ((must-be-a Place)))
  (does-not-enclose ((must-be-a Place)))
  (is-on ((must-be-a Place)))
  (is-over ((must-be-a Place))))

;;; ----------

(Plasma-Membrane has 
  (superclasses (Membrane)))

;;; ----------

(Polar-Amino-Acid has 
  (subclasses (Uncharged-Polar-Amino-Acid
               Charged-Polar-Amino-Acid))
  (superclasses (Amino-Acid)))

;;; ----------

(Poly-A-Tail has 
  (superclasses (Polyribonucleotide)))

(every Poly-A-Tail has 
  (has-part ((exactly 200 Adenosine))))

;;; ----------

(Polymerase has 
  (subclasses (RNA-Polymerase
               DNA-Polymerase))
  (superclasses (Anabolic-Enzyme)))

;;; ----------

(Polynucleotide has 
  (superclasses (Macromolecule))
  (subclasses (Polyribonucleotide)))

(every Polynucleotide has 
  (has-part ((at-least 2 Nucleotide))))

;;; ----------

(Polypeptide has 
  (superclasses (Macromolecule))
  (subclasses (Protein)))

;;; ----------

(Polyribonucleotide has 
  (subclasses (RNA
               Protein-Coding-Region
               Poly-A-Tail))
  (superclasses (Polynucleotide)))

(every Polyribonucleotide has 
  (has-part ((at-least 2 Ribonucleotide)
             (a Ribonucleotide called "RN1" with (one-of ((a Guanosine-Monophosphate) (a Adenosine-Monophosphate) (a Cytidine-Monophosphate) (a Uridine-Monophosphate))))
             (a Ribonucleotide called "RN2" with (one-of ((a Guanosine-Monophosphate) (a Adenosine-Monophosphate) (a Cytidine-Monophosphate) (a Uridine-Monophosphate)))))))

;;; ----------

(Polyribosome has 
  (superclasses (Ensemble
                 Nucleoprotein)))

(every Polyribosome has 
  (has-part ((at-least 2 Ribosome)
             (a MRNA))))

;;; ----------

(Polysaccharide has 
  (superclasses (Macromolecule)))

;;; ----------

(Portal has 
  (subclasses (Nuclear-Envelope-Pore))
  (superclasses (Place))
  (required-slot (intersect))
  (cmap-correspondence ((:seq intersect "the barrier")))
  (test-case ('((*Barrier has (instance-of (Barrier))))
              (*Portal has (instance-of (Portal)) (intersect (*Barrier)))
              ((the intersect of *Portal) = *Barrier))))

(every Portal has-definition 
  (instance-of (Place))
  (intersect ((a Barrier))))

(every Portal has 
  (aperture ((a UoM-Volume with (land-mark (*Open *Closed))))))

;;; ----------

(Portal-Covering has 
  (superclasses (Inanimate-Object)))

;;; ----------

(possesses has 
  (instance-of (Relation))
  (domain (Organism))
  (range (Tangible-Entity))
  (inverse (is-possessed-by))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(preparatory-step has 
  (instance-of (Slot)))

;;; ----------

(preparatoy-step has 
  (instance-of (Slot)))

;;; ----------

(prepartory-action has 
  (instance-of (Slot)))

;;; ----------

(prepatory-action has 
  (instance-of (Slot)))

;;; ----------

(prepatory-step has 
  (instance-of (Slot)))

;;; ----------

(Pressure has 
  (superclasses (Force)))

;;; ----------

(prev-events has 
  (inverse (next-events))
  (instance-of (Slot))
  (domain (Action))
  (range (Action))
  (cardinality (N-to-N)))

;;; ----------

(prevented-by has 
  (inverse (prevents))
  (instance-of (Slot)))

;;; ----------

(prevents has 
  (instance-of (Relation))
  (domain (Event))
  (range (Event))
  (inverse (prevented-by))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(Primary-RNA-Transcript has 
  (superclasses (Eucaryotic-RNA-Transcript)))

(every Primary-RNA-Transcript has 
  (has-part ((a Eucaryotic-Gene)
             (a 5-Untranslated-Region)
             (a 3-Untranslated-Region))))

;;; ----------

(primary-slot has 
  (instance-of (KM-Slot))
  (domain (Thing))
  (range (Slot))
  (cardinality (N-to-N)))

;;; ----------

(primary-slot-of has 
  (instance-of (Slot)))

;;; ----------

(primitive-actions has 
  (instance-of (Slot))
  (domain (Action))
  (range (Action))
  (cardinality (N-to-N)))

;;; ----------

(Proaryotic-RNA-Polymerase has 
  (superclasses (RNA-Polymerase)))

;;; ----------

(Procaryote has 
  (subclasses (Bacteria))
  (superclasses (Organism)))

(every Procaryote has 
  (has-part ((a Cytoplasm with (has-part ((a Procaryotic-DNA) (a Procaryotic-MRNA) (a Procaryotic-TRNA) (a Procaryotic-Ribosome) (a Procaryotic-DNA-Polymerase) (a Procaryotic-RNA-Polymerase) (a Deoxyguanosine-Triphosphate) (a Deoxyadenosine-Triphosphate) (a Deoxycytidine-Triphosphate) (a Deoxythymidine-Triphosphate) (a Amino-Acyl-TRNA-Synthetase))))
             (a Plasma-Membrane with (location ((a Place with (encloses ((the location of (the Cytoplasm has-part of Self))))))))
             (a Cell-Wall with (location ((a Place with (encloses ((the location of (the Plasma-Membrane has-part of Self)))))))))))

;;; ----------

(Procaryotic-DNA has 
  (superclasses (DNA-Molecule)))

(every Procaryotic-DNA has 
  (has-part ((exactly 2 DNA-Strand)
             (a DNA-Strand called "Strand1" with (has-part ((a Operon with (has-part ((at-least 2 Gene) (a Gene with (length ((exactly 1500 Nucleotide)))) (a Gene with (length ((exactly 1500 Nucleotide)))) (a Promoter-Region) (a Terminator)))))))
             (a DNA-Strand called "Strand2" with (has-part ((a Operon with (has-part ((at-least 2 Gene) (a Gene with (length ((exactly 1500 Nucleotide)))) (a Gene with (length ((exactly 1500 Nucleotide)))) (a Promoter-Region) (a Terminator))))))))))

;;; ----------

(Procaryotic-DNA-Polymerase has 
  (superclasses (DNA-Polymerase)))

;;; ----------

(Procaryotic-MRNA has 
  (superclasses (MRNA)))

(every Procaryotic-MRNA has 
  (has-part ((a 5-Untranslated-Region)
             (a RNA-Translated-Region with (has-part ((a Gene-Transcript with (has-part ((a Protein-Start-Codon) (a Protein-Stop-Codon)))))))
             (a 3-Untranslated-Region))))

;;; ----------

(Procaryotic-Ribosomal-Protein has 
  (superclasses (Ribosomal-Protein)))

;;; ----------

(Procaryotic-Ribosome has 
  (superclasses (Ribosome)))

(every Procaryotic-Ribosome has 
  (mass ((exactly 2500000 Dalton)))
  (has-part ((a Ribonucleoprotein called "RNP1" with (mass ((exactly 1600000 Dalton))) (size (*large)) (has-part ((exactly 2 Procaryotic-RRNA) (exactly 34 Procaryotic-Ribosomal-Protein))))
             (a Ribonucleoprotein called "RNP2" with (mass ((exactly 900000 Dalton))) (size (*small)) (has-part ((a Procaryotic-RRNA) (exactly 21 Procaryotic-Ribosomal-Protein)))))))

;;; ----------

(Procaryotic-RNA-Polymerase has 
  (superclasses (RNA-Polymerase)))

(every Procaryotic-RNA-Polymerase has 
  (has-part ((a Sigma-Factor))))

;;; ----------

(Procaryotic-RRNA has 
  (superclasses (RRNA)))

;;; ----------

(Procaryotic-TRNA has 
  (superclasses (TRNA)))

;;; ----------

(Produce has 
  (superclasses (Create))
  (required-slot (the-result-type
                  source))
  (primary-slot (agent
                 instrument))
  (cmap-correspondence ((:seq the-result-type "the type of thing to be produced")
                        (:seq source "the raw material/parts")))
  (test-case ('((new-situation) (*metal has (instance-of (Substance))) (a Produce with (the-result-type (Container)) (source (*metal))) (do-and-next (thelast Produce)) ((the material of (the result of (thelast Produce))) = *metal) (new-situation) (*brick has (instance-of (Object))) (a Produce with (the-result-type (Container)) (source (*brick))) (do-and-next (thelast Produce)) ((the has-part of (the result of (thelast Produce))) = *brick)))))

(every Produce has 
  (source ((a Tangible-Entity)))
  (add-list ((if ((the source of Self) isa Substance) then (:triple Self result (a Thing with (instance-of ((the the-result-type of Self))) (material ((the source of Self))))) else (:triple Self result (a Thing with (instance-of ((the the-result-type of Self))) (has-part ((the source of Self)))))))))

;;; ----------

(Proline has 
  (superclasses (Nonpolar-Amino-Acid)))

;;; ----------

(Promoter has 
  (superclasses (DNA-Regulatory-Region
                 Place)))

;;; ----------

(Promoter-Region has 
  (superclasses (DNA-Regulatory-Site)))

;;; ----------

(Property has 
  (superclasses (Slot))
  (instances (age
              animacy
              area
              breakability
              capacity
              color
              consistency
              density
              depth
              direction
              frequency
              height
              length
              manner
              mass
              rate
              sentience
              sex
              shape
              size
              smell
              taste
              temperature
              texture
              thickness
              trait
              volume
              wetness
              width)))

;;; ----------

(Protease has 
  (superclasses (Catalytic-Enzyme)))

;;; ----------

(Proteasome has 
  (superclasses (Protein-Complex)))

(every Proteasome has 
  (has-part ((a Protease)
             (a Protein-Complex))))

;;; ----------

(Protein has 
  (subclasses (Ubiquinated-Protein
               Ribosomal-Protein
               Regulatory-Protein
               Protein-Complex
               Nascent-Protein
               Enzyme))
  (superclasses (Polypeptide)))

(every Protein has 
  (has-part ((a Amino-Acid)
             (a Carboxy-Terminal-End)
             (a Amino-Terminal-End))))

;;; ----------

(Protein-Chaperone has 
  (superclasses (Regulatory-Protein)))

;;; ----------

(Protein-Coat has 
  (superclasses (Enclosure)))

;;; ----------

(Protein-Coding-Region has 
  (superclasses (Polyribonucleotide)))

;;; ----------

(Protein-Complex has 
  (subclasses (Proteasome))
  (superclasses (Protein)))

(every Protein-Complex has 
  (has-part ((a Protein))))

;;; ----------

(Protein-Initiator-Codon has 
  (superclasses (RNA-Regulatory-Region)))

;;; ----------

(Protein-Region has 
  (subclasses (Carboxy-Terminal-End
               Amino-Terminal-End))
  (superclasses (Region)))

;;; ----------

(Protein-Stop-Codon has 
  (superclasses (RNA-Regulatory-Region))
  (subclasses (UUA
               UGA
               UAG)))

;;; ----------

(Proteolytic-Enzyme has 
  (superclasses (Catalytic-Enzyme)))

;;; ----------

(Protoplasm has 
  (subclasses (Nucleoplasm
               Eucaryotic-Cytoplasm
               Cytoplasm))
  (superclasses (Colloid)))

(every Protoplasm has 
  (has-part ((a Organic-Substance)
             (a Inorganic-Substance))))

;;; ----------

(Purine has 
  (subclasses (Guanine
               Adenine))
  (superclasses (Heterocyclic-Compound
                 Nitrogenous-Base)))

;;; ----------

(purpose has 
  (primary-slot-of (Invade))
  (instance-of (Slot)))

;;; ----------

(Pyrimidine has 
  (subclasses (Uracil
               Thymine
               Cytosine))
  (superclasses (Heterocyclic-Compound
                 Nitrogenous-Base)))

;;; ----------

(range2 has 
  (instance-of (Slot)))

;;; ----------

(range2-of has 
  (instance-of (Slot)))

;;; ----------

(rate has 
  (required-slot-of (Exude))
  (instance-of (Property))
  (domain (Event))
  (range (Value))
  (inverse (rate-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-1)))

;;; ----------

(rate-of has 
  (inverse (rate))
  (instance-of (Slot)))

;;; ----------

(Receive has 
  (subclasses (Obtain
               Give
               Deliver))
  (superclasses (Transfer))
  (required-slot (recipient
                  object))
  (primary-slot (agent
                 donor
                 instrument))
  (cmap-correspondence ((:seq object "the thing received")
                        (:seq agent "causer")
                        (:seq donor "donor")
                        (:seq recipient "recipient")
                        (:seq instrument "instrument")))
  (test-case ('((*Present has (instance-of (Tangible-Entity))) (*Maple has (instance-of (Tangible-Entity))) (*Receive has (instance-of (Receive)) (recipient (*Maple)) (object (*Present))) (do-and-next *Receive) ((the possesses of *Maple) = *Present) ((the is-possessed-by of *Present) = *Maple)))))

(every Receive has 
  (recipient ((a Tangible-Entity))))

;;; ----------

(recipient has 
  (required-slot-of (Deliver
                     Donate
                     Feed
                     Give
                     Obtain
                     Receive
                     Send
                     Supply
                     Take))
  (primary-slot-of (Dispatch
                    Lose
                    Relinquish
                    Transfer))
  (instance-of (Relation))
  (domain (Event))
  (range (Organism))
  (inverse (recipient-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(recipient-of has 
  (inverse (recipient))
  (instance-of (Slot)))

;;; ----------

(Recognize has 
  (superclasses (Identify)))

;;; ----------

(Reflexive-Cliche has 
  (subclasses (Traverse
               Locomotion
               Leave
               Go-To
               Exit
               Enter))
  (superclasses (Cliche))
  (test-case ('((*John has (instance-of (Organism))) (*RC has (instance-of (Reflexive-Cliche)) (agent (*John))) ((the agent of *RC) = (the object of *RC))))))

(every Reflexive-Cliche has 
  (agent ((the object of Self)))
  (object (((the agent of Self) & (a Organism)))))

;;; ----------

(Region has 
  (subclasses (Protein-Region
               Nucleic-Acid-Region))
  (superclasses (Place)))

;;; ----------

(region has 
  (instance-of (Relation))
  (domain (Tangible-Entity))
  (range (Place))
  (inverse (region-of))
  (cardinality (N-to-N))
  (situation-specific (t))
  (fluent-status (*Inertial-Fluent)))

;;; ----------

(region-of has 
  (inverse (region))
  (instance-of (Slot)))

;;; ----------

(Regulatory-Protein has 
  (subclasses (Ubiquitin
               Translation-Initiation-Factor
               Ribosome-Release-Factor
               Protein-Chaperone
               Histone))
  (superclasses (Protein)))

;;; ----------

(Regulatory-Region has 
  (subclasses (Intron-End-Sequence
               Intron-Branch-Sequence
               Intron-Beginning-Sequence))
  (superclasses (Place)))

;;; ----------

(Regulatory-Site has 
  (subclasses (DNA-Regulatory-Site))
  (superclasses (Place)))

;;; ----------

(Relation has 
  (subclasses (KM-Slot-Group))
  (superclasses (Slot))
  (instances (abuts
              after
              agent
              away-from
              before
              beneficiary
              by-means-of
              capability
              causer-of
              causer
              causes
              content
              defeats
              destination
              donor
              during
              enables
              entails
              experiencer
              function
              goal
              has-part
              inhibits
              instrument
              is-above
              is-along
              is-at
              is-behind
              is-between
              is-inside
              is-on
              is-outside
              is-over
              location
              material
              object
              opposition
              path
              possesses
              prevents
              recipient
              region
              result
              resulting-state
              scale
              source
              subevent
              temporally-finishes
              temporally-meets
              temporally-overlaps
              temporally-starts
              time-of-existence
              time
              toward)))

;;; ----------

(Release has 
  (superclasses (Unobstruct))
  (required-slot (object
                  the-enclosure))
  (primary-slot (agent
                 instrument))
  (cmap-correspondence ((:seq object "object")
                        (:seq agent "releaser")
                        (:seq instrument "instrument"))))

(every Release has 
  (the-enclosure ((a Enclosure)))
  (defeats ((allof (the object-of of (the object of Self)) where (((the the-enclosure of It) = (the the-enclosure of Self)) and ((the classes of It) = Be-Confined)))))
  (object ((a Tangible-Entity with (location ((constraint ((TheValue isa Place) and (TheValue = (the encloses of (the location of (the the-enclosure of Self)))))))))))
  (pcs-list ((:triple (the object of Self) object-of (a Be-Confined with (the-enclosure ((the the-enclosure of Self)))))))
  (del-list ((forall (the defeats of Self) (:set (:triple It object (the object of Self)) (:triple It the-enclosure (the the-enclosure of Self))))))
  (preparatory-step ((a Confine with (the-enclosure ((the the-enclosure of Self))) (object ((the object of Self)))))))

;;; ----------

(Relinquish has 
  (subclasses (Give
               Dispatch))
  (superclasses (Lose))
  (required-slot (agent
                  donor
                  object))
  (primary-slot (recipient
                 instrument))
  (cmap-correspondence ((:seq object "the thing relinquished")
                        (:seq agent "relinquisher")
                        (:seq donor "donor")
                        (:seq recipient "recipient")
                        (:seq instrument "instrument")))
  (test-case ('((*Gold has (instance-of (Tangible-Entity))) (*Bill has (instance-of (Tangible-Entity)) (possesses (*Gold))) (*Relinquish has (instance-of (Relinquish)) (agent (*Bill)) (object (*Gold))) (do-and-next *Relinquish) (((the agent of *Relinquish) = *Bill) and ((the donor of *Relinquish) = *Bill)) ((the possesses of *Bill) = nil) ((the is-possessed-by of *Gold) /= *Bill)))))

(every Relinquish has 
  (agent (((a Tangible-Entity) & (the donor of Self))))
  (donor ((the agent of Self))))

;;; ----------

(Remove has 
  (superclasses (Action))
  (required-slot (object
                  the-part))
  (primary-slot (agent
                 instrument
                 by-means-of))
  (cmap-correspondence ((:seq agent "the remover")
                        (:seq object "the object with a part being removed")
                        (:seq the-part "the part removed.")
                        (:seq by-means-of "an event necessary for the remove")
                        (:seq instrument "instrument of the remove")))
  (subclasses (Take-Apart)))

(every Remove has 
  (object ((a Tangible-Entity)))
  (by-means-of ((must-be-a Event)))
  (the-part ((a Tangible-Entity)))
  (pcs-list ((forall (the the-part of Self) (:triple It is-part-of (the object of Self)))))
  (del-list ((forall (the the-part of Self) (:triple It is-part-of (the object of Self))))))

;;; ----------

(Repair has 
  (superclasses (Action))
  (required-slot (object))
  (primary-slot ((agent instrument by-means-of)))
  (cmap-correspondence ((:seq object "the thing being repaired")
                        (:seq agent "the one doing the repair")
                        (:seq instrument "the instrument of the repair")
                        (:seq by-means-of "how the repair is achieved")))
  (test-case ('((*Vase has (instance-of (Object))) (a Break with (object (*Vase))) (do-and-next (thelast Break)) (exists (the Be-Broken object-of of *Vase)) (a Repair with (object (*Vase))) (do-and-next (thelast Repair)) (not (exists (the Be-Broken object-of of *Vase)))))))

(every Repair has 
  (object ((must-be-a Tangible-Entity)))
  (defeats ((allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Broken))))
  (pcs-list ((:triple (the object of Self) object-of (a Be-Broken))
             (:triple (the object of Self) object-of (mustnt-be-a Be-Ruined with (object ((the object of Self)))))))
  (del-list ((forall (the defeats of Self) (:triple It object (the object of Self)))))
  (preparatory-step ((a Break with (object ((the object of Self)))))))

;;; ----------

(Replicate has 
  (superclasses (Copy))
  (required-slot (object))
  (primary-slot (agent
                 instrument
                 by-means-of
                 result))
  (cmap-correspondence ((:seq result "the Replicate")
                        (:seq object "the original")
                        (:seq agent "copier")
                        (:seq instrument "the instrument")
                        (:seq by-means-of "the event needed for the Replicate")))
  (test-case ('((new-situation) (Sheep has (superclasses (Tangible-Entity))) (*Dolly has (instance-of (Sheep)) (color (*white)) (sex (*female)) (height (*4)) (length (*5)) (mass (*200)) (age (*5))) (a Replicate with (object (*Dolly))) (do-and-next (thelast Replicate)) ((the classes of (the result of (thelast Replicate))) = Sheep) ((the color of (the result of (thelast Replicate))) = *white) ((the sex of (the result of (thelast Replicate))) = *female) ((the height of (the result of (thelast Replicate))) = *4) ((the length of (the result of (thelast Replicate))) = *5) ((the mass of (the result of (thelast Replicate))) = *200) ((the age of (the result of (thelast Replicate))) = *5)))))

(every Replicate has 
  (object ((a Tangible-Entity)))
  (add-list ((:triple Self result (a Tangible-Entity with (instance-of ((the instance-of of (the object of Self)))) (content ((forall (the content of (the object of Self)) ((an instance of (the instance-of of It)))))) (has-part ((forall (the has-part of (the object of Self)) ((an instance of (the instance-of of It)))))) (material ((forall (the material of (the object of Self)) ((an instance of (the instance-of of It)))))) (age ((the age of (the object of Self)))) (animacy ((the animacy of (the object of Self)))) (area ((the area of (the object of Self)))) (breakability ((the breakability of (the object of Self)))) (capacity ((the capacity of (the object of Self)))) (color ((the color of (the object of Self)))) (consistency ((the consistency of (the object of Self)))) (density ((the density of (the object of Self)))) (depth ((the depth of (the object of Self)))) (height ((the height of (the object of Self)))) (length ((the length of (the object of Self)))) (mass ((the mass of (the object of Self)))) (sentience ((the sentience of (the object of Self)))) (sex ((the sex of (the object of Self)))) (shape ((the shape of (the object of Self)))) (size ((the size of (the object of Self)))) (smell ((the smell of (the object of Self)))) (taste ((the taste of (the object of Self)))) (temperature ((the temperature of (the object of Self)))) (texture ((the texture of (the object of Self)))) (thickness ((the thickness of (the object of Self)))) (trait ((the trait of (the object of Self)))) (wetness ((the wetness of (the object of Self)))) (width ((the width of (the object of Self)))) (volume ((the volume of (the object of Self))))))))
  (instrument ((must-be-a Tangible-Entity)))
  (by-means-of ((must-be-a Event))))

;;; ----------

(required-slot has 
  (instance-of (KM-Slot))
  (domain (Thing))
  (range (Slot))
  (cardinality (N-to-N)))

;;; ----------

(required-slot-of has 
  (instance-of (Slot)))

;;; ----------

(Restrain has 
  (superclasses (Obstruct))
  (required-slot (object))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "restrainee")
                        (:seq agent "restrainer")))
  (test-case ('((*mugger has (instance-of (Object))) (a Restrain with (object (*mugger))) (do-and-next (thelast Restrain)) (exists (the Be-Restrained object-of of *mugger)) (a Move with (object (*mugger))) (not (try-do (thelast Move)))))))

(every Restrain has 
  (object ((a Object)))
  (resulting-state ((a Be-Restrained)))
  (pcs-list ((:triple (the object of Self) object-of (mustnt-be-a Be-Restrained with (object ((the object of Self))) (agent ((the agent of Self)))))))
  (preparatory-step ((a Unrestrain with (object ((the object of Self))) (agent ((the agent of Self)))))))

;;; ----------

(result has 
  (required-slot-of (Breach
                     Copy
                     Create
                     Form))
  (instance-of (Relation))
  (primary-slot-of (Replicate))
  (domain (Action))
  (range (Entity))
  (inverse (result-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (1-to-N)))

;;; ----------

(result-of has 
  (inverse (result))
  (instance-of (Slot)))

;;; ----------

(resulting-state has 
  (instance-of (Relation))
  (superslots (causes))
  (domain (Event))
  (range (State))
  (inverse (resulting-state-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (1-to-1)))

;;; ----------

(resulting-state-of has 
  (instance-of (Slot))
  (inverse (resulting-state)))

;;; ----------

(Ribonucleoprotein has 
  (superclasses (Nucleoprotein)))

;;; ----------

(Ribonucleotide has 
  (subclasses (Uridine-Triphosphate
               Uridine-Monophosphate
               Thymidine-Triphosphate
               Thymidine-Monophosphate
               Second-Ribonucleotide
               Methylated-Ribonucleotide
               Methyl-Guanine
               Guanosine-Triphosphate
               Guanosine-Monophosphate
               First-Ribonucleotide
               Cytidine-Triphosphate
               Cytidine-Monophosphate
               Adenosine-Triphosphate
               Adenosine-Monophosphate))
  (superclasses (Nucleotide)))

(every Ribonucleotide has 
  (has-part ((at-least 1 Phosphate)
             (at-most 3 Phosphate)
             (a Nucleoside with (has-part ((a Ribose) (a Nitrogenous-Base with (one-of ((a Adenine) (a Guanine) (a Uracil) (a Cytosine))))))))))

;;; ----------

(Ribose has 
  (superclasses (5-Carbon-Sugar)))

;;; ----------

(Ribosomal-Protein has 
  (subclasses (Procaryotic-Ribosomal-Protein))
  (superclasses (Protein)))

;;; ----------

(Ribosome has 
  (subclasses (Procaryotic-Ribosome
               Free-Ribosome
               Eucaryotic-Ribosome
               Bound-Ribosome))
  (superclasses (Nucleoprotein)))

(every Ribosome has 
  (has-part ((a Sub-Unit with (size (*large)) (has-part ((a RRNA) (a Ribosomal-Protein) (a Peptidyl-Transferase))))
             (a Sub-Unit with (size (*small)) (has-part ((a RRNA) (a Ribosomal-Protein)))))))

;;; ----------

(Ribosome-Binding-Site has 
  (superclasses (Binding-Site)))

;;; ----------

(Ribosome-Release-Factor has 
  (superclasses (Regulatory-Protein)))

;;; ----------

(Ring-Compound has 
  (subclasses (Heterocyclic-Compound))
  (superclasses (Organic-Molecule)))

;;; ----------

(RNA has 
  (subclasses (RNA-Transcript
               MRNA))
  (superclasses (Polyribonucleotide)))

;;; ----------

(RNA-3-End has 
  (superclasses (RNA-Region)))

;;; ----------

(RNA-5-End has 
  (superclasses (RNA-Region)))

;;; ----------

(RNA-Anticodon has 
  (superclasses (RNA-Coding-Region)))

(every RNA-Anticodon has 
  (has-part ((exactly 3 Nucleotide)
             (a Nucleotide called "First")
             (a Nucleotide called "Middle")
             (a Nucleotide called "Last"))))

;;; ----------

(RNA-Cap has 
  (superclasses (Guanosine)))

(every RNA-Cap has 
  (has-part (Methyl-Group
             Guanosine)))

;;; ----------

(RNA-Chain has 
  (superclasses (Chain)))

;;; ----------

(RNA-Coding-Region has 
  (subclasses (RNA-Codon
               RNA-Anticodon))
  (superclasses (RNA-Region)))

;;; ----------

(RNA-Codon has 
  (superclasses (RNA-Coding-Region)))

(every RNA-Codon has 
  (has-part ((exactly 3 Nucleotide)
             (a Nucleotide called "First")
             (a Nucleotide called "Middle")
             (a Nucleotide called "Last"))))

;;; ----------

(RNA-Non-Coding-Region has 
  (superclasses (RNA-Region))
  (subclasses (RNA-Regulatory-Region)))

;;; ----------

(RNA-Polymerase has 
  (subclasses (Procaryotic-RNA-Polymerase
               Proaryotic-RNA-Polymerase
               Eucaryotic-RNA-Polymerase))
  (superclasses (Polymerase)))

;;; ----------

(RNA-Region has 
  (subclasses (RNA-Untranslated-Region
               RNA-Translated-Region
               RNA-Non-Coding-Region
               RNA-Coding-Region
               RNA-5-End
               RNA-3-End
               5prime-Untranslated-Region
               3prime-Untranslated-Region))
  (superclasses (Nucleic-Acid-Region)))

;;; ----------

(RNA-Regulatory-Region has 
  (subclasses (Protein-Stop-Codon
               Protein-Initiator-Codon
               Amino-Acid-Codon))
  (superclasses (RNA-Non-Coding-Region)))

;;; ----------

(RNA-Transcript has 
  (subclasses (TRNA
               RRNA
               Gene-Transcript
               Functional-RNA-Transcript
               Functional-MRNA-Transcript
               Eucaryotic-RNA-Transcript))
  (superclasses (RNA)))

;;; ----------

(RNA-Translated-Region has 
  (superclasses (RNA-Region)))

(every RNA-Translated-Region has 
  (has-part ((a Protein-Initiator-Codon)
             (a Protein-Stop-Codon)
             (a Protein-Coding-Region))))

;;; ----------

(RNA-Untranslated-Region has 
  (superclasses (RNA-Region)))

;;; ----------

(Rough-Endoplasmic-Reticulum has 
  (superclasses (Membrane)))

(every Rough-Endoplasmic-Reticulum has 
  (has-part (Bound-Ribosome)))

;;; ----------

(RRNA has 
  (subclasses (Procaryotic-RRNA
               Eucaryotic-RRNA))
  (superclasses (RNA-Transcript)))

;;; ----------

(Ruin has 
  (superclasses (Break))
  (required-slot (object))
  (primary-slot (agent
                 instrument
                 by-means-of))
  (cmap-correspondence ((:seq agent "the destroyer")
                        (:seq object "the object ruined")
                        (:seq by-means-of "an event necessary to ruining the object")))
  (test-case ('((*House has (instance-of (Tangible-Entity))) (a Ruin with (object (*House))) (do-and-next (thelast Ruin)) (exists (the Be-Ruined object-of of *House)) (a Repair with (object (*House))) (not (try-do (thelast Repair)))))))

(every Ruin has 
  (object ((a Tangible-Entity)))
  (agent ((must-be-a Tangible-Entity)))
  (instrument ((must-be-a Tangible-Entity)))
  (by-means-of ((must-be-a Event)))
  (resulting-state ((a Be-Ruined)))
  (add-list ((:triple (the resulting-state of Self) object (the object of Self)))))

;;; ----------

(Scalar-Value has 
  (subclasses (Width-Scalar
               Wetness-Scalar
               Volume-Scalar
               Trait-Scalar
               Thickness-Scalar
               Texture-Scalar
               Temperature-Scalar
               Taste-Scalar
               Size-Scalar
               Shape-Scalar
               Mass-Scalar
               Length-Scalar
               Height-Scalar
               Depth-Scalar
               Density-Scalar
               Consistency-Scalar
               Capacity-Scalar
               Breakability-Scalar
               Area-Scalar
               Age-Scalar))
  (superclasses (Value))
  (range-of (scale)))

;;; ----------

(scale has 
  (instance-of (Relation))
  (domain (Scale))
  (range (Scalar-Value))
  (inverse (()))
  (fluent-status (*Non-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(Scale has 
  (subclasses (Width-Scale
               Volume-Scale
               Temperature-Scale
               Taste-Scale
               Size-Scale
               Mass-Scale
               Length-Scale
               Height-Scale
               Depth-Scale
               Density-Scale
               Capacity-Scale
               Area-Scale
               Age-Scale))
  (superclasses (Intangible-Entity))
  (domain-of (scale)))

(every Scale has 
  (scale ((a Scalar-Value))))

;;; ----------

(Second-Ribonucleotide has 
  (superclasses (Ribonucleotide)))

;;; ----------

(secondary-slot has 
  (instance-of (KM-Slot))
  (domain (Thing))
  (range (Slot))
  (cardinality (N-to-N)))

;;; ----------

(secondary-slot-of has 
  (instance-of (Slot)))

;;; ----------

(Secrete has 
  (superclasses (Move-Out-Of))
  (required-slot (agent
                  object
                  the-enclosure
                  subevent))
  (primary-slot (source
                 destination
                 path))
  (cmap-correspondence ((:seq agent "the secreter")
                        (:seq object "the thing secreted")
                        (:seq the-enclosure "the enclosure")
                        (:seq subevent "the production event")
                        (:seq source "original location")
                        (:seq destination "final location")
                        (:seq path "the portal")))
  (test-case ('((*sap has (instance-of (Substance))) (*tree-location has (instance-of (Place))) (*tree has (instance-of (Enclosure)) (location (*tree-location))) (a Secrete with (object (*sap)) (the-enclosure (*tree))) (do-and-next (thelast Secrete)) ((the is-inside of (the location of *sap)) /= *tree-location) ((the is-outside of (the location of *sap)) = *tree-location)))))

(every Secrete has 
  (object ((a Substance)))
  (subevent ((a Create with (agent ((the agent of Self))) (result ((the object of Self))))
             (a Expel with (agent ((the agent of Self))) (object ((the object of Self))))))
  (subevent-order ((the Create subevent of Self)
                   (the Expel subevent of Self))))

;;; ----------

(Send has 
  (superclasses (Give))
  (required-slot (recipient
                  agent
                  donor
                  object
                  subevent))
  (primary-slot (instrument
                 source
                 path
                 destination))
  (cmap-correspondence ((:seq recipient "recipient")
                        (:seq agent "sender")
                        (:seq donor "donor")
                        (:seq object "the thing sent")
                        (:seq subevent "subevent")
                        (:seq instrument "instrument")
                        (:seq source "moved from")
                        (:seq path "moved through")
                        (:seq destination "moved to")))
  (test-case ('((*Fresno has (instance-of (Place))) (*Detroit has (instance-of (Place))) (*Blue-Package has (instance-of (Object)) (location (*Fresno))) (*Victor has (instance-of (Tangible-Entity)) (possesses (*Blue-Package)) (location (*Fresno))) (*Maurice has (instance-of (Tangible-Entity)) (location (*Detroit))) (*Send has (instance-of (Send)) (agent (*Victor)) (recipient (*Maurice)) (object (*Blue-Package))) (do-and-next *Send) ((the possesses of *Maurice) = *Blue-Package) ((the location of *Maurice) = *Detroit) ((the possesses of *Victor) /= *Blue-Package) ((the location of *Victor) = *Fresno) ((the location of *Blue-Package) = *Detroit) ((in-situation (the1 of (the prev-situation of (curr-situation))) (the location of *Blue-Package)) = *Fresno) ((the location of *Blue-Package) /= *Fresno)))))

(every Send has 
  (source ((the location of (the donor of Self))))
  (path ((must-be-a Place)))
  (destination ((the location of (the recipient of Self))))
  (subevent ((a Dispatch with (agent ((the agent of Self))) (object ((the object of Self))) (recipient ((the recipient of Self))) (instrument ((the instrument of Self))))
             (a Move with (agent ((the agent of Self))) (object ((the object of Self))) (instrument ((the instrument of Self))) (source ((the source of Self))) (path ((the path of Self))) (destination ((the destination of Self))))
             (a Deliver with (agent ((the agent of Self))) (object ((the object of Self))) (recipient ((the recipient of Self))) (instrument ((the instrument of Self))))))
  (subevent-order ((the Dispatch subevent of Self)
                   (the Move subevent of Self)
                   (the Deliver subevent of Self)))
  (pcs-list ((if (has-value (the source of Self)) then (:triple (the object of Self) location (the source of Self)))))
  (add-list ((if (has-value (the destination of Self)) then (:triple (the object of Self) location (the destination of Self)))))
  (del-list ((if (has-value (the source of Self)) then (:triple (the object of Self) location (the source of Self)))))
  (during-condition ((if (has-value (the path of Self)) then (:triple (the object of Self) location (the path of Self)))))
  (preparatory-step ((a Move with (object ((the object of Self))) (destination ((the source of Self)))))))

;;; ----------

(sentience has 
  (instance-of (Property))
  (domain (Organism))
  (range (Value))
  (inverse (sentience-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(sentience-of has 
  (inverse (sentience))
  (instance-of (Slot)))

;;; ----------

(Separator has 
  (subclasses (Barrier))
  (superclasses (Inanimate-Object))
  (required-slot (location))
  (primary-slot (between))
  (cmap-correspondence ((:seq between "the spaces separated")))
  (test-case ('((*Room has (instance-of (Place))) (*Outside has (instance-of (Place))) (*Wall has (instance-of (Separator)) (location ((a Place with (between ((:args *Room *Outside)))))))))))

(every Separator has 
  (location ((a Place with (between ((:args (a Place) (a Place with (abuts ((excluded-values (the1 of (the between of (the location of Self))))))))))))))

;;; ----------

(Serine has 
  (superclasses (Uncharged-Polar-Amino-Acid)))

;;; ----------

(sex has 
  (instance-of (Property))
  (domain (Organism))
  (range (Value))
  (inverse (sex-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-1)))

;;; ----------

(sex-of has 
  (inverse (sex))
  (instance-of (Slot)))

;;; ----------

(shape has 
  (primary-slot-of (Container))
  (instance-of (Property))
  (domain (Tangible-Entity))
  (range (Value))
  (inverse (shape-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(Shape has 
  (subclasses (Strand
               Lariat
               Helix
               Chain))
  (superclasses (Thing)))

;;; ----------

(shape-of has 
  (inverse (shape))
  (instance-of (Slot)))

;;; ----------

(Shape-Scalar has 
  (superclasses (Scalar-Value))
  (instances (*square
              *round
              *triangular
              *oval)))

;;; ----------

(Shut-Out has 
  (superclasses (Obstruct))
  (required-slot (object
                  location
                  the-enclosure))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "object shut-out")
                        (:seq location "the place outside")
                        (:seq the-enclosure "the enclosure"))))

(every Shut-Out has 
  (the-state ((a Be-Shut-Out)))
  (the-enclosure ((a Enclosure)))
  (object ((a Tangible-Entity with (location ((constraint ((TheValue isa Place) and (TheValue /= (the encloses of (the location of (the the-enclosure of Self)))))))))))
  (location ((constraint ((TheValue isa Place) and (TheValue = (the does-not-enclose of (the location of (the the-enclosure of Self))))))))
  (add-list ((:triple (the the-state of Self) object (the object of Self))
             (:triple (the the-state of Self) the-enclosure (the the-enclosure of Self)))))

;;; ----------

(Sigma-Factor has 
  (superclasses (Nucleoprotein)))

;;; ----------

(size has 
  (instance-of (Property))
  (domain (Tangible-Entity))
  (range (Value))
  (inverse (size-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-1)))

;;; ----------

(size-of has 
  (inverse (size))
  (instance-of (Slot)))

;;; ----------

(Size-Scalar has 
  (superclasses (Scalar-Value))
  (instances (*microscopic
              *tiny
              *small
              *large
              *big
              *little
              *gigantic
              *undersized
              *oversized)))

;;; ----------

(Size-Scale has 
  (superclasses (Scale))
  (instances (*small-to-large
              *undersized-to-oversized)))

;;; ----------

(Slide has 
  (superclasses (Move-Through))
  (required-slot (object
                  path))
  (primary-slot (agent
                 source
                 destination))
  (cmap-correspondence ((:seq object "the thing slid")
                        (:seq agent "the mover")
                        (:seq source "slid from")
                        (:seq destination "slid to")
                        (:seq path "slid along")))
  (test-case ('((*ice has (instance-of (Tangible-Entity))) (*puck has (instance-of (Tangible-Entity))) (*Be-Touching-for-Slide has (instance-of (Be-Touching)) (object (*puck *ice))) (*Slide has (instance-of (Slide)) (object (*puck)) (path ((the location of *ice)))) (try-do-and-next *Slide) ((the path of *Slide) = (the location of *ice)) ((the object of *Be-Touching-for-Slide) includes *ice) ((the object of *Be-Touching-for-Slide) includes *puck)))))

(every Slide has 
  (pcs-list ((forall (the object of Self) (:triple It object-of (a Be-Touching with (object ((the object of Self) (the location-of of (the path of Self))))))))))

;;; ----------

(Slot has 
  (instances (has-part
              location
              required-slot
              required-slot-of
              primary-slot
              primary-slot-of
              cmap-correspondence
              agent
              mass
              content
              object
              is-part-of
              destination
              source
              path
              test-case
              secondary-slot
              secondary-slot-of
              instrument
              subevent
              actions
              mcs-list
              the-enclosure
              defeats
              preparatory-step
              the-major-object
              the-minor-object
              resulting-state
              prevents
              resulting-state-of
              defeated-by
              defeated
              result
              causes
              the-connector
              prepatory-step
              dcs-list
              interrupted-by
              shape
              intersect
              by-means-of
              beneficiary
              time
              causer
              donor
              recipient
              rate
              direction
              the-created-out-of
              purpose
              opposition
              the-portal-covering
              prepartory-action
              away-from
              toward
              during-condition
              preparatoy-step
              prepatory-action
              subevent-order
              is-above
              is-along
              is-at
              is-behind
              is-inside
              encloses
              is-outside
              does-not-enclose
              is-on
              is-over
              aperture
              the-result-type
              the-part
              scale
              the-state
              experiencer
              enables
              before
              range2
              range2-of
              age-of
              agent-of
              animacy-of
              area-of
              away-from-of
              beneficiary-of
              breakability-of
              means-by-which
              capability-of
              capacity-of
              caused-by
              color-of
              consistency-of
              content-of
              density-of
              depth-of
              destination-of
              direction-of
              donor-of
              during-condition-of
              temporally-contains
              enabled-by
              entailed-by
              experiencer-of
              frequency-of
              function-of
              goal-of
              height-of
              inhibited-by
              instrument-of
              is-below
              is-at-of
              is-in-front-of
              has-on-it
              is-under
              length-of
              location-of
              manner-of
              mass-of
              material-of
              object-of
              opposition-of
              path-of
              is-possessed-by
              prevented-by
              rate-of
              recipient-of
              region-of
              result-of
              sentience-of
              sex-of
              shape-of
              size-of
              smell-of
              source-of
              subevent-order-of
              subevent-of
              taste-of
              temperature-of
              temporally-finished-by
              temporally-met-by
              temporally-overlapped-by
              temporally-started-by
              texture-of
              thickness-of
              time-of-existence-of
              time-of
              toward-of
              trait-of
              volume-of
              wetness-of
              width-of
              all-subevents
              primitive-actions
              next-events
              prev-events
              first-subevents
              subevents
              parent-events
              disjunctive-next-events))
  (subclasses (Relation
               Property
               KM-Slot))
  (superclasses (Thing))
  (range-of (primary-slot
             required-slot
             secondary-slot)))

;;; ----------

(smell has 
  (instance-of (Property))
  (domain (Tangible-Entity))
  (range (Value))
  (inverse (smell-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(smell-of has 
  (inverse (smell))
  (instance-of (Slot)))

;;; ----------

(Smooth-Endoplasmic-Reticulum has 
  (superclasses (Membrane)))

;;; ----------

(SnRNP has 
  (superclasses (Nucleoprotein
                 Enzyme-Complex)))

(every SnRNP has 
  (has-part ((a Protein)
             (a RNA))))

;;; ----------

(Soluble-Substance has 
  (superclasses (Substance)))

;;; ----------

(source has 
  (primary-slot-of (Endocytose
                    Phagocytose
                    Pinocytose
                    Absorb
                    Carry
                    Enter
                    Exit
                    Exude
                    Fall
                    Go-To
                    Move-Into
                    Move-Out-Of
                    Move-Through
                    Move-To
                    Move
                    Secrete
                    Send
                    Slide
                    Take-In
                    Traverse))
  (instance-of (Relation))
  (required-slot-of (Break-Contact
                     Disperse
                     Eject
                     Emit
                     Excrete
                     Expel
                     Extrude
                     Leave
                     Move-From
                     Produce))
  (domain (Event))
  (range (Place))
  (inverse (source-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-1)))

;;; ----------

(source-of has 
  (inverse (source))
  (instance-of (Slot)))

;;; ----------

(Spacer-DNA-Region has 
  (superclasses (Non-Transcribed-Region)))

;;; ----------

(State has 
  (subclasses (In-Control
               Be-Touching
               Be-Obstructed
               Be-Connected
               Be-Broken))
  (superclasses (Event))
  (required-slot (experiencer))
  (primary-slot (agent
                 instrument))
  (cmap-correspondence ((:seq experiencer "experiencer")))
  (range-of (defeats
             resulting-state)))

(every State has 
  (time ((must-be-a Time-Interval with (temporally-started-by ((the time of (the resulting-state-of of Self)))) (temporally-finished-by ((the time of (the defeated-by of Self)))))))
  (experiencer ((must-be-a Living-Entity with (time-of-existence ((a Time-Interval with (temporally-overlaps ((the time-of-existence of (the object of Self)) (if (has-value (the beneficiary of Self)) then (the time-of-existence of (the beneficiary of Self))) (if (has-value (the causer of Self)) then (the time-of-existence of (the causer of Self))) (if (has-value (the instrument of Self)) then (the time-of-existence of (the instrument of Self))) (if (has-value (the recipient of Self)) then (the time-of-existence of (the recipient of Self))))))))))))

;;; ----------

(Strand has 
  (subclasses (DNA-Strand))
  (superclasses (Shape)))

;;; ----------

(subevent has 
  (secondary-slot-of (Action))
  (instance-of (Relation))
  (required-slot-of (Come-Into-Contact
                     Come-Together
                     Disperse
                     Make-Contact
                     Move-Together
                     Secrete
                     Send))
  (domain (Event))
  (range (Event))
  (inverse (subevent-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-N)))

;;; ----------

(subevent-of has 
  (inverse (subevent))
  (instance-of (Slot)))

;;; ----------

(subevent-order has 
  (instance-of (KM-Slot-Group))
  (domain (Event))
  (range (Event))
  (inverse (subevent-order-of))
  (cardinality (N-to-N))
  (fluent-status (*Non-Fluent)))

;;; ----------

(subevent-order-of has 
  (inverse (subevent-order))
  (instance-of (Slot)))

;;; ----------

(subevents has 
  (instance-of (Slot))
  (domain (Action))
  (range (Action))
  (inverse (parent-events)))

;;; ----------

(Substance has 
  (subclasses (Waste
               Soluble-Substance
               Food
               Fluid
               EM-Wave
               Particulate-Matter
               Organic-Substance
               Inorganic-Substance
               Chemical-Substance))
  (superclasses (Tangible-Entity))
  (range-of (material)))

;;; ----------

(Sugar has 
  (subclasses (Pentose
               5-Carbon-Sugar))
  (superclasses (Carbohydrate)))

;;; ----------

(Supply has 
  (subclasses (Feed))
  (superclasses (Give))
  (required-slot (recipient
                  agent
                  donor
                  object
                  enables))
  (primary-slot (instrument))
  (cmap-correspondence ((:seq object "the thing supplied")
                        (:seq agent "supplier")
                        (:seq donor "donor")
                        (:seq recipient "recipient")
                        (:seq instrument "instrument")
                        (:seq enables "enable")))
  (test-case ('((*Money has (instance-of (Object))) (*Fred has (instance-of (Living-Entity)) (possesses (*Money))) (*Steven has (instance-of (Tangible-Entity))) (*Supply has (instance-of (Supply)) (agent (*Fred)) (recipient (*Steven)) (object (*Money))) (do-and-next *Supply) ((the enables of *Supply) isa Obtain) ((the agent of (the enables of *Supply)) = *Steven) ((the recipient of (the enables of *Supply)) = *Steven) ((the object of (the enables of *Supply)) = *Money) ((the possesses of *Fred) /= *Money) ((the possesses of *Steven) = *Money)))))

(every Supply has 
  (agent ((a Living-Entity)))
  (enables ((a Obtain with (recipient ((the recipient of Self))) (object ((the object of Self)))))))

;;; ----------

(Support has 
  (superclasses (Obstruct))
  (required-slot (object))
  (primary-slot (instrument))
  (cmap-correspondence ((:seq object "the thing supported")
                        (:seq instrument "instrument")))
  (test-case ('((*dumb-bell has (instance-of (Tangible-Entity))) (*body-builder has (instance-of (Living-Entity))) (a Support with (object (*dumb-bell)) (agent (*body-builder))) (not (the Be-Supported object-of of *dumb-bell)) (do-and-next (thelast Support)) (exists (the Be-Supported object-of of *dumb-bell)) (a Fall with (object (*dumb-bell))) (not (try-do (thelast Fall))) (a Let-Fall with (object (*dumb-bell)) (agent (*body-builder))) (do-and-next (thelast Let-Fall)) (not (exists (the Be-Supported object-of of *dumb-bell))) (try-do (thelast Fall))))))

(every Support has 
  (object ((a Tangible-Entity)))
  (resulting-state ((a Be-Supported)))
  (instrument ((must-be-a Tangible-Entity)))
  (add-list ((:triple (the resulting-state of Self) object (the object of Self))
             (if (has-value (the instrument of Self)) then (:triple (the resulting-state of Self) instrument (the instrument of Self)))))
  (prepatory-step ((if (has-value (the agent of Self)) then (:default (a Move with (object ((the agent of Self))) (destination ((a Place with (is-at ((the location of (the object of Self))))))))))))
  (interrupted-by ((must-be-a Break with (object ((the instrument of Self)))))))

;;; ----------

(Take has 
  (superclasses (Obtain
                 Lose))
  (required-slot (donor
                  agent
                  recipient
                  object))
  (primary-slot (instrument))
  (cmap-correspondence ((:seq object "the thing taken")
                        (:seq agent "taker")
                        (:seq donor "donor")
                        (:seq recipient "recipient")
                        (:seq instrument "instrument")))
  (test-case ('((*Book-Taken has (instance-of (Tangible-Entity))) (*John-In-Take has (instance-of (Tangible-Entity)) (possesses (*Book-Taken))) (*Fred-In-Take has (instance-of (Tangible-Entity))) (a Take with (agent (*Fred-In-Take)) (donor (*John-In-Take)) (object (*Book-Taken))) (do-and-next (thelast Take)) ((the possesses of *Fred-In-Take) = *Book-Taken) ((the possesses of *John-In-Take) = nil) ((the is-possessed-by of *Book-Taken) = *Fred-In-Take) ((the agent of (thelast Take)) = (the recipient of (thelast Take)))))))

;;; ----------

(Take-Apart has 
  (superclasses (Remove))
  (required-slot (object
                  the-part))
  (primary-slot (agent
                 instrument
                 by-means-of))
  (cmap-correspondence ((:seq agent "the agent")
                        (:seq object "the object being taken apart")
                        (:seq the-part "the parts removed.")
                        (:seq by-means-of "an event necessary for the take apart")
                        (:seq instrument "instrument of used in the take apart"))))

(every Take-Apart has 
  (the-part ((the has-part of (the object of Self)))))

;;; ----------

(Take-Control has 
  (superclasses (Action)))

;;; ----------

(Take-In has 
  (subclasses (Absorb))
  (superclasses (Move-Into))
  (required-slot (object
                  destination))
  (primary-slot (agent
                 source
                 path))
  (cmap-correspondence ((:seq agent "the one causing the take-in")
                        (:seq object "the Tangible-Entity taken-in")
                        (:seq destination "final location")
                        (:seq source "original location")
                        (:seq path "the portal")))
  (test-case ('((*John has (instance-of (Organism)) (location (*Air-Location))) (*Nose has (instance-of (Portal))) (*Lungs-Location has (instance-of (Place))) (*Lungs has (instance-of (Enclosure)) (has-part (*Nose)) (location (*Lungs-Location))) (*Air-Location has (instance-of (Place))) (*Air has (instance-of (Tangible-Entity)) (location (*Air-Location))) (a Take-In with (agent (*John)) (the-enclosure (*Lungs)) (object (*Air)) (path (*Nose))) (do-and-next (thelast Take-In)) ((the path of (thelast Take-In)) = *Nose) ((the content of *Lungs) = *Air) ((the is-inside of (the location of *Air)) = (the location of *Lungs)) ((the is-outside of (the location of *Lungs)) /= (the location of *Air))))))

(every Take-In has 
  (object ((a Tangible-Entity)))
  (destination ((a Place)))
  (agent ((must-be-a Living-Entity)))
  (source ((must-be-a Place)))
  (path ((must-be-a Portal))))

;;; ----------

(Take-Up has 
  (subclasses (Endocytose))
  (superclasses (Move-Into))
  (required-slot (agent))
  (cmap-correspondence ((:seq agent "the uptaker")))
  (test-case ('((*Cell has (instance-of (Enclosure)) (location (*CellLoc))) (*CellLoc has (encloses (*inside)) (does-not-enclose (*outside))) (*Food has (instance-of (Tangible-Entity)) (location (*outside))) (a Take-Up with (the-enclosure (*Cell)) (object (*Food))) (do-and-next (thelast Take-Up)) ((the is-inside of (the location of *Food)) = *CellLoc) ((the content of *Cell) = *Food)))))

(every Take-Up has 
  (agent ((the recipient of Self)))
  (recipient ((the agent of Self))))

;;; ----------

(Tangible-Entity has 
  (superclasses (Entity))
  (subclasses (Substance
               Object))
  (primary-slot (location))
  (domain-of (area
              breakability
              capacity
              color
              consistency
              density
              depth
              has-part
              height
              length
              location
              mass
              material
              region
              shape
              size
              smell
              taste
              temperature
              texture
              thickness
              volume
              wetness
              width))
  (range-of (content
             has-part
             opposition
             possesses)))

(every Tangible-Entity has 
  (location ((a Place))))

;;; ----------

(taste has 
  (instance-of (Property))
  (domain (Tangible-Entity))
  (range (Value))
  (inverse (taste-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(taste-of has 
  (inverse (taste))
  (instance-of (Slot)))

;;; ----------

(Taste-Scalar has 
  (superclasses (Scalar-Value))
  (instances (*salty
              *sweet
              *fruity
              *spicey
              *full-bodied
              *tangy
              *mouth-watering
              *dry)))

;;; ----------

(Taste-Scale has 
  (superclasses (Scale))
  (instances (*dry-to-sweet)))

;;; ----------

(temperature has 
  (instance-of (Property))
  (domain (Tangible-Entity))
  (range (Value))
  (range2 (Thing))
  (inverse (temperature-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(temperature-of has 
  (inverse (temperature))
  (instance-of (Slot)))

;;; ----------

(Temperature-Scalar has 
  (superclasses (Scalar-Value))
  (instances (*cold
              *mild
              *warm
              *hot
              *freezing
              *boiling
              *normal
              *abnormal)))

;;; ----------

(Temperature-Scale has 
  (superclasses (Scale))
  (instances (*cold-hot-scale
              *freezing-boiling-scale)))

;;; ----------

(Temporal-Interval has 
  (domain-of (after
              temporally-finishes
              temporally-meets
              temporally-starts))
  (range-of (after
             temporally-finishes
             temporally-meets
             temporally-starts)))

;;; ----------

(temporally-contains has 
  (inverse (during))
  (instance-of (Slot)))

;;; ----------

(temporally-finished-by has 
  (inverse (temporally-finishes))
  (instance-of (Slot)))

;;; ----------

(temporally-finishes has 
  (instance-of (Relation))
  (domain (Temporal-Interval))
  (range (Temporal-Interval))
  (inverse (temporally-finished-by))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(temporally-meets has 
  (instance-of (Relation))
  (domain (Temporal-Interval))
  (range (Temporal-Interval))
  (inverse (temporally-met-by))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(temporally-met-by has 
  (inverse (temporally-meets))
  (instance-of (Slot)))

;;; ----------

(temporally-overlapped-by has 
  (inverse (temporally-overlaps))
  (instance-of (Slot)))

;;; ----------

(temporally-overlaps has 
  (instance-of (Relation))
  (domain (Time-Interval))
  (range (Time-Interval))
  (inverse (temporally-overlapped-by))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(temporally-started-by has 
  (inverse (temporally-starts))
  (instance-of (Slot)))

;;; ----------

(temporally-starts has 
  (instance-of (Relation))
  (domain (Temporal-Interval))
  (range (Temporal-Interval))
  (inverse (temporally-started-by))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(Terminator has 
  (superclasses (DNA-Regulatory-Region
                 Place)))

;;; ----------

(Terminator-Region has 
  (superclasses (DNA-Regulatory-Region)))

;;; ----------

(Terminator-Site has 
  (superclasses (DNA-Regulatory-Site)))

;;; ----------

(test-case has 
  (instance-of (KM-Slot))
  (domain (Thing))
  (range (Thing))
  (inverse (()))
  (cardinality (N-to-N)))

;;; ----------

(texture has 
  (instance-of (Property))
  (domain (Tangible-Entity))
  (range (Value))
  (inverse (texture-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-1)))

;;; ----------

(texture-of has 
  (inverse (texture))
  (instance-of (Slot)))

;;; ----------

(Texture-Scalar has 
  (superclasses (Scalar-Value))
  (instances (*smooth
              *rough)))

;;; ----------

(the-connector has 
  (primary-slot-of (Connect
                    Disconnect))
  (instance-of (Slot)))

;;; ----------

(the-created-out-of has 
  (primary-slot-of (Form))
  (instance-of (Slot)))

;;; ----------

(the-enclosure has 
  (required-slot-of (Admit
                     Be-Confined
                     Be-Shut-Out
                     Confine
                     Enter
                     Exit
                     Exude
                     Move-Into
                     Move-Out-Of
                     Release
                     Secrete
                     Shut-Out))
  (instance-of (Slot)))

;;; ----------

(the-from-loc has 
  (primary-slot-of (Barrier)))

;;; ----------

(the-major-object has 
  (required-slot-of (Attach
                     Be-Attached-To
                     Detach))
  (instance-of (Slot))
  (situation-specific (t))
  (fluent-status (*Inertial-Fluent)))

;;; ----------

(the-minor-object has 
  (required-slot-of (Attach
                     Be-Attached-To
                     Detach))
  (instance-of (Slot))
  (situation-specific (t))
  (fluent-status (*Inertial-Fluent)))

;;; ----------

(the-part has 
  (required-slot-of (Remove
                     Take-Apart))
  (instance-of (Slot)))

;;; ----------

(the-portal-covering has 
  (instance-of (Slot)))

;;; ----------

(the-result-type has 
  (required-slot-of (Produce))
  (instance-of (Slot))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (inherit-with-overrides (t)))

;;; ----------

(the-state has 
  (instance-of (Slot)))

;;; ----------

(the-through-loc has 
  (primary-slot-of (Barrier)))

;;; ----------

(the-to-loc has 
  (primary-slot-of (Barrier)))

;;; ----------

(thickness has 
  (instance-of (Property))
  (domain (Tangible-Entity))
  (range (Value))
  (inverse (thickness-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-1)))

;;; ----------

(thickness-of has 
  (inverse (thickness))
  (instance-of (Slot)))

;;; ----------

(Thickness-Scalar has 
  (superclasses (Scalar-Value))
  (instances (*thin
              *thick)))

;;; ----------

(Thing has 
  (subclasses (Value
               Slot
               Shape
               Event
               Entity
               Cliche))
  (domain-of (KM-Slot-Group
              cmap-correspondence
              primary-slot
              required-slot
              secondary-slot
              test-case))
  (range-of (KM-Slot-Group
             cmap-correspondence
             height
             length
             mass
             test-case))
  (range2-of (age
              area
              capacity
              consistency
              density
              depth
              temperature
              volume
              width)))

;;; ----------

(Threonine has 
  (superclasses (Uncharged-Polar-Amino-Acid)))

;;; ----------

(Thymidine has 
  (superclasses (Nucleoside)))

(every Thymidine has 
  (has-part ((a Ribose)
             (a Thymine))))

;;; ----------

(Thymidine-Monophosphate has 
  (superclasses (Ribonucleotide
                 Nucleoside-Monophosphate)))

;;; ----------

(Thymidine-Triphosphate has 
  (superclasses (Ribonucleotide
                 Nucleoside-Triphosphate)))

;;; ----------

(Thymine has 
  (superclasses (Pyrimidine)))

;;; ----------

(time has 
  (primary-slot-of (Event))
  (instance-of (Relation))
  (domain (Event))
  (range (Time-Interval))
  (inverse (time-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-1)))

;;; ----------

(Time-Interval has 
  (domain-of (before
              during
              temporally-overlaps))
  (range-of (before
             during
             temporally-overlaps
             time-of-existence
             time)))

;;; ----------

(time-of has 
  (inverse (time))
  (instance-of (Slot)))

;;; ----------

(time-of-existence has 
  (instance-of (Relation))
  (domain (Entity))
  (range (Time-Interval))
  (inverse (time-of-existence-of))
  (fluent-status (*Inertial-Fluent))
  (cardinality (N-to-1)))

;;; ----------

(time-of-existence-of has 
  (inverse (time-of-existence))
  (instance-of (Slot)))

;;; ----------

(To-Be has 
  (range-of (capability
             function)))

;;; ----------

(toward has 
  (secondary-slot-of (Move))
  (instance-of (Relation))
  (domain (Event))
  (range (Place))
  (inverse (toward-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-1)))

;;; ----------

(toward-of has 
  (inverse (toward))
  (instance-of (Slot)))

;;; ----------

(trait has 
  (instance-of (Property))
  (domain (Organism))
  (range (Value))
  (inverse (trait-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(trait-of has 
  (inverse (trait))
  (instance-of (Slot)))

;;; ----------

(Trait-Scalar has 
  (superclasses (Scalar-Value))
  (instances (*submissive
              *aggressive)))

;;; ----------

(Transcribe has 
  (superclasses (Create)))

(every Transcribe has 
  (instrument ((a Tangible-Entity)))
  (object ((a Entity)))
  (result ((a Tangible-Entity)))
  (source ((a Place)))
  (destination ((a Place)))
  (add-list ((if (has-value (the destination of Self)) then ((:triple (the instrument of Self) location (the destination of Self))))))
  (del-list ((if (has-value (the source of Self)) then ((:triple (the instrument of Self) location (the source of Self)))))))

;;; ----------

(Transcription-Unit has 
  (subclasses (Gene
               Eucaryotic-Gene))
  (superclasses (DNA-Coding-Region)))

(every Transcription-Unit has 
  (has-part ((a Protein-Start-Codon))))

;;; ----------

(Transfer has 
  (subclasses (Receive
               Lose))
  (superclasses (Action))
  (required-slot (object))
  (primary-slot (agent
                 donor
                 recipient
                 instrument))
  (cmap-correspondence ((:seq object "the thing transfered")
                        (:seq agent "causer")
                        (:seq donor "donor")
                        (:seq recipient "recipient")
                        (:seq instrument "instrument")))
  (test-case ('((*Us has (instance-of (Tangible-Entity))) (*Alaska has (instance-of (Tangible-Entity))) (*Russia has (instance-of (Tangible-Entity)) (possesses (*Alaska))) (a Transfer with (donor (*Russia)) (recipient (*Us)) (object (*Alaska))) (do-and-next (thelast Transfer)) ((the is-possessed-by of *Alaska) = *Us) ((the possesses of *Russia) /= *Alaska) (not (*Alaska &? *Russia)))))
  (domain-of (donor)))

(every Transfer has 
  (object ((a Tangible-Entity)))
  (donor ((must-be-a Tangible-Entity)))
  (recipient (((must-be-a Tangible-Entity) & (if (has-value (the donor of Self)) then (excluded-values (the donor of Self))))))
  (pcs-list ((if (has-value (the donor of Self)) then (:triple (the donor of Self) possesses (the object of Self)))))
  (del-list ((if (has-value (the donor of Self)) then (:triple (the donor of Self) possesses (the object of Self)))))
  (add-list ((if (has-value (the recipient of Self)) then (:triple (the recipient of Self) possesses (the object of Self)))))
  (preparatory-step ((a Obtain with (recipient ((the donor of Self))) (object ((the object of Self)))))))

;;; ----------

(Translation-Initiation-Factor has 
  (superclasses (Regulatory-Protein)))

;;; ----------

(Traverse has 
  (superclasses (Move-Through
                 Reflexive-Cliche))
  (required-slot (agent
                  object
                  path))
  (primary-slot (source
                 destination)))

;;; ----------

(Triphosphate has 
  (superclasses (Phosphate)))

;;; ----------

(TRNA has 
  (subclasses (Procaryotic-TRNA
               Eucaryotic-TRNA))
  (superclasses (RNA-Transcript)))

(every TRNA has 
  (has-part ((a RNA-Anticodon)
             (a Amino-Acid-Binding-Region))))

;;; ----------

(TRNA-Initiator-Site has 
  (superclasses (Binding-Site)))

;;; ----------

(Tryptophan has 
  (superclasses (Nonpolar-Amino-Acid)))

;;; ----------

(Tyrosine has 
  (superclasses (Uncharged-Polar-Amino-Acid)))

;;; ----------

(UAG has 
  (superclasses (Protein-Stop-Codon)))

;;; ----------

(Ubiquinated-Protein has 
  (superclasses (Protein)))

;;; ----------

(Ubiquitin has 
  (superclasses (Regulatory-Protein)))

;;; ----------

(Ubiquitin-Binding-Enzyme has 
  (superclasses (Enzyme)))

;;; ----------

(UGA has 
  (superclasses (Protein-Stop-Codon)))

;;; ----------

(Unblock has 
  (superclasses (Unobstruct))
  (required-slot (object))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "the place blocked")
                        (:seq agent "blocker")))
  (test-case ('((*path has (instance-of (Place))) (a Block with (object (*path))) (do-and-next (thelast Block)) (exists (the Be-Blocked object-of of *path)) (a Move with (object (*car)) (path (*path))) (not (try-do (thelast Move))) (a Unblock with (object (*path))) (do-and-next (thelast Unblock)) (not (exists (the Be-Blocked object-of of *path))) (try-do (thelast Move))))))

(every Unblock has 
  (object ((a Place)))
  (defeats ((allof (the object-of of (the object of Self)) where (((the location of It) = (the object of Self)) and ((the classes of It) = Be-Blocked)))))
  (pcs-list ((:triple (the object of Self) object-of (a Be-Blocked))))
  (del-list ((forall (the defeats of Self) (:set (:triple (the object of Self) object-of It) (:triple (the object of Self) location-of It)))))
  (preparatory-step ((a Block with (location ((the object of Self))) (object ((the object of Self)))))))

;;; ----------

(Uncharged-Polar-Amino-Acid has 
  (subclasses (Tyrosine
               Threonine
               Serine
               Glutamine
               Cysteine
               Asparagine))
  (superclasses (Polar-Amino-Acid)))

;;; ----------

(Unit-of-Measurement has 
  (subclasses (UoM-Volume
               UoM-Time
               UoM-Temperature
               UoM-Mass
               UoM-Length
               UoM-Density
               UoM-Area
               Dalton))
  (superclasses (Intangible-Entity)))

;;; ----------

(Unobstruct has 
  (subclasses (Unrestrain
               Unblock
               Release
               Let-Go-Of
               Let-Fall
               Admit))
  (superclasses (Action))
  (required-slot (object))
  (primary-slot (agent
                 instrument))
  (cmap-correspondence ((:seq object "object")
                        (:seq agent "unobstructor")
                        (:seq instrument "instrument used")))
  (test-case ('((*pedestrian has (instance-of (Object))) (a Obstruct with (object (*pedestrian))) (do-and-next (thelast Obstruct)) (exists (the Be-Obstructed object-of of *pedestrian)) (a Move with (object (*car)) (path (*path))) (try-do (thelast Move)) (a Unobstruct with (object (*pedestrian))) (do-and-next (thelast Unobstruct)) (not (exists (the Be-Obstructed object-of of *pedestrian))) (try-do (thelast Move))))))

(every Unobstruct has 
  (object ((a Entity)))
  (agent ((must-be-a Living-Entity)))
  (defeats ((if (has-value (the agent of Self)) then (allof (the object-of of (the object of Self)) where (((the classes of It) = Be-Obstructed) and ((the agent of It) = (the agent of Self)))) else (allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Obstructed)))))
  (del-list ((forall (the defeats of Self) (:triple It object (the object of Self)))))
  (prepatory-action ((:default (if (has-value (the agent of Self)) then (a Move with (object ((the agent of Self))) (destination ((a Place with (is-at ((the location of (the object of Self)))))))))))))

;;; ----------

(Unrestrain has 
  (superclasses (Unobstruct))
  (required-slot (object))
  (primary-slot (agent))
  (cmap-correspondence ((:seq object "restrainee")
                        (:seq agent "agent")))
  (test-case ('((*mugger has (instance-of (Object))) (a Restrain with (object (*mugger))) (do-and-next (thelast Restrain)) (exists (the Be-Restrained object-of of *mugger)) (a Move with (object (*mugger))) (not (try-do (thelast Move))) (a Unrestrain with (object (*mugger))) (do-and-next (thelast Unrestrain)) (not (exists (the Be-Restrained object-of of *mugger))) (try-do (thelast Move))))))

(every Unrestrain has 
  (object ((a Tangible-Entity)))
  (defeats ((if (has-value (the agent of Self)) then (allof (the object-of of (the object of Self)) where (((the classes of It) = Be-Restrained) and ((the agent of It) = (the agent of Self)))) else (allof (the object-of of (the object of Self)) where ((the classes of It) = Be-Restrained)))))
  (del-list ((forall (the defeats of Self) (:triple It object (the object of Self))))))

;;; ----------

(UoM-Area has 
  (superclasses (Unit-of-Measurement))
  (instances (*square-inch
              *square-meter)))

;;; ----------

(UoM-Density has 
  (superclasses (Unit-of-Measurement))
  (instances (*grams/liter
              *kilograms/gallon)))

;;; ----------

(UoM-Length has 
  (superclasses (Unit-of-Measurement))
  (instances (*inch
              *foot
              *yard)))

;;; ----------

(UoM-Mass has 
  (superclasses (Unit-of-Measurement))
  (instances (*grams
              *kilograms)))

;;; ----------

(UoM-Temperature has 
  (superclasses (Unit-of-Measurement))
  (instances (*Farenheight
              *Celcius
              *Kelvin)))

;;; ----------

(UoM-Time has 
  (superclasses (Unit-of-Measurement))
  (instances (*day
              *month
              *year
              *hour
              *minute)))

;;; ----------

(UoM-Volume has 
  (superclasses (Unit-of-Measurement))
  (instances (*liter
              *gallon)))

;;; ----------

(Uracil has 
  (superclasses (Pyrimidine)))

;;; ----------

(Uridine has 
  (superclasses (Nucleoside)))

(every Uridine has 
  (has-part ((a Ribose)
             (a Uracil))))

;;; ----------

(Uridine-Monophosphate has 
  (superclasses (Ribonucleotide
                 Nucleoside-Monophosphate)))

;;; ----------

(Uridine-Triphosphate has 
  (superclasses (Ribonucleotide
                 Nucleoside-Triphosphate)))

;;; ----------

(UUA has 
  (superclasses (Protein-Stop-Codon)))

;;; ----------

(Valine has 
  (superclasses (Nonpolar-Amino-Acid)))

;;; ----------

(Value has 
  (subclasses (Scalar-Value
               Categorical-Value
               Cardinal-Value))
  (superclasses (Thing))
  (range-of (age
             animacy
             area
             breakability
             capacity
             color
             consistency
             density
             depth
             frequency
             height
             length
             manner
             mass
             rate
             sentience
             sex
             shape
             size
             smell
             taste
             temperature
             texture
             thickness
             trait
             volume
             wetness
             width)))

;;; ----------

(Vesicle has 
  (superclasses (Organelle)))

;;; ----------

(Viral-DNA has 
  (superclasses (Viral-Nucleic-Acid)))

(every Viral-DNA has 
  (is-part-of (DNA-Virus)))

;;; ----------

(Viral-Nucleic-Acid has 
  (subclasses (Viral-DNA))
  (superclasses (Nucleic-Acid)))

;;; ----------

(Virus has 
  (subclasses (DNA-Virus))
  (superclasses (Living-Entity)))

(every Virus has 
  (has-part ((a Protein-Coat)
             (a Viral-Nucleic-Acid with (location ((a Place with (encloses ((the location of (the Protein-Coat has-part of Self)))))))))))

;;; ----------

(Virus-Invades-Cell-Scenario has 
  (superclasses (Action)))

(every Virus-Invades-Cell-Scenario has 
  (agent ((a Virus)))
  (object ((a Cell)))
  (subevent-order ((the Attach subevent of Self)
                   (the Penetrate subevent of Self)
                   (the Release subevent of Self)
                   (the Move subevent of Self)))
  (subevent ((a Attach with (the-major-object ((the Cell object of Self))) (the-minor-object ((the Virus agent of Self))))
             (a Penetrate with (agent ((the Virus agent of Self))) (object ((the Plasma-Membrane has-part of (the Cell object of Self)))))
             (a Release with (object ((the Viral-Nucleic-Acid has-part of (the Virus agent of Self)))) (the-enclosure ((the Protein-Coat has-part of (the Virus agent of Self)))))
             (a Move with (object ((the Viral-Nucleic-Acid has-part of (the Virus agent of Self)))) (destination ((the location of (the Cytoplasm has-part of (the Cell object of Self)))))))))

;;; ----------

(Virus-Invades-Cell-Scenario-fixed has 
  (superclasses (Action)))

(every Virus-Invades-Cell-Scenario-fixed has 
  (agent ((a Virus)))
  (object ((a Cell)))
  (subevent ((a Move called "the first move" with (object ((the Virus agent of Self))) (destination ((the location of (the Cell object of Self)))))
             (a Attach with (the-major-object ((the Cell object of Self))) (the-minor-object ((the Virus agent of Self))))
             (a Penetrate with (agent ((the Virus agent of Self))) (object ((the Plasma-Membrane has-part of (the Cell object of Self)))))
             (a Release with (object ((the Viral-Nucleic-Acid has-part of (the Virus agent of Self)))) (the-enclosure ((the Protein-Coat has-part of (the Virus agent of Self)))))
             (a Move called "the second move" with (object ((the Viral-Nucleic-Acid has-part of (the Virus agent of Self)))) (destination ((the location of (the Cytoplasm has-part of (the Cell object of Self))))))))
  (subevent-order (((the Move subevent of Self) called "the first move")
                   (the Attach subevent of Self)
                   (the Penetrate subevent of Self)
                   (the Release subevent of Self)
                   ((the Move subevent of Self) called "the second move"))))

;;; ----------

(every Virus-Invades-Cell-Scenario-new has 
  (agent ((a Virus)))
  (object ((a Cell)))
  (subevent-order (((the Move subevent of Self) called "the first move")
                   (the Attach subevent of Self)
                   (the Penetrate subevent of Self)
                   (the Release subevent of Self)
                   ((the Move subevent of Self) called "the second move")))
  (subevent ((a Move called "the first move" with (object ((the Virus agent of Self))) (destination ((the location of (the Cell object of Self)))))
             (a Attach with (the-major-object ((the Cell object of Self))) (the-minor-object ((the Virus agent of Self))))
             (a Penetrate with (agent ((the Virus agent of Self))) (object ((the Plasma-Membrane has-part of (the Cell object of Self)))))
             (a Release with (object ((the Viral-Nucleic-Acid has-part of (the Virus agent of Self)))) (the-enclosure ((the Protein-Coat has-part of (the Virus agent of Self)))))
             (a Move called "the second move" with (object ((the Viral-Nucleic-Acid has-part of (the Virus agent of Self)))) (destination ((the location of (the Cytoplasm has-part of (the Cell object of Self)))))))))

;;; ----------

(VirusInvadesCell has 
  (instances (_VirusInvadesCell1)))

;;; ----------

(volume has 
  (instance-of (Property))
  (domain (Tangible-Entity))
  (range (Value))
  (range2 (Thing))
  (inverse (volume-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(volume-of has 
  (inverse (volume))
  (instance-of (Slot)))

;;; ----------

(Volume-Scalar has 
  (superclasses (Scalar-Value))
  (instances (*small
              *large)))

;;; ----------

(Volume-Scale has 
  (superclasses (Scale)))

;;; ----------

(Waste has 
  (superclasses (Substance)))

;;; ----------

(wetness has 
  (instance-of (Property))
  (domain (Tangible-Entity))
  (range (Value))
  (inverse (wetness-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-1)))

;;; ----------

(wetness-of has 
  (inverse (wetness))
  (instance-of (Slot)))

;;; ----------

(Wetness-Scalar has 
  (superclasses (Scalar-Value))
  (instances (*wet
              *sticky
              *damp
              *moist
              *dry
              *arid)))

;;; ----------

(width has 
  (instance-of (Property))
  (domain (Tangible-Entity))
  (range (Value))
  (range2 (Thing))
  (inverse (width-of))
  (fluent-status (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality (N-to-N)))

;;; ----------

(width-of has 
  (inverse (width))
  (instance-of (Slot)))

;;; ----------

(Width-Scalar has 
  (superclasses (Scalar-Value))
  (instances (*narrow
              *wide
              *thick
              *thin
              *slender
              *tenuous
              *fine)))

;;; ----------

(Width-Scale has 
  (superclasses (Scale))
  (instances (*thin-to-thick)))

;;; ----------

(_VirusInvadesCell1 has 
  (instance-of (VirusInvadesCell)))

;;; ----------


;;; ----------------------------------------
;;;	KM'S INTERNAL PARAMETER VALUES
;;; ----------------------------------------

(SETQ *KM-GENSYM-COUNTER*
 '1)
(SETQ *VISIBLE-THEORIES*
 'NIL)
(SETQ *OBJ-STACK*
 '(disjunctive-next-events parent-events subevents first-subevents prev-events next-events primitive-actions all-subevents
   Virus-Invades-Cell-Scenario-fixed Virus-Invades-Cell-Scenario-new VirusInvadesCell _VirusInvadesCell1 Virus-Invades-Cell-Scenario
   Bacterial-RNA-Transcription-Scenario *young-to-old width-of width wetness-of wetness volume-of volume *undersized-to-oversized trait-of trait
   toward-of time-of time-of-existence-of time-of-existence *thin-to-thick thickness-of thickness texture-of texture temporally-started-by
   temporally-starts temporally-overlapped-by temporally-overlaps temporally-met-by temporally-meets temporally-finished-by temporally-finishes
   temperature-of temperature taste-of taste subevent-of subevent-order-of source-of *soft-to-hard smell-of smell *small-to-large size-of size
   *short-to-tall *short-long-scale shape-of *shallow-deep-scale sex-of sex sentience-of sentience result-of region-of region recipient-of rate-of
   prevented-by is-possessed-by possesses path-of opposition-of object-of material-of material mass-of manner-of manner location-of *light-to-hefty
   length-of length is-under has-on-it is-between is-in-front-of is-at-of is-below instrument-of inhibited-by inhibits height-of height goal-of
   Condition goal function-of function frequency-of frequency *freezing-boiling-scale experiencer-of entailed-by entails enabled-by *empty-full-scale
   temporally-contains during during-condition-of *dry-to-sweet donor-of direction-of destination-of depth-of depth density-of density content-of
   consistency-of consistency color-of color *cold-hot-scale caused-by causer-of capacity-of capacity capability-of To-Be capability means-by-which
   breakability-of breakability beneficiary-of Time-Interval away-from-of area-of area animacy-of animacy agent-of age-of range2-of range2 age before
   Temporal-Interval after abuts Width-Scale *fine *tenuous *slender *wide *narrow Width-Scalar *arid *moist *damp *sticky *wet Wetness-Scalar Waste
   Volume-Scale Volume-Scalar *gallon *liter UoM-Volume *minute *hour *year *month *day UoM-Time *Kelvin *Celcius *Farenheight UoM-Temperature
   *kilograms *grams UoM-Mass *yard *foot *inch UoM-Length *kilograms/gallon *grams/liter UoM-Density *square-meter *square-inch UoM-Area Unrestrain
   Unblock Traverse Transcribe *aggressive *submissive Trait-Scalar *thick *thin Thickness-Scalar *rough *smooth Texture-Scalar Temperature-Scale
   *abnormal *normal *boiling *freezing *hot *warm *mild *cold Temperature-Scalar Taste-Scale *dry *mouth-watering *tangy *full-bodied *spicey *fruity
   *sweet *salty Taste-Scalar Take Take-Control Take-Apart Support enables experiencer Soluble-Substance Slide Size-Scale *oversized *undersized
   *gigantic *little *big *large *small *microscopic Size-Scalar the-state Shut-Out *oval *triangular *round *square Shape-Scalar between Send Secrete
   scale Ruin Restrain Replicate Repair the-part Remove Release Recognize Property the-result-type Produce Pressure aperture Portal-Covering is-over
   is-on does-not-enclose is-outside encloses is-inside is-behind is-at is-along is-above subevent-order Penetrate Obtain prepatory-action
   Neutral-Amino-Acid preparatoy-step during-condition away-from toward Move-Through prepartory-action the-portal-covering Mass-Scale *hefty *light
   Mass-Scalar Make-Contact Transfer Lose Locomotion Let-Go-Of Let-Fall Length-Scale *long Length-Scalar Leave Lariat KM-Slot Relation KM-Slot-Group
   opposition purpose Deliberate-Act Invade In-Control Perceive Identify Hold Height-Scale *tall *short *high *low Height-Scalar Move-To Go-To
   the-created-out-of Form Force Food Fluid Supply Feed direction Fall *bottom *top *right *left *back *front Face rate Exude Extrude Exit Expel
   Excrete causer time Tangible-Entity Entity Reflexive-Cliche Move-Into Enter Enhancer Emit Move-Out-Of Eject EM-Wave Helix Double-Helix beneficiary
   Give Donate Divide Move-From Relinquish Dispatch Direction Disconnect Detach Destroy Depth-Scale *deep *steep *deep-rooted *shallow Depth-Scalar
   Density-Scale *petrous *woody *hard *semihard *solid *compressible *soft Density-Scalar donor recipient Receive Deliver Unit-of-Measurement Dalton
   Create Copy intersect shape Container *boney *stony *rocky *granitic *crystalline *glassy *grainy *gritty Consistency-Scalar interrupted-by
   dcs-list prepatory-step the-connector Confine Move-Together Come-Together Come-Into-Contact Cliche Shape Categorical-Value causes Move Carry Value
   Cardinal-Value Capacity-Scale *full *empty Capacity-Scalar *unbreakable *delicate *brittle *fragile *breakable Breakability-Scalar by-means-of
   Disperse Break-Contact result Break Breach Obstruct Block Be-Touching Be-Supported Be-Shut-Out Be-Ruined Be-Restrained defeated Be-Held Be-Confined
   State Be-Broken Be-Obstructed Be-Blocked defeated-by resulting-state-of Be-Connected Be-Attached-To prevents the-through-loc the-to-loc
   the-from-loc Separator Barrier Intangible-Entity Axis resulting-state the-minor-object the-major-object Connect Attach Area-Scale *spacious *huge
   *tiny Area-Scalar Scale Age-Scale *elderly *old *middle-aged *adolescent *teenage *juvenile *young Scalar-Value Age-Scalar preparatory-step defeats
   the-enclosure Unobstruct Admit mcs-list actions subevent secondary-slot-of secondary-slot instrument Action test-case Take-In Absorb is-part-of
   Viral-Nucleic-Acid Viral-DNA Vesicle Valine Uridine Uridine-Triphosphate Uridine-Monophosphate Uracil Ubiquitin Ubiquitin-Binding-Enzyme
   Ubiquinated-Protein UUA UGA UAG Tyrosine Tryptophan Triphosphate Translation-Initiation-Factor Thymine Thymidine Thymidine-Triphosphate
   Thymidine-Monophosphate Threonine Terminator Terminator-Site Terminator-Region TRNA-Initiator-Site Spacer-DNA-Region SnRNP
   Smooth-Endoplasmic-Reticulum Sigma-Factor Serine Second-Ribonucleotide Rough-Endoplasmic-Reticulum Ribosome-Release-Factor Ribosome-Binding-Site
   Ribose Ribonucleoprotein RNA-Untranslated-Region RNA-Translated-Region RNA-Non-Coding-Region RNA-Codon RNA-Chain RNA-Cap RNA-Coding-Region
   RNA-Anticodon RNA-5-End RNA-3-End Nitrogenous-Base Proteolytic-Enzyme Protein-Stop-Codon Protein-Initiator-Codon Protein-Coding-Region Protein-Coat
   Protein-Chaperone Protein-Complex Proteasome Protease Promoter Promoter-Region Proline Procaryotic-TRNA Procaryotic-Ribosome Ribosomal-Protein
   Procaryotic-Ribosomal-Protein Procaryotic-RRNA Procaryotic-RNA-Polymerase Procaryotic-MRNA Procaryotic-DNA Procaryotic-DNA-Polymerase
   Proaryotic-RNA-Polymerase Primary-RNA-Transcript Ensemble Polyribosome Polynucleotide Polyribonucleotide Poly-A-Tail Plasma-Membrane Pinocytose
   Phospho-Diester-Bond Phenylalanine Phagocytose Peroxisome Peptidyl-Transferase Chain Peptide-Chain Pentose Particulate-Matter P-Site Object
   Organic-Substance Organic-Structure Operon Nucleus Organic-Acid content Nucleoplasm Region Nuclear-Envelope Portal Nuclear-Envelope-Pore
   Noncoding-Region Non-Transcribed-Region Nascent-Protein Monosaccharide Phosphate Monophosphate Mitochondrion Methylated-Ribonucleotide
   Methyl-Guanine Methyl-Group Methionine Polysaccharide Polypeptide RNA MRNA-Site Lysosome Lysine Leucine Isoleucine Non-Coding-Region Intron
   Intron-End-Sequence Intron-Branch-Sequence Regulatory-Region Intron-Beginning-Sequence Inorganic-Substance Inorganic-Molecule Hydrogen-Bond
   Regulatory-Protein Histone Histidine Ring-Compound Heterocyclic-Compound Guanosine Guanosine-Triphosphate Guanosine-Monophosphate Guanine
   Golgi-Body Glycine Glutamine Glutamic-Acid Genome Gene Gene-Transcript Functional-Vertebrate-MRNA-Transcript Functional-RNA-Transcript
   Functional-MRNA-Transcript Free-Ribosome Free-Nucleotide Formyl-Methionine First-Ribonucleotide Gene-Region Exon TRNA Eucaryotic-TRNA mass
   Eucaryotic-Ribosome RRNA Eucaryotic-RRNA RNA-Transcript Eucaryotic-RNA-Transcript RNA-Polymerase Eucaryotic-RNA-Polymerase MRNA Eucaryotic-MRNA
   Transcription-Unit Eucaryotic-Gene Eucaryotic-DNA Eucaryotic-DNA-Polymerase Eucaryotic-Cytoplasm Eucaryotic-Cell Organism Eucaryote Protein
   Enzyme-Complex Membrane Endoplasmic-Reticulum cmap-correspondence path source agent primary-slot-of primary-slot destination object
   required-slot-of required-slot Take-Up Endocytose E-Site Deoxythymidine-Triphosphate Deoxythymidine-Monophosphate Deoxyribose Nucleotide
   Deoxyguanosine-Triphosphate Deoxyguanosine-Monophosphate Deoxycytidine-Triphosphate Deoxycytidine-Monophosphate Deoxyadenosine-Triphosphate
   Deoxyribonucleotide Deoxyadenosine-Monophosphate Virus DNA-Virus Strand DNA-Strand-2 DNA-Strand DNA-Strand-1 Regulatory-Site DNA-Regulatory-Site
   DNA-Regulatory-Region Nucleic-Acid-Region Polymerase DNA-Polymerase DNA-Non-Coding-Region Nucleic-Acid Macromolecule DNA-Molecule DNA-Codon
   DNA-Coding-Region DNA-5-End DNA-Region DNA-3-End Cytosol Pyrimidine Cytosine Protoplasm Cytoplasm Cytidine Cytidine-Triphosphate
   Cytidine-Monophosphate Cysteine Covalent-Bond Colloid Nucleoprotein Chromosome Substance Inanimate-Object Chemical-Substance Chemical-Mixture
   Chemical-Group Chemical-Object Chemical-Bond Polar-Amino-Acid Charged-Polar-Amino-Acid Living-Entity Cell Enclosure Cell-Wall Catalytic-Enzyme
   Carboxyl-Terminal-End Carboxy-Terminal-End Organic-Molecule Carbohydrate Ribosome Bound-Ribosome Connector Bond Place Cation Base location DNA
   Bacterial-DNA Procaryote Bacteria Aspartic-Acid Uncharged-Polar-Amino-Acid Asparagine Basic-Amino-Acid Arginine Chemical-Solution Aqueous-Solution
   Enzyme Protein-Region Amino-Terminal-End Anabolic-Enzyme Amino-Acyl-TRNA-Synthetase Monomer RNA-Regulatory-Region Amino-Acid-Codon
   Amino-Acid-Binding-Region Nonpolar-Amino-Acid Alanine has-part Nucleoside Adenosine Nucleoside-Triphosphate Adenosine-Triphosphate
   Nucleoside-Monophosphate Ribonucleotide Adenosine-Monophosphate Purine Adenine Anion Amino-Acid Acidic-Amino-Acid Molecule Acid Binding-Site A-Site
   Organelle 7-Methyl-Guanosine 5prime-Untranslated-Region Sugar 5-Carbon-Sugar RNA-Region 3prime-Untranslated-Region))

(enable-classification)     ;;; (Re-enable it after restoring KB state)

;;; --- end (811 frames written) ---

