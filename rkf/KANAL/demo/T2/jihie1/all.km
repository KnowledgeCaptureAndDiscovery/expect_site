
;;
;; $Id: Air-Defense-Batallion.km,v 1.1 2002/05/22 18:43:03 kbarker Exp $
;;

(Air-Defense-Batallion has (superclasses (Military-Unit)))


;;
;; $Id: Airforce.km,v 1.1 2002/05/22 18:43:04 kbarker Exp $
;;

(Airforce has (superclasses (Military-Unit)))


;;
;; $Id: Anti-Tank-Company.km,v 1.1 2002/05/22 18:43:04 kbarker Exp $
;;

(Anti-Tank-Company has (superclasses (Military-Unit)))

(Anti-Tank-Unit has
   (superclasses (Military-Unit)))

;;
;; $Id: Army-Corps.km,v 1.2 2002/05/22 20:08:15 kbarker Exp $
;;

(Army-Corps has (superclasses (Military-Unit)))

(every Army-Corps has
   (element ((a Army-Division)))            ; may be more than one, of course
)



;;
;; $Id: Army-Division.km,v 1.3 2002/05/23 01:08:49 kbarker Exp $
;;

(Army-Division has (superclasses (Military-Unit)))

(every Army-Division has
   (element ((a Air-Defense-Batallion)
             (a Anti-Tank-Company)
             (a Artillery-Brigade called "DIVARTY")
             (a Aviation-Brigade)
             (a Self-Propelled-Artillery-Regiment)
             (a Cavalry-Squadron)
             (a Engineer-Batallion)
             (a Light-Infantry-Brigade)
             (a Mechanized-Infantry-Brigade)
             (a Tank-Brigade)
)))


;;
;; $Id: Army.km,v 1.1 2002/05/22 18:43:06 kbarker Exp $
;;

(Army has (superclasses (Military-Unit)))

(every Army has
   (element ((a Army-Corps)))            ; may be more than one, of course
)


;;
;; $Id: Artillery-Batallion.km,v 1.1 2002/05/22 18:43:07 kbarker Exp $
;;

(Artillery-Batallion has (superclasses (Military-Unit)))

(every Artillery-Batallion has
   (element ((a Artillery-Battery)))
)


;;
;; $Id: Artillery-Battery.km,v 1.1 2002/05/22 18:43:07 kbarker Exp $
;;

(Artillery-Battery has (superclasses (Military-Unit)))


;;
;; $Id: Artillery-Brigade.km,v 1.1 2002/05/22 18:43:08 kbarker Exp $
;;

(Artillery-Brigade has (superclasses (Military-Unit)))

(every Artillery-Brigade has
   (element ((a Artillery-Regiment)))
)


;;
;; $Id: Artillery-Regiment.km,v 1.1 2002/05/22 18:43:09 kbarker Exp $
;;

(Artillery-Regiment has (superclasses (Military-Unit)))

(every Artillery-Regiment has
   (element ((a Artillery-Batallion)))
)

; 
;;    $Id: Attack.km,v 1.3 2002/05/23 14:09:37 porter Exp $
;; 

(Attack has (superclasses (Action)))

(every Attack has
       (agent ((a Military-Unit))))

;;
;; $Id: Aviation-Batallion.km,v 1.1 2002/05/22 18:43:09 kbarker Exp $
;;

(Aviation-Batallion has (superclasses (Military-Unit)))


;;
;; $Id: Aviation-Brigade.km,v 1.2 2002/05/23 01:07:05 kbarker Exp $
;;

(Aviation-Brigade has (superclasses (Military-Unit)))

(every Aviation-Brigade has
   (element ((a Aviation-Batallion)))
)

; 
;;    $Id: COA-for-Attack.km,v 1.7 2002/05/27 14:14:34 porter Exp $
;; 

(Be-In-Reserve has (superclasses (State)))
(Be-Prepared has (superclasses (State)))
(Reserve has (superclasses (Role)))


(COA-for-Attack has (superclasses (COA)))
(every COA-for-Attack has-definition
       (instance-of (COA))
       (mission ((a Attack))))      

(every COA-for-Attack has
       (agent ((a Military-Unit)))
       (object ((a Military-Unit)))
       (subevent ((must-be-a Event)))

       (viewpoint 
	(
	 (a View uniquely-called "Main Attack" with 
	    (element ((must-be-a Event))))
	 (a View uniquely-called "Supporting Attack" with 
	    (element ((must-be-a Event))))
;		       Attack with 
;		       (supports ((possible-values 
;				   (the Attack subevent of Self))))))))
	 (a View uniquely-called "fire-support" with
	    (element 
	     ((must-be-a Event))))
;	 Fire with 
;			 (agent ((a Military-Unit)))
;			 (object ((a Military-Unit)))
;			 (supports ((a Event)
;				    (possible-values (the (subevent *) of Self)
;						     )))))))
	 (a View uniquely-called "Reserve" with
	    (element 
	     ((must-be-a Event))))
;	 Be-In-Reserve with 
;			 (object 
;			  ((a Military-Unit with 
;			      (plays ((a Reserve with
;					 (in-event (Self))))))))
;			 (defeated-by 
;			     ((a Activate with 
;				 (object ((the object of 
;					       ((the viewpoint of Self)
;						called "Reserve"))))
;				 (next-event 
;				  ((a Attack with
;				      (agent ((the object of 
;						   ((the viewpoint of Self)
;						    called "Reserve"))))
;				      (object ((a Military-Unit)))
;				      (subevent-of (Self))
;				      (supports ((possible-values 
;						  (the Attack subevent of Self)
;						       )))))))))))))
	 )))



; 
;;    $Id: COA.km,v 1.2 2002/05/22 18:58:51 porter Exp $
;; 

(COA has (superclasses (Action)))

(every COA has
       (agent ((a Military-Unit)))
       (mission ((a Action)))  ; (possible-values ((a Attack)(a Defend)))))
       (end-state ((a Event)))
       (subevent ((at-least 1 Event))))

(Fire-Support has (superclasses (Fire)))

(COA1-B has (superclasses (COA-for-Attack)))
(every COA1-B has
   (agent ((a Army-Division called "23rd" with
	      (element ((a Tank-Brigade called "1st")
			(a Tank-Brigade called "2nd")
			(a Tank-Brigade called "3rd")
			(a Tank-Brigade called "4th")
			(a Cavalry-Squadron called "cavalry")
			(a Aviation-Batallion called "1st-air")
			(a Aviation-Batallion called "2nd-air")
			(a Artillery-Battery called "artillery"))))))
   (object ((a Army-Division called "29th")
	    (a Place called "Jayhawk")))

   ;; The Main, Supporting, Fire-Support, and Reserve events of 
   ;; the COA.

   (viewpoint
    (
      (a View called "Main Attack" with 
	 (element (
		   ((the subevent of Self) called "Main-Attack1")
		   ((the subevent of Self) called "Main-Attack2"))))

      (a View called "Supporting Attack" with 
	 (element (
		   ((the subevent of Self) called "Holding-Attack")
		   ((the subevent of Self) called "Support-Attack"))))

      (a View called "Reserve" with
	 (element (
		   ((the subevent of Self) called "Follow-Main-Attack")
		   ((the subevent of Self) called "Reserve-2nd")
		   ((the subevent of Self) called "2nd-Prepared-To-Assist1")
		   ((the subevent of Self) called "2nd-Prepared-To-Assist2"))))
		 
      (a View called "fire-support" with
	 (element (
		   ((the subevent of Self) called "FS-Main-Attack")
		   ((the subevent of Self) called "FS-Support-Attack")
		   ((the subevent of Self) called "FS-Air-Attack")
		   ((the subevent of Self) called "FS-Assist"))))))

   (first-subevent (
	((the subevent of Self) called "Movement-of-Main-Attack")
	((the subevent of Self) called "Holding-Attack")
	((the subevent of Self) called "Follow-Main-Attack")
	((the subevent of Self) called "Reserve-2nd")
	((the subevent of Self) called "FS-Main-Attack")
	((the subevent of Self) called "FS-Support-Attack")
	((the subevent of Self) called "FS-Air-Attack")))

   ;; The Events of the COA.
   (subevent (
	      ;; Events in the Main Attack Phase.
	      (a Move called "Movement-of-Main-Attack" with
		 (destination 	(((the object of Self) called "Jayhawk")))
		 (path 		((a Place called "Axis-Blue"))) 
		 (object	(((the element of (the agent of Self)) 
				  called "3rd")
				 ((the element of (the agent of Self)) 
				  called "4th")))
		 (next-event    (((the Attack subevent of Self) called "Main-Attack1")))
		 (time		((a Time-Interval with
				    (before ((the time of 
						  ((the subevent of Self) 
						   called "Main-Attack1")))
					    )))))

	      (a Attack called "Main-Attack1" with	
		 (agent 	(((the element of (the agent of Self)) called "3rd")
                                 ((the element of (the agent of Self)) called "4th")))
		 (object	((a Military-Unit with
				    (element-of (((the object of Self) called "29th")))
				    (location   ((a Place with
						    (is-at (((the object of Self) called "Jayhawk")))))))))
		 (objective  	((a Take-Control with
				    (agent  ((the agent of 
						  ((the subevent of Self) called "Main-Attack1"))))
				    (object (((the object of Self) called "Jayhawk"))))))
		 (next-event    (((the Attack subevent of Self) called "Main-Attack2")))
		 (time		((a Time-Interval with
				    (before ((the time of
                                                  ((the subevent of Self) called "Main-Attack2"))))))))

	      (a Attack called "Main-Attack2" with	
		 (agent 	(((the element of (the agent of Self)) called "3rd")
                                 ((the element of (the agent of Self)) called "4th")))
		 (object	(((the object of Self) called "29th")))
		 (time		((a Time-Interval)))
		 (objective 	((a Destroy with
				    (object (((the object of Self) called "29th")))
				    (agent  ((the agent of
                                                  ((the subevent of Self) called "Main-Attack2"))))))))

	       ;; Event in the Supporting Attack Phase.
	       (a Attack called "Holding-Attack" with	
		  (agent 	(((the element of (the agent of Self)) called "1st")
                                 ((the element of (the agent of Self)) called "cavalry")))
		  (object 	((a Military-Unit with
                                    (element-of (((the object of Self) called "29th")))
                                    (location   ((a Place with
                                                    (is-at (((the object of Self) called "Jayhawk")))))))))
		  (next-event   (((the subevent of Self) called "Support-Attack")))
		  (prevents 	((a Move called "Assist-Flank" with
				    (object 	 ((the object of 
						       ((the subevent of Self) called "Holding-Attack"))))
				    (destination ((the location of (the object of (the objective of
						       (the prevents of 
							    ((the subevent of Self) called "Holding-Attack")))))))
				    (objective   ((a Assist with 
						     (object ((a Military-Unit with
								 (location ((a Place with
									       (east-of (((the object of Self)
											  called "Jayhawk")))))))))
						     (agent  ((the object of 
								(the prevents of
								   ((the subevent of Self) 
								    called "Holding-Attack")))))))))))
		  (time		((a Time-Interval with
                                    (temporally-overlaps 
                                      ((the time of 
					    ((the subevent of Self) called "Movement-of-Main-Attack"))
				       (the time of	
					    ((the subevent of Self) called "Main-Attack1"))))
				    (before ((the time of ((the subevent of Self) called "Support-Attack"))))))))

	       (a Attack called "Support-Attack" with
		  (agent	(((the element of (the agent of Self)) called "1st")  
                                 ((the element of (the agent of Self)) called "cavalry")))
		  (object	(((the object of Self) called "29th")))
		  (enabled-by	((the objective of 
				      ((the subevent of Self) called "Main-Attack1"))))
		  (time		((a Time-Interval with
				    (after ((the time of
						 ((the subevent of Self) called "Main-Attack1")))))))
		  (objective	((a Destroy with
				    (agent  ((the agent of 
						  ((the subevent of Self) called "Support-Attack"))))
				    (object (((the object of Self) called "29th")))))))

	       ;; The Reserve Actions.
	       (a Follow called "Follow-Main-Attack" with
		  (agent  	(((the element of (the agent of Self)) called "2nd")))
		  (object 	(((the element of (the agent of Self)) called "3rd")))
		  (next-event 	(((the subevent of Self) called "2nd-Prepared-To-Assist1")))
		  (time	  	((a Time-Interval with
			      	    (during ((the time of 
					       ((the subevent of Self) called "Movement-of-Main-Attack"))))))))

	       (a Be-In-Reserve called "Reserve-2nd" with
		  (next-event   (((the subevent of Self) called "2nd-Prepared-To-Assist1")))
		  (time   	((a Time-Interval with
                      		    (during ((the time of
                                               ((the subevent of Self) called "Movement-of-Main-Attack")))))))
		  (object (((the element of (the agent of Self)) called "2nd"))))
	       
	       (a Be-Prepared called "2nd-Prepared-To-Assist1" with
		  (object  	(((the element of (the agent of Self)) called "2nd")))
		  (base	      	((a Assist with
			            (object (((the element of (the agent of Self)) called "3rd")))
			            (agent  (((the element of (the agent of Self)) called "2nd"))))))
		  (next-event 	(((the subevent of Self) called "2nd-Prepared-To-Assist2")))
		  (time       	((a Time-Interval with
			            (during ((the time of
					       ((the subevent of Self) called "Main-Attack1"))))))))

	       (a Be-Prepared called "2nd-Prepared-To-Assist2" with
                  (object  	(((the element of (the agent of Self)) called "2nd"))) 
                  (base    	((a Assist with
                               	    (object (((the element of (the agent of Self)) called "3rd")))
                               	    (agent  (((the element of (the agent of Self)) called "2nd"))))))
                  (time    	((a Time-Interval with
                               	    (during ((the time of
                                               ((the subevent of Self) called "Main-Attack2"))))))))

	       ;; Fire Support
	       (a Fire-Support called "FS-Main-Attack"	with
		  (agent   	(((the element of (the agent of Self)) called "artillery")))
		  (supports	(((the subevent of Self) called "Main-Attack1")))
		  (time    	((a Time-Interval with
			       	    (during ((the time of 
					       ((the subevent of Self) called "Main-Attack1"))))))))

	       (a Fire-Support called "FS-Support-Attack" with
                  (agent   	(((the element of (the agent of Self)) called "artillery")))
		  (supports	(((the subevent of Self) called "Holding-Attack")))
                  (time    	((a Time-Interval with
                               	    (during ((the time of  
                                               ((the subevent of Self) called "Holding-Attack"))))))))

	       (a Attack called "FS-Air-Attack" with
		  (agent   ((the Aviation-Batallion element of (the agent of Self))))
		  (object  ((a Artillery-Battery with
			       (location   ((a Place with
					       (is-behind (((the object of Self) called "Jayhawk"))))))
			       (element-of (((the object of Self) called "29th"))))))
		  (time    ((a Time-Interval with
			       (before ((the time of 
					     ((the subevent of Self) called "Main-Attack1")))))))
		  (next-event (((the subevent of Self) called "FS-Assist")))
		  (causes  ((a Neutralize with
			       (object ((the object of 
					     ((the subevent of Self) called "FS-Air-Attack"))))))))

	       (a Fire-Support called "FS-Assist" with
		  (agent    ((the Aviation-Batallion element of (the agent of Self))))
		  (supports (((the subevent of Self) called "Main-Attack1")))
		  (time     ((a Time-Interval with
			        (temporally-starts ((the time of 
							 ((the subevent of Self) called "Main-Attack1"))))))))

)))















; stubs. UT is working on definitions for these terms.
(Assist has (superclasses (Action)))
(Fire has (superclasses (Action)))
(Follow has (superclasses (Move)))
(Neutralize has (superclasses (Action)))
(east-of has (instance-of (Slot)))
(element has (inverse (element-of)))


(COA1 has (superclasses (COA-for-Attack)))
(every COA1 has
   (agent ((a Army-Division called "23rd" with
	      (element ((a Tank-Brigade called "1st")
			(a Tank-Brigade called "2nd")
			(a Tank-Brigade called "3rd")
			(a Tank-Brigade called "4th")
			(a Cavalry-Squadron called "cavalry")
			(a Aviation-Batallion called "1st-air")
			(a Aviation-Batallion called "2nd-air")
			(a Artillery-Battery called "artillery"))))))
   (object ((a Army-Division called "29th")
	    (a Place called "Jayhawk")))

   ;; The Main, Supporting, Fire-Support, and Reserve events of 
   ;; the COA.

   (viewpoint
    (
      (a View called "Main Attack" with 
	 (element (
		   ((the subevent of Self) called "Main-Attack1")
		   ((the subevent of Self) called "Main-Attack2"))))

      (a View called "Supporting Attack" with 
	 (element (
		   ((the subevent of Self) called "Holding-Attack")
		   ((the subevent of Self) called "Support-Attack"))))

      (a View called "Reserve" with
	 (element (
		   ((the subevent of Self) called "Follow-Main-Attack")
		   ((the subevent of Self) called "Reserve-2nd")
		   ((the subevent of Self) called "2nd-Prepared-To-Assist1")
		   ((the subevent of Self) called "2nd-Prepared-To-Assist2"))))
		 
      (a View called "fire-support" with
	 (element (
		   ((the subevent of Self) called "FS-Main-Attack")
		   ((the subevent of Self) called "FS-Support-Attack")
		   ((the subevent of Self) called "FS-Air-Attack")
		   ((the subevent of Self) called "FS-Assist"))))))


   ;; The Events of the COA.
   (subevent (
	      ;; Events in the Main Attack Phase.
	      (a Move called "Movement-of-Main-Attack" with
		 (destination 	(((the object of Self) called "Jayhawk")))
		 (path 		((a Place called "Axis-Blue"))) 
		 (object	(((the element of (the agent of Self)) 
				  called "3rd")
				 ((the element of (the agent of Self)) 
				  called "4th")))
		 (next-event    (((the Attack subevent of Self) 
				  called "Main-Attack1")))
		 (time		((a Time-Interval with
				    (before ((the time of 
						  ((the subevent of Self) 
						   called "Main-Attack1")))
					    )))))

	      (a Attack called "Main-Attack1" with	
		 (agent 	(((the element of (the agent of Self)) called "3rd")
                                 ((the element of (the agent of Self)) called "4th")))
		 (object	((a Military-Unit with
				    (element-of (((the object of Self) called "29th")))
				    (location   ((a Place with
						    (is-at (((the object of Self) called "Jayhawk")))))))))
		 (objective  	((a Take-Control with
				    (agent  ((the agent of 
						  ((the subevent of Self) called "Main-Attack1"))))
				    (object (((the object of Self) called "Jayhawk"))))))
		 (next-event    (((the Attack subevent of Self) called "Main-Attack2")))
		 (time		((a Time-Interval with
				    (before ((the time of
                                                  ((the subevent of Self) called "Main-Attack2"))))))))

	      (a Attack called "Main-Attack2" with	
		 (agent 	(((the element of (the agent of Self)) called "3rd")
                                 ((the element of (the agent of Self)) called "4th")))
		 (object	(((the object of Self) called "29th")))
		 (time		((a Time-Interval)))
		 (objective 	((a Destroy with
				    (object (((the object of Self) called "29th")))
				    (agent  ((the agent of
                                                  ((the subevent of Self) called "Main-Attack2"))))))))

	       ;; Event in the Supporting Attack Phase.
	       (a Attack called "Holding-Attack" with	
		  (agent 	(((the element of (the agent of Self)) called "1st")
                                 ((the element of (the agent of Self)) called "cavalry")))
		  (object 	((a Military-Unit with
                                    (element-of (((the object of Self) called "29th")))
                                    (location   ((a Place with
                                                    (is-at (((the object of Self) called "Jayhawk")))))))))
		  (prevents 	((a Move called "Assist-Flank" with
				    (object 	 ((the object of 
						       ((the subevent of Self) called "Holding-Attack"))))
				    (destination ((the location of (the object of (the objective of
						       (the prevents of 
							    ((the subevent of Self) called "Holding-Attack")))))))
				    (objective   ((a Assist with 
						     (object ((a Military-Unit with
								 (location ((a Place with
									       (east-of (((the object of Self)
											  called "Jayhawk")))))))))
						     (agent  ((the object of 
								(the prevents of
								   ((the subevent of Self) 
								    called "Holding-Attack")))))))))))
		  (time		((a Time-Interval with
                                    (temporally-overlaps 
                                      ((the time of 
					    ((the subevent of Self) called "Movement-of-Main-Attack"))
				       (the time of	
					    ((the subevent of Self) called "Main-Attack1"))))
				    (before ((the time of ((the subevent of Self) called "Support-Attack"))))))))

	       (a Attack called "Support-Attack" with
		  (agent	(((the element of (the agent of Self)) called "1st")  
                                 ((the element of (the agent of Self)) called "cavalry")))
		  (object	(((the object of Self) called "29th")))
		  (enabled-by	((the objective of 
				      ((the subevent of Self) called "Main-Attack1"))))
		  (time		((a Time-Interval with
				    (after ((the time of
						 ((the subevent of Self) called "Main-Attack1")))))))
		  (objective	((a Destroy with
				    (agent  ((the agent of 
						  ((the subevent of Self) called "Support-Attack"))))
				    (object (((the object of Self) called "29th")))))))

	       ;; The Reserve Actions.
	       (a Follow called "Follow-Main-Attack" with
		  (agent  (((the element of (the agent of Self)) called "2nd")))
		  (object (((the element of (the agent of Self)) called "3rd")))
		  (time	  ((a Time-Interval with
			      (during ((the time of 
					    ((the subevent of Self) called "Movement-of-Main-Attack"))))))))

	       (a Be-In-Reserve called "Reserve-2nd" with
		  (time   ((a Time-Interval with
                              (during ((the time of
                                            ((the subevent of Self) called "Movement-of-Main-Attack")))))))
		  (object (((the element of (the agent of Self)) called "2nd"))))
	       
	       (a Be-Prepared called "2nd-Prepared-To-Assist1" with
		  (object  (((the element of (the agent of Self)) called "2nd")))
		  (base	   ((a Assist with
			       (object (((the element of (the agent of Self)) called "3rd")))
			       (agent  (((the element of (the agent of Self)) called "2nd"))))))
		  (time    ((a Time-Interval with
			       (during ((the time of
					     ((the subevent of Self) called "Main-Attack1"))))))))

	       (a Be-Prepared called "2nd-Prepared-To-Assist2" with
                  (object  (((the element of (the agent of Self)) called "2nd"))) 
                  (base    ((a Assist with
                               (object (((the element of (the agent of Self)) called "3rd")))
                               (agent  (((the element of (the agent of Self)) called "2nd"))))))
                  (time    ((a Time-Interval with
                               (during ((the time of
                                             ((the subevent of Self) called "Main-Attack2"))))))))

	       ;; Fire Support
	       (a Fire called "FS-Main-Attack"	with
		  (agent   (((the element of (the agent of Self)) called "artillery")))
		  (object  (((the element of (the agent of Self)) called "3rd")
			    ((the element of (the agent of Self)) called "4th")))
		  (time    ((a Time-Interval with
			       (during ((the time of 
					     ((the subevent of Self) called "Main-Attack1"))))))))

	       (a Fire called "FS-Support-Attack" with
                  (agent   (((the element of (the agent of Self)) called "artillery")))
                  (object  (((the element of (the agent of Self)) called "1st")
                            ((the element of (the agent of Self)) called "cavalry")))
                  (time    ((a Time-Interval with
                               (during ((the time of  
                                             ((the subevent of Self) called "Holding-Attack"))))))))

	       (a Attack called "FS-Air-Attack" with
		  (agent   ((the Aviation-Batallion element of (the agent of Self))))
		  (object  ((a Artillery-Battery with
			       (location   ((a Place with
					       (is-behind (((the object of Self) called "Jayhawk"))))))
			       (element-of (((the object of Self) called "29th"))))))
		  (time    ((a Time-Interval with
			       (before ((the time of 
					     ((the subevent of Self) called "Main-Attack1")))))))
		  (next-event (((the subevent of Self) called "FS-Assist")))
		  (causes  ((a Neutralize with
			       (object ((the object of 
					     ((the subevent of Self) called "FS-Air-Attack"))))))))

	       (a Assist called "FS-Assist" with
		  (agent   ((the Aviation-Batallion element of (the agent of Self))))
		  (object  (((the element of (the agent of Self)) called "3rd")
                            ((the element of (the agent of Self)) called "4th")))
		  (time    ((a Time-Interval with
			       (temporally-starts ((the time of 
							((the subevent of Self) called "Main-Attack1"))))))))

)))
















;;
;; $Id: Cavalry-Squadron.km,v 1.1 2002/05/22 18:43:10 kbarker Exp $
;;

(Cavalry-Squadron has (superclasses (Military-Unit)))


(Combat-Strength-Constant has
 (superclasses (Constant)))

(*annihilated has (instance-of (Combat-Strength-Constant)))

(*destroyed has (instance-of (Combat-Strength-Constant)))

(*defeated has (instance-of (Combat-Strength-Constant)))

(*neutralized has (instance-of (Combat-Strength-Constant)))

(*effective has (instance-of (Combat-Strength-Constant)))

(*full has (instance-of (Combat-Strength-Constant)))

;; 
;;    $Id: Combat-Strength-Scale.km,v 1.1 2002/05/23 01:07:47 kbarker Exp $
;; 

(Combat-Strength-Scale has
 (superclasses (Scale)))
 


;;
;; $Id: Combat-Strength-Value.km,v 1.1 2002/05/22 18:03:32 kbarker Exp $
;;


(Combat-Strength-Value has 
       (superclasses (Property-Value)))

(every Combat-Strength-Value has
   (intensity-of ((must-be-a Thing)))
   (less-than ((must-be-a Combat-Strength-Value)))
   (greater-than ((must-be-a Combat-Strength-Value)))
   (same-as ((must-be-a Combat-Strength-Value)))
)


;;
;; $Id: Engineer-Batallion.km,v 1.1 2002/05/22 18:43:11 kbarker Exp $
;;

(Engineer-Batallion has (superclasses (Military-Unit)))


;;
;; $Id: Light-Infantry-Batallion.km,v 1.1 2002/05/22 18:43:11 kbarker Exp $
;;

(Light-Infantry-Batallion has (superclasses (Military-Unit)))

(every Light-Infantry-Batallion has
   (element ((a Light-Infantry-Company)))
)


;;
;; $Id: Light-Infantry-Brigade.km,v 1.1 2002/05/22 18:43:12 kbarker Exp $
;;

(Light-Infantry-Brigade has (superclasses (Military-Unit)))

(every Light-Infantry-Brigade has
   (element ((a Light-Infantry-Regiment)))
)


;;
;; $Id: Light-Infantry-Company.km,v 1.1 2002/05/22 18:43:12 kbarker Exp $
;;

(Light-Infantry-Company has (superclasses (Military-Unit)))


;;
;; $Id: Light-Infantry-Regiment.km,v 1.1 2002/05/22 18:43:13 kbarker Exp $
;;

(Light-Infantry-Regiment has (superclasses (Military-Unit)))

(every Light-Infantry-Regiment has
   (element ((a Light-Infantry-Batallion)))
)


;;
;; $Id: Marines.km,v 1.1 2002/05/22 18:43:13 kbarker Exp $
;;

(Marines has (superclasses (Military-Unit)))


;;
;; $Id: Mechanized-Infantry-Batallion.km,v 1.1 2002/05/22 18:43:14 kbarker Exp $
;;

(Mechanized-Infantry-Batallion has (superclasses (Military-Unit)))

(every Mechanized-Infantry-Batallion has
   (element ((a Mechanized-Infantry-Company)))
)


;;
;; $Id: Mechanized-Infantry-Brigade.km,v 1.1 2002/05/22 18:43:15 kbarker Exp $
;;

(Mechanized-Infantry-Brigade has (superclasses (Military-Unit)))

(every Mechanized-Infantry-Brigade has
   (element ((a Mechanized-Infantry-Regiment)))
)


;;
;; $Id: Mechanized-Infantry-Company.km,v 1.1 2002/05/22 18:43:15 kbarker Exp $
;;

(Mechanized-Infantry-Company has (superclasses (Military-Unit)))


;;
;; $Id: Mechanized-Infantry-Regiment.km,v 1.1 2002/05/22 18:43:16 kbarker Exp $
;;

(Mechanized-Infantry-Regiment has (superclasses (Military-Unit)))

(every Mechanized-Infantry-Regiment has
   (element ((a Mechanized-Infantry-Batallion)))
)


;;
;; $Id: Military-Unit.km,v 1.3 2002/05/22 18:43:56 kbarker Exp $
;;

(Military-Unit has (superclasses (Aggregate)))


;;
;; $Id: Navy.km,v 1.1 2002/05/22 18:43:16 kbarker Exp $
;;

(Navy has (superclasses (Military-Unit)))


;;
;; $Id: Self-Propelled-Artillery-Regiment.km,v 1.1 2002/05/22 18:43:17 kbarker Exp $
;;

(Self-Propelled-Artillery-Regiment has (superclasses (Military-Unit)))


;;
;; $Id: Tank-Batallion.km,v 1.1 2002/05/22 18:43:17 kbarker Exp $
;;

(Tank-Batallion has (superclasses (Military-Unit)))

(every Tank-Batallion has
   (element ((a Tank-Company)))
)


;;
;; $Id: Tank-Brigade.km,v 1.1 2002/05/22 18:43:18 kbarker Exp $
;;

(Tank-Brigade has (superclasses (Military-Unit)))

(every Tank-Brigade has
   (element ((a Tank-Regiment)))
)


;;
;; $Id: Tank-Company.km,v 1.1 2002/05/22 18:43:18 kbarker Exp $
;;

(Tank-Company has (superclasses (Military-Unit)))


;;
;; $Id: Tank-Regiment.km,v 1.1 2002/05/22 18:43:19 kbarker Exp $
;;

(Tank-Regiment has (superclasses (Military-Unit)))

(every Tank-Regiment has
   (element ((a Tank-Batallion)))
)

;; 
;;    $Id: annihilated-full-scale.km,v 1.1 2002/05/22 18:03:31 kbarker Exp $
;; 

(*annihilated-full-scale has
 (instance-of (Combat-Strength-Scale))
 (element-type ((must-be-a Combat-Strength-Constant)))
 (members 
    ((:seq *annihilated *destroyed *defeated *neutralized *effective *full))))


;; 
;;    $Id: combat-strength.km,v 1.1 2002/05/22 18:03:33 kbarker Exp $
;; 

(combat-strength has
   (instance-of   	(Property))
   (superslots    	())
   (subslots 	  	())
   (domain        	(Entity))
   (range         	(Combat-Strength-Value))
   (scale-class         (Combat-Strength-Scale))
   (scalar-constant-class (Combat-Strength-Constant))
   (inverse 	  	(combat-strength-of))
   (fluent-status      	(*Inertial-Fluent))
   (situation-specific 	(t))
   (cardinality        	(N-to-N)))


; 
;;    $Id: end-state.km,v 1.1 2002/05/22 17:52:08 kbarker Exp $
;; 

(end-state has
   (instance-of           (Relation))
   (superslots            (objective))
   (subslots              ())
   (domain                (COA))
   (range                 (Event))
   (inverse               (end-state-of))
   (fluent-status         (*Inertial-Fluent))
   (situation-specific    (t))
   (cardinality           (N-to-N)))

; 
;;    $Id: mission.km,v 1.1 2002/05/22 17:52:08 kbarker Exp $
;; 

(mission has
   (instance-of           (Relation))
   (superslots            (objective))
   (subslots              ())
   (domain                (COA))
   (range                 (Action))
   (inverse               (mission-of))
   (fluent-status         (*Inertial-Fluent))
   (situation-specific    (t))
   (cardinality           (N-to-N)))

;; 
;;    $Id: Absorb.km,v 1.13 2002/05/31 15:59:16 kbarker Exp $ 
;; 

(Absorb has
        (superclasses 	     (Take-In))
        (required-slot       (object destination agent))
        (primary-slot 	     (origin path))
        (secondary-slot      ())
	(cmap-correspondence (
			      (:seq agent "the absorb'er")
			      (:seq object "the Fluid being absorbed")
			      (:seq destination "final location")
			      (:seq origin "original location")
			      (:seq path "the portal")
			     )))

;; Take in a fluid
(every Absorb has 
	(object ((a Fluid)))
)

(every Absorb has
  (text-active-verbseq-sg ("absorbs"))
  (text-active-verbseq-pl ("absorb"))
  (text-passive-verbseq-sg ("gets absorbed"))
  (text-passive-verbseq-pl ("get absorbed"))
)


;; nothing extra to say about contextual info
;; inherited from Move and Action
                     
(Absorb has 
       (test-case ('(
		     (*Plant has  (instance-of (Living-Entity)))
		     (*Water has  (instance-of (Fluid)))
                     (*Absorb has 
                         (instance-of (Absorb))
                         (agent (*Plant))
                         (object (*Water)))

		     (do-and-next *Absorb)
			(the text-gen of (thelast Absorb))

		     ((the is-inside of *Water) includes *Plant)
                     ((the content of *Plant) includes *Water)
                     ((the encloses of (the location of *Plant))
                           includes *Water)
))))




;; 
;;    $Id: Action.km,v 1.19 2002/03/20 17:58:02 jfan Exp $ 
;; 

(Action has
	(superclasses 	     (Event))
	(primary-slot 	     (agent object instrument))
	(secondary-slot      (subevent))   
	(cmap-correspondence (
   		   	      (:seq object "the thing Acted upon")
   		              (:seq agent "the Actor")
 		              (:seq instrument "the thing used to Act")
	   		     )))


(every Action has
;       (object  	  ((must-be-a Thing)))  ; kanal
       (instrument 	  ((must-be-a Tangible-Entity)))

;;still trying to get this one right (jarred @cs.)
       (pcs-list	  ((if(
				((has-value (the instrument of Self)) and 
				 (has-value (the purpose of (the instrument of Self)))) 
					and
				((the in-event-of of Self) is-superset-of (the purpose of (the instrument of Self)))
			      )
			then
				(:triple
					(the instrument of Self)
					object-of
					(mustnt-be-a Be-Broken)
				))))

       (preparatory-event (#|default|# 
		  	  (a Move with 
				(object      ((the agent of Self)))
				(destination ((the object of Self)))
			  )
			  (a Move with 
				(object	     ((the instrument of Self)))
				(destination ((the object of Self)))
			  )
			  )
       )
)

;; 
;;    $Id: Activate.km,v 1.10 2002/04/10 21:32:41 kbarker Exp $ 
;; 

(Activate has
  (superclasses  	(Make-Accessible))
  (required-slot 	(object))
  (primary-slot  	(agent instrument))
  (secondary-slot       ())
  (cmap-correspondence  (
			 (:seq object "The thing activated")
			 (:seq agent "The activator")
			 (:seq instrument "instrument")
			)))

(every Activate has 
  (preparatory-event (#|default|#
	(a Deactivate with
	 (object ((the object of Self)))))))


(every Activate has
  ;; agent and object inherited from Make-Accessible.
  (resulting-state ((a Be-Activated)))
  
  ;; The Pre and Post-Conditions of this Action.
  
  ;; The object must not already be activated
  (pcs-list ((forall (the object of Self)
		     (:triple 
		       It
		       object-of
		       (mustnt-be-a Be-Activated) [Activate-pcs-1]))))

  (add-list ((:triple
	       (the resulting-state of Self)
	       object
	       (the object of Self) [Activate-add-1]))))

(comment [Activate-pcs-1] (:seq (the object of Self) " must not yet be activated.")
	 "Things can't be activated if they are already active.")

(comment [Activate-add-1] (:seq (the object of Self) " becomes active.")
	 "When something is activated, it becomes active.")

(every Activate has
  (text-active-verbseq-sg ("activates"))
  (text-active-verbseq-pl ("activate"))
  (text-passive-verbseq-sg ("gets activated"))
  (text-passive-verbseq-pl ("get activated"))

  (text-argslots ((:seq base instrument site path result)))
)


;; 
;;    $Id: Add.km,v 1.13 2002/01/22 22:12:52 jarred Exp $ 
;; 

(Add has
     (superclasses        (Action))
     (required-slot       (object base))
     (primary-slot        (agent instrument))
     (secondary-slot      ())
     (cmap-correspondence (
                           (:seq agent "the adder")
                           (:seq object "the part added.")        
                           (:seq base "the thing to which the part is being added")
                           (:seq instrument "instrument of the add")
                          )))

(every Add has
	(preparatory-event (#|default|#
		(a Move with
			(object      ((the object of Self)))
			(destination ((the base of Self)))
			(agent       ((the agent of Self)))
		))))

(every Add has
  (object      ((a Tangible-Entity)))
  (base ((a Tangible-Entity)))

  ; here we're assuming the objects are not already part of the base
  ; (or that it doesn't matter that we re-add existing parts)

  (add-list    ((forall (the object of Self)
                   (:triple It is-part-of (the base of Self) [Add-add-1]))))
)

(comment [Add-add-1] (:seq (the object of Self) " is added to, and is now part of, " (the base of Self))
	 "When something is added to a base, it becomes part of the base.")

(every Add has
  (text-active-verbseq-sg ("adds"))
  (text-active-verbseq-pl ("add"))
  (text-passive-verbseq-sg ("gets added"))
  (text-passive-verbseq-pl ("get added"))
)




































;; 
;;    $Id: Admit.km,v 1.20 2002/03/29 22:20:48 kbarker Exp $ 
;; 

(Admit has
       (superclasses	    (Unobstruct))
       (required-slot       (object base))
       (primary-slot	    (agent))
       (secondary-slot      ())
       (cmap-correspondence (
			     (:seq object "object")
			     (:seq object "the enclosure")
			     (:seq agent  "admitter")
			    )))

(every Admit has
       (base   ((a Tangible-Entity
		    with
		    (plays ((a Container)))
		    ;;(in-event (Self))
		    )))
       
       (object ((a Tangible-Entity)))
       
       (defeats	((allof (the object-of of (the object of Self))  
		 	where 
			(((the base of It) = (the base of Self))
			 and ((the classes of It) = Be-Shut-Out)))))
       
       (ncs-list ((forall (the object of Self)
                          (:triple It is-inside (the base of Self) [Admit-ncs-1]))
		  ))
       
       (pcs-list ((forall (the object of Self)
			  (:triple  
			   It
			   object-of
			   (a Be-Shut-Out with (base ((the base of Self)))) [Admit-pcs-1]))))
       
       (del-list ((forall (the defeats of Self)
			  (:set
			   (:triple It object (the object of Self) [Admit-del-1])
			   (:triple It base (the base of Self) [Admit-del-2])))))
       )

(comment [Admit-ncs-1] (:seq (the object of Self) " cannot be already inside " (the base of Self))
	 "Something must be outside something else to be admitted into it.")

(comment [Admit-pcs-1] (:seq (the object of Self) " must be shut out of " (the base of Self))
	 "Only something that is shut out of something else can be admitted to it.")

(comment [Admit-del-1] (:seq (the object of Self) " is no longer shut out of " (the base of Self))
	 "An admit stops something from being shut out of something else.")

(comment [Admit-del-2] (:seq (the base of Self) " no longer shuts out " (the object of Self))
	 "An admit stops something from being shut out of something else.")


(every Admit has
  (text-active-verbseq-sg ("admits"))
  (text-active-verbseq-pl ("admit"))
  (text-passive-verbseq-sg ("gets admitted"))
  (text-passive-verbseq-pl ("get admitted"))
)


(every Admit has
       (preparatory-event (#|default|#
			  (a Shut-Out with
			     (base ((the base of Self)))
			     (object ((the object of Self))))))
)


(Admit has 
       (test-case       ('(
			   (*child has 
			    (instance-of (Object))
                            (is-outside (*cinema)))

			   (*cinema has (instance-of (Object)))
			   
			   (a Shut-Out with 
			    (object (*child))
			    (base (*cinema)))
			    
			   (do-and-next (thelast Shut-Out))
			   (the text-gen of (thelast Shut-Out))
			   (has-value (the Be-Shut-Out object-of of *child))
			   
			   (a Move-Into with 
			    (object (*child))
			    (base (*cinema)))
			   (not (try-do (thelast Move-Into)))
			   (the text-gen of (thelast Move-Into))
			   (a Admit with 
			    (object (*child))
			    (base (*cinema)))
			   
			   (do-and-next (thelast Admit))
			   (the text-gen of (thelast Admit))
			   (not
			    (has-value (the Be-Shut-Out object-of of *child)))
			   
			   (do-and-next (thelast Move-Into))
			   (the text-gen of (thelast Move-Into))
))))




(Age-Constant has
  (superclasses (Constant)))

  (*young has
    (instance-of (Age-Constant)))

  (*juvenile has
    (instance-of (Age-Constant)))
 
  (*teenage has 
    (instance-of (Age-Constant)))

  (*adolescent has
    (instance-of (Age-Constant)))

  (*middle-aged has
    (instance-of (Age-Constant)))

  (*old has
    (instance-of (Age-Constant)))

  (*elderly has
    (instance-of (Age-Constant)))


;; 
;;    $Id: Age-Scale.km,v 1.5 2001/10/09 00:54:32 jarred Exp $ 
;; 

(Age-Scale has
 (superclasses (Scale)))
 


;;
;; $Id: Age-Value.km,v 1.10 2002/03/12 14:24:32 kbarker Exp $
;;

(Age-Value has 
       (superclasses (Property-Value)))

(every Age-Value has
   (age-of ((must-be-a Entity)))
   (less-than ((must-be-a Age-Value)))
   (greater-than ((must-be-a Age-Value)))
   (same-as ((must-be-a Age-Value)))
)

(Age-Value has
   (test-case ('(
                 (Drink has (superclasses (Substance)))
                 (*Coke-cola has (instance-of (Drink))
                                (age ((a Age-Value))))
                 (*LaRoche30year has (instance-of (Drink))
                              (age
                                 ((a Age-Value with
                                     (value ((:pair 30 *year)
                                             (:pair *old Drink)
                                     ))
                                     (greater-than
                                        ((the age of *Coke-cola)))
                              ))))

                 (the value of (the age of *LaRoche30year))

                 ((the greater-than of (the age of *LaRoche30year))
                       includes (the age of *Coke-cola))
                 ((the less-than of (the age of *Coke-cola))
                       includes (the age of *LaRoche30year))
))))


;;
;;   $Id: Age.km,v 1.6 2002/05/18 17:03:39 jarred Exp $
;;

(Age has 
  (superclasses (Increase)))

(every Age has-definition
  (instance-of (Increase))
  (property (age))
)

(every Age has
   (test-case ('(
                 (*mycat has (instance-of (Object))
                             (age (*mycatsage)))
                 (*mycatsage has (instance-of (Age-Value))
                                        (value ((:pair 3 *years))))

                 (a Increase with (object (*mycat))
                                  (property (age)))

                 ((thelast Increase) isa Age)

                 (do-and-next (thelast Age))

                 ((the greater-than of (the age of *mycat))
                       includes *mycatsage)

))));; 
;;    $Id: Agent-Role.km,v 1.1 2001/09/25 19:23:06 kbarker Exp $
;; 

(Agent-Role has
       (superclasses (Role))
       (required-slot ())
       (primary-slot ())
       (secondary-slot ())
       (cmap-correspondence ())
       (test-case ()))

(every Agent-Role has
       (in-event ((must-be-a Event)))
       (played-by ((a Entity with
		      (agent-of ((the in-event of Self)))))))




;;
;;    $Id: Aggregate.km,v 1.25 2002/05/24 20:58:55 porter Exp $
;;

(Aggregate has 
	(superclasses (Entity))
	(required-slot ())
	(primary-slot (element-type element number-of-elements))
	(secondary-slot ())
	(description ("top level component for collections"))
	(cmap-correspondence ()))

(every Aggregate has
       ;; some type/class
       (element-type ((a Thing)))

       ;; Each value must be an instance of one of the element-types...
       ;; (element ((constraint ((oneof (the element-type of Self) 
       ;; where (TheValue isa It))))))

       (element ((constraint ((oneof (the element-type of Self) 
                                     where ((oneof2 (the classes of It) 
                                                    where (TheValue isa It2)
       )))))))

       (number-of-elements 
          ((if (has-value (the number-of-elements of Self))
            then (constraint 
                    ((TheValue >= (the number of (the element of Self)))))
            else ((if ((the number of (the element of Self)) > 0)
                   then (the number of (the element of Self))
                   else (NIL))))))
)

(Aggregate has
	   (test-case ('(
			 (E has (superclasses (Entity)))
			 (F has (superclasses (Entity)))
			 
			 (*a1 has 
			      (instance-of (Aggregate))
			      (element-type ((a E) (a F)))
			      (element ((a E) (a E) (a F)))
			      (number-of-elements (10)))
			 
			 (the element of *a1)
			 (the number-of-elements of *a1)
			 
			 (*a2 has 
			      (instance-of (Aggregate))
			      (element-type ((a E) (a F)))
			      (element ((a E) (a E) (a F))))
			 
			((the number-of-elements of *a2) = 3)
		  ))))




(Animacy-Constant has
 (superclasses (Constant)))

(*animate has
	(instance-of (Animacy-Constant)))

(*not-animate has
	(instance-of (Animacy-Constant)))
;;
;; $Id: Animacy-Value.km,v 1.7 2002/03/12 14:29:24 kbarker Exp $
;;

(Animacy-Value has 
       (superclasses (Property-Value)))

(every Animacy-Value has
   (animacy-of ((must-be-a Entity)))
   (same-as ((must-be-a Animacy-Value)))
)

(Area-Constant has
  (superclasses (Constant)))
  
  (*tiny has
    (instance-of (Area-Constant)))

  (*huge has
    (instance-of (Area-Constant)))	

 





;; 
;;    $Id: Area-Scale.km,v 1.5 2001/10/09 00:54:34 jarred Exp $ 
;; 

(Area-Scale has
 (superclasses (Scale)))
 


;;
;; $Id: Area-Value.km,v 1.11 2002/03/12 14:29:24 kbarker Exp $
;;

(Area-Value has 
       (superclasses (Property-Value)))

(every Area-Value has
   (area-of ((must-be-a Tangible-Entity)))
   (less-than ((must-be-a Area-Value)))
   (greater-than ((must-be-a Area-Value)))
   (same-as ((must-be-a Area-Value)))
)

(Area-Value has
   (test-case ('(
                 (Carpet has (superclasses (Object)))
                 (*LivingroomCarpet has (instance-of (Carpet))
                                (area ((a Area-Value))))
                 (*BedroomCarpet has (instance-of (Carpet))
                              (area
                                 ((a Area-Value with
                                     (value ((:pair *tiny Carpet)
                                             (:pair 20 *square-meter)
                                     ))
                                     (less-than
                                        ((the area of *LivingroomCarpet)))
                              ))))

                 (the value of (the area of *BedroomCarpet))

                 ((the less-than of (the area of *BedroomCarpet))
                       includes (the area of *LivingroomCarpet))
                 ((the greater-than of (the area of *LivingroomCarpet))
                       includes (the area of *BedroomCarpet))
))))
;; 
;;    $Id: Attach.km,v 1.22 2002/01/21 20:50:10 jarred Exp $ 
;; 

(Attach has
  (superclasses		(Action))
  (required-slot   	(object base))
  (primary-slot  	(agent))
  (secondary-slot      	())
  (cmap-correspondence 	(
		 	 (:seq base "the object being attached to")
		 	 (:seq object "the object(s) being attached")
			)))

(every Attach has
  (object       ((exactly 1 Tangible-Entity)
		 (a Tangible-Entity)))

  (base  	((exactly 1 Tangible-Entity)
		 (a Tangible-Entity)))

  (resulting-state   ((a Be-Attached-To)))

  (add-list     ((:set (:triple (Self resulting-state) object (Self object) [Attach-add-1])
		       (:triple (Self resulting-state) object (Self base) [Attach-add-2])))))

(comment [Attach-add-1] (:seq (the object of Self) " is attached to " (the base of Self))
	 "An attach causes two things to be attached to each other.")

(comment [Attach-add-2] (:seq (the base of Self) " is attached to " (the object of Self))
	 "An attach causes two things to be attached to each other.")



(every Attach has
  (text-active-verbseq-sg ("attaches"))
  (text-active-verbseq-pl ("attach"))
  (text-passive-verbseq-sg ("gets attached"))
  (text-passive-verbseq-pl ("get attached"))
)

(every Attach has
	(preparatory-event (#|default|#
		(a Make-Contact with
		   (object ((the object of Self)))
		   (base   ((the base of Self))))
		(a Detach with
		   (object ((the object of Self)))
		   (base   ((the base of Self))))

)))

(Attach has 
  (test-case ( '(
		 (*bumper has (instance-of (Object)))
		 (*sticker has (instance-of (Object)))
			    
		 (a Attach with 
		    (object (*sticker))
		    (base   (*bumper)))
		 (do-and-next (thelast Attach))
			(the text-gen of (thelast Attach)) 

		(forall (the resulting-state of (thelast Attach)) (the text-gen of It))   
		 (oneof (the Be-Attached-To object-of of *sticker)
		        where ((the object of It) includes *bumper))
		))))





;; 
;;    $Id: Barrier.km,v 1.17 2001/12/03 15:52:04 tierney Exp $ 
;; 

(Barrier has
         (superclasses 	 (Role))
         (required-slot  ())
         (primary-slot   ())
         (secondary-slot ())
         (cmap-correspondence ())
	 )

(every Barrier has
       	(in-event ((a Block with
			(object ((the location of Self))))))
       	;; this commented out for the time being because it asserts all parts of a Barrier is a Portal       
       	;;(has-region ((must-be-a Portal)))

	(played-by ((a Tangible-Entity with
			(instrument-of ((the in-event of Self))))))
       	(is-between ((:args (a Spatial-Entity)
			    (a Spatial-Entity with
		   		(abuts ((excluded-values 
			    	(the1 of (the is-between of Self))))))))))


;; 
;;    $Id: Be-Accessible.km,v 1.14 2002/04/17 19:37:36 kbarker Exp $ 
;; 

(Be-Accessible has
  (superclasses		(State))
  (required-slot 	(object))
  (primary-slot   	(base))
  (caused-by-class      (Make-Accessible))
  (defeated-by-class    (Make-Inaccessible))
  (cmap-correspondence 	((:seq object "thing accessible")
			 (:seq base "the thing the object is accessible to")
			)))

(every Be-Accessible has
  (object ((a Entity)))
  (base ((must-be-a Thing)))

  (resulting-state-of ((if (has-value (the base of Self))
			   then
			 (must-be-a Make-Accessible with
				    (object ((the object of Self)))
				    (base ((the base of Self))))
			 else
			 (must-be-a Make-Accessible with
				    (object ((the object of Self)))))))
  
  (defeated-by ((if (has-value (the base of Self))
		    then
		  (must-be-a Make-Inaccessible with
			     (object ((the object of Self)))
			     (base ((the base of Self))))
		  else
		  (must-be-a Make-Inaccessible with
			     (object ((the object of Self))))))))

(every Be-Accessible has
   (text-particle ("accessible"))
)


(Be-Accessible has (test-case ('(
				 (*Peak has (instance-of (Object)))
				 
				 (*Climber has (instance-of (Living-Entity)))
				 
				 (a Make-Inaccessible with 
				    (object (*Peak))
				    (base (*Climber)))
				 
				 (try-do-and-next (thelast Make-Inaccessible))
				 (the text-gen of (thelast Make-Inaccessible))
				
				 ;; the *Peak is inaccessible to the climber
				 
				 (has-value (the Be-Inaccessible object-of of *Peak))
				 
				 (a Make-Accessible with 
				    (object (*Peak))
				    (base (*Climber)))
				 
				 (try-do-and-next (thelast Make-Accessible))
				 (the text-gen of (thelast Make-Accessible))
 

				 (not
				  (has-value (the Be-Inaccessible object-of of *Peak)))
				 
				 ))))











;;
;;    $Id: Be-Activated.km,v 1.8 2002/04/17 19:37:37 kbarker Exp $
;;

(Be-Activated has
  (superclasses         (Be-Accessible))
  (required-slot        (object))
  (primary-slot         ())
  (caused-by-class      (Activate))
  (defeated-by-class    (Deactivate))
  (cmap-correspondence  (
                         (:seq object "the thing that's active")
                        )))

(every Be-Activated has 
       (object ((a Entity)))
)

(every Be-Activated has
   (text-particle ("activated"))
)



;; 
;;    $Id: Be-Attached-To.km,v 1.14 2002/04/17 19:37:37 kbarker Exp $ 
;; 

(Be-Attached-To has
		(superclasses   (Be-Touching))
		(required-slot  ())
		(primary-slot   (instrument))
                (caused-by-class      (Attach))
                (defeated-by-class    (Detach))
		(cmap-correspondence (
			(:seq object "the attached objects")
			(:seq instrument "the connector")
		     )))

(every Be-Attached-To has
       (object      ((exactly 2 Tangible-Entity)))
)

(every Be-Attached-To has
   (text-particle ("attached"))
)

#| 
     Be-Attached-To results from a Attach with either two objects
     or one object and one base;
     It is defeated by a Detach with either two objects or one
     object and one source;
     but all that complexity is handled in Attach and Detach -- Be-Attached-To
     always has two objects
|#



;; 
;;    $Id: Be-Blocked.km,v 1.15 2002/04/17 19:37:38 kbarker Exp $ 
;; 

(Be-Blocked has
	    (superclasses   (Be-Inaccessible))
	    (required-slot  (object))
	    (primary-slot   (instrument))
            (caused-by-class      (Block))
            (defeated-by-class    (Unblock))
	    (cmap-correspondence (
				  (:seq object "the object blocked")
				  (:seq instrument "the blockage")
				  )))


(every Be-Blocked has

       (object   ((a Spatial-Entity)))

       (resulting-state-of ((must-be-a Block with
				       (object   ((the object of Self))))))

       (defeated-by ((must-be-a Unblock with
				(object   ((the object of Self)))))))


(every Be-Blocked has
   (text-particle ("blocked"))
)


;; 
;;    $Id: Be-Broken.km,v 1.10 2002/04/17 19:37:38 kbarker Exp $ 
;; 

(Be-Broken has
	   (superclasses (State))
	   (required-slot (object))
	   (primary-slot ())
	   (secondary-slot ())
           (caused-by-class      (Break))
           (defeated-by-class    (Repair))
	   (cmap-correspondence ()))

(every Be-Broken has
       (object ((a Object)))
       (defeated-by ((must-be-a Repair with
				(object ((the object of Self))))))
       (resulting-state-of ((must-be-a Break with
				       (object ((the object of Self)))))))

(every Be-Broken has
   (text-particle ("broken"))
)


; 
;;    $Id: Be-Closed.km,v 1.16 2002/04/17 19:32:29 kbarker Exp $ 
;; 

(Be-Closed has
  (superclasses         (Be-Blocked))
  (required-slot        (object))
  (primary-slot         ())
  (secondary-slot       ())
  (caused-by-class      (Close))
  (defeated-by-class    (Open))
  (cmap-correspondence  (
                         (:seq object "path that's closed")
                        )))

(every Be-Closed has
;;With "Loose Speak", we'd like the user to be able to say that any of
;;following are objects of Be-Closed: a container, the container's portal,
;;the portal's portal-covering.  
  (object               ((exactly 1 Spatial-Entity)))
  (instrument           ((a Tangible-Entity with
                            (plays ((a Portal-Covering))))))
  (resulting-state-of   ((must-be-a Close with
                           (object ((the object of Self))))))
  (defeated-by          ((must-be-a Open with
                           (object ((the object of Self)))))))

(every Be-Closed has
   (text-particle ("closed"))
)


(Be-Closed has (test-case ()))


;; 
;;    $Id: Be-Concealed.km,v 1.11 2002/04/17 19:37:39 kbarker Exp $ 
;; 

(Be-Concealed has
		 (superclasses   (Be-Inaccessible))
		 (required-slot  (object))
		 (primary-slot   (base))
                 (caused-by-class      (Conceal))
                 (defeated-by-class    (Expose))
		 (cmap-correspondence (
				       (:seq object "the object being concealed")
				       (:seq base "the thing the object is concealed from")
				       )))

(every Be-Concealed has
       (object ((a Tangible-Entity)))
       (base ((must-be-a Thing)))
       
       (resulting-state-of ((if (has-value (the base of Self))
				then
			      (must-be-a Conceal with
					 (object ((the object of Self)))
					 (base ((the base of Self))))
			      else
			      (must-be-a Conceal with
					 (object ((the object of Self)))))))
       
       (defeated-by ((if (has-value (the base of Self))
			 then
		       (must-be-a Expose with
				  (object ((the object of Self)))
				  (base ((the base of Self))))
		       else
		       (must-be-a Expose with
				  (object ((the object of Self))))))))

(every Be-Concealed has
  (text-particle ("concealed"))

  (text-base ((if (has-value (the base of Self))
                  then ("from"))))

)




;; 
;;    $Id: Be-Confined.km,v 1.16 2002/04/17 19:37:39 kbarker Exp $ 
;; 

(Be-Confined has
  (superclasses   (Be-Obstructed))
  (required-slot  (object base))
  (primary-slot   ())
  (caused-by-class      (Confine))
  (defeated-by-class    (Release))
  (cmap-correspondence (
		  	(:seq object "the thing Being-Confined")
		   	(:seq base "the confining enclosure")
		       )))

(every Be-Confined has
  (base ((a Tangible-Entity)))

  (object   ((a Tangible-Entity with (is-inside ((the base of Self))))))
  
  (resulting-state-of ((must-be-a Confine with
				  (object ((the object of Self)))
				  (base ((the base of Self))))))
  (defeated-by ((must-be-a Release with
			   (object ((the object of Self)))
			   (base ((the base of Self))))))
)

(every Be-Confined has
   (text-particle ("confined"))
)


;; 
;;    $Id: Be-Contained.km,v 1.10 2002/06/05 17:16:17 jarred Exp $ 
;; 

(Be-Contained has
	      (superclasses (Be-Obstructed))
	      (required-slot (object))
	      (primary-slot ())
	      (secondary-slot ())
	      (caused-by-class (Move-Into))
	      (defeated-by-class (Move-Out-Of))
	      (cmap-correspondence ())
	      (test-case ()))

(every Be-Contained has
	(object ((a Tangible-Entity)))
	(base ((a Tangible-Entity)))
	(origin ((a Spatial-Entity)))
	(destination ((a Spatial-Entity))) 
	(resulting-state-of ((must-be-a Move-Into with 
				(object ((the object of Self)))
				(base ((the base of Self)))
	)))
 	(defeated-by ((must-be-a Move-Out-Of with 
				(object ((the object of Self)))
				(base ((the base of Self)))
	)))
)


(every Be-Contained has
   (text-particle ("contained"))
)



;;
;;    $Id: Be-Controlled.km,v 1.2 2002/05/30 21:26:56 kbarker Exp $
;;

(Be-Controlled has
  (superclasses         (State))
  (required-slot        (object))
  (primary-slot         ())
  (caused-by-class      (Take-Control))
  (defeated-by-class    (Take-Control))
  (cmap-correspondence  (
                         (:seq object "the thing that's controlled")
                        )))

(every Be-Controlled has 
       (object ((a Entity)))
)

(every Be-Controlled has
   (text-particle ("controlled"))
)



;; 
;;    $Id: Be-Held.km,v 1.12 2002/04/17 19:37:40 kbarker Exp $ 
;; 

(Be-Held has
  (superclasses   	(Be-Obstructed))
  (required-slot  	(object agent))
  (primary-slot   	())
  (caused-by-class      (Hold))
  (defeated-by-class    (Let-Go-Of))
  (cmap-correspondence 	(
			 (:seq object "the object being held")
			 (:seq agent "the holder")
		 	)))

; Any Move of an object in a Be-Held state must be by the agent of the 
; Be-Held and only this agent can Let-Go-Of the object.
; These constraints are encoded in Move and Let-Go-Of, but not here.

(every Be-Held has
  (agent  ((a Tangible-Entity)))
  (object ((a Tangible-Entity)))

  (resulting-state-of ((must-be-a Hold with
			 (object ((the object of Self)))
			 (agent  ((the agent of Self))))))
  (defeated-by ((must-be-a Let-Go-Of with
	         (object ((the object of Self)))
	         (agent  ((the agent of Self)))))))

(every Be-Held has
   (text-particle ("held"))
)


;; 
;;    $Id: Be-Inaccessible.km,v 1.13 2002/04/17 19:37:41 kbarker Exp $ 
;; 

(Be-Inaccessible has
		 (superclasses   (State))
		 (required-slot  (object))
		 (primary-slot   (base))
                 (caused-by-class      (Make-Inaccessible))
                 (defeated-by-class    (Make-Accessible))
		 (cmap-correspondence (
				       (:seq object "the inaccessible object")
				       (:seq base "the thing the object is inaccessible to")
				       )))

(every Be-Inaccessible has
       (object ((a Entity)))
       (base ((must-be-a Thing)))
       
       (resulting-state-of ((if (has-value (the base of Self))
				then
			      (must-be-a Make-Inaccessible with
					 (object ((the object of Self)))
					 (base ((the base of Self))))
			      else
			      (must-be-a Make-Inaccessible with
					 (object ((the object of Self)))))))
       
       (defeated-by ((if (has-value (the base of Self))
			 then
		       (must-be-a Make-Accessible with
				  (object ((the object of Self)))
				  (base ((the base of Self))))
		       else
		       (must-be-a Make-Accessible with
				  (object ((the object of Self))))))))

(every Be-Inaccessible has
   (text-particle ("inaccessible"))
)



;; 
;;    $Id: Be-Obstructed.km,v 1.11 2002/04/17 19:37:41 kbarker Exp $ 
;; 

(Be-Obstructed has
	       (superclasses   (Be-Inaccessible))
	       (required-slot  (object))
	       (primary-slot   ())
               (caused-by-class      (Obstruct))
               (defeated-by-class    (Unobstruct))
	       (cmap-correspondence (
			     (:seq object "the object being obstructed")
				     )))

(every Be-Obstructed has
       (object ((a Entity)))

       (resulting-state-of ((must-be-a Obstruct with
				       (object ((the object of Self))))))

       (defeated-by ((must-be-a Unobstruct with
				(object ((the object of Self)))))) 
       )


(every Be-Obstructed has
   (text-particle ("obstructed"))
)


;; 
;;    $Id: Be-Open.km,v 1.16 2002/04/17 19:35:41 kbarker Exp $ 
;; 

(Be-Open has
  (superclasses 	(Be-Unblocked))
  (required-slot 	(object))
  (primary-slot	 	())
  (secondary-slot 	())
  (caused-by-class      (Open))
  (defeated-by-class    (Close))
  (cmap-correspondence 	(
			 (:seq object "the thing that is open")
			)))

(every Be-Open has
;;LOOSE SPEAK what about opening the object its self, the container.
;;An example would be a zip-lock bag (Jarred)

  (object		((a Spatial-Entity with 
			    (plays ((a Portal))))))
  (resulting-state-of 	((must-be-a Open with
			   (object ((the object of Self))))))
  (defeated-by 		((must-be-a Close with
			   (object ((the object of Self)))))))

(every Be-Open has
   (text-particle ("open"))
)


(Be-Open has (test-case ()))


;; 
;;    $Id: Be-Restrained.km,v 1.10 2002/04/17 19:37:41 kbarker Exp $ 
;; 

(Be-Restrained has
	       (superclasses        (Be-Obstructed))
	       (required-slot       (object))
	       (primary-slot        ())
	       (secondary-slot      ())
               (caused-by-class      (Restrain))
               (defeated-by-class    (Unrestrain))
	       (cmap-correspondence (
		     (:seq object "the thing Being-Restrained")
				     ))
	       )

(every Be-Restrained has
       ; "object" is inherited from Be-Obstructed.
       (resulting-state-of ((must-be-a Restrain with
				       (object ((the object of Self))))))

       (defeated-by ((must-be-a Unrestrain with
				(object ((the object of Self))))))
       )

(every Be-Restrained has
   (text-particle ("restrained"))
)


;; 
;;    $Id: Be-Ruined.km,v 1.12 2002/05/16 18:17:27 kbarker Exp $ 
;; 

(Be-Ruined has
	   (superclasses (Be-Broken))
	   (required-slot ())
	   (primary-slot ())
	   (secondary-slot ())
           (caused-by-class      (Ruin))
	   (cmap-correspondence ()))

(every Be-Ruined has
       (object ((a Tangible-Entity)))
       ;; cannot bring out of Be-Ruined state what-so-ever.
       (defeated-by ((mustnt-be-a Action with
				  (object ((the object of Self))))))
       (resulting-state-of ((must-be-a Ruin with
				  (object ((the object of Self))))))
)

(every Be-Ruined has
  (text-particle ("ruined"))
)

;; 
;;    $Id: Be-Shut-Out.km,v 1.13 2002/04/17 19:37:42 kbarker Exp $ 
;; 

(Be-Shut-Out has
	     (superclasses   (Be-Obstructed))
	     (required-slot  (object base))
	     (primary-slot   ())
             (caused-by-class      (Shut-Out))
             (defeated-by-class    (Admit))
	     (cmap-correspondence (
				   (:seq object "the object shut-out")
				   (:seq base "the enclosure")
				  )))

(every Be-Shut-Out has
       (base ((a Tangible-Entity
                 with
                    (plays ((a Container)))
                    (in-event (Self))
       )))

       (object   ((a Tangible-Entity with
                     (is-outside ((the base of Self))))))

)

(every Be-Shut-Out has
  (text-particle ("shut out"))

  (text-base ((if (has-value (the base of Self))
                  then ("of"))))

)


;; 
;;    $Id: Be-Stable.km,v 1.3 2002/04/17 19:37:43 kbarker Exp $
;; 

(Be-Stable has
  (superclasses		(State))
  (required-slot 	(object))
  (primary-slot   	(base))
;  (caused-by-class      (Stabilize))              ; not sure if we want these
;  (defeated-by-class    (Destabilize))
  (cmap-correspondence 	((:seq object "stable thing")
			 (:seq base "the thing the object is stable with respect to")
			)))

(every Be-Stable has
  (object ((a Entity)))
  (base ((must-be-a Thing)))
)

(every Be-Stable has
   (text-particle ("stable"))
)



;;
;;    $Id: Be-Stored.km,v 1.11 2002/04/17 19:37:43 kbarker Exp $
;;
        
(Be-Stored has 
  (superclasses 	(Be-Contained))
  (required-slot  	(object base))
  (primary-slot   	())
  (caused-by-class      (Store))
  (defeated-by-class    (Withdraw))
  (cmap-correspondence  (
			 (:seq object "the thing stored")
			 (:seq base "the storage")
			)))

(every Be-Stored has
  (object ((a Entity)))
  (base   ((a Tangible-Entity with
	      (content ((the object of Self))) ))))

(every Be-Stored has
  (text-particle ("stored"))

  (text-base ((if (has-value (the base of Self))
                  then ("in"))))

)


;; 
;;    $Id: Be-Supported.km,v 1.11 2002/04/17 19:37:44 kbarker Exp $ 
;; 

(Be-Supported has
             (superclasses   (Be-Obstructed))
             (required-slot  (object))
             (primary-slot   (instrument))
             (caused-by-class      (Support))
             (defeated-by-class    (Let-Fall))
             (cmap-correspondence (
                                   (:seq object "the thing Being-Supported")
                                   (:seq instrument "the thing used to Support")
                                  )))


(every Be-Supported has
       (object 	   ((a Tangible-Entity)))
       (instrument ((must-be-a Tangible-Entity))))

(every Be-Supported has
   (text-particle ("supported"))
)





;; 
;;    $Id: Be-Touching.km,v 1.14 2002/04/17 19:37:44 kbarker Exp $ 
;; 

(Be-Touching has
             (superclasses   	  (State))
;;             (required-slot  	  (object))
	     (required-slot ())
             (primary-slot   	  ())
             (caused-by-class      (Make-Contact))
             (defeated-by-class    (Break-Contact))
             (cmap-correspondence (
                                   (:seq object "the things touching")
                                  )))

; when objects are in the state of Be-Touching, each object in the set
; of objects abuts some other object in the set.

(every Be-Touching has
  (object ((exactly 2 Tangible-Entity)))
)

(every Be-Touching has
   (text-particle ("touching"))
)


; test cases in Make-Contact.km

;; 
;;    $Id: Be-Unblocked.km,v 1.1 2002/04/17 19:30:14 kbarker Exp $
;; 

(Be-Unblocked has
	    (superclasses   (Be-Accessible))
	    (required-slot  (object))
	    (primary-slot   (instrument))
            (caused-by-class      (Unblock))
            (defeated-by-class    (Block))
	    (cmap-correspondence (
				  (:seq object "the object blocked")
				  (:seq instrument "the blockage")
				  )))


(every Be-Unblocked has

       (object   ((a Spatial-Entity)))

       (resulting-state-of ((must-be-a Unblock with
				       (object   ((the object of Self))))))

       (defeated-by ((must-be-a Block with
				(object   ((the object of Self)))))))


(every Be-Unblocked has
   (text-particle ("unblocked"))
)


;; 
;;    $Id: Block.km,v 1.16 2002/04/10 21:32:41 kbarker Exp $ 
;; 

(Block has
  (superclasses		(Make-Inaccessible))
  (required-slot   	(object))
  (primary-slot 	(agent instrument))
  (secondary-slot      	())
  (cmap-correspondence 	(
			 (:seq object "the place blocked")
			 (:seq agent "blocker")
			 (:seq instrument "the blockage")
			))
)

(every Block has

       (object ((a Spatial-Entity)))

       (resulting-state ((a Be-Blocked)))

       (add-list (
		  (:triple
		   (the object of Self)
		   object-of
		   (the resulting-state of Self) [Block-add-1])
                  (if (has-value (the instrument of Self))
                   then (:triple (the instrument of Self)
                                 instrument-of
                                 (the resulting-state of Self) [Block-add-2]))
       ))
)

(comment [Block-add-1] (:seq (the object of Self) " is now blocked.")
	 "A block causes a place to be blocked.")

(comment [Block-add-2] (:seq (the instrument of Self) " is used to block " (the object of Self))
	 "An instrument can be used to block a place.")

(every Block has
  (text-active-verbseq-sg ("blocks"))
  (text-active-verbseq-pl ("block"))
  (text-passive-verbseq-sg ("gets blocked"))
  (text-passive-verbseq-pl ("get blocked"))

  (text-argslots ((:seq base instrument site path result)))
)

(every Block has
       (preparatory-event (#|default|#
			  (a  Unblock with
			     (object ((the object of Self))))))
)




(Block has 
  (test-case      ('(
		     (*path1 has (instance-of (Place)))
                            
		     (a Block with 
		      (object (*path1)))
                            
		     (do-and-next (thelast Block))
                            
		     (has-value (the Be-Blocked object-of of *path1))

		     (a Move with (object (*car1))(path (*path1)))
		     (not (try-do (thelast Move)))

                     (new-situation)
                     (*pipe has (instance-of (Object)))
                     (*garbage has (instance-of (Substance)))
                     (*water has (instance-of (Fluid)))

                     (a Block with (object (*pipe)) (instrument (*garbage)))

                     (do-and-next (thelast Block))

                     (has-value (the Be-Blocked object-of of *pipe))

                     (a Move with (object (*water)) (path (*pipe)))
                     (not (try-do (thelast Move)))

                     (a Unblock with (object (*pipe)))
                     (do-and-next (thelast Unblock))

                     (not (has-value (the Be-Blocked object-of of *pipe)))
                     (not (has-value (the Be-Blocked instrument-of of *pipe)))

                     (do-and-next (thelast Move))

))))


;; 
;;    $Id: Breach.km,v 1.19 2002/01/16 19:43:23 jfan Exp $ 
;; 

(Breach has
	(superclasses 	     (Break))
	(required-slot       (object))
	(primary-slot 	     (agent result))
	(secondary-slot      ())
	(cmap-correspondence (
			      (:seq agent "the breacher")
			      (:seq object "the barrier breached")
			      (:seq result "the resulting portal")
			     )))

(every Breach has
       ;; implementing partial Role solution
       (object ((must-be-a Tangible-Entity with
			   (plays ((a Barrier))))))
       ;;(object (((a Barrier) & (a Tangible-Entity))))
       ;; required, but often not specified
       (result ((a Spatial-Entity with
		   (plays ((a Portal))))))
       
       ;; the agent of Breach is the agent in the Creation of the Portal
       (agent ((must-be-a Tangible-Entity with
			  (agent-of ((a Create with
					(result ((the result of Self)))))))))
       
       ;; the post-condition of a Breach is that a portal
       ;; in the barrier being breached is created,
       #|implementing partial Role 
       (add-list ((forall (the result of Self)
			  (:triple 
			   It
			   is-region-of
			   (the Barrier plays of (the object of Self)))))))|#
       (add-list ((forall (the result of Self)
			  (:triple
			   It
			   is-region-of
			   (the object of Self) [Breach-add-1])))))

(comment [Breach-add-1] (:seq (the result of Self) " has been created in " (the object of Self))
	 "A breach creates a portal in a barrier.")

(every Breach has
  (text-active-verbseq-sg ("breaches"))
  (text-active-verbseq-pl ("breach"))
  (text-passive-verbseq-sg ("gets breached"))
  (text-passive-verbseq-pl ("get breached"))
)


;; nothing extra to say about contextual info

(Breach has
	(test-case ('(
		      (*wall has (instance-of (Tangible-Entity)))
		      (*Breacher has (instance-of (Tangible-Entity)))
                      (*Portal has (instance-of (Spatial-Entity)))

		      ; Breach *Barrier
		      (a Breach with
		       (agent  (*Breacher))
		       (object (*wall))
		       (result (*Portal)))

		      (do-and-next (thelast Breach))
		      ; Test1: *Portal is now part of *wall
		      #| implementing partial role|#
                      ((the is-region-of of *Portal) = *wall)
		      ))))



;; 
;;    $Id: Break-Contact.km,v 1.18 2002/01/21 20:50:11 jarred Exp $ 
;; 

(Break-Contact has
  (superclasses 	(Action))	
  (required-slot 	(object base))
  (primary-slot 	(agent))
  (secondary-slot 	())
  (cmap-correspondence 	(
			 (:seq object "the things Breaking-Contact")
			 (:seq agent "the Contact-Breaker")
			)))

(every Break-Contact has
  ;; The agent is inherited from Action

  (object   ((exactly 1 Tangible-Entity)
	     (a Tangible-Entity)))

  (base     ((exactly 1 Tangible-Entity)
	     (a Tangible-Entity)))

  (defeats  ((allof (the object-of of (the base of Self))
                    where
                    (((the classes of It) = Be-Touching) and
                     ((the object of It) includes (the object of Self))))))

  (del-list ((:set (forall (the defeats of Self)
                           (:triple It object (the object of It) [Break-Contact-del-1]))
                   (:triple (the base of Self) abuts (the object of Self) [Break-Contact-del-2])
                   (:triple (the object of Self) abuts (the base of Self) [Break-Contact-del-3])
  )))
)

(comment [Break-Contact-del-1] (:seq (the object of Self) " is no longer touching " (the base of Self))
	 "A break-contact stops something from touching something else.")

(comment [Break-Contact-del-2] (:seq (the base of Self) " no longer abuts " (the object of Self))
	 "A break-contact stops something from touching something else.")
	 
(comment [Break-Contact-del-3] (:seq (the object of Self) " no longer abuts " (the base of Self))
	 "A break-contact stops something from touching something else.")


(every Break-Contact has
  (text-active-verbseq-sg ("breaks contact between"))
  (text-active-verbseq-pl ("break contact between"))
  (text-passive-verbseq-sg ("breaks contact"))
  (text-passive-verbseq-pl ("break contact"))

  (text-base ((if (has-value (the base of Self))
                  then ("with"))))

)

(every Break-Contact has
  (preparatory-event (#|default|#
	(a Detach with
	   (object ((the object of Self)))
	   (base   ((the base of Self))))
	(a Make-Contact with
	   (object ((the object of Self)))
	   (agent  ((the agent of Self)))
	   (base   ((the base of Self))))
)))



;; test cases in Make-Contact

;; 
;;    $Id: Break.km,v 1.12 2002/01/21 17:39:53 jarred Exp $ 
;; 

(Break has
       (superclasses   (Action))
       (required-slot  (object))
       (primary-slot   (agent instrument by-means-of))
       (secondary-slot ())
       (cmap-correspondence (
			     (:seq object "the thing broken")
			     (:seq agent "the breaker")
			     (:seq by-means-of "the precipitating event"))))

(every Break has 
       (object ((a Tangible-Entity)))
       (resulting-state ((a Be-Broken)))
       (add-list ((:triple
		   (the resulting-state of Self)
		   object
		   (the object of Self) [Break-add-1]))))

(comment [Break-add-1] (:seq (the object of Self) " is broken.")
	 "A break causes something to be broken.")

(every Break has
  (text-active-verbseq-sg ("breaks"))
  (text-active-verbseq-pl ("break"))
  (text-passive-verbseq-sg ("gets broken"))
  (text-passive-verbseq-pl ("get broken"))
)


;; nothing extra to say about contextual info

(Break has 
       (test-case     ('(
			 (*Vase has (instance-of (Object)))
			 
			 (a Break with (object (*Vase)))

			 (do-and-next (thelast Break))

                         (the text-gen of (thelast Break))

                         (the text-gen of 
                              (the resulting-state of (thelast Break)))

			 (has-value (the Be-Broken object-of of *Vase))

			 ))))





(Breakability-Constant has
  (superclasses (Constant)))
   
  (*breakable has
    (instance-of (Breakability-Constant)))

  (*fragile has
    (instance-of (Breakability-Constant)))

  (*brittle has
    (instance-of (Breakability-Constant)))

  (*delicate has
    (instance-of (Breakability-Constant)))

 (*unbreakable has
    (instance-of (Breakability-Constant)))
                                        
;; 
;;    $Id: Breakability-Scale.km,v 1.5 2001/10/09 00:54:37 jarred Exp $ 
;; 

(Breakability-Scale has
 (superclasses (Scale)))
 


;;
;; $Id: Breakability-Value.km,v 1.9 2002/03/12 14:29:25 kbarker Exp $
;;

(Breakability-Value has 
       (superclasses (Property-Value)))

(every Breakability-Value has
   (breakability-of ((must-be-a Tangible-Entity)))
   (less-than ((must-be-a Breakability-Value)))
   (greater-than ((must-be-a Breakability-Value)))
   (same-as ((must-be-a Breakability-Value)))
)

(Breakability-Value has
   (test-case ('(
                 (Glass has (superclasses (Substance)))
                 (Stone has (superclasses (Substance)))
                 (*window has (instance-of (Glass))
                                (breakability 
				 ((a Breakability-Value with
				     (value ((:pair *fragile Substance)))))
				))
                 (*granite has (instance-of (Stone))
                                (breakability
                                 ((a Breakability-Value with
                                     (value ((:pair *brittle Substance)
                                     ))
                                     (less-than
                                        ((the breakability of *window)))
                              ))))

                 (the value of (the breakability of *granite))

                 ((the less-than of (the breakability of *granite))
                       includes (the breakability of *window))
                 ((the greater-than of (the breakability of *window))
                       includes (the breakability of *granite))
))))


;
;   $Id: Brighten.km,v 1.5 2002/05/18 17:03:40 jarred Exp $
;

(Brighten has 
  (superclasses (Increase)))

(every Brighten has-definition
  (instance-of (Increase))
  (property (brightness))
)

(every Brighten has
   (test-case ('(
                 (*mylamp has (instance-of (Object))
                             (brightness (*mylampsbrightness)))
                 (*mylampsbrightness has (instance-of (Brightness-Value))
                                        (value ((:pair *blinding Object))))

                 (a Increase with (object (*mylamp))
                                  (property (brightness)))

                 ((thelast Increase) isa Brighten)

                 (do-and-next (thelast Brighten))

                 ((the greater-than of (the brightness of *mylamp))
                       includes *mylampsbrightness)

))))
(Brightness-Constant has
  (superclasses (Constant)))
   
  (*blinding has
    (instance-of (Brightness-Constant)))

  (*bright has
    (instance-of (Brightness-Constant)))

  (*dim has
    (instance-of (Brightness-Constant)))

  (*dark has
    (instance-of (Brightness-Constant)))
;;
;; $Id: Brightness-Value.km,v 1.11 2002/03/12 14:29:25 kbarker Exp $
;;

(Brightness-Value has 
       (superclasses (Property-Value)))

(every Brightness-Value has
   (brightness-of ((must-be-a Tangible-Entity)))
   (less-than ((must-be-a Brightness-Value)))
   (greater-than ((must-be-a Brightness-Value)))
   (same-as ((must-be-a Brightness-Value)))
)


(Brightness-Value has
   (test-case ('(
                 (Star has (superclasses (Tangible-Entity)))
		 (Lightbulb has (superclasses (Tangible-Entity)))
                 (*whitegiant has (instance-of (Drink))
                                (brightness ((a Brightness-Value))))
                 (*browndwarf has (instance-of (Drink))
                              (brightness
                                 ((a Brightness-Value with
                                     (value ((:pair *bright Lightbulb)
                                             (:pair *dim Star)
                                     ))
                                     (less-than
                                        ((the brightness of *whitegiant)))
                              ))))

                 (the value of (the brightness of *browndwarf))

                 ((the less-than of (the brightness of *browndwarf))
                       includes (the brightness of *whitegiant))
                 ((the greater-than of (the brightness of *whitegiant))
                       includes (the brightness of *browndwarf))
))))

(Capacity-Constant has
  (superclasses (Constant)))

  (*none has
    (instance-of (Capacity-Constant)))

  (*unlimited  has
    (instance-of (Capacity-Constant)))

  (*roomy has
	(instance-of (Capacity-Constant)))

  (*capacious has
	(instance-of (Capacity-Constant)))



                                       





;; 
;;    $Id: Capacity-Scale.km,v 1.5 2001/10/09 00:54:40 jarred Exp $ 
;; 

(Capacity-Scale has
 (superclasses (Scale)))

;;
;; $Id: Capacity-Value.km,v 1.10 2002/03/12 14:29:25 kbarker Exp $
;;

(Capacity-Value has 
       (superclasses (Property-Value)))

(every Capacity-Value has
   (capacity-of ((must-be-a Tangible-Entity)))
   (less-than ((must-be-a Capacity-Value)))
   (greater-than ((must-be-a Capacity-Value)))
   (same-as ((must-be-a Capacity-Value)))
)

(Capacity-Value has
   (test-case ('(
                 (*myBigBox has (instance-of (Object))
                                (capacity ((a Capacity-Value))))
                 (*myLittleBox has (instance-of (Object))
                              (capacity
                                 ((a Capacity-Value with
                                     (value ((:pair *roomy Object)
                                     ))
                                     (less-than
                                        ((the capacity of *myBigBox)))
                              ))))

                 (the value of (the capacity of *myLittleBox))

                 ((the less-than of (the capacity of *myLittleBox))
                       includes (the capacity of *myBigBox))
                 ((the greater-than of (the capacity of *myBigBox))
                       includes (the capacity of *myLittleBox))
))))



;; 
;;    $Id: Carry.km,v 1.12 2001/09/20 18:27:33 kbarker Exp $ 
;; 

(Carry has
       (superclasses 	    (Move))
       (required-slot  	    (agent object))
       (primary-slot 	    (origin destination path))
       (secondary-slot 	    ())
       (cmap-correspondence (
			     (:seq agent "the carrier")
			     (:seq object "the thing carried")
			     (:seq origin "original location")
			     (:seq destination "final location")
			     (:seq path "through")
			    )))

(every Carry has

  ; origin, destination, and path defined by Move
  (agent 	  ((a Tangible-Entity)))
  (object 	  ((a Tangible-Entity)))

  (first-subevent ((:set (the Locomotion subevent of Self)
			 (the Hold subevent of Self))))	
  (subevent 	  ((a Locomotion with
                      (agent         ((the agent of Self)))
                      (origin        ((the origin of Self)))
                      (destination   ((the destination of Self)))
		      (time ((a Time-Interval with 
				(during ((the time of
					      (the Hold subevent of
						   Self))))))))
		   (a Hold with
		      (agent	((the agent of Self)))
		      (object	((the object of Self))))))
)


(every Carry has
  (text-active-verbseq-sg ("carries"))
  (text-active-verbseq-pl ("carry"))
  (text-passive-verbseq-sg ("gets carried"))
  (text-passive-verbseq-pl ("get carried"))
)


;; nothing extra to say about contextual info
;; inherited from Move and Action

(Carry has
  (test-case ('(
		(*Carry has
		  (instance-of (Carry))
		  (agent  (*agent))
		  (object (*object)))
		(the subevent of *Carry)
		(the text-gen of (thelast Carry))
	       ))))
	  




;; 
;;    $Id: Chemical-Energy.km,v 1.1 2002/05/31 16:29:25 kbarker Exp $ 
;; 

(Chemical-Energy has
		 (superclasses (Energy))
		 (required-slot ())
		 (primary-slot ())
		 (secondary-slot ())
		 (description ("Energy produced by or stored in chemical 
                                properties or property differentials, such as
                                chemical bonds, such as charge gradients, 
                                density gradients, etc.  Souther. "))
		 (cmap-correspondence ()))



;; 
;;    $Id: Chemical-Entity.km,v 1.1 2002/05/31 16:29:25 kbarker Exp $ 
;; 

(Chemical-Entity has
	     (superclasses (Tangible-Entity))
	     (required-slot ())
	     (primary-slot ())
	     (secondary-slot ())
	     (cmap-correspondence ())
             (description ("Any molecule, atom, substance, or phenomenon (e.g,
                            a chemical bond) which has chemical properties.
                            Souther. "))
	     (test-case ()))




;; 
;;    $Id: Chemical-Object.km,v 1.1 2002/05/31 16:29:26 kbarker Exp $ 
;; 

(Chemical-Object has
	      (superclasses (Inanimate-Object Chemical-Entity))
	      (required-slot ())
	      (primary-slot ())
	      (secondary-slot ())
              (description ("Any object which is typically described in terms
                             of its chemical properties.  Includes atoms,
                             molecules, and chemical groups like methyl group.
                             Souther. "))
	      (cmap-correspondence ()))

;(every Chemical-Object has 
;       (material ((a Chemical-Substance)))
;       )

;; 
;;    $Id: Chemical-Substance.km,v 1.1 2002/05/31 16:29:26 kbarker Exp $ 
;; 

(Chemical-Substance has
	     (superclasses (Substance Chemical-Entity))
	     (required-slot ())
	     (primary-slot ())
	     (secondary-slot ())
	     (cmap-correspondence ())
             (description ("A substance composed of atoms or molecules.
                            Souther. "))
	     (test-case ()))

(every Chemical-Substance has
       (element-type ((a Chemical-Object)))
       )


;; 
;;    $Id: Cliche.km,v 1.4 2001/11/29 20:49:57 kbarker Exp $ 
;; 

; A Cliche is a set of axioms pertinent to numerous components.  See 
; Ken Barker's working note on Cliches:
;   http://www.cs.utexas.edu/users/kbarker/working_notes/cliches.html
;
; We are still exploring ways of implementing Cliches using KM's 
; compositions.  Meanwhile, we simply overload the inheritance 
; mechanism.

(Cliche has (superclasses (KM-Class)))





;; 
;;    $Id: Close.km,v 1.22 2002/04/17 19:32:30 kbarker Exp $ 
;; 

(Close has
  (superclasses 	(Block))
  (required-slot        (object))
  (primary-slot         (agent instrument))
  (secondary-slot       ())
  (cmap-correspondence  (
                         (:seq object "portal through the barrier")
                         (:seq agent "closer")
                         (:seq instrument "portal covering")
                        )))

(every Close has
  (object  ((a Spatial-Entity with
	       (plays ((a Portal))))))
  (instrument  ((a Tangible-Entity)))
  (resulting-state  ((a Be-Closed)))

  ;; The State that is defeated.
  (defeats   ((allof (the object-of of (the object of Self))
                     where
	 	     ((the classes of It) = Be-Open))))

  ;; The following are the pre- and post-preconditions.
  (pcs-list  ((:triple
		(the object of Self)
		object-of
		(mustnt-be-a Be-Closed) [Close-pcs-1])
	      (:triple
		(the object of Self)
		object-of
		(a Be-Open) [Close-pcs-2])
	      (:triple
		(the object of Self)
		object-of
		(mustnt-be-a Be-Blocked) [Close-pcs-3])
  ))

  (add-list  ((:triple
		(the resulting-state of Self)
		object
		(the object of Self) [Close-add-1])
	      (:triple
	        (the resulting-state of Self)
	        instrument
	        (the instrument of Self) [Close-add-2])
              (:triple
                (the instrument of Self)
                plays
                (a Portal-Covering with 
                   (in-event ((the resulting-state of Self)))) [Close-add-3])
  ))

  (del-list  ((forall (the defeats of Self)
		(:triple It object (the object of Self) [Close-del-1]))
              (:triple
                (the object of Self)
                plays
                (the Portal plays of (the object of Self)) [Close-del-2])
  ))

)

(comment [Close-pcs-1] (:seq (the object of Self) " cannot be closed already.")
	 "Something that is already closed cannot be closed again.")

(comment [Close-pcs-2] (:seq (the object of Self) " must be open.")
	 "Something must be open if it is to be closed.")

(comment [Close-pcs-3] (:seq (the object of Self) " cannot be blocked.")
	 "Something cannot be blocked if it is to be closed.")

(comment [Close-add-1] (:seq (the object of Self) " is closed.")
	 "A close causes something to be closed.")

(comment [Close-add-2] (:seq (the object of Self)
                              " is now blocked by " (the instrument of Self))
	 "An opening is closed by blocking it with something.")

(comment [Close-add-3] (:seq (the instrument of Self)
                              " is now blocking " (the object of Self))
	 "An opening is closed by blocking it with something.")

(comment [Close-del-1] (:seq (the object of Self) " is no longer open.")
	 "A close stops something from being open.")

(comment [Close-del-2] (:seq (the object of Self) " is no longer a portal.")
	 "A close stops something from being a portal through a barrier.")

(every Close has
  (text-active-verbseq-sg ("closes"))
  (text-active-verbseq-pl ("close"))
  (text-passive-verbseq-sg ("gets closed"))
  (text-passive-verbseq-pl ("get closed"))

  (text-argslots ((:seq base instrument site path result)))
)

(every Close has 
  (preparatory-event (#|default|#
	(a Open with 
	   (object 	((the object of Self)))
	   (base   	((the base of Self)))
	   (agent  	((the agent of Self)))
	   (instrument  ((the instrument of Self))))
	(a Unblock with
	   (object	((the object of Self))))

)))


;; The Test cases for Close are incorporated with that 
;; of Open.
(Close has (test-case ()))

;; 
;;    $Id: Collide.km,v 1.20 2001/09/20 18:27:34 kbarker Exp $ 
;; 

(Collide has
  (superclasses   	(Make-Contact))
  (required-slot  	(object))
  (primary-slot   	(agent base location))
  (cmap-correspondence 	(
			 (:seq object "the thing(s) Collided")
			 (:seq agent  "the Collider")
			 (:seq base "the thing Collided with")
			 (:seq location "the place of the collision")
			 (:seq intensity "the intensity of the collison")
			)))

;; Collide is a Make-Contact where the intensity is *strong. This
;; is the only additional axiom we need to specify.

(every Collide has (intensity (*strong)))

(every Collide has
  (text-active-verbseq-sg ("causes to collide"))
  (text-active-verbseq-pl ("cause to collide"))
  (text-passive-verbseq-sg ("collides"))
  (text-passive-verbseq-pl ("collide"))
)


(Collide has
  (test-case ('(
		 (*side-walk  has (instance-of (Place)))
		 (*Semi-Truck has (instance-of (Tangible-Entity)))
		 (*Mini-Van has 
		    (instance-of (Tangible-Entity))
		    (location    (*side-walk)))

		 (a Collide with
		    (object 	 (*Mini-Van))
		    (base	 (*Semi-Truck))
		    (location 	 (*side-walk)))
		 (do-and-next (thelast Collide))
		(the text-gen of (thelast Collide))
		
		 (allof (the Be-Touching object-of of *Mini-Van)
		 	where
			((the object of It) includes *Semi-Truck))
                 ((the abuts of *Mini-Van) includes *Semi-Truck)
	       )))
)
		    


(Color-Constant has
 (superclasses (Constant)))

  (*red has
	(instance-of (Color-Constant)))

  (*blue has
	(instance-of (Color-Constant)))

  (*yellow has
	(instance-of (Color-Constant)))

  (*green has
	(instance-of (Color-Constant)))

  (*orange has
	(instance-of (Color-Constant)))

  (*purple has
	(instance-of (Color-Constant)))
 
  (*pink has
	(instance-of (Color-Constant)))

   (*brown has
	(instance-of (Color-Constant)))

  (*black has
	(instance-of (Color-Constant)))

  (*white has
	(instance-of (Color-Constant)))
 
  (*tan has
	(instance-of (Color-Constant)))

;;
;; $Id: Color-Value.km,v 1.10 2002/03/16 00:15:24 jarred Exp $
;;

(Color-Value has 
       (superclasses (Property-Value)))

(every Color-Value has
   (color-of ((must-be-a Tangible-Entity)))
   (same-as ((must-be-a Color-Value)))
   (text-phrase ((the value of Self)))
)
;; 
;;    $Id: Come-Together.km,v 1.16 2001/09/20 18:27:35 kbarker Exp $ 
;; 

(Come-Together has
  (superclasses 	(Action))
  (required-slot    	(object destination))
  (primary-slot  	(subevent))
  (cmap-correspondence  (
			 (:seq object "the things moved")
			 (:seq destination "moved to")
			 (:seq subevent "the Move of each object")
			)))

(every Come-Together has
  (object         ((at-least 2 Tangible-Entity)
		   (a Tangible-Entity)
                   (a Tangible-Entity)))
  (destination    ((exactly 1 Spatial-Entity)
                   (a Spatial-Entity)))	
  
  ;; The subevents of this scenario
  (first-subevent ((the subevent of Self)))
  (subevent       ((forall (the object of Self)
		     (a Go-To with
			(object      (It))
			(agent 	     (It))
			(destination ((the destination of Self)))
			(path ((if (has-value (the path of Self)) 
				   then
				   (the path of Self))))
			(away-from ((if (has-value (the away-from of Self)) 
					then
					(the away-from of Self))))
			(toward ((if (has-value (the toward of Self)) 
				     then
				     (the toward of Self))))
			(origin ((if (has-value (the origin of Self)) 
				     then
				     (the origin of Self))))
			)))))

(every Come-Together has
  (text-active-verbseq-sg ("causes to come together"))
  (text-active-verbseq-pl ("cause to come together"))
  (text-passive-verbseq-sg ("comes together"))
  (text-passive-verbseq-pl ("come together"))
)


(Come-Together has 
  (test-case ( '(
		 (*safety has (instance-of (Object)))  
                 (*running-back has (instance-of (Object)))
                 (*goal-line has (instance-of (Place)))

                 ; the two players converge at goal line
                 (a Come-Together with
                        (object (*running-back *safety))
                        (destination (*goal-line)))   
                 (do-script (thelast Come-Together))
		 (the text-gen of (thelast Come-Together))
		 ; Test1: afterwards, that's where they're located
		 ((the location of *safety) = *goal-line)
		 ((the location of *running-back) = *goal-line)

		 ; Test2: Each subevent was a move to
                 ;        involing the object.
                 (forall (the subevent of (thelast Come-Together))
                    ((It isa Go-To) and
                     ((:set *running-back *safety) includes 
		      (the object of It))))

                 (new-situation)

                 (*dog has (instance-of (Object)))
                 (*cat has (instance-of (Object)))
                 (*rat has (instance-of (Object)))

                 (*trap has (instance-of (Object)))

                 (a Come-Together with
                    (object (*dog *cat *rat))
                    (destination (*trap)))
                 (do-script (thelast Come-Together))
		 (the text-gen of (thelast Come-Together))

		 ((the location of *dog) = (the location of *trap))
		 ((the location of *cat) = (the location of *trap))
		 ((the location of *rat) = (the location of *trap))

                 ((the location-of of 
                       (the location of 
                            (the destination of (thelast Come-Together))))
                  is-superset-of (:set *dog *cat *rat *trap))

))))



;; 
;;    $Id: Conceal.km,v 1.16 2002/04/10 21:32:43 kbarker Exp $ 
;; 

(Conceal has
  (superclasses 	(Make-Inaccessible))
  (required-slot 	(object)) 
  (primary-slot  	(agent base))
  (secondary-slot 	())
  (cmap-correspondence  (
			 (:seq object "the thing Concealed")
			 (:seq base "the thing to which the object is Concealed")
			 (:seq agent "the Concealer")
			)))

(every Conceal has
  (object 	   ((a Tangible-Entity)))
  (base 	   ((must-be-a Thing)))
  (agent  	   ((must-be-a Entity)))
  (resulting-state ((a Be-Concealed)))

  (add-list ((if (has-value (the base of Self))
		 then
		 (:triple
		   (the resulting-state of Self)
		   base
		   (the base of Self) [Conceal-add-1]))
	     (:triple
	       (the resulting-state of Self)
	       object 
	       (the object of Self) [Conceal-add-2]))))


(comment [Conceal-add-1] (:seq (the base of Self) " is concealing " (the object of Self))
	 "A conceal causes something to be concealed by something else.")

(comment [Conceal-add-2] (:seq (the object of Self) " is concealed by " (the base of Self))
	 "A conceal causes something to be concealed by something else.")

(every Conceal has
	(preparatory-event (#|default|#
		(a Expose with
		   (object ((the object of Self)))
		   (agent  ((the agent of Self)))
		   (base   ((the base of Self)))
))))



(every Conceal has
  (text-active-verbseq-sg ("conceals"))
  (text-active-verbseq-pl ("conceal"))
  (text-passive-verbseq-sg ("gets concealed"))
  (text-passive-verbseq-pl ("get concealed"))

  (text-base ((if (has-value (the base of Self))
                  then ("from"))))

  (text-argslots ((:seq base instrument site path result)))

)


;;TODO: contextual info       

;; TODO: add test cases

;;
;;    $Id: Conduit.km,v 1.3 2001/12/03 15:38:06 tierney Exp $
;;

(Conduit has
            (superclasses (Role))
            (required-slot ())
            (primary-slot ())
            (secondary-slot ())
            (cmap-correspondence ())
            (test-case ()))

(every Conduit has
       (in-event ((a Move)))
       (played-by ((a Spatial-Entity with
                      (path-of ((the in-event of Self)))))))


;; 
;;    $Id: Confine.km,v 1.16 2002/01/22 22:12:53 jarred Exp $ 
;; 

(Confine has
  (superclasses		(Obstruct))
  (required-slot   	(object base))
  (primary-slot 	(agent location))
  (secondary-slot      	())
  (cmap-correspondence 	(
			 (:seq object "the object Confined")
			 (:seq agent "the Confiner")
			 (:seq location "the place where the Confine occurs")
			))
)

(every Confine has
  (preparatory-event (#|default|#
	(a Admit with
	   (object ((the object of Self)))
	   (base   ((the location of Self))))
	(a Open with
	   (object ((the location of Self))))
	(a Enter with
	   (object ((the object of Self)))
	   (base   ((the location of Self))))
)))
	

(every Confine has

  ; Some local slots.
  (resulting-state	((a Be-Confined)))
  (base 	((a Tangible-Entity)))

  (object   ((a Tangible-Entity)))

  (pcs-list ((:triple
               (the object of Self)
               is-inside
               (the base of Self) [Confine-pcs-1])))

  (add-list ((:triple 
	       (the resulting-state of Self) 
	       object 
	       (the object of Self) [Confine-add-1])
	     (:triple 
	       (the resulting-state of Self) 
	       base 
	       (the base of Self) [Confine-add-2])))
)


(comment [Confine-pcs-1] (:seq (the object of Self) " must be inside " (the base of Self))
	 "A thing must be inside something else before it can be confined in it.")

(comment [Confine-add-1] (:seq (the object of Self) " is confined in " (the base of Self))
	 "A confine causes something to be confined in something else.")

(comment [Confine-add-2] (:seq (the base of Self) " is confining " (the object of Self))
	 "A confine causes something to be confined in something else.")



(every Confine has
  (text-active-verbseq-sg ("confines"))
  (text-active-verbseq-pl ("confine"))
  (text-passive-verbseq-sg ("gets confined"))
  (text-passive-verbseq-pl ("get confined"))
)


;; nothing extra to say about contextual info

(Confine has 
	 (test-case  ('(
			(*prisoner has
			  (instance-of (Object)))
			(*prison-cell has
			  (instance-of (Tangible-Entity)))

			(a Confine with 
			   (object (*prisoner))
			   (base (*prison-cell)))

			(not (has-value 
                               (the Be-Confined object-of of *prisoner)))

			(do-and-next (thelast Confine))
			(the text-gen of (thelast Confine))

			(has-value (the Be-Confined object-of of *prisoner))			

			(a Move-Out-Of with
                            (object 	   (*prisoner))
                            (base          (*prison-cell)))

			(not (try-do (thelast Move-Out-Of)))

		        (the text-gen of (thelast Move-Out-Of))
			(a Release with
			   (object (*prisoner))
			   (base (*prison-cell)))

			(do-and-next (thelast Release))
			(the text-gen of (thelast Release))
			(not (has-value 
                               (the Be-Confined object-of of *prisoner)))

			(do-and-next (thelast Move-Out-Of))

			((the is-outside of *prisoner) includes *prison-cell)
		      ))))

;; 
;;    $Id: Connector.km,v 1.10 2001/11/09 14:37:00 tierney Exp $ 
;; 

(Connector has
         (superclasses (Role))
         (required-slot ())
         (primary-slot ())
         (secondary-slot ())
         (cmap-correspondence ())
         (test-case ()))

(every Connector has
       	(in-event ((a Be-Attached-To)))
	(played-by ((a Tangible-Entity with
		(instrument-of ((the in-event of Self)))))))
	

(Consistency-Constant has
  (superclasses (Constant)))

  (*gritty has
    (instance-of (Consistency-Constant)))

  (*grainy has
    (instance-of (Consistency-Constant)))

  (*glassy has
    (instance-of (Consistency-Constant)))

  (*crystalline has
    (instance-of (Consistency-Constant)))

  (*granitic has
    (instance-of (Consistency-Constant)))

  (*rocky has
    (instance-of (Consistency-Constant)))

  (*stony has
    (instance-of (Consistency-Constant)))

  (*boney has
    (instance-of (Consistency-Constant)))

;;
;; $Id: Consistency-Value.km,v 1.10 2002/03/16 00:15:25 jarred Exp $
;;

(Consistency-Value has 
       (superclasses (Property-Value)))

(every Consistency-Value has
   (consistency-of ((must-be-a Tangible-Entity)))
   (same-as ((must-be-a Consistency-Value)))
   (text-phrase ((the value of Self)))
)

(Constant has
   (superclasses (Property-Group)))

;; 
;;    $Id: Container.km,v 1.20 2002/01/30 21:14:24 porter Exp $ 
;; 

;; a Container role
(Container has (superclasses (Barrier)))
(every Container has
       (played-by     ((a Tangible-Entity with 
				  (shape ((a Shape-Value with
                                             (value (*hollow-volume))))))))
       (in-event ((a Be-Contained with
		     (object ((the content of Self)))
		     (instrument ((the played-by of Self))))))
       (content ((must-be-a Tangible-Entity with 
			    ;;the above line cannot be (a Tangible-Entity with 
			    ;; b/c otherwise the test case on Enter will have
			    ;; *John unify w/ the default Tangible-Entity, whose location is inside
			    ;; but *John's orig location was outside, thus the default Tangible-Entity's orig
			    ;; location becomes outside too! in other words, the content is outside of the container!!
;;;;;;				(location ((the Place encloses of Self))))))
		    (is-inside ((Self))))))
                                        ;;above line has to have "the Place" modifier
                                        ;;b/c otherwise in test case on Enter
                                        ;;after Enter, *John and _Place are both enclosed by Container
                                        ;;the content of *House will have 2 locations!!!
       (encloses ((a Spatial-Entity with (is-inside (Self)))))
       (does-not-enclose ((a Spatial-Entity with (is-outside (Self)))))
       (is-between ((:args (the encloses of Self) 
                           (the does-not-enclose of Self))))

       (capacity      ((must-be-a Capacity-Value))))

(Container has 
  (test-case ('(
		(*Container has
		  (instance-of (Container)))))))




;
;   $Id: Contract.km,v 1.5 2002/05/18 17:03:40 jarred Exp $
;

(Contract has 
  (superclasses (Decrease)))

(every Contract has-definition
  (instance-of (Decrease))
  (property (area))
)

(every Contract has
   (test-case ('(
                 (*myballon has (instance-of (Object))
                             (area (*myballonsarea)))
                 (*myballonsarea has (instance-of (Area-Value))
                                        (value ((:pair 43 *square-inches))))

                 (a Decrease with (object (*myballon))
                                  (property (area)))

                 ((thelast Decrease) isa Contract)

                 (do-and-next (thelast Contract))

                 ((the less-than of (the area of *myballon))
                       includes *myballonsarea)

))))
;
;   $Id: Cool.km,v 1.5 2002/05/18 17:03:41 jarred Exp $
;

(Cool has 
  (superclasses (Decrease)))

(every Cool has-definition
  (instance-of (Decrease))
  (property (temperature))
)

(every Cool has
   (test-case ('(
                 (*mytea has (instance-of (Substance))
                             (temperature (*myteatemperature)))
                 (*myteatemperature has (instance-of (Temperature-Value))
                                        (value ((:pair *hot Substance))))

                 (a Decrease with (object (*mytea))
                                  (property (temperature)))

                 ((thelast Decrease) isa Cool)

                 (do-and-next (thelast Cool))

                 ((the less-than of (the temperature of *mytea))
                       includes *myteatemperature)

))))
;; 
;;    $Id: Copy.km,v 1.13 2001/12/17 20:45:50 pnav Exp $ 
;; 

(Copy has
	(superclasses 	 (Create))
	(required-slot   (result object))
	(primary-slot 	 (agent instrument by-means-of))
	(cmap-correspondence (
			      (:seq result "the copy")
			      (:seq object "the original")	
			      (:seq agent "copier")
			      (:seq instrument "the instrument")
			      (:seq by-means-of "the event needed for the copy")	
			     ))
)

(every Copy has
  (object	((a Tangible-Entity)))

  ; A copy of the object, but not necessarily all properties of the object!
  ; If no result is specified, create an instance of the same type as object

  (add-list	((if (not (the result of Self))
                  then (:triple Self
			        result
			        (an instance of 
                                    (the instance-of of 
                                         (the object of Self))) [Copy-add-1]))))

  (instrument	((must-be-a Tangible-Entity))) 
  (by-means-of  ((must-be-a Event)))
)	

(comment [Copy-add-1] (:seq "Another copy of " (the object of Self) " has been created.")
	 "A copy creates a duplicate instance of something.")

(every Copy has
  (text-active-verbseq-sg ("copies"))
  (text-active-verbseq-pl ("copy"))
  (text-passive-verbseq-sg ("gets copied"))
  (text-passive-verbseq-pl ("get copied"))

;*; these special templates are redundant for now... see Create.km
;*;
;*;  (text-active-agent-sentence (
;*;     (:seq (the text-phrase of (the agent of Self))
;*;           (the text-active-phrase of Self)
;*;           (if ((the agent of Self) /= (the object of Self))
;*;            then (andify (the text-phrase of (the object of Self))))
;*;           (the text-arguments of Self)
;*;  )))
;*;
;*;  (text-active-instrument-sentence (
;*;     (:seq (the text-phrase of (the instrument of Self))
;*;           (the text-active-phrase of Self)
;*;           (andify (the text-phrase of (the object of Self)))
;*;           (the text-arguments of Self)
;*;  )))
;*;
;*;  (text-passive-sentence (
;*;     (:seq (andify (the text-phrase of (the object of Self)))
;*;           (the text-passive-phrase of Self)
;*;           (the text-arguments of Self)
;*;  )))

)


;; nothing extra to say about contextual info

(Copy has (test-case ()))


;; 
;;    $Id: Create.km,v 1.21 2001/12/21 05:26:05 tecuci Exp $ 
;; 

(Create has
  (superclasses 	(Action))
  (required-slot  (result))
  (primary-slot 	(agent instrument by-means-of))
  (cmap-correspondence 	(
	      		 (:seq result "the thing created")
	      		 (:seq agent "the creator")
	      		 (:seq instrument "the instrument")
	      		 (:seq by-means-of "the event needed for the create")	
	      		)))

;; Surprisingly, there's not much to say about a Create.  KM takes care
;; of creating an instance-object for the result of the Create, and 
;; (for now) we're assuming that all instance-objects have the same 
;; mode of existence, namely physical, present-time existence.

(every Create has
       (result       	((a Entity)))
       (agent 		((must-be-a Entity)))
       (instrument	((must-be-a Tangible-Entity))) 
       (by-means-of  	((must-be-a Event)))
       (add-list 	((:triple Self result (the result of Self) [Create-add-1])))
       (add-list		((if (((the result of Self) isa Aggregate) and
				      (has-value (the object of Self))) then
				   (:triple (the result of Self) 
					    element 
					    (the object of Self)))))
       (add-list    	((if (((the result of Self) isa Aggregate) and
			      (has-value (the object of Self))) then
			   (:triple (the result of Self)
				    element-type
				    ;; TODO: delete objects with the same type from list 
				    (the object of Self))))))

(comment [Create-add-1] (:seq (the object of Self) " has been created.")
	 "A create makes a new instance of something.")


(every Create has
       (text-active-verbseq-sg ("creates"))
       (text-active-verbseq-pl ("create"))
       (text-passive-verbseq-sg ("gets created"))
       (text-passive-verbseq-pl ("get created"))
      
;*; this stuff causes KM to crash on actions with multiple superclasses,
;*; one of which is a Create and one of which is a non-Create; I've put
;*; a scotch-tape solution in Event.km to deal with actions that have
;*; both object and result (not just because they're Copys)
;*;
;*;  (text-active-agent-sentence (
;*;     (:seq (the text-phrase of (the agent of Self))
;*;           (the text-active-phrase of Self)
;*;           (if ((the agent of Self) /= (the result of Self))   ; refl. Create???
;*;            then (andify (the text-phrase of (the result of Self))))
;*;           (the text-arguments of Self)
;*;  )))
;*;
;*;  (text-active-instrument-sentence (
;*;     (:seq (the text-phrase of (the instrument of Self))
;*;           (the text-active-phrase of Self)
;*;           (andify (the text-phrase of (the result of Self)))
;*;           (the text-arguments of Self)
;*;  )))
;*;
;*;  (text-passive-sentence (
;*;     (:seq (andify (the text-phrase of (the result of Self)))
;*;           (the text-passive-phrase of Self)
;*;           (the text-arguments of Self)
;*;  )))

)


;; nothing extra to say about contextual info

(Create has 
  (test-case ('(
		(new-situation)
		; Create a cake.
		(a Create with
			(result (*Cake)))
		(do-and-next (thelast Create))
		(the text-gen of (thelast Create))
		; Test1: *Cake is the result of the Create
		((the result of (thelast Create)) = *Cake)


		(a Create with
		   (result ((a Aggregate)))
		   (object ((a Entity) (a Entity))))
	       ))))




;;
;;    $Id: Creator.km,v 1.2 2001/11/09 14:38:33 tierney Exp $
;;

(Creator has
        (superclasses (Role))
        (required-slot ())
        (primary-slot ())
        (secondary-slot ())
        (description ())
        (cmap-correspondence ()))  

(every Creator has
       	(in-event ((a Create)))
       	(played-by ((a Tangible-Entity with
                      (agent-of ((the in-event of Self)))))))
;;
;;   $Id: Deactivate.km,v 1.9 2002/04/10 21:32:43 kbarker Exp $
;;

(Deactivate has
  (superclasses         (Make-Inaccessible))
  (required-slot        (object))
  (primary-slot         (agent instrument))
  (secondary-slot       ())
  (cmap-correspondence  (
                         (:seq object "The thing deactivated")
                         (:seq agent "The deactivator")
                         (:seq instrument "instrument")
                        )))

(every Deactivate has 
  (preparatory-event (#|default|#
	(a Activate with
	 (object ((the object of Self)))))))


(every Deactivate has
  ;; agent and object inherited from Make-Inaccessible.
  (defeats  ((allof (the object-of of (the object of Self))
                    where
                    ((the classes of It) = Be-Activated))))

  ;; The Pre and Post-Conditions of this Action.

  ;; The object should already be activated
  (pcs-list ((forall (the object of Self)
                     (:triple
                       It
                       object-of
                       (a Be-Activated) [Deactivate-pcs-1]))))

  (del-list ((forall (the defeats of Self)
		     (:triple 
		       It 
		       object 
		       (the object of Self) [Deactivate-del-1])))))

(comment [Deactivate-pcs-1] (:seq (the object of Self) " must be activated to be deactivated.")
	 "Something must be active for it to be deactivated.")

(comment [Deactivate-del-1] (:seq (the object of Self) " is no longer activated.")
	 "A deactivate stops something from being activated.")

(every Deactivate has
  (text-active-verbseq-sg ("deactivates"))
  (text-active-verbseq-pl ("deactivate"))
  (text-passive-verbseq-sg ("gets deactivated"))
  (text-passive-verbseq-pl ("get deactivated"))

  (text-argslots ((:seq base instrument site path result)))
)


;
;   $Id: Decrease.km,v 1.6 2002/05/18 17:03:42 jarred Exp $
;

(Decrease has
  (superclasses (Action)))

(every Decrease has
  (pcs-list ((:triple (the object of Self)
                      (the property of Self)
                      (an instance of (the range of (the property of Self)))
  ) [Decrease-pcs-1]))

  (del-list ((:triple (the object of Self) (the property of Self) * [Decrease-del-1])))

  (add-list ((:triple (the object of Self)
                      (the property of Self)
                      (an instance of (the range of (the property of Self)) with
                         (less-than (
                            (in-situation
                               (the before-situation of Self)
                               (the (the property of Self) of
                                    (the object of Self))))))
  ) [Decrease-add-1]))
)

(comment [Decrease-pcs-1] (:seq "The " (the property of Self) " of " (the object of Self) " must be in the range of " (the property of Self))
	 "One cannot decrease an improperly-valued property.")

(comment [Decrease-del-1] (:seq "The old value of " (the property of Self) " is no longer valid.")
	 "A decrease changes the old value of a property.")

(comment [Decrease-add-1] (:seq (the property of Self) " of " (the object of Self) " has a new, lesser value.")
	 "A decrease lessens the value for a property.")
;; 
;;    $Id: Deliver.km,v 1.12 2001/11/29 20:49:58 kbarker Exp $ 
;; 

(Deliver has
         (superclasses 	      (Transfer))
         (required-slot       (recipient object))
         (primary-slot 	      (agent donor instrument))
         (secondary-slot      ())
         (cmap-correspondence (
			       (:seq agent "the Deliverer")
			       (:seq donor "the original possessor")
			       (:seq instrument "the thing used to Deliver")	
			       (:seq object "the thing Delivered")
			       (:seq recipient "the final possessor")
			      )))

(every Deliver has
  (recipient ((a Tangible-Entity)))
  (agent ((constraint ((not ((the donor of Self) includes TheValue)) and
		       (not ((the recipient of Self) includes TheValue))))))
)

(every Deliver has
  (text-active-verbseq-sg ("delivers"))
  (text-active-verbseq-pl ("deliver"))
  (text-passive-verbseq-sg ("gets delivered"))
  (text-passive-verbseq-pl ("get delivered"))
)


;; nothing extra to say about contextual info

(Deliver has                   
  (test-case ('( 
                 (*Pizza has 
			(instance-of (Tangible-Entity)))
                 (*Dominoes has
                        (instance-of (Tangible-Entity))
                        (possesses (*Pizza)))
		 (*Delivery-Guy has 
			(instance-of (Tangible-Entity)))
                 (*Albert has 
			(instance-of (Tangible-Entity)))

		 ;; *Delivery-Guy delivered *Pizza to *Albert
                 (*Deliver has
                        (instance-of (Deliver))
                        (donor (*Dominoes))
			(agent (*Delivery-Guy))
                        (recipient (*Albert))
                        (object (*Pizza)))
                 (do-and-next *Deliver)
		 (the text-gen of (thelast Deliver))
		 ;; Test 1: *Dominoes no longer has *Pizza
                 ((the possesses of *Dominoes) = nil)

		 ;; Test 2: *Albert has *Pizza
                 ((the possesses of *Albert) = *Pizza)

		 ;; Test 3: The *Delivery-Guy delivered the *Pizza
		 ((the agent of *Deliver) = *Delivery-Guy)

		 ;; Test 4: The agent is not the donor and the recipient
		 ( ((the agent of *Deliver) /= (the donor of *Deliver))
		   and
		   ((the agent of *Deliver) /= (the recipient of *Deliver)))
               )))
)






(Density-Constant has
  (superclasses (Constant)))
  
  (*dense has
    (instance-of (Density-Constant)))

  (*rare has
    (instance-of (Density-Constant)))


 





















;; 
;;    $Id: Density-Scale.km,v 1.5 2001/10/09 00:54:44 jarred Exp $ 
;; 

(Density-Scale has
 (superclasses (Scale)))

;;
;; $Id: Density-Value.km,v 1.11 2002/03/12 14:29:27 kbarker Exp $
;;

(Density-Value has 
       (superclasses (Property-Value)))

(every Density-Value has
   (density-of ((must-be-a Tangible-Entity)))
   (less-than ((must-be-a Density-Value)))
   (greater-than ((must-be-a Density-Value)))
   (same-as ((must-be-a Density-Value)))
)

(Density-Value has
   (test-case ('(
                 (Drink has (superclasses (Substance)))
                 (Ice has (superclasses (Substance)))
                 (*mycoffee has (instance-of (Drink))
                                (density ((a Density-Value))))
                 (*mybeer has (instance-of (Drink))
                              (density
                                 ((a Density-Value with
                                     (value ((:pair 23 *kilogram/gallon)
                                             (:pair *rare Drink)
                                             (:pair *dense Ice)
                                     ))
                                     (less-than
                                        ((the density of *mycoffee)))
                              ))))

                 (the value of (the density of *mybeer))

                 ((the less-than of (the density of *mybeer))
                       includes (the density of *mycoffee))
                 ((the greater-than of (the density of *mycoffee))
                       includes (the density of *mybeer))
))))

(Depth-Constant has
  (superclasses (Constant)))

  (*shallow has
    (instance-of (Depth-Constant)))

  (*deep has
    (instance-of (Depth-Constant)))

                                 




;; 
;;    $Id: Depth-Scale.km,v 1.5 2001/10/09 00:54:46 jarred Exp $ 
;; 

(Depth-Scale has
 (superclasses (Scale)))
 


;;
;; $Id: Depth-Value.km,v 1.11 2002/03/12 14:29:27 kbarker Exp $
;;

(Depth-Value has 
       (superclasses (Property-Value)))

(every Depth-Value has
   (depth-of ((must-be-a Tangible-Entity)))
   (less-than ((must-be-a Depth-Value)))
   (greater-than ((must-be-a Depth-Value)))
   (same-as ((must-be-a Depth-Value)))
)

(Depth-Value has
   (test-case ('(
                 (Pool has (superclasses (Object)))
                 (Ocean has (superclasses (Object)))
                 (*pacificocean has (instance-of (Ocean))
                                (depth ((a Depth-Value))))
                 (*gregorygympool has (instance-of (Pool))
                              (depth
                                 ((a Depth-Value with
                                     (value ((:pair *shallow Ocean)
                                             (:pair *deep Pool)
                                     ))
                                     (less-than
                                        ((the depth of *pacificocean)))
                              ))))

                 (the value of (the depth of *gregorygympool))

                 ((the less-than of (the depth of *gregorygympool))
                       includes (the depth of *pacificocean))
                 ((the greater-than of (the depth of *pacificocean))
                       includes (the depth of *gregorygympool))
))))
;; 
;;    $Id: Destroy.km,v 1.11 2001/09/20 18:27:38 kbarker Exp $ 
;; 

(Destroy has
  (superclasses   	(Break))
  (required-slot  	(object))
  (primary-slot   	(agent instrument by-means-of))
  (secondary-slot 	())
  (cmap-correspondence 	(
                 	 (:seq agent "the destroyer")
		 	 (:seq object "the object destroyed")
		 	 (:seq instrument "instrument of the destruction")
		 	)))

(every Destroy has
        (object     ((a Tangible-Entity)))
        (agent 	    ((must-be-a Tangible-Entity)))
        (instrument ((must-be-a Tangible-Entity)))    

        ;; TODO: object must exist
        ;; (pcs-list ())
        ;; TODO: object ceases to exist
	;; (add-list ())
        ;; (del-list ())
)

(every Destroy has
  (text-active-verbseq-sg ("destroys"))
  (text-active-verbseq-pl ("destroy"))
  (text-passive-verbseq-sg ("gets destroyed"))
  (text-passive-verbseq-pl ("get destroyed"))
)


;; nothing extra to say about contextual info







































































;; 
;;    $Id: Detach.km,v 1.17 2002/01/21 20:50:13 jarred Exp $ 
;; 

(Detach has 
  (superclasses         (Action))
  (required-slot   	(object base))
  (primary-slot 	(agent instrument))
  (secondary-slot      	())
  (cmap-correspondence 	(
		 	 (:seq object "the object(s) being detached")
		 	 (:seq base "the object being detached from")
			)))

(every Detach has
  (object   ((exactly 1 Tangible-Entity)
	     (a Tangible-Entity)))

  (base     ((exactly 1 Tangible-Entity)
	     (a Tangible-Entity)))

  (defeats  ((allof (the object-of of (the base of Self))
		    where
		    (((the classes of It) = Be-Attached-To) and
		     ((the object of It) includes (the object of Self))))))

  (del-list ((forall (the defeats of Self)
		     (:set 
                       (forall2 (the object of It)
                         (:triple It2 object-of It))
		       (:triple It object (the object of It)))))))

(every Detach has
  (text-base ((if (has-value (the base of Self))
                     then ("from"))))

  (text-active-verbseq-sg ("detaches"))
  (text-active-verbseq-pl ("detach"))
  (text-passive-verbseq-sg ("gets detached"))
  (text-passive-verbseq-pl ("get detached"))
)

(every Detach has
	(preparatory-event (#|default|#
		(a Attach with
		   (object ((the object of Self)))
		   (base   ((the base of Self))))

)))


;; nothing extra to say about contextual info

(Detach has 
  (test-case ('(
		(*bumper has (instance-of (Object)))
		(*sticker has (instance-of (Object)))
			    
		(a Attach with 
		   (object (*sticker))
		   (base   (*bumper)))

		(not ((the object of 
			   (the Be-Attached-To object-of of *sticker))
		      includes *bumper))

		(do-and-next (thelast Attach))
		(the text-gen of (thelast Attach))	    
		((the object of 
		      (the Be-Attached-To object-of of *sticker))
		 includes *bumper)
			    
		(a Detach with 
		   (object (*sticker))
		   (base   (*bumper)))
		(do-and-next (thelast Detach))
		(the text-gen of (thelast Detach))
		((the defeats of (thelast Detach)) includes
		 ((thelast Be-Attached-To)))
			    
		(not ((the object of 
			   (the Be-Attached-To object-of of *sticker))
		      includes *bumper))
	       ))))


;
;   $Id: Dim.km,v 1.5 2002/05/18 17:03:42 jarred Exp $
;

(Dim has 
  (superclasses (Decrease)))

(every Dim has-definition
  (instance-of (Decrease))
  (property (brightness))
)

(every Dim has
   (test-case ('(
                 (*mylamp has (instance-of (Object))
                             (brightness (*mylampsbrightness)))
                 (*mylampsbrightness has (instance-of (Brightness-Value))
                                        (value ((:pair *blinding Object))))

                 (a Decrease with (object (*mylamp))
                                  (property (brightness)))

                 ((thelast Decrease) isa Dim)

                 (do-and-next (thelast Dim))

                 ((the less-than of (the brightness of *mylamp))
                       includes *mylampsbrightness)

))))
(Direction-Constant has
 (superclasses (Constant)))

  (*north has
	(instance-of (Direction-Constant)))

  (*south has
	(instance-of (Direction-Constant)))

  (*west has
	(instance-of (Direction-Constant)))

  (*east has
	(instance-of (Direction-Constant)))

  (*up has
       (instance-of (Direction-Constant)))

  (*down has
	(instance-of (Direction-Constant)))

(*northwest has
	    (instance-of (Direction-Constant)))

(*westnorthwest has
		(instance-of (Direction-Constant)))

(*westsouthwest has
		(instance-of (Direction-Constant)))

(*southwest has
	    (instance-of (Direction-Constant)))                

(*southsouthwest has
		 (instance-of (Direction-Constant)))

(*southsoutheast has
		 (instance-of (Direction-Constant)))                

(*southeast has
	    (instance-of (Direction-Constant)))

(*eastsoutheast has
		(instance-of (Direction-Constant)))                                 

(*eastnortheast has
		(instance-of (Direction-Constant)))

(*northeast has
	    (instance-of (Direction-Constant)))                

(*northnortheast has
		 (instance-of (Direction-Constant)))

(*northnorthwest has
		 (instance-of (Direction-Constant)))
;; 
;;    $Id: Direction-Scale.km,v 1.7 2001/11/15 21:10:46 jfan Exp $ 
;; 

(Direction-Scale has
 (superclasses (Scale)))
 


;;
;; $Id: Direction-Value.km,v 1.9 2002/03/12 14:29:27 kbarker Exp $
;;

(Direction-Value has 
       (superclasses (Property-Value)))

(every Direction-Value has
   (direction-of ((must-be-a Event)))
   (same-as ((must-be-a Direction-Value)))
)
;; 
;;    $Id: Disperse.km,v 1.17 2002/05/31 15:59:16 kbarker Exp $ 
;; 

(Disperse has
  (superclasses        (Action))
  (required-slot       (object origin))
  (primary-slot        (subevent))
  (cmap-correspondence (
			(:seq object "the things dispersing")
			(:seq origin "dispersed from")
			(:seq subevent "subevents")
		       )))

(every Disperse has
  (object 	  ((at-least 2 Tangible-Entity)
		   (a Tangible-Entity)
		   (a Tangible-Entity)))
  (origin	  ((exactly 1 Spatial-Entity)
		   (a Spatial-Entity)))

  ;; The subevents of this scenario.
  (first-subevent ((the subevent of Self)))
  (subevent    	  ((forall (the object of Self)
		     (a Leave with
			(object (It))
			(agent  (It))
			(origin ((the origin of Self)))
			(path ((if (has-value (the path of Self)) 
				   then
				   (the path of Self))))
			(away-from ((if (has-value (the away-from of Self)) 
					then
					(the away-from of Self))))
			(toward ((if (has-value (the toward of Self)) 
				     then
				     (the toward of Self))))
			(destination ((if (has-value 
					   (the destination of Self)) 
					  then
					  (the destination of Self))))
			)))))



(every Disperse has
  (text-active-verbseq-sg ("disperses"))
  (text-active-verbseq-pl ("disperse"))
  (text-passive-verbseq-sg ("gets dispersed"))
  (text-passive-verbseq-pl ("get dispersed"))
)


(Disperse has 
  (test-case ( '(
		 (*Tim has (instance-of (Living-Entity)))
		 (*Ken has (instance-of (Living-Entity)))	
		 (*Mall has (instance-of (Object)))
		
		 (*Tim has (is-at (*Mall)))
		 (*Ken has (is-at (*Mall)))
                            
		 ;; Ken and Tim dispersed from the mall
		 (a Disperse with
			(object  (*Ken *Tim))
			(origin  (*Mall)))
		 (do-script (thelast Disperse))
		 (the text-gen of (thelast Disperse))
		 ;; Test1: Tim is not at the mall
		 ((the location of *Tim) /= *Mall)
                 (not ((the is-at of *Tim) includes *Mall))

		 ;; Test2: Ken is not at the mall
		 ((the location of *Ken) /= *Mall)
                 (not ((the is-at of *Ken) includes *Mall))

		 ;; Test3: Each subevent was a move from 
		 ;;	   involing the object.
		 (forall (the subevent of (thelast Disperse))
		    ((It isa Leave) and
		     ((:set *Tim *Ken) includes (the object of It))))
		(forall (the subevent of (thelast Disperse)) (the text-gen of It)) 
		)))
)


(Distance-Constant has
 (superclasses (Constant)))

  (*near  has
	(instance-of (Distance-Constant)))

  (*far has
	(instance-of (Distance-Constant)))



 

;; 
;;    $Id: Distance-Scale.km,v 1.5 2001/10/09 00:54:50 jarred Exp $ 
;; 

(Distance-Scale has
 (superclasses (Scale)))
 


;;
;; $Id: Distance-Value.km,v 1.5 2002/03/12 14:29:28 kbarker Exp $
;;

(Distance-Value has 
       (superclasses (Property-Value)))

(every Distance-Value has
   (distance-of ((must-be-a Event)))

   (less-than ((must-be-a Distance-Value)))
   (greater-than ((must-be-a Distance-Value)))
   (same-as ((must-be-a Distance-Value)))
)

;; 
;;    $Id: Divide.km,v 1.14 2002/04/05 21:05:12 kbarker Exp $ 
;; 

(Divide has
	(superclasses (Destroy))
	(required-slot (object))
	(primary-slot ())
	(secondary-slot ())
	(cmap-correspondence (
			      (:seq agent "the Divider")
			      (:seq object "the thing Divided")
			      (:seq instrument "the thing used to Divide")))
	(test-case ()))

;; Divide creates 2 new things in addition to destroying the original
;; (Jarred 1/21/01) Although we do not have an explicit "<" operator we do have
;; a less-than slot. An example would be similiar to the commented out mass slot
;; below

(every Divide has
       (add-list ((:triple 
		   Self
		   result
		   (an instance of 
                          (the instance-of of (the object of Self)) with
                       (uniquely-called ("result1"))
		       (material 
                         ((forall (the material of (the object of Self))
                           ((an instance of (the instance-of of It))))))
		       ;; age is smaller than the object's age
		       (animacy ((the animacy of (the object of Self))))
		       ;; area is smaller than the object
		       (breakability ((the breakability of (the object of Self))))
		       ;; capacity is smaller
		       (color 	((the color of (the object of Self))))
		       (consistency ((the consistency of (the object of Self))))
		       (density 	((the density of (the object of Self))))
		       ;; depth maybe smaller
		       ;; height maybe smaller
		       ;; length maybe smaller

		       ;; (mass (a Mass-Value with 
		       ;;	(less-than (the mass of (the object of  Self)))))

 
		       (sentience 	((the sentience of (the object of Self))))
		       (sex 	((the sex of (the object of Self))))
		       ;; shape may or may not be the same
		       ;; size is smaller
		       (smell  	((the smell of (the object of Self))))	
		       (taste 	((the taste of (the object of Self))))
		       (temperature ((the temperature of (the object of Self))))
		       (texture 	((the texture of (the object of Self))))
		       ;; thickness is smaller
		       (trait 	((the trait of (the object of Self))))
		       (wetness 	((the wetness of (the object of Self))))
		       ;; width maybe smaller
		       ;; volume maybe smaller
		       ) [Divide-add-1])
		  (:triple
		   Self
		   result
		   (an instance of
                          (the instance-of of (the object of Self)) with
                       (uniquely-called ("result2"))
		       (material ((forall (the material of (the object of Self))
					  ((an instance of (the instance-of of It))))))
		       ;; age is smaller than the object's age
		       (animacy ((the animacy of (the object of Self))))
		       ;; area is smaller than the object
		       (breakability ((the breakability of (the object of Self))))
		       ;; capacity is smaller
		       (color 	((the color of (the object of Self))))
		       (consistency ((the consistency of (the object of Self))))
		       (density 	((the density of (the object of Self))))
		       ;; depth maybe smaller
		       ;; height maybe smaller
		       ;; length maybe smaller
		       ;; mass is smller
		       (sentience 	((the sentience of (the object of Self))))
		       (sex 	((the sex of (the object of Self))))
		       ;; shape may or may not be the same
		       ;; size is smaller
		       (smell  	((the smell of (the object of Self))))	
		       (taste 	((the taste of (the object of Self))))
		       (temperature ((the temperature of (the object of Self))))
		       (texture 	((the texture of (the object of Self))))
		       ;; thickness is smaller
		       (trait 	((the trait of (the object of Self))))
		       (wetness 	((the wetness of (the object of Self))))
		       ;; width maybe smaller
		       ;; volume maybe smaller
		       ) [Divide-add-2]))))

(comment [Divide-add-1] (:seq "A new, smaller instance of " (the object of Self) " has been created.")
	 "A divide creates two new, smaller instances of something.")

(comment [Divide-add-2] (:seq "A new, smaller instance of " (the object of Self) " has been created.")
	 "A divide creates two new, smaller instances of something.")


(every Divide has
  (text-active-verbseq-sg ("divides"))
  (text-active-verbseq-pl ("divide"))
  (text-passive-verbseq-sg ("gets divided"))
  (text-passive-verbseq-pl ("get divided"))

  (text-result ("into"))
)


;; 
;;    $Id: Donate.km,v 1.9 2001/09/21 08:07:44 arcane Exp $ 
;; 

(Donate has
  (superclasses 	(Give))
  (required-slot  	(beneficiary recipient agent donor object))
  (primary-slot 	(instrument))
  (secondary-slot 	())
  (cmap-correspondence 	(
			 (:seq beneficiary "beneficiary")	
			 (:seq object "the thing donated")
			 (:seq agent "donor")
                         (:seq donor "donor")
                         (:seq recipient "recipient")
                         (:seq instrument "instrument")
			)))

(every Donate has
  (beneficiary ((a Tangible-Entity))))

(every Donate has
  (text-active-verbseq
     ("donates"))
  (text-passive-verbseq
     ((if ((the number of (the object of Self)) > 1)
       then ("are donated")
       else ("is donated"))))
)


;; nothing extra to say about contextual info

(Donate has
  (test-case ('(
                 (*TV has (instance-of (Tangible-Entity)))
                 (*Mary has
                        (instance-of (Tangible-Entity))
                        (possesses (*TV)))
                 (*Salvation-Army has (instance-of (Tangible-Entity)))
		
		 ;; *Mary donated *TV to *Salvation-Army
                 (*Donate has
                        (instance-of (Donate))
                        (donor       (*Mary))
                        (recipient   (*Salvation-Army))
			(beneficiary (*Salvation-Army))
                        (object      (*TV)))
                 (do-and-next *Donate)
		 (the text-gen of (thelast Donate))
		 ;; Test 1: *Mary does not have the *TV
                 ((the possesses of *Mary) /= *TV)

		 ;; Test 2: *Salvation-Army has *TV
                 ((the possesses of *Salvation-Army) = *TV)

		 ;; Test 3: Since the beneficiary and the recipient 
 		 ;; are the same the beneficiary should also possess
		 ;; the object.
		 ((the possesses of (the beneficiary of *Donate)) = *TV)
	       ))))




;; 
;;    $Id: Donor-Role.km,v 1.1 2001/09/25 19:24:38 kbarker Exp $
;; 

(Donor-Role has
       (superclasses (Role))
       (required-slot ())
       (primary-slot ())
       (secondary-slot ())
       (cmap-correspondence ())
       (test-case ()))

(every Donor-Role has
       (in-event ((must-be-a Transfer)))
       (played-by ((a Entity with
		      (donor-of ((the in-event of Self)))))))

;
;   $Id: Dry.km,v 1.5 2002/05/18 17:03:43 jarred Exp $
;

(Dry has 
  (superclasses (Decrease)))

(every Dry has-definition
  (instance-of (Decrease))
  (property (wetness))
)

(every Dry has
   (test-case ('(
                 (*mytowel has (instance-of (Object))
                             (wetness (*mytowelwetness)))
                 (*mytowelwetness has (instance-of (Wetness-Value))
                                        (value ((:pair *damp Object))))

                 (a Decrease with (object (*mytowel))
                                  (property (wetness)))

                 ((thelast Decrease) isa Dry)

                 (do-and-next (thelast Dry))

                 ((the less-than of (the wetness of *mytowel))
                       includes *mytowelwetness)

))));; 
;;    $Id: Duplicate.km,v 1.10 2001/12/17 20:45:58 pnav Exp $ 
;; 

;; This Duplicate notion is the same as Copy revision 1.1

(Duplicate has
	(superclasses 	 (Copy))
	(required-slot   (object))
	(primary-slot 	 (agent instrument by-means-of result))
	(cmap-correspondence (
			      (:seq result "the Duplicate")
			      (:seq object "the original")	
			      (:seq agent "copier")
			      (:seq instrument "the instrument")
			      (:seq by-means-of "the event needed for the Duplicate")	
			     ))
)

(every Duplicate has
  (object	((a Tangible-Entity)))

  ; An exact Duplicate of all the features of the object!
  (add-list	((:triple 
		  Self
		  result
		  (a Tangible-Entity with
		     
		     (instance-of ((the instance-of of (the object of Self))))
		     
					; Duplicate certain relevant properties of the original
		     (content	((forall (the content of (the object of Self))
					 ((an instance of (the instance-of of It))))))
		     (has-part	((forall (the has-part of (the object of Self))
					 ((an instance of (the instance-of of It))))))
		     (material	((forall (the material of (the object of Self))
					 ((an instance of (the instance-of of It))))))
		     
					; Duplicate all the values of the original
		     (age 	((the age of (the object of Self))))
		     (animacy 	((the animacy of (the object of Self))))
		     (area 	((the area of (the object of Self))))
		     (breakability ((the breakability of (the object of Self))))
		     (capacity 	((the capacity of (the object of Self))))
		     (color 	((the color of (the object of Self))))
		     (consistency ((the consistency of (the object of Self))))
		     (density 	((the density of (the object of Self))))
		     (depth 	((the depth of (the object of Self))))
		     (height 	((the height of (the object of Self))))
		     (length  	((the length of (the object of Self))))
		     (mass  	((the mass of (the object of Self))))
		     (sentience 	((the sentience of (the object of Self))))
		     (sex 	((the sex of (the object of Self))))
		     (shape 	((the shape of (the object of Self))))
		     (size 	((the size of (the object of Self))))
		     (smell  	((the smell of (the object of Self))))	
		     (taste 	((the taste of (the object of Self))))
		     (temperature ((the temperature of (the object of Self))))
		     (texture 	((the texture of (the object of Self))))
		     (thickness 	((the thickness of (the object of Self))))
		     (trait 	((the trait of (the object of Self))))
		     (wetness 	((the wetness of (the object of Self))))
		     (width 	((the width of (the object of Self))))
		     (volume 	((the volume of (the object of Self)))))
		  [Duplicate-add-1])))
  (instrument	((must-be-a Tangible-Entity))) 
  (by-means-of  ((must-be-a Event))))

(comment [Duplicate-add-1] (:seq (the object of Self) " has been duplicated.")
	 "A duplicate creates a new, identical instance of something.")

(every Duplicate has
  (text-active-verbseq
     ("duplicates"))
  (text-passive-verbseq
     ((if ((the number of (the object of Self)) > 1)
       then ("get duplicated")
       else ("gets duplicated"))))
)


;; nothing extra to say about contextual info
;; test cases commented out for the time being until the multiple results from superclasses problem has ben solved

(Duplicate has (test-case ('(
			     (new-situation)
			     (Sheep has (superclasses (Tangible-Entity)))
			     (*Dolly has
				     (instance-of (Sheep))
				     (color (*white))
				     (sex (*female))
				     (height (*4))
				     (length (*5))
				     (mass (*200))
				     (age (*5)))
			     (a Duplicate with
				(object (*Dolly)))
			     (do-and-next (thelast Duplicate))
				(the text-gen of (thelast Duplicate))
			     ((the classes of 
			       (the result of (thelast Duplicate))) = Sheep)
			     ((the color of 
			       (the result of (thelast Duplicate))) = *white)
			     ((the sex of 
			       (the result of (thelast Duplicate))) = *female)
			     ((the height of 
			       (the result of (thelast Duplicate))) = *4)
			     ((the length of 
			       (the result of (thelast Duplicate))) = *5)
			     ((the mass of 
			       (the result of (thelast Duplicate))) = *200)
			     ((the age of 
			       (the result of (thelast Duplicate))) = *5)
			     ))))



(Duration-Constant has
             (superclasses (Constant)))

(*forever has
       (instance-of (Duration-Constant)))

(*brief has
       (instance-of (Duration-Constant)))


 


;;
;; $Id: Duration-Value.km,v 1.11 2002/03/12 14:29:28 kbarker Exp $
;;


(Duration-Value has 
       (superclasses (Property-Value)))

(every Duration-Value has
   (duration-of ((must-be-a Event)))
   (less-than ((must-be-a Duration-Value)))
   (greater-than ((must-be-a Duration-Value)))
   (same-as ((must-be-a Duration-Value)))
)

(Duration-Value has
   (test-case ('(
                 (BasketballGame has (superclasses (Event)))
                 (CakeBake has (superclasses (Event)))
                 (*baking-my-cake has (instance-of (CakeBake))
                                (duration ((a Duration-Value))))
                 (*lakers-vs-6ers has (instance-of (BasketballGame))
                              (duration
                                 ((a Duration-Value with
                                     (value ((:pair 3 *hour)
                                             (:pair *brief Event)
                                     ))
                                     (same-as
                                        ((the duration of *baking-my-cake)))
                              ))))

                 (the value of (the duration of *lakers-vs-6ers))

                ;; ((the same-as of (the duration of *baking-my-cake)
                ;;       includes (the duration of *lakers-vs-6ers))
                 ((the same-as of (the duration of *lakers-vs-6ers))
                       includes (the duration of *baking-my-cake))
))))
;; 
;;    $Id: Emit.km,v 1.16 2002/05/31 16:17:16 kbarker Exp $ 
;; 

(Emit has
      (superclasses (Move))
      (required-slot (object origin))
      (primary-slot (agent destination path))
      (secondary-slot ())
      (cmap-correspondence (
			    (:seq object "the thing emitted")
			    (:seq base "the enclosure")
			    (:seq destination "final location")
			    (:seq agent "the mover")
			    (:seq origin "original location")
			    (:seq path "the portal"))))

(every Emit has
  (text-active-verbseq-sg ("emits"))
  (text-active-verbseq-pl ("emit"))
  (text-passive-verbseq-sg ("gets emitted"))
  (text-passive-verbseq-pl ("get emitted"))
)


(every Emit has
       (object ((constraint ((TheValue &? (a Fluid)) or 
;;			     (TheValue &? (a Particulate-Matter)) or 
			     (TheValue &? (a Energy))))))
       (origin (((a Spatial-Entity) &
                 (if (has-value (the agent of Self))
		  then
		  (the agent of Self)
		  else 
		     (if (has-value (the instrument of Self))
                      then
                      (the instrument of Self)))))))

;; nothing extra to say about contextual info
;; inherited from Move and Action
		

(Emit has 
      (test-case 	 ('(
                            (*Sun has
				     (instance-of (Object)))
			    (*Earth has
				     (instance-of (Object)))
			    (*SunLight has
				     (instance-of (Energy)))
			    
			; *SunLight moves from where he used to be to *Earth
			    (a Emit with
			       (object 	(*SunLight))
			       (origin (*Sun))
			       (destination (*Earth)))

			    (do-and-next (thelast Emit))
				(the text-gen of (thelast Emit))
			    
				; Test1: *SunLight is in *Earth
			    ((*SunLight location) = (*Earth location))
			    
				; Test2: *SunLight is not in *Sun anymore
			    ((*SunLight location) /= (*Sun location))

                            (new-situation)
                            (*stink-bomb has (instance-of (Object)))
                            (*noisome-fumes has (instance-of (Fluid)))
                            (a Emit with
                               (object (*noisome-fumes))
                               (instrument (*stink-bomb)))

			    (do-and-next (thelast Emit))
			    
                            ((the origin of (thelast Emit)) = *stink-bomb)
                            (not ((the location of *noisome-fumes) = 
                                  (the location of *stink-bomb)))
))))

;; 
;;    $Id: Energy.km,v 1.1 2002/05/31 16:29:24 kbarker Exp $ 
;; 

(Energy has
	(superclasses (Substance))
	(required-slot ())
	(primary-slot ())
	(secondary-slot ())
	(description ("The capacity to do work.  RHCD:438."))
	(cmap-correspondence ()))



;; 
;;    $Id: Ensemble.km,v 1.1 2002/05/31 15:55:07 kbarker Exp $ 
;; 

(Ensemble has
         (superclasses (Aggregate))
         (required-slot ())
         (primary-slot ())
         (secondary-slot ())
	 (description ("A collection of distinct structures which function 
                        together to carry out some task, as the respiratory
                        enzyme complex on mitochondrial membranes. Souther."))
         (cmap-correspondence ())
         (test-case ()))



;; 
;;    $Id: Enter.km,v 1.12 2002/05/31 15:59:17 kbarker Exp $ 
;; 

(Enter has
         (superclasses 	 (Move-Into Reflexive-Cliche))
         (required-slot  (agent object base))
         (primary-slot 	 (destination origin path))
         (secondary-slot ())
	 (cmap-correspondence (
			       (:seq agent "the enter'er")
			       (:seq object "the enter'er")
			       (:seq base "the enclosure")
			       (:seq destination "final location")
			       (:seq origin "original location")
			       (:seq path "the portal")
			       ))
)

; The meaning of Enter is fully captured by its superclass, Move-Into, 
; with the Reflexive cliche.
; (every Enter has ())

(every Enter has
  (agent ((the object of Self)))
  (text-active-verbseq-sg ("enters"))
  (text-active-verbseq-pl ("enter"))

  (text-base (()))

)


(every Enter has-definition
   (instance-of (Move-Into Reflexive-Cliche)))

;; nothing extra to say about contextual info
;; inherited from Move and Action

(Enter has 
       (test-case ('(
		     (*John has  
                        (instance-of (Living-Entity))
                        (is-outside (*House)))

		     (*Enter-doorway has  
			       (instance-of (Spatial-Entity)))

                     (*House-Location has (instance-of (Place)))
		     (*House has 
		       (instance-of (Object))
                       (location (*House-Location)))

                     (a Move-Into with
                        (agent (*John))
                        (object (*John)))

                     ((thelast Move-Into) isa Enter)

                     (the text-gen of (thelast Enter))

		     ; *John enters *House
		     (a Enter with
		      (agent (*John))
		      (base (*House))
		      (path (*Enter-doorway)))
		     (do-and-next (thelast Enter))

                     (the text-gen of (thelast Enter))

		     ; Test1: *John went through *Door
		     ((the path of (thelast Enter)) = *Enter-doorway)

		     ; Test2: *House now contains *John
		     ((the content of *House) includes *John)
		     
		     ; Test3: *John is now located inside *House
		     ((the is-inside of *John) includes *House)

		     ; Test4: *John is no longer located outside *House
		     ((the is-outside of (the location of *John)) /=
                      *House-Location)
))))







;; 
;;    $Id: Entity.km,v 1.22 2002/05/17 20:24:52 kbarker Exp $ 
;; 

(Entity has
        (superclasses (Thing))
        (required-slot ())
        (primary-slot ())
        (secondary-slot ())
        (cmap-correspondence ())
        (test-case ()))

(every Entity has
        
        (name ((if (anonymous-instancep Self) then
                   (oneof (the instance-of of Self) where t))))

;; if a general kind of Entity plays a Role, use the Role as the head noun
        (text-head ((if (anonymous-instancep Self) then
                        (:seq 
                           (if (
                                (has-value (the plays of Self))
                                and
                                ((:set Thing Entity Intangible-Entity
                                       Spatial-Entity Place Tangible-Entity)
                                 is-superset-of
                                 (the instance-of of Self))
                               )
                             then (oneof (the plays of Self) where t)
                             else (Self))
                           (if (has-value (the uniquely-called of Self))
                             then (:seq "(called" 
                                        (the uniquely-called of Self) ")"
                                  )
                             else (if (has-value (the called of Self))
                                   then (:seq "(called" 
                                              (the called of Self) ")"
                                        )))
                        )
                     else
                        (the name of Self))))

;; text-gen of Events needs to have control over whether NPs in clauses
;; are def or indef; but only the Entity knows how to form its NP
        (text-def-determiner (
           (if (anonymous-instancep Self) then
               (if (has-value (the is-possessed-by of Self)) then
                   (:seq (the text-def-head of (the is-possessed-by of Self))
                         "'s")
                else
                   (:seq "the"))
        )))
        (text-indef-determiner ((:seq "a")))

        (text-def-head ((:seq (the text-def-determiner of Self)
                              (the text-head of Self))))
        (text-indef-head ((:seq (the text-indef-determiner of Self)
                                  (the text-head of Self))))

        (text-is-above    ("above"))
        (text-is-along    ("along"))
        (text-is-between  ("between"))
        (text-is-behind   ("behind"))
        (text-is-opposite ("opposite"))
        (text-is-outside  ("outside")) 
        (text-is-over     ("over"))
        (text-is-beside   ("beside"))
        (text-is-near     ("near"))
        (text-is-at       ("at"))
        (text-is-on       ("on"))
        (text-abuts       ("abutting"))
        (text-is-inside   ("inside"))
        (text-is-part-of  ("part of"))
        (text-material    ("made of"))
        (text-content     ("containing"))

       (text-gen ((make-phrase (the text-phrase of Self))))

       (text-premodslots ((:seq area length height thickness volume size 
                                capacity depth mass density temperature 
                                wetness brightness breakability consistency 
                                shape smell taste texture trait
                                age color sex)))
;; I'm going to move content, material and is-part-of to postmods
;;                                age color sex material content is-part-of)))

       (text-premods (
          (forall-seq (the text-premodslots of Self)
                where (has-value (the It of Self))
                      (if (It isa Property) then
                          (the text-phrase of (the It of Self))
                       else
                          (the It of Self))
        )))

;; moved is-possessed-by to a determiner position
        (text-postmodslots ((:seq is-part-of material content is-above
                                  is-along is-between is-behind is-opposite 
                                  is-outside is-over is-beside 
                                  is-near is-at is-on abuts is-inside)))
      
        (text-postmods (
          (forall-seq (the text-postmodslots of Self)
                where (has-value (the It of Self))
             (:seq (the (the text-slot of It) of Self) 
                   "the" 
                   (andify (the It of Self)))
        )))

       (text-base-phrase ((if (anonymous-instancep Self) then
                              (:seq (the text-def-determiner of Self)
                                    (the text-premods of Self)
                                    (the text-head of Self))
                           else 
                              (:seq (the text-head of Self))
       )))


       (text-sentence 
             ((make-sentence
                      ((if ((the text-postmods of Self) /= ((:seq))) then
                           (:seq (the text-base-phrase of Self)
                                 "is"
                                 (andify 
                                   (the elements of
                                     (the text-postmods of Self))))
                        else (if ((the text-premods of Self) /= ((:seq))) then
				 (:seq (the text-def-head of Self)
				       "is"
				       (andify 
                                         (the elements of
                                           (the text-premods of Self))))
                              else
                                 (:seq (the text-def-head of Self)
                                       "is a"
                                       (andify (the instance-of of Self))))
       )))))


       (text-phrase ((if (anonymous-instancep Self) then
                         (:seq (the text-base-phrase of Self)
                               (andify
                                 (the elements of
                                   (the text-postmods of Self))))
                      else (the text-base-phrase of Self))))
)
;;
;;    $Id: Entrance.km,v 1.4 2001/12/03 15:55:44 tierney Exp $
;;

(Entrance has
        (superclasses (Portal))
        (required-slot ())
        (primary-slot ())
        (secondary-slot ())
        (description ())
        (cmap-correspondence ()))  

(every Entrance has
       	(in-event ((must-be-a Move-Into)))
       	(played-by ((a Spatial-Entity with
                      (path-of ((the in-event of Self))))))
	(is-between ((:args (the is-inside of Self)
			    (the is-outside of Self))))); 
;;    $Id: Event.km,v 1.39 2002/05/16 18:26:15 kbarker Exp $
;; 

;; An Event is an Action or a State.

(Event has
       (superclasses        (Thing))
       (required-slot       ())
       (primary-slot        (time))
       (secondary-slot      ())
       (cmap-correspondence (
                             (:seq time "when")
                            )))

(every Event has
  
  (subevent      ((<> Self) 
                  (must-be-a Event)))
  (all-subevents ((Self subevent)
                  (the all-subevents of (Self subevent))))

  ; The following code collects the subevents of the Event into
  ; a single list, which can then be simulated by KM.
  ; The semantics of the "actions" slot is built into KM.
  (actions       ((:set (forall (the subevent of Self)
                                (the actions of It))
                        Self)))

  (primitive-actions ((the primitive-actions of (the subevent of Self))
                      (if (not (the subevent of Self))
                          then
                          Self)))


  (time     ((must-be-a Time-Interval)))
  (agent    ((must-be-a Entity with
               ;; - capable of performing the event
               ;; - capable of using the instruments if any
               ;; (capability ((a Agent-Role with
               ;;                 (in-event (Self)))))

               ;; - has the control of the instruments if any
               ;;   removed until this notion is more stable    
               ;;   (26 Feb 2001)
               ;;
               ;;       (agent-of ((a In-Control with
               ;;                      (object ((the instrument of Self)))
               ;;                      (time   ((a Time-Interval with
               ;;                                  (temporally-overlaps
               ;;                                     ((the time of Self))))))
               ;;                  )))

               ;; - co-located with the object, instrument 
               (abuts ((if (has-value (the instrument of Self))
                        then
                        (the instrument of Self))))
                           
	       ;; - temporally overlapping with the beneficiary, 
	       ;;   experiencer, object, instrument, recipient
	       ;; comment out for the time being -- jf
	       #|(time-of-existence 
		 ((a Time-Interval with
		     (temporally-overlaps
			((the time-of-existence of (the object of Self))
			 (if (has-value (the beneficiary of Self))
			     then
			     (the time-of-existence of 
				  (the beneficiary of Self)))
			 (if (has-value (the experiencer of Self))
			     then
			     (the time-of-existence of 
				  (the experiencer of Self)))
			 (if (has-value (the instrument of Self))
			     then
			     (the time-of-existence of 
				  (the instrument of Self)))
			 (if (has-value (the recipient of Self))
			     then
			     (the time-of-existence of 
				  (the recipient of Self))))))))|#
	       )))
  
  ;; beneficiary constraints
  ;; comment out for the time being -- jf
  (beneficiary ((must-be-a Living-Entity)))
  #|(beneficiary ((must-be-a Living-Entity with
		  ;; temporally overlapping with the agent, 
		  ;; experiencer, object, instrument, and recipient 
		  (time-of-existence 
		    ((a Time-Interval with
			(temporally-overlaps
			  ((the time-of-existence of (the object of Self))
			   (if (has-value (the agent of Self))
			       then
			       (the time-of-existence of (the agent of Self)))
			   (if (has-value (the experiencer of Self))
			       then
			       (the time-of-existence of 
				    (the experiencer of Self)))
			   (if (has-value (the instrument of Self))
			       then
			       (the time-of-existence of 
				    (the instrument of Self)))
			   (if (has-value (the recipient of Self))
			       then
			       (the time-of-existence of 
				    (the recipient of Self)))))))))))|#

  ;; donor constraints
  ;; comment out for the time being -- jf
  (donor ((must-be-a Entity)))
  #|(donor ((must-be-a Living-Entity with
	    ;; temporally overlapping with the agent, experiencer,
	    ;; object, instrument, and recipient
	    (time-of-existence 
	      ((a Time-Interval with
		  (temporally-overlaps
			  ((the time-of-existence of (the object of Self))
			   (if (has-value (the agent of Self))
			       then
			       (the time-of-existence of (the agent of Self)))
			   (if (has-value (the experiencer of Self))
			       then
			       (the time-of-existence of 
				    (the experiencer of Self)))
			   (if (has-value (the instrument of Self))
			       then
			       (the time-of-existence of 
				    (the instrument of Self)))
			   (if (has-value (the recipient of Self))
			       then
			       (the time-of-existence of 
				    (the recipient of Self)))))))))))|#

  ;; instrument constraints
  (instrument ((must-be-a Entity with
                 ;;  co-located with the object, agent
                 (abuts ((if (has-value (the agent of Self))
                          then (the agent of Self))))

                 ;; the instrument cannot be in broken state
                 ;; ***belongs in pcs-list***
                 ;; (object-of ((mustnt-be-a Be-Broken)))

		 ;; temporally overlapping with the agent, beneficiary, 
		 ;; experiencer, object, and recipient
		 ;; comment out for the time being -- jf
		 #|(time-of-existence 
		  ((a Time-Interval with
		      (temporally-overlaps
		       ((the time-of-existence of (the object of Self))
			(if (has-value (the beneficiary of Self))
			    then
			  (the time-of-existence of 
			       (the beneficiary of Self)))
			(if (has-value (the experiencer of Self))
			    then
			  (the time-of-existence of 
			       (the experiencer of Self)))
			(if (has-value (the agent of Self))
			    then
			  (the time-of-existence of (the agent of Self)))
			(if (has-value (the recipient of Self))
			    then
			  (the time-of-existence of 
			       (the recipient of Self))))))))|#
		 )))
  
  ;; object constraints
  ;; comment out for the time being -- jf
  (object ((must-be-a Entity)))
  #|(object ((must-be-a Entity with
		      ;; temporally overlapping with the agent, beneficiary, 
		      ;; experiencer, object, and recipient
		   (time-of-existence 
		    ((a Time-Interval with
			(temporally-overlaps
			 ((if (has-value (the beneficiary of Self))
			      then
			    (the time-of-existence of 
				 (the beneficiary of Self)))
			  (if (has-value (the experiencer of Self))
			      then
			    (the time-of-existence of 
				 (the experiencer of Self)))
			  (if (has-value (the agent of Self))
			      then
			    (the time-of-existence of (the agent of Self)))
			  (if (has-value (the recipient of Self))
			      then
			       (the time-of-existence of 
				    (the recipient of Self)))))))))))|#
  ;; recipient constraints
  ;; comment out for the time being -- jf
  (recipient ((must-be-a Entity)))
  #|(recipient ((must-be-a Living-Entity with
		   ;; temporally overlapping with the agent, beneficiary,
		   ;; experiencer, object, and object
		   (time-of-existence 
		     ((a Time-Interval with
			 (temporally-overlaps
			  ((the time-of-existence of (the object of Self))
			   (if (has-value (the beneficiary of Self))
			       then
			       (the time-of-existence of 
				    (the beneficiary of Self)))
			   (if (has-value (the agent of Self))
			       then
			       (the time-of-existence of (the agent of Self)))
			   (if (has-value (the object of Self))
			       then
			       (the time-of-existence of 
				    (the object of Self)))))))))))|#

  ;; result constraints
  ;; comment out for the time being -- jf
  (result ((must-be-a Entity)))
  #|(result ((must-be-a Entity with
		   ;; temporally overlapping with the agent, beneficiary,
		   ;; experiencer, object, recipient
		   (time-of-existence 
		     ((a Time-Interval with
			 (temporally-overlaps
			  ((the time-of-existence of (the object of Self))
			   (if (has-value (the beneficiary of Self))
			       then
			       (the time-of-existence of 
				    (the beneficiary of Self)))
			   (if (has-value (the recipient of Self))
			       then
			       (the time-of-existence of 
				    (the recipient of Self)))))))))))|#
)

;; Contextual information
(every Event has
       (pcs-list (      
                  ;; an object cannot be the object/instrument of an action
                  ;; if it is inaccessible to the agent
;                  (if (not (Self isa Make-Accessible))
;                      then
;                      (if (has-value (the agent of Self))
;                          then
;                          (forall (the object of Self)
;                            (:triple
;                              It
;                              object-of
;                              (mustnt-be-a Be-Inaccessible with
;                                (object      (It))
;                                (base ((the agent of Self))))))
;                          else
;                          (forall (the object of Self)
;                            (:triple
;                              It
;                              object-of
;                              (mustnt-be-a Be-Inaccessible with
;                                (object (It))))))
;                      else
;                      (the del-list of Self))
;
;                  (if (not (Self isa Make-Accessible))
;                      then
;                      (if (has-value (the agent of Self))
;                          then
;                          (forall (the instrument of Self)
;                            (:triple
;                              It
;                             object-of
;                              (mustnt-be-a Be-Inaccessible with
;                                (object      (It))
;                                (base ((the agent of Self))))))
;                          else
;                          (forall (the instrument of Self)
;                            (:triple
;                              It
;                              object-of
;                              (mustnt-be-a Be-Inaccessible with
;                                (object (It))))))
;                      else
;                      (the del-list of Self))

                  ;; the instrument of the Event shouldn't have the function 
                  ;; of being
                  ;; the instrument and Be-Broken at the same time 
                  ;; (i.e. it can be the function and not Be-Broken or 
                  ;; it can Be-Broken but not have the function)
                  ;; - this last case seems strange, but the instrument 
                  ;;   could be used for something besides its function
                  ;; This condition covers the case of the instrument 
                  ;; Being-Ruined
                  (if (has-value (the instrument of Self))
                      then
                    (forall (the instrument of Self)
                            ((:triple (It) 
                                      instance-of 
                                      (mustnt-be-a Entity with
                                                   (plays
                                                    ((a Instrument-Role)))
						   #|with
                                                        (in-event (Self)))))|#
                                                   (object-of  
                                                    ((a Be-Broken with 
                                                        (object (It))))))))
                              )))))

;; Text generation

(every Event has
       (text-gen ((make-sentence (the text-sentence of Self))))

;*; text-dobj is a fix to handle Actions that get both an object and a result
;*; through multiple inheritance (as opposed to inheritance from Copy)
       (text-dobj ((if (has-value (the object of Self))
                    then (the object of Self)
                    else (the result of Self))))

;*; if there's an agent, by default it's the subject of the sentence
;*; if there's no agent but there's an instrument, it's the subject
;*; text-subj can be assigned other roles explicitly
       (text-subj ((if (has-value (the agent of Self))
                    then (the agent of Self)
                    else (the instrument of Self))))

       (text-subj-phrase (
          (if (
               ((:set Thing Entity Intangible-Entity
                      Spatial-Entity Place Tangible-Entity)
                is-superset-of
                (the instance-of of (the text-subj of Self)))
              and
               ((the text-def-head of (the text-subj of Self))
                =
                (:seq (:seq "the") (:seq (the text-subj of Self) NIL)))
              )
           then
              (:seq "the" (oneof (the instances of Relation)
                           where ((the It of Self) = (the text-subj of Self))))
           else
              (andify (the text-def-head of (the text-subj of Self)))
       )))

       (text-dobj-phrase (
          (if (
               ((:set Thing Entity Intangible-Entity
                      Spatial-Entity Place Tangible-Entity)
                is-superset-of
                (the instance-of of (the text-dobj of Self)))
              and
               ((the text-def-head of (the text-dobj of Self))
                =
                (:seq (:seq "the") (:seq (the text-dobj of Self) NIL)))
              )
           then
              (:seq "the" (oneof (the instances of Relation)
                           where ((the It of Self) = (the text-dobj of Self))))
           else
              (andify (the text-def-head of (the text-dobj of Self)))
       )))

       (text-number ((if (has-value (the text-subj of Self))
                      then (the number of (the text-subj of Self))
                      else (the number of (the text-dobj of Self)))))

       (text-active-verbseq ((if ((the text-number of Self) > 1)
                              then (the text-active-verbseq-pl of Self)
                              else (the text-active-verbseq-sg of Self)
       )))
       (text-passive-verbseq ((if ((the text-number of Self) > 1)
                               then (the text-passive-verbseq-pl of Self)
                               else (the text-passive-verbseq-sg of Self)
       )))

       (text-active-phrase
          ((if ((the number of (the text-active-verbseq of Self)) = 1)
            then (the text-active-verbseq of Self)
            else 
              ((if ((the text-number of Self) = 1)
                then ((:seq "does" (andify (the instance-of of Self))))
                else ((:seq "do" (andify (the instance-of of Self))))))))
       )
       (text-passive-phrase
          ((if ((the number of (the text-passive-verbseq of Self)) = 1)
            then (the text-passive-verbseq of Self)
            else
              ((if ((the number of (the text-dobj of Self)) > 1)
                then ((:seq 
                         "have" 
                         (andify (the instance-of of Self)) "done to them"))
                else ((:seq 
                         "has" 
                         (andify (the instance-of of Self)) 
                         "done to it")))))))

       (text-sentence ((if (has-value (the text-subj of Self))
                        then (the text-active-sentence of Self)
                        else (the text-passive-sentence of Self))))

       (text-active-sentence (
          (:seq (the text-subj-phrase of Self)
                (the text-active-phrase of Self)
                (if ((the agent of Self) /= (the text-dobj of Self))
                 then 
                   (if (the text-dobj of Self) then
                       (the text-dobj-phrase of Self)))
                (the text-arguments of Self)
       )))

       (text-passive-sentence (
          (:seq (if (has-value (the text-dobj of Self))
                 then (the text-dobj-phrase of Self)
                 else ("something"))
                (the text-passive-phrase of Self)
                (the text-arguments of Self)
       )))

       (text-argslots ((:seq base instrument site result)))

       (text-arguments (
          (forall-seq (the text-argslots of Self)
                where ((has-value (the It of Self)) and
                       ((the It of Self) /= (the text-subj of Self)) and
                       ((the It of Self) /= (the text-dobj of Self)))
                (:seq ((if (has-value (the text-slot of It)) then
                         (the1 of 
                            (the (the text-slot of It) of Self))))

                      ((if (
                            ((:set Thing Entity Intangible-Entity
                                   Spatial-Entity Place Tangible-Entity)
                             is-superset-of
                             (the instance-of of (the It of Self)))
                           and
                            ((the text-def-head of (the It of Self))
                             =
                             (:seq (:seq "the") (:seq (the It of Self) NIL)))
                           )
                        then
                           (:seq "the" It)
                        else
                           ((if ((the number of (the It of Self)) = 1) then
                                ((if ((the It of Self) isa String) then
                                     (the It of Self)    ;; for text-particle
                                  else
                                     (andify (the text-def-head of 
                                                  (the It of Self)))))
                             else
                                (andify (the text-def-head of 
                                             (the It of Self))))))))
       )))

       (text-base        ((if (has-value (the base of Self)) 
                              then ("to"))))
       (text-instrument  ((if (has-value (the instrument of Self))
                              then ("using"))))
       (text-site        ((if (has-value (the site of Self))
                              then ("at"))))
       (text-origin      ((if (has-value (the origin of Self))
                              then ("from"))))
       (text-path        ((if (has-value (the path of Self))
                              then ("along"))))
       (text-destination ((if (has-value (the destination of Self))
                              then ("to"))))
       (text-raw-material ((if (has-value (the raw-material of Self))
                              then ("from"))))
       (text-result      ((if (has-value (the result of Self)) 
                              then ("resulting in"))))
)

(Event has 
       (test-case   ('(
                       (Knife has (superclasses (Tangible-Entity)))
                       (every Knife has 
                        (purpose ((a Instrument-Role with
                                     (in-event 
                                       ((a Cut)))))))
                       
                       (*K has (instance-of (Knife))
                           (object-of ((a Be-Ruined))))
                       
                       (Cut has (superclasses (Event)))
                       (every Cut has (instrument ((a Knife))))
                       
                       (a Cut with (instrument (*K)))
                       
                       (not (try-do (thelast Cut)))

                       ))))



;; 
;;    $Id: Exit.km,v 1.16 2002/05/31 15:59:17 kbarker Exp $ 
;; 

(Exit has
         (superclasses 	 (Move-Out-Of Reflexive-Cliche))
         (required-slot  (object agent origin))
         (primary-slot 	 (destination path))
         (secondary-slot ())
	 (cmap-correspondence (
			       (:seq agent "the exit'er")
			       (:seq object "the exit'er")
			       (:seq destination "final location")
			       (:seq origin "original location")
			       (:seq path "the portal")
			       ))
)

; The meaning of Exit is fully captured by its superclass, Move-Out-Of,
; with the Reflexive cliche.  Nothing more to add.
; (every Exit has ())

(every Exit has-definition
   (instance-of (Move-Out-Of Reflexive-Cliche)))

(every Exit has
  (text-active-verbseq-sg ("exits"))
  (text-active-verbseq-pl ("exit"))

  (text-base (()))
)


;; nothing extra to say about contextual info
;; inherited from Move and Action

(Exit has
      (test-case ('(
		    (*Johnny-doorway has 
			      (instance-of (Spatial-Entity))
			      (plays ((a Portal))))
                    (*Johnny-House-Location has (instance-of (Place)))
		    (*Johnny-House has (instance-of (Object))
		                (has-part    (*Johnny-Door))
                                (location    (*Johnny-House-Location)))
                    (*Inside-The-House has 
                        (instance-of (Place))
                        (is-inside (*Johnny-House)))

                    (*Johnny-boy has 
                       (instance-of (Living-Entity))
		       (location (*Inside-The-House)))

		    (a Exit with (agent (*Johnny-boy))
		                 (base (*Johnny-House)))
		    (the object of (thelast Exit))
		    ((the content of (the base of (thelast Exit))) includes 
                          *Johnny-boy)
		    ((the is-inside of (the location of *Johnny-boy)) includes *Johnny-House)

		    (do-and-next (thelast Exit))	
		    (the text-gen of (thelast Exit))	    
 
                    ((the is-outside of *Johnny-boy) includes *Johnny-House)
                    ((the does-not-enclose of *Johnny-House-Location) includes *Johnny-boy)

		    ;Test1: House shouldn't contain anything now
		    (not ((the content of *Johnny-House) includes *Johnny-boy))
		    ;Test2: *Johnny-boy is outside of the House
		    ((the is-outside of (the location of *Johnny-boy)) includes
                     *Johnny-House-Location)
		    ;Test3: John is not inside of the House
		    ((the does-not-enclose of *Johnny-House-Location) 
			  includes (the location of *Johnny-boy))
))))



;
;   $Id: Expand.km,v 1.5 2002/05/18 17:03:44 jarred Exp $
;

(Expand has 
  (superclasses (Increase)))

(every Expand has-definition
  (instance-of (Increase))
  (property (area))
)

(every Expand has
   (test-case ('(
                 (*myballon has (instance-of (Object))
                             (area (*myballonsarea)))
                 (*myballonsarea has (instance-of (Area-Value))
                                        (value ((:pair 43 *square-inches))))

                 (a Increase with (object (*myballon))
                                  (property (area)))

                 ((thelast Increase) isa Expand)

                 (do-and-next (thelast Expand))

                 ((the greater-than of (the area of *myballon))
                       includes *myballonsarea)

))));; 
;;    $Id: Expose.km,v 1.18 2002/04/10 21:32:44 kbarker Exp $ 
;; 

(Expose has
  (superclasses 	(Make-Accessible))
  (required-slot 	(object))
  (primary-slot 	(agent base))
  (secondary-slot      	())
  (cmap-correspondence 	(
			 (:seq object "the object Exposed")
			 (:seq agent "the Exposer")
			 (:seq base "the thing to which the object is Exposed")
			)))

(every Expose has
  ;; no resulting-state since by default everything is Exposed	
  (object 	((a Tangible-Entity)))
  (agent  	((must-be-a Entity)))
  (base  ((must-be-a Thing)))

  ;; an Expose defeats all the Be-Concealed states the object might be in
  (defeats ((if (has-value (the base of Self))
                then
                (allof (the object-of of (the object of Self))
                       where 
                       (((the classes of It) = Be-Concealed) and
			((the base of It) = (the base of Self))))
                else
                (allof (the object-of of (the object of Self))
                       where
                       ((the classes of It) = Be-Concealed)))))
		 
  ;; The precondition is not needed since it is the same as the del-list.
  ;; (pcs-list ())
  (del-list 	((forall (the defeats of Self)
			 (:triple (It) object (the object of Self) [Expose-del-1])))))

(comment [Expose-del-1] (:seq (the object of Self) " is no longer concealed.")
	 "An expose stops something from being concealed.")

(every Expose has
  (text-active-verbseq-sg ("exposes"))
  (text-active-verbseq-pl ("expose"))
  (text-passive-verbseq-sg ("gets exposed"))
  (text-passive-verbseq-pl ("get exposed"))

  (text-argslots ((:seq base instrument site path result)))
)

(every Expose has
	(preparatory-event (#|default|#
		(a Conceal with
		   (object ((the object of Self)))
		   (agent  ((the agent of Self)))
		   (base   ((the base of Self)))
))))


(Expose has (test-case ('(
			  (*Weapon has (instance-of (Object)))
			  
			  (a Conceal with 
			     (object (*Weapon)))
			  
			  (try-do-and-next (thelast Conceal))
			  
			  (has-value (the Be-Concealed object-of of *Weapon))
			  
			  (See has (superclasses (Action)))

			  (a See with 
			     (object (*Weapon)))
			  
			  ;; Event's precondition that object is not in inaccessible state is gone
			  ;; no need to do this test case
			  ;;(not (try-do (thelast See)))
			  
			  (a Expose with 
			     (object (*Weapon)))
			  
			  (try-do-and-next (thelast Expose))
			  
			  (not
			   (has-value (the Be-Concealed object-of of *Weapon)))
			  
			  (try-do (thelast See))
			  ))))



;; 
;;    $Id: Fall.km,v 1.15 2002/01/22 22:12:55 jarred Exp $ 
;; 

(Fall has
  (superclasses 	 (Move))
  (required-slot  	(object))
  (primary-slot 	(origin destination path))
  (secondary-slot 	())
  (cmap-correspondence 	(
			 (:seq object "the thing falling")
			 (:seq origin "starting point")
			 (:seq destination "terminal point")
			 (:seq path "moved through")
			)))

;; Not much to say about Fall except that it does not have
;; an agent and it has a required direction.
(every Fall has
       (direction ((constraint ((TheValue isa Direction-Value) and
				(TheValue = *down)))))
       (agent     ((exactly 0 Entity)))
       
       ;; the object of Self must not be supported
       (pcs-list  ((forall (the object of Self)
			   (:triple
			    It
			    object-of
			    (mustnt-be-a Be-Supported))))))
       
(every Fall has
  (text-passive-verbseq-sg ("falls"))
  (text-passive-verbseq-pl ("fall"))
)

;; nothing extra to say about contextual info
;; inherited from Move and Action

(every Fall has
   (preparatory-event (#|default|#
	(a Support with
	    (object ((the object of Self)))
	    (agent  ((the agent of Self))))
)))

(Fall has 
      (test-case ('(
		    (*meteor has 
			     (instance-of (Tangible-Entity)))
		    (*trailer has
			      (instance-of (Tangible-Entity)))
		    
					; *meteor fell on a *trailer.		 
		    (a Fall with 
		       (object 	(*meteor))
		       (destination ((the location of *trailer))))
		    
		    (do-and-next (thelast Fall))
		    
		    ((the location of *meteor) = (the location of *trailer))

                    (new-situation)

                    (*computer has (instance-of (Tangible-Entity)))
                    (*window has (instance-of (Tangible-Entity)))
                    (*patio has (instance-of (Tangible-Entity))
                                (is-under (*window)))

                            ; computer fell through the window onto the patio
                    (a Fall with
                            (object (*computer))
                            (path (*window))
                            (destination (*patio)))

                    (do-and-next (thelast Fall))

                    ((the location of *computer) = (the location of *patio))
                    ((the is-under of *computer) includes *window)

		    )))
      )

;; 
;;    $Id: Feed.km,v 1.12 2002/02/01 20:44:42 porter Exp $ 
;; 

(Feed has
	(superclasses 	(Supply))
	(required-slot  (recipient agent donor object))
	(primary-slot 	(instrument))
	(secondary-slot ())
	(cmap-correspondence (
			      (:seq object "food")
			      (:seq agent "feeder")
                              (:seq donor "donor")
                              (:seq recipient "recipient")
                              (:seq instrument "instrument")
			     ))
)

(every Feed has
       (donor     ((a Living-Entity)))
       (recipient ((a Living-Entity))) 
       (object ((a Tangible-Entity with
		   (plays ((a Food))))))
       )

(every Feed has
  (text-active-verbseq-sg ("feeds"))
  (text-active-verbseq-pl ("feed"))
  (text-passive-verbseq-sg ("is fed"))
  (text-passive-verbseq-pl ("are fed"))
)


;; nothing extra to say about contextual info

(Feed has
  (test-case ('(
		(*Food has (instance-of (Food)))
		
		(*cookies has 
			  (instance-of (Tangible-Entity))
			  (plays ((*Food))))
		#|		 (*cookies has
			   (instance-of (Tangible-Entity)))|#
		(*Mother-Teresa has
				(instance-of (Living-Entity))
				(possesses   (*cookies)))
		(*Children has (instance-of (Tangible-Entity)))

		;; *Mother-Teresa Feeds the *Children *Food
		(*Feed has
		       (instance-of (Feed))
		       (donor       (*Mother-Teresa))
		       (recipient   (*Children))
		       (object      (*cookies)))
		(do-and-next *Feed)
		
		;; Test 1: *Mother-Teresa does not have the *Food
		((the possesses of *Mother-Teresa) /= *cookies)
		
		;; Test 2: *Children have *Food
		((the possesses of *Children) = *cookies)
		
		;; Test 3: The implicit action enabled by Feed is Obtain
		((the enables of *Feed) isa Obtain)
	       )))
)





(Filter has
	(superclasses (Role))
	(required-slot ())
      	(primary-slot ())
       	(secondary-slot ())
       	(cmap-correspondence ())
       	(test-case ()))
	
(every Filter has
       (in-event ((must-be-a Event)))
       (played-by ((a Entity with
                      (instrument-of ((the in-event of Self)))))));; 
;;    $Id: Fluid.km,v 1.5 2001/05/01 22:23:44 pnav Exp $ 
;; 

(Fluid has 
       (superclasses (Substance))
       (required-slot ())
       (primary-slot ())
       (secondary-slot ())
       (description ("A substance, as a liquid or a gas, that is capable of
                       flowing and which changes its shape at a steady rate
                       when acted upon by a force. RHCD:508. Souther."))
       (cmap-correspondence ())
       (test-case ()))                          



;; 
;;    $Id: Food.km,v 1.6 2001/11/09 14:39:28 tierney Exp $ 
;; 

(Food has
	(superclasses (Role))
	(required-slot ())
	(primary-slot ())
	(secondary-slot ())
	(description ("Substance which provides nourishment to an organism.
                       Souther."))
	(cmap-correspondence ())
	(test-case ()))

(every Food has
	(in-event ((a Feed)))
	(played-by ((a Tangible-Entity with 
			(object-of ((the in-event of Self)))))))

;; 
;;    $Id: Force.km,v 1.3 2001/05/01 22:23:45 pnav Exp $ 
;; 

#| 
A Force is an energy or pressure that can affect a Tangible-Entity.
|#


(Force has
       (superclasses (Entity))
       (required-slot ())
       (primary-slot ())
       (cmap-correspondence ())
       (test-case ()))






(Frequency-Constant has
 (superclasses (Constant)))

  (*continually has
	(instance-of (Frequency-Constant)))

  (*hourly has
	(instance-of (Frequency-Constant)))

  (*daily has
	(instance-of (Frequency-Constant)))

  (*weekly has
	(instance-of (Frequency-Constant)))

  (*monthly has
	(instance-of (Frequency-Constant)))

  (*annually has
	(instance-of (Frequency-Constant)))

  (*rarely has
	(instance-of (Frequency-Constant)))

  (*never has
	(instance-of (Frequency-Constant)))



 

;; 
;;    $Id: Frequency-Scale.km,v 1.5 2001/10/09 00:54:52 jarred Exp $ 
;; 

(Frequency-Scale has
 (superclasses (Scale)))
 


;;
;; $Id: Frequency-Value.km,v 1.11 2002/03/12 14:29:29 kbarker Exp $
;;


(Frequency-Value has 
       (superclasses (Property-Value)))

(every Frequency-Value has
   (frequency-of ((must-be-a Event)))
   (less-than ((must-be-a Frequency-Value)))
   (greater-than ((must-be-a Frequency-Value)))
   (same-as ((must-be-a Frequency-Value)))
)

(Frequency-Value has
   (test-case ('(
                 (BasketballGame has (superclasses (Event)))
                 (CakeBake has (superclasses (Event)))
                 (*baking-my-cake has (instance-of (CakeBake))
                                (frequency ((a Frequency-Value))))
                 (*lakers-vs-6ers has (instance-of (BasketballGame))
                              (frequency
                                 ((a Frequency-Value with
                                     (value ((:pair *rarely BasketballGame)
                                     ))
                                     (same-as
                                        ((the frequency of *baking-my-cake)))
                              ))))

                 (the value of (the frequency of *lakers-vs-6ers))

             ;;    ((the same-as of (the frequency of *baking-my-cake))
             ;;          includes (the frequency of *lakers-vs-6ers))
                 ((the same-as of (the frequency of *lakers-vs-6ers))
                       includes (the frequency of *baking-my-cake))
))))
;; 
;;    $Id: Give.km,v 1.10 2001/11/29 20:49:59 kbarker Exp $ 
;; 

(Give has
         (superclasses 	 (Relinquish))
         (required-slot  (recipient agent donor object))
         (primary-slot 	 (instrument))
         (secondary-slot ())
         (cmap-correspondence (
			       (:seq object "the thing Given")      
                               (:seq agent "the Giver")
                               (:seq donor "the original possessor")
                               (:seq recipient "the final possessor")
                               (:seq instrument "the thing used to Give")
			      ))
)

(every Give has 
  (recipient ((a Tangible-Entity)))
)


(every Give has
  (text-active-verbseq-sg ("gives"))
  (text-active-verbseq-pl ("give"))
  (text-passive-verbseq-sg ("is given"))
  (text-passive-verbseq-pl ("are given"))
)


;; nothing extra to say about contextual info

(Give has 
  (test-case ('( 
		 (*Purple-Shirt has
			(instance-of (Tangible-Entity)))
		 (*Randy has
			(instance-of (Tangible-Entity))
			(possesses   (*Purple-Shirt)))
		 (*Samuel has
			(instance-of (Tangible-Entity)))

		 ;; *Randy gave *Samuel a *Purple-Shirt
		 (a Give with
			(donor 	   (*Randy))
			(recipient (*Samuel))
			(object    (*Purple-Shirt)))
		 (do-and-next (thelast Give))
		 (the text-gen of (thelast Give))
		 ;; Test 1: *Samuel has *Purple-Shirt
		 ((the possesses of *Samuel) = *Purple-Shirt)

		 ;; Test 2: *Randy does not have *Purple-Shirt
		 ((the possesses of *Randy) = nil)

		 ;; Test 3: *Purple-Shirt is owned by *Samuel
		 ((the is-possessed-by of *Purple-Shirt) = *Samuel)

		 ;; Test 4: *Randy is both the agent and the donor
		 ( ((the agent of (thelast Give)) = *Randy) and
                   ((the donor of (thelast Give)) = *Randy) )
	       )))
)





;; 
;;    $Id: Go-Through.km,v 1.1 2001/11/20 20:47:37 kbarker Exp $
;; 

(Go-Through has
	  (superclasses (Move-Through Reflexive-Cliche))
	  (required-slot (agent object path))
	  (primary-slot (origin destination))
	  (secondary-slot ())
	  (cmap-correspondence (
				(:seq object "the thing going through")
				(:seq agent "the thing going through")
				(:seq path "the barrier gone through")
				(:seq origin "the place left")
				(:seq destination "the place gone to")
				 )))

; Go-Through is a specialization of Move-Through with the Reflexive cliche

(every Go-Through has
  (text-active-verbseq-sg
     ("goes"))
  (text-active-verbseq-pl
     ("go"))
)


;; nothing extra to say about contextual info
;; inherited from Move and Action

(Go-Through has
	  (test-case ()))




; 
;;    $Id: Go-To.km,v 1.14 2002/04/10 21:32:45 kbarker Exp $ 
;; 

(Go-To has
  (superclasses         (Locomotion))
  (required-slot        (agent object destination))
  (primary-slot         (origin path))
  (cmap-correspondence  (
                         (:seq object "the thing moved")
                         (:seq agent "the mover")
                         (:seq origin "moved from")
                         (:seq destination "moved to")
                         (:seq path "moved through")
                         (:seq toward "moved toward")
                         (:seq away-from "moved away from")
                        )))


(every Go-To has
       (destination ((a Spatial-Entity))))

(every Go-To has
  (text-active-verbseq-sg ("goes"))
  (text-active-verbseq-pl ("go"))

  (text-argslots ((:seq destination)))
)


;; nothing extra to say about contextual info
;; inherited from Move and Action

(every Go-To has
   (preparatory-event (#|default|#
	(a Leave with
	   (destination ((the origin of Self)))
	   (object      ((the object of Self))))
)))

(Go-To has 
         (test-case      ('(
                            (new-situation)

                            (*Gracie-Lou has (instance-of (Object)))
                            (*Bass-Hall has (instance-of (Object)))

                            (a Go-To with
                               (agent       (*Gracie-Lou))
                               (destination (*Bass-Hall)))
                            (do-and-next (thelast Go-To))
                            (the text-gen of (thelast Go-To))
                            ((the location of *Gracie-Lou) =
                             (the location of *Bass-Hall))
))))

; 
;;    $Id: Goal.km,v 1.1 2002/05/22 19:48:56 kbarker Exp $
;; 

(Goal has
  (superclasses (Event))
)

;; Goal is a kind of dummy Event. Usually, a has-goal or objective will 
;; be some specific kind of Event. But if the has-goal or objective is
;; to prevent, cause, inhibit, enable, etc. some Event, then the filler
;; of has-goal/objective will be a Goal

;; Goals that cause or enable are straightforward. Goals that prevent or
;; inhibit pose a problem. Normally when you say that the goal is to
;; cause X, some instance of X will do. When you say that the goal is to
;; prevent X, it means prevent all instances of X. For example:
;;
;; (has-goal ((a Goal with (causes ((a Ruckus))))))   ; a new instance of 
;;                                                    ; Ruckus is just fine
;;
;; (has-goal ((a Goal with (prevents ((a Riot))))))   ; doesn't usually mean
;;                                                    ; only a particular Riot
;;
;; For now, we'll have to settle for using instances here.

(Goal has (test-case      
   ('(
      (new-situation)

      (*yourMoney has (instance-of (Object))
                      (is-possessed-by (*you)))
      (*myThievery has (instance-of (Event))
                       (objective ((a Obtain with
                                         (object (*yourMoney))))))
      (*you has (instance-of (Object))
                (has-goal ((a Goal with
                                (prevents (*myThievery))))))

))))




;
;   $Id: Heat.km,v 1.5 2002/05/18 17:03:44 jarred Exp $
;

(Heat has 
  (superclasses (Increase)))

(every Heat has-definition
  (instance-of (Increase))
  (property (temperature))
)


(every Heat has
   (test-case ('(
                 (*mytea has (instance-of (Substance))
                             (temperature (*myteatemperature)))
                 (*myteatemperature has (instance-of (Temperature-Value))
                                        (value ((:pair *cool Substance))))

                 (a Increase with (object (*mytea))
                                  (property (temperature)))

                 ((thelast Increase) isa Heat)

                 (do-and-next (thelast Heat))

                 ((the greater-than of (the temperature of *mytea))
                       includes *myteatemperature)

))))

 
(Height-Constant has
  (superclasses (Constant)))
 
  (*average has
     (instance-of (Height-Constant))) 
 
  (*short has
     (instance-of (Height-Constant)))

  (*tall has
     (instance-of (Height-Constant)))
;; 
;;    $Id: Height-Scale.km,v 1.5 2001/10/09 00:54:53 jarred Exp $ 
;; 

(Height-Scale has
 (superclasses (Scale)))

;;
;; $Id: Height-Value.km,v 1.11 2002/03/12 14:29:29 kbarker Exp $
;;


(Height-Value has 
       (superclasses (Property-Value)))

(every Height-Value has
   (height-of ((must-be-a Tangible-Entity)))
   (less-than ((must-be-a Height-Value)))
   (greater-than ((must-be-a Height-Value)))
   (same-as ((must-be-a Height-Value)))
)


(Height-Value has
   (test-case ('(
                 (Stick has (superclasses (Object)))
                 (Tree has (superclasses (Object)))
                 (*mybigstick has (instance-of (Stick))
                                (height ((a Height-Value))))
                 (*myshortstick has (instance-of (Stick))
                              (height
                                 ((a Height-Value with
                                     (value ((:pair 1.5 *foot)
                                             (:pair *average Stick)
                                             (:pair *short Tree)
                                     ))
                                     (less-than
                                        ((the height of *mybigstick)))
                              ))))

                 (the value of (the height of *myshortstick))

                 ((the less-than of (the height of *myshortstick))
                       includes (the height of *mybigstick))
                 ((the greater-than of (the height of *mybigstick))
                       includes (the height of *myshortstick))
))))
;; 
;;    $Id: Hold.km,v 1.16 2001/12/17 20:46:00 pnav Exp $ 
;; 

(Hold has
  (superclasses		(Obstruct))
  (required-slot   	(object agent))
  (primary-slot 	())
  (secondary-slot      	())
  (cmap-correspondence 	(
			 (:seq object "the thing Held")
			 (:seq agent "the Holder")
			)))

(every Hold has

  (object 	   ((a Tangible-Entity)))
  (agent  	   ((a Tangible-Entity)))
  (resulting-state ((a Be-Held)))

  ;; We need to specify one more post-condition where the
  ;; agent is also the agent of the resulting state.
  (add-list ((:triple 
	       (the resulting-state of Self)
	       agent
	       (the agent of Self) [Hold-add-1])))

  ;; During Condition: The agent and the object abut during the Hold
  (dcs-list ((forall (the agent of Self)
		     (:triple
		      It
		      abuts
		      (the object of Self) [Hold-dcs-1]))))
	    
  ;; A Hold can be interrupted if the object is 
  ;; Let-Go-Of by the agent.
  (interrupted-by ((must-be-a Let-Go-Of with
		     (object ((the object of Self)))
		     (agent  ((the agent of Self))) [Hold-interrupted-1])))
)

(comment [Hold-add-1] (:seq (the agent of Self) " is now holding.")
	 "A holder will continue holding something until it is let go.")

(comment [Hold-dcs-1] (:seq (the agent of Self) " abuts " (the object of Self))
	 "A holder must be next to something it holds.")

(comment [Hold-interrupted-1] (:seq (the agent of Self) " let go of " (the object of Self))
	 "A let go of stops a holder from holding something.")

(every Hold has
  (text-active-verbseq-sg ("holds"))
  (text-active-verbseq-pl ("hold"))
  (text-passive-verbseq-sg ("gets held"))
  (text-passive-verbseq-pl ("get held"))
)


(Hold has 
      (test-case ('(
			(*toy-train has
			  (instance-of (Tangible-Entity)))
			(*little-johny has
			  (instance-of (Living-Entity)))

			(a Hold with 
			   (object (*toy-train))
			   (agent  (*little-johny)))

			(not (the Be-Held object-of of *toy-train))

			(do-and-next (thelast Hold))
			(the text-gen of (thelast Hold))
			(has-value (the Be-Held object-of of *toy-train))
 
                        (*Move1 has
			  (instance-of (Move))
			  (object (*toy-train)))

			(*Move2 has 
			  (instance-of (Move))
			  (object (*toy-train))
			  (agent  (*little-johny)))

                        ;; (not (try-do *Move1))
			;; above line commented out for now because km will halt upon error
			;; the *abort-on-error-report* stops the whole test script, which is not suitable
			;; 03/02/2001 jf

			(try-do *Move2)
			(the text-gen of (thelast Move))
                        (a Let-Go-Of with
                           (object (*toy-train))
                           (agent  (*little-johny)))

                        (do-and-next (thelast Let-Go-Of))
			(the text-gen of (thelast Let-Go-Of))
                        (not (has-value (the Be-Held object-of of *toy-train)))

			(*Move3 has
			  (instance-of (Move))
			  (object (*toy-train)))
	
			(try-do *Move3)
			(the text-gen of (thelast Move))
		))))




;; 
;;    $Id: Inanimate-Object.km,v 1.5 2001/05/15 18:40:56 pnav Exp $ 
;; 

(Inanimate-Object has
		  (superclasses (Object))
		  (required-slot ())
		  (primary-slot ())
		  (secondary-slot ())
                  (description ("A non-living thing"))
		  (cmap-correspondence ())
		  (test-case ()))






;
;   $Id: Increase.km,v 1.5 2002/05/18 17:03:45 jarred Exp $
;

(Increase has 
  (superclasses (Action)))

(every Increase has
  (pcs-list ((:triple (the object of Self)
                      (the property of Self)
                      (an instance of (the range of (the property of Self)))
  [Increase-pcs-1])))

  (del-list ((:triple (the object of Self) (the property of Self) * [Increase-del-1])))

  (add-list ((:triple (the object of Self)
                      (the property of Self)
                      (an instance of (the range of (the property of Self)) with
                         (greater-than (
                            (in-situation 
                               (the before-situation of Self)
                               (the (the property of Self) of 
                                    (the object of Self))))))
  [Increase-add-1])))
)

(comment [Increase-pcs-1] (:seq (the property of (the object of Self)) " must be in the range of the property.")
	 "One cannot increase an improperly-valued property.")

(comment [Increase-del-1] (:seq "The old value of " (the property of Self) " is no longer valid.")
	 "An increase changes the old value of a property.")

(comment [Increase-add-1] (:seq (the property of (the object of Self)) " has a new, greater value.")
	 "An increase grows the value for a property.")
;; 
;;    $Id: Information-Sequence.km,v 1.1 2001/05/28 19:29:23 kbarker Exp $ 
;; 

(Information-Sequence has
          (superclasses (Sequence Information))
          (required-slot ())
          (primary-slot ())
          (description ("A sequence which encodes information.  Biological
                         examples are DNA, RNA, and the amino acid sequence of
                         proteins (which determines folding). Souther. "))
          (secondary-slot ()) )




;;
;;    $Id: Information-Storage.km,v 1.6 2002/04/17 19:37:45 kbarker Exp $
;;
        
(Information-Storage has
  (superclasses (Be-Stored)))
     
(every Information-Storage has
  (object ((a Information))))


;;
;;    $Id: Information-Transfer.km,v 1.6 2001/09/20 18:27:47 kbarker Exp $
;;
  
(Information-Transfer has
        (superclasses   (Transfer))
        (required-slot  (object))
        (primary-slot   (agent donor recipient instrument))
        (secondary-slot ())
	(description	("The transfer of information from one entity to 
                          another.  Souther.")))

(every Information-Transfer has
  (object       ((a Information)))
)

(every Information-Transfer has
  (text-active-verbseq-sg ("transfers"))
  (text-active-verbseq-pl ("transfer"))
  (text-passive-verbseq-sg ("gets transferred"))
  (text-passive-verbseq-pl ("get transferred"))
)


;;
;;    $Id: Information.km,v 1.1 2001/05/28 19:29:26 kbarker Exp $
;;
        
(Information has
          (superclasses (Intangible-Entity))
          (required-slot ())
          (primary-slot ())
          (description ("Knowledge communicated or received concerning a 
                         particular fact or circumstance. RHCD:1st Revised:
                         684."))
          (secondary-slot ()) )




;; 
;;    $Id: Instrument-Role.km,v 1.1 2001/09/25 19:35:21 kbarker Exp $
;; 

(Instrument-Role has
	    (superclasses (Role))
	    (required-slot ())
	    (primary-slot ())
	    (secondary-slot ())
	    (cmap-correspondence ())
	    (test-case ()))

(every Instrument-Role has
       (in-event ((must-be-a Event)))
       (played-by ((a Entity with
		      (instrument-of ((the in-event of Self)))))))


;; 
;;    $Id: Intangible-Entity.km,v 1.3 2001/05/01 22:23:49 pnav Exp $ 
;; 

(Intangible-Entity has
		   (superclasses (Entity))
		   (required-slot ())
		   (primary-slot ())
		   (secondary-slot ())
		   (cmap-correspondence ())
		   (test-case ()))






(Integrity-Constant has
  (superclasses (Constant)))
 
  (*impermeable has
     (instance-of (Integrity-Constant))) 
 
  (*semi-permeable has
     (instance-of (Integrity-Constant)))

  (*permeable has
     (instance-of (Integrity-Constant)))
;; 
;;    $Id: Integrity-Scale.km,v 1.3 2001/10/09 00:54:56 jarred Exp $
;; 

(Integrity-Scale has
 (superclasses (Scale)))

;;
;; $Id: Integrity-Value.km,v 1.10 2002/03/12 14:29:30 kbarker Exp $
;;


(Integrity-Value has 
       (superclasses (Property-Value)))

(every Integrity-Value has
   (integrity-of ((must-be-a Tangible-Entity)))
   (less-than ((must-be-a Integrity-Value)))
   (greater-than ((must-be-a Integrity-Value)))
   (same-as ((must-be-a Integrity-Value)))
)

(Integrity-Value has
   (test-case ('(
                 (Cheese has (superclasses (Substance)))
                 (*Romano has (instance-of (Cheese))
                                (integrity ((a Integrity-Value))))
                 (*Swiss has (instance-of (Cheese))
                              (integrity
                                 ((a Integrity-Value with
                                     (value ((:pair *permeable Cheese)
                                     ))
                                     (less-than
                                        ((the integrity of *Romano)))
                              ))))

                 (the value of (the integrity of *Swiss))

                 ((the less-than of (the integrity of *Swiss))
                       includes (the integrity of *Romano))
                 ((the greater-than of (the integrity of *Romano))
                       includes (the integrity of *Swiss))
))))


(Intensity-Constant has
 (superclasses (Constant)))

(*weak has 
	(instance-of (Intensity-Constant)))

(*strong has
	(instance-of (Intensity-Constant)))


(*low has
	(instance-of (Intensity-Constant)))

(*medium has
	(instance-of (Intensity-Constant)))

(*high has
	(instance-of (Intensity-Constant)))


;; 
;;    $Id: Intensity-Scale.km,v 1.5 2001/10/09 00:54:58 jarred Exp $ 
;; 

(Intensity-Scale has
 (superclasses (Scale)))
 


;;
;; $Id: Intensity-Value.km,v 1.10 2002/03/12 14:29:30 kbarker Exp $
;;


(Intensity-Value has 
       (superclasses (Property-Value)))

(every Intensity-Value has
   (intensity-of ((must-be-a Thing)))
   (less-than ((must-be-a Intensity-Value)))
   (greater-than ((must-be-a Intensity-Value)))
   (same-as ((must-be-a Intensity-Value)))
)


(Intensity-Value has
   (test-case ('(
                 (Star has (superclasses (Thing)))
		 (Lightbulb has (superclasses (Thing)))
                 (*whitegiant has (instance-of (Drink))
                                (intensity ((a Intensity-Value))))
                 (*browndwarf has (instance-of (Drink))
                              (intensity
                                 ((a Intensity-Value with
                                     (value ((:pair *strong Lightbulb)
                                             (:pair *weak Star)
					     (:pair 1000001 *kilocalorie/mole)
                                     ))
                                     (less-than
                                        ((the intensity of *whitegiant)))
                              ))))

                 (the value of (the intensity of *browndwarf))

                 ((the less-than of (the intensity of *browndwarf))
                       includes (the intensity of *whitegiant))
                 ((the greater-than of (the intensity of *whitegiant))
                       includes (the intensity of *browndwarf))
))))

;; 
;;    $Id: Intentional.km,v 1.1 2002/05/23 15:02:55 kbarker Exp $
;; 

(Intentional has (superclasses (Cliche)))

(every Intentional has-definition
       (instance-of (Thing))
       (agent ((a Entity)))
       (objective ((a Event with (is-goal-of ((the agent of Self))))))
)

(every Intentional has
       (agent  ((a Entity)))
       (objective ((a Event with (is-goal-of ((the agent of Self))))))
)

(Intentional has
  (test-case ('(
                 (*chicks has (instance-of (Object)))
                 (Impress has (superclasses (Action)))
                 (Work-Out has (superclasses (Action)))
                 (a Impress with (object (*chicks)))

		 (*Sal has (instance-of (Entity))
                          (has-goal ((thelast Impress))))

                 (the has-goal of *Sal)

                 (a Work-Out with 
                    (agent (*Sal))
                    (objective ((thelast Impress))))

                 ((thelast Work-Out) isa Intentional)
                 ((the has-goal of *Sal) 
                       includes 
                  (the objective of (thelast Work-Out)))
))))

; 
;;    $Id: Invade.km,v 1.1 2002/05/23 16:09:35 kbarker Exp $
;; 

(Invade has
  (superclasses         (Trespass Intentional))
  (required-slot        (agent object destination))
)

;; Invade is merely (for now) an Intentional Trespass

(every Invade has
  (text-active-verbseq-sg ("invades"))
  (text-active-verbseq-pl ("invade"))

  (text-argslots ((:seq destination)))
  (text-destination (""))
)


(Invade has 
    (test-case ('(
                  (new-situation)

                  (*Dwayne has (instance-of (Entity)))
                  (*DwaynesProperty has (instance-of (Spatial-Entity))
                                         (is-possessed-by (*Dwayne)))
                  (*Venutian has (instance-of (Entity)))

                  (a Invade with (agent (*Venutian))
                                   (destination (*DwaynesProperty)))

                  ((the is-possessed-by of 
                        (the destination of (thelast Invade)))
                   = *Dwayne)

                  ((the prevents of (the has-goal of *Dwayne))
                   includes
                   (thelast Invade))

                  ((the is-goal-of of (the objective of (thelast Invade)))
                   = *Venutian)

                  ((the has-goal of *Venutian) 
                   includes
                   (the objective of (thelast Invade)))

                  (do-and-next (thelast Invade))

                  ((the location of *Venutian) = *DwaynesProperty)

))))

;; 
;;    $Id: KM-Class.km,v 1.1 2001/11/28 15:34:00 kbarker Exp $
;; 

(KM-Class has
	(superclasses (Thing))
	(required-slot ())
	(primary-slot ())
	(secondary-slot ())
	(cmap-correspondence ())
	(test-case ()))


;; 
;;    $Id: KM-Slot-Group.km,v 1.5 2001/05/18 21:33:36 porter Exp $ 
;; 

; a Group of Slot's used by KM machinery - not by SME's

(KM-Slot-Group has
	       (superclasses (Slot)))

(every KM-Slot-Group has
               (domain (Thing))
               (range (Thing))
               (inverse ()) ; no inverse for this "grouper"
               (cardinality (N-to-N))
               (fluent-status (*Non-Fluent)))


;; 
;;    $Id: Leave.km,v 1.16 2002/05/31 15:59:18 kbarker Exp $ 
;; 

(Leave has
       (superclasses   (Locomotion))
       (required-slot  (agent object origin))
       (primary-slot   (destination path))
       (cmap-correspondence (
			       (:seq object "the thing Left")
			       (:seq agent "the Leaver")
			       (:seq origin "the place Left from")
			       (:seq destination "the place Left to")
			       (:seq path "the place Left along or through")
			       (:seq toward "the place Left toward")
			       (:seq away-from "the place Left away from")
			       )))


(every Leave has 
  (origin ((a Spatial-Entity))))


(every Leave has
  (text-active-verbseq-sg ("leaves"))
  (text-active-verbseq-pl ("leave"))

  (text-argslots ((:seq origin)))
  (text-origin (NIL))
)


;; nothing extra to say about contextual info
;; inherited from Move and Action

(every Leave has
   (preparatory-event (#|default|#
	(a Go-To with
	   (destination ((the origin of Self)))
	   (object      ((the object of Self))))
)))


(Leave has 
	 (test-case 	 ('(
			    (new-situation)
			    (*Boston has
			     (instance-of (Place)))
			    (*Austin has
			     (instance-of (Place)))
			    (*John has
			     (instance-of (Living-Entity)))
			    (*John has
			     (location (*Boston)))
			    ((*John location) = *Boston)

			    ; *John moves from where he used to be to *Austin
			    (a Leave with
			       (agent 	    (*John))
			       (origin 	    ((*John location)))
			       (destination (*Austin)))
			    (do-and-next (thelast Leave))
			    (the text-gen of (thelast Leave))
			    
			    ; Test1: *John is in *Austin
			    ((*John location) = *Austin)
			    
			    ; Test2: *John is not in *Boston anymore
			    ((*John location) /= *Boston)
))))






(Length-Constant has
  (superclasses (Constant)))

  (*short has
     (instance-of (Length-Constant)))

  (*long has
     (instance-of (Length-Constant)))
;; 
;;    $Id: Length-Scale.km,v 1.5 2001/10/09 00:54:59 jarred Exp $ 
;; 

(Length-Scale has
 (superclasses (Scale)))

;;
;; $Id: Length-Value.km,v 1.11 2002/03/12 14:29:30 kbarker Exp $
;;


(Length-Value has 
       (superclasses (Property-Value)))

(every Length-Value has
   (length-of ((must-be-a Spatial-Entity)))
   (less-than ((must-be-a Length-Value)))
   (greater-than ((must-be-a Length-Value)))
   (same-as ((must-be-a Length-Value)))
)

(Length-Value has
   (test-case ('(
                 (Stick has (superclasses (Object)))
                 (Tree has (superclasses (Object)))
                 (*mybigstick has (instance-of (Stick))
                                (length ((a Length-Value))))
                 (*myshortstick has (instance-of (Stick))
                              (length
                                 ((a Length-Value with
                                     (value ((:pair 20 *inch)
                                             (:pair *short Stick)
                                             (:pair *short Tree)
                                     ))
                                     (less-than
                                        ((the length of *mybigstick)))
                              ))))

                 (the value of (the length of *myshortstick))

                 ((the less-than of (the length of *myshortstick))
                       includes (the length of *mybigstick))
                 ((the greater-than of (the length of *mybigstick))
                       includes (the length of *myshortstick))
))))

;
;   $Id: Lengthen.km,v 1.5 2002/05/18 17:03:46 jarred Exp $
;

(Lengthen has 
  (superclasses (Increase)))

(every Lengthen has-definition
  (instance-of (Increase))
  (property (length))
)

(every Lengthen has
   (test-case ('(
                 (*mycarantenna has (instance-of (Substance))
                             (length (*mycarantennalength)))
                 (*mycarantennalength has (instance-of (Length-Value))
                                        (value ((:pair 10000 *millimeter))))

                 (a Increase with (object (*mycarantenna))
                                  (property (length)))

                 ((thelast Increase) isa Lengthen)

                 (do-and-next (thelast Lengthen))

                 ((the greater-than of (the length of *mycarantenna))
                       includes *mycarantennalength)

))));; 
;;    $Id: Let-Fall.km,v 1.15 2002/04/10 21:31:02 kbarker Exp $ 
;; 

(Let-Fall has
  (superclasses       	(Unobstruct))
  (required-slot      	(object agent causes))
  (primary-slot       	())
  (secondary-slot	())
  (cmap-correspondence  (
			 (:seq object "object")
			 (:seq agent "causer")
			 (:seq causes "causes")
			)))

(every Let-Fall has
  (object   ((a Tangible-Entity)))
  (agent    ((a Tangible-Entity)))
  (causes   ((a Fall with
		(object ((the object of Self))))))

  ; Let-Fall will remove an object from a Be-Supported state.
  (defeats  ((allof (the object-of of (the object of Self))
		    where
		    ((the classes of It) = Be-Supported))))

  (pcs-list ((forall (the object of Self)
	       (:triple
		 It
                 object-of
                 (a Be-Supported) [Let-Fall-pcs-1]))))

  (del-list ((forall (the defeats of Self)
	       (:triple It object (the object of Self) [Let-Fall-del-1]))))
)

(comment [Let-Fall-pcs-1] (:seq (the object of Self) " must be supported before it can fall.")
	 "Something must be supported by something else before it can fall.")

(comment [Let-Fall-del-1] (:seq (the object of Self) " is no longer being supported.")
	 "A let-fall stops something from being supported.")

(every Let-Fall has
  (text-active-verbseq-sg ("lets"))
  (text-active-verbseq-pl ("let"))
  (text-passive-verbseq-sg ("is left to"))
  (text-passive-verbseq-pl ("are left to"))

  (text-argslots ((:seq text-particle destination)))
  (text-particle ("fall"))

)


;; The following are some additional contextual information
;; we want to say about this component.
(every Let-Fall has
  (preparatory-event (
		   ; The agent must first move to where the
		   ; object is.
		   (#|default|#
		     (a Move with
			(object      ((the agent of Self)))
			(destination ((a Spatial-Entity with
                                         (is-at ((the object of Self)))))))
		     (a Support with 
			(object      ((the object of Self)))
			(agent 	     ((the agent of Self)))
			(instrument  ((the instrument of Self))))

)))
  (interrupted-by ((must-be-a Support with
                     (object ((the object of Self))))))
)


;; Tests cases are incorporated with that of Support and
;; can be found in Support.km
(Let-Fall has (test-case ()))

;; 
;;    $Id: Let-Go-Of.km,v 1.12 2002/01/10 17:06:04 kbarker Exp $ 
;; 

(Let-Go-Of has
  (superclasses		(Unobstruct))
  (required-slot   	(object agent))
  (primary-slot 	())
  (secondary-slot      	())
  (cmap-correspondence 	(
			 (:seq object "object")
			 (:seq agent  "agent")
			)))

(every Let-Go-Of has
  (object  ((a Tangible-Entity)))
  (agent   ((a Tangible-Entity))) 

  (defeats ((allof (the object-of of (the object of Self))
		   where 
		   ( ((the classes of It) = Be-Held) and
		     ((the agent of It) = (the agent of Self))))))
 
  ;; previously has a precond that agent must be in a Be-Held state
  ;; precond removed in the spirit of Detach precond
 
  ;; We add that the agent will no longer be the agent of the 
  ;; Be-Held State and the object will no longer be the object 
  ;; of the Be-Held State.
  (del-list ((forall (the defeats of Self)
	       (:set
		 (:triple It object (the object of Self) [Let-Go-Of-del-1])
		 (:triple It agent (the agent of Self) [Let-Go-Of-del-2])))))

  ;; During Condition: The location of the agent and the
  ;;    object are the same during the process of carrying
  ;;    out the Hold.
  (dcs-list ((forall (the location of (the agent of Self))
		     (:triple
		      It
		      is-at
		      (the location of (the object of Self)) [Let-Go-Of-dcs-1]))))

  ;; The interrupted-by is the inverse of that of Hold. In other
  ;; words, a Let-Go-Of is interrupted if the agent Holds the
  ;; object during the process.
  (interrupted-by ((must-be-a Hold with
                     (object ((the object of Self)))
                     (agent  ((the agent of Self))) [Let-Go-Of-interrupted-1]))))

(comment [Let-Go-Of-del-1] (:seq (the object of Self) " is no longer held.")
	 "A let-go-of stops something from being held.")

(comment [Let-Go-Of-del-2] (:seq (the agent of Self) " is no longer holding " (the object of Self))
	 "A let-go-of stops something from holding something else.")

(comment [Let-Go-Of-dcs-1] (:seq "The location of " (the agent of Self) " is the same as the location of " (the object of Self))
	 "Something that is held is in the same place as that which is holding it.")

(comment [Let-Go-Of-interrupted-1] "A hold interrupts a let-go-of"
	 "A hold stops a let-go-of.")


(every Let-Go-Of has
  (text-active-verbseq-sg ("lets go of"))
  (text-active-verbseq-pl ("let go of"))
  (text-passive-verbseq-sg ("is let go of"))
  (text-passive-verbseq-pl ("are let go of"))
)


;; nothing extra to say about contextual info

;; Test cases are incorporated with that of Hold and can be
;; found in Hold.km
(Let-Go-Of has (test-case ()))

;; 
;;    $Id: Living-Entity.km,v 1.7 2002/05/31 16:15:25 kbarker Exp $ 
;; 

(Living-Entity has
	       (superclasses (Object))     ;; used to be Organic-Structure
	       (required-slot ())
	       (primary-slot ())
	       (secondary-slot ())
	       (cmap-correspondence ())
	       (description ("An organic structure at the cell level or above
                              which is functionally integrated, such as cells,
                              tissues, organs, or organisms.   Souther."))
	       (test-case ())) 





;; 
;;    $Id: Living-Group.km,v 1.1 2002/05/31 15:55:07 kbarker Exp $ 
;; 

(Living-Group has
	  (superclasses (Living-Entity Ensemble))
	  (required-slot ())
	  (primary-slot ())
	  (secondary-slot ())
	  (description ("Any functionally related group of living entities,
                         like the cells of an organ, a population of
                         individuals, an ecological community, etc.
                         Souther. "))
	  (cmap-correspondence ())
	  (test-case ()))

(every Living-Group has 
       ;; TODO replace has-part with members ?
       (has-part ((a Living-Entity)
		  (at-least 2 Living-Entity) )))

;; 
;;    $Id: Load.km,v 1.3 2002/03/20 22:46:34 jfan Exp $
;; 

(Load has
         (superclasses 	 (Move-Into))
         (required-slot  (object base))
         (primary-slot 	 (destination origin path))
         (secondary-slot ())
)

(every Load has
  (causes ((a Activate with (object ((the base of Self))))))

  (text-active-verbseq-sg ("loads"))
  (text-active-verbseq-pl ("load"))

  (text-base (("into")))

)



;; 
;;    $Id: Locomotion.km,v 1.11 2002/05/31 15:59:18 kbarker Exp $ 
;; 

(Locomotion has
	    (superclasses (Move Reflexive-Cliche))
	    (required-slot       (object agent))
	    (primary-slot 	 ())
	    (secondary-slot      ())
	    (cmap-correspondence (
				  (:seq agent "the mover")
				  (:seq object "the mover")
				  ))
)

; Locomotion is a reflexive Move (i.e. the agent and object are the 
; same).  This definition is completely captured by the superclass
; Move and the Reflexive cliche.

(every Locomotion has
  (text-active-verbseq-sg ("locomotes"))
  (text-active-verbseq-pl ("locomote"))
)


;; nothing extra to say about contextual info
;; inherited from Move and Action

(Locomotion has 
	    (test-case ('(
			  (new-situation)
			  (*Boston has (instance-of (Place)))
			  (*Austin has (instance-of (Place)))
			  (*John has (instance-of (Living-Entity)))
			  (*John has (location (*Boston)))

			  ;John Locomotes from Boston to Austin
			  (a Locomotion with
			   (agent (*John))
			   (origin (*Boston))
			   (destination   (*Austin)))
			  (do-and-next (thelast Locomotion))
			  (the text-gen of (thelast Locomotion))
			  ;Test1: John is now in Austin
			  ((the location of *John) = *Austin)
			  ))))





;; 
;;    $Id: Lose.km,v 1.10 2002/05/16 18:17:55 kbarker Exp $ 
;; 

(Lose has
  	(superclasses	(Transfer))
	(required-slot  (object donor))
	(primary-slot	(agent recipient instrument))
	(secondary-slot ())
	(cmap-correspondence (
			       (:seq object "the thing lost")
                               (:seq agent "causer")
                               (:seq donor "donor")
                               (:seq recipient "recipient")
                               (:seq instrument "instrument")
			     ))
)


(every Lose has
  (donor ((a Tangible-Entity)))
  
  ;; This axiom is temporarily ommitted because it
  ;; may be to restrictive.
  ;;
  ;; (recipient     ((<> (the donor of Self))))

  ;; The pre and post-conditions of this concept
  ;; are directly inheritted from Transfer.
)

(every Lose has
  (text-active-verbseq-sg ("loses"))
  (text-active-verbseq-pl ("lose"))
  (text-passive-verbseq-sg ("is lost"))
  (text-passive-verbseq-pl ("are lost"))

  (text-subj ((if (has-value (the agent of Self))
               then (the agent of Self)
               else (if (has-value (the instrument of Self))
                     then (the instrument of Self)
                     else (the donor of Self)))))

  (text-argslots ((:seq recipient instrument)))        ; donor will be subj

  (text-active-sentence (
     (:seq (if ((the text-subj of Self) /= (the donor of Self))
            then (:seq
                    (the text-subj-phrase of Self)
                    (if ((the number of (the text-subj of Self)) = 1)
                     then ("causes")
                     else ("cause"))
                    (andify (the text-phrase of (the donor of Self)))
                    ("to")
                    (the text-active-verbseq-pl of Self)
                 )
            else (:seq
                    (the text-subj-phrase of Self)
                    (the text-active-phrase of Self)
                 ))
           (the text-dobj-phrase of Self)
           (the text-arguments of Self)
  )))
)


;; nothing extra to say about contextual info

(Lose has 
  (test-case ('( 
                 (*Mark has (instance-of (Tangible-Entity)))
                 (*Book has (instance-of (Tangible-Entity)))
		 (*Mark has 
			(instance-of (Tangible-Entity))
			(possesses   (*Book))) 

		 ;; *Mark Lost the *Book
                 (*Lose has
                        (instance-of (Lose))
                        (donor  (*Mark))
                        (object (*Book)))
                 (do-and-next *Lose)
		 (the text-gen of (thelast Lose))
		 ;; Test 1: *Mark no longer has the *Book
                 ((the possesses of *Mark) = nil) 

		 ;; Test 2: The *Book is no longer owned by *Mark
		 ((the is-possessed-by of *Book) /= *Mark)
               )))
)





;; 
;;    $Id: Make-Accessible.km,v 1.20 2002/04/10 21:31:03 kbarker Exp $ 
;; 

(Make-Accessible has
  (superclasses 	(Action))
  (required-slot 	(object))
  (primary-slot 	(agent base))
  (secondary-slot      	())
  (cmap-correspondence 	(
			 (:seq object "the thing made accessible")
			 (:seq agent "the entity that makes the object Accessable")
			 (:seq base "what the object is made accessible to")
			)))

(every Make-Accessible has
       (object 	    ((a Entity)))
       (agent  	    ((must-be-a Entity)))
       (base        ((must-be-a Thing)))
       ;; no resulting-state since by default everything is accessible

       ;; a Make-Accessible defeats all the Be-Inaccessible states 
       ;; the object might be in
       (defeats ((if (has-value (the base of Self))
		     then
		     (allof (the object-of of (the object of Self))
			    where 
			    (((the classes of It) = Be-Inaccessible) and
			     ((the base of It) = (the base of Self))))
		     else 
		     (allof (the object-of of (the object of Self))
			    where
			    ((the classes of It) = Be-Inaccessible)))))
	 
       ;; The precondition is not needed since it is the same as the del-list.
       ;; (pcs-list ())
       (del-list ((forall (the defeats of Self)
                          (:triple (It) object (the object of Self) [Make-Accessible-del-1])))))

(comment [Make-Accessible-del-1] (:seq (the object of Self) " is now accessible.")
	 "A make-accessible stops something from being inaccessible.")

(every Make-Accessible has
  (text-active-verbseq-sg ("makes"))
  (text-active-verbseq-pl ("make"))
  (text-passive-verbseq-sg ("gets made"))
  (text-passive-verbseq-pl ("get made"))

  (text-argslots ((:seq text-particle base instrument site path result)))

  (text-particle ("accessible"))
)

(every Make-Accessible has
	(preparatory-event (#|default|#
		(a Make-Inaccessible with
		   (object ((the object of Self)))
		   (agent  ((the agent of Self)))
		   (base   ((the base of Self)))
))))


(Make-Accessible has 
		 (test-case ('(
			       (*Document has (instance-of (Object)))
			       
			       (a Make-Inaccessible with 
				  (object (*Document)))
			       
		(try-do-and-next (thelast Make-Inaccessible))			(the text-gen of (thelast Make-Inaccessible))
			       
                               (has-value (the Be-Inaccessible object-of of *Document))
			       
                               ; (a Copy with 
; 				  (object (*Document)))

;                                (not (try-do (thelast Copy)))
			       
                               (a Make-Accessible with 
				  (object (*Document)))

                               (try-do-and-next (thelast Make-Accessible))
			       (the text-gen of (thelast Make-Accessible))
                               (not
                                (has-value (the Be-Inaccessible object-of of *Document)))
			       
;                               (try-do (thelast Copy))
                               ))))




;; 
;;    $Id: Make-Contact.km,v 1.31 2002/01/21 20:50:16 jarred Exp $ 
;; 

(Make-Contact has
              (superclasses   (Action))
              (required-slot  (object base))
              (primary-slot   (agent))
              (secondary-slot ())
              (cmap-correspondence (
                                    (:seq object "the things that Make-Contact")
                                    (:seq agent "the Contact-Maker")
				    (:seq base "the place Made-Contact to")
				   )))

(every Make-Contact has
  (object       ((exactly 1 Tangible-Entity)
		 (a Tangible-Entity)))

  (base  	((exactly 1 Tangible-Entity)
		 (a Tangible-Entity)))

  (resulting-state ((a Be-Touching)))

  (pcs-list 	((:triple 
		   (the object of Self)
		   object-of 
		   (mustnt-be-a Be-Touching with
				(object ((the base of Self)))) [Make-Contact-pcs-1])
		 (:triple
		   (the base of Self)
		   object-of
		   (mustnt-be-a Be-Touching with
				(object ((the object of Self)))) [Make-Contact-pcs-2])))

  (add-list	((:set (:triple (Self resulting-state) object (Self object) [Make-Contact-add-1])
		       (:triple (Self resulting-state) object (Self base) [Make-Contact-add-2])
		       (:triple (the base of Self) abuts (the object of Self) [Make-Contact-add-3])
		       (:triple (the object of Self) abuts (the base of Self) [Make-Contact-add-4])
))))

(comment  [Make-Contact-pcs-1] (:seq (the object of Self) " cannot already be touching " (the base of Self))
	  "Things that are to come in contact cannot already be touching.")

(comment  [Make-Contact-pcs-2] (:seq (the base of Self) " cannot already be touching " (the object of Self))
	  "Things that are to come in contact cannot already be touching.")

(comment  [Make-Contact-add-1] (:seq (the object of Self) " now touches " (the base of Self))
	  "Things that make contact touch.")

(comment  [Make-Contact-add-2] (:seq (the base of Self) " now touches " (the object of Self))
	  "Things that make contact touch.")

(comment  [Make-Contact-add-3] (:seq (the base of Self) " now abuts " (the object of Self))
	  "Things that make contact must be next to each other.")

(comment  [Make-Contact-add-4] (:seq (the object of Self) " now abuts " (the base of Self))
	  "Things that make contact must be next to each other.")


(every Make-Contact has
  (text-active-verbseq-sg ("makes contact between"))
  (text-active-verbseq-pl ("make contact between"))
  (text-passive-verbseq-sg ("makes contact"))
  (text-passive-verbseq-pl ("make contact"))

  (text-base ((if (has-value (the base of Self))
                  then ("with"))))

)

(every Make-Contact has
  (preparatory-event (#|default|#
	(a Break-Contact with
	   (object ((the object of Self)))
	   (agent  ((the agent of Self)))
	   (base   ((the base of Self)))
))))
	


(Make-Contact has
   (test-case ('(
                 (new-situation)
                 (*mylips has (instance-of (Tangible-Entity)))
                 (*yourlips has (instance-of (Tangible-Entity)))

                 (not ((the abuts of *mylips) includes *yourlips))

                 (a Make-Contact with
                    (object (*mylips))
                    (base (*yourlips)))
                 (do-and-next (thelast Make-Contact))
		 (the text-gen of (thelast Make-Contact))
 (forall (the resulting-state of (thelast Make-Contact)) (the text-gen of It))
                 (oneof (the Be-Touching object-of of *mylips)
                        where ((the object of It) includes *yourlips))

                 ((the abuts of *mylips) includes *yourlips)

                 (a Break-Contact with
                    (object (*yourlips))
                    (base (*mylips)))
                 (do-and-next (thelast Break-Contact))
		  (the text-gen of (thelast Break-Contact))

                 (not ((the abuts of *mylips) includes *yourlips))

                 (not (has-value (the Be-Touching object-of of *mylips)))


))))








;; 
;;    $Id: Make-Inaccessible.km,v 1.15 2002/04/10 21:31:03 kbarker Exp $ 
;; 

(Make-Inaccessible has
  (superclasses 	(Action))
  (required-slot 	(object))
  (primary-slot  	(agent base))
  (secondary-slot 	())
  (cmap-correspondence 	(
			 (:seq object "the object made inaccessible")
			 (:seq base "the thing the object is made inaccessible to")
			 (:seq agent "the agent")
			)))

(every Make-Inaccessible has
       (object 		((a Entity)))
       (base 	((must-be-a Thing)))
       (agent  		((must-be-a Entity)))
       (resulting-state ((a Be-Inaccessible)))

       (add-list ((if (has-value (the base of Self))
		      then
		    (:triple
		     (the resulting-state of Self)
		     base
		     (the base of Self) [Make-Inaccessible-add-1]))
		  (:triple
		   (the resulting-state of Self)
		   object 
		   (the object of Self) [Make-Inaccessible-add-2])
		  (if (has-value (the agent of Self))
		      then
		    (:triple
		     (the resulting-state of Self)
		     agent
		     (the agent of Self) [Make-Inaccessible-add-3])))))


(comment [Make-Inaccessible-add-1] (:seq (the base of Self) " now cannot access " (the object of Self))
	 "Something that is made inaccessible cannot be accessed.")

(comment [Make-Inaccessible-add-2] (:seq (the object of Self) " is now inaccessible.")
	 "Something that is made inaccessible cannot be accessed.")

(comment [Make-Inaccessible-add-3] (:seq (the agent of Self) " made " (the object of Self) " inaccessible.")
	 "A thing can make something else inaccessible.")



(every Make-Inaccessible has
  (text-active-verbseq-sg ("makes"))
  (text-active-verbseq-pl ("make"))
  (text-passive-verbseq-sg ("gets made"))
  (text-passive-verbseq-pl ("get made"))

  (text-argslots ((:seq text-particle base instrument site path result)))

  (text-particle ("inaccessible"))
)

(every Make-Inaccessible has
	(preparatory-event (#|default|#
		(a Make-Accessible with
		   (object ((the object of Self)))
		   (agent  ((the agent of Self)))
		   (base   ((the base of Self)))
))))


;; test cases in Make-Accessible


(Manner-Constant has
 (superclasses (Constant)))

  (*dejectedly has
        (instance-of (Manner-Constant)))

  (*happily has
        (instance-of (Manner-Constant)))

;;
;; $Id: Manner-Value.km,v 1.7 2002/03/16 00:15:25 jarred Exp $
;;


(Manner-Value has 
       (superclasses (Property-Value)))

(every Manner-Value has
   (manner-of ((must-be-a Event)))
   (same-as ((must-be-a Manner-Value)))
   (text-phrase ((the value of Self)))
)

(Mass-Constant has
  (superclasses (Constant)))
  
  (*light has
     (instance-of (Mass-Constant)))

  (*hefty has
     (instance-of (Mass-Constant)))
;; 
;;    $Id: Mass-Scale.km,v 1.5 2001/10/09 00:55:01 jarred Exp $ 
;; 

(Mass-Scale has
 (superclasses (Scale)))

;;
;; $Id: Mass-Value.km,v 1.11 2002/03/12 14:29:31 kbarker Exp $
;;



(Mass-Value has 
       (superclasses (Property-Value)))

(every Mass-Value has
   (mass-of ((must-be-a Tangible-Entity)))
   (less-than ((must-be-a Mass-Value)))
   (greater-than ((must-be-a Mass-Value)))
   (same-as ((must-be-a Mass-Value)))
)


(Mass-Value has
   (test-case ('(
                 (Stick has (superclasses (Thing)))
                 (Tree has (superclasses (Thing)))
                 (*mybigstick has (instance-of (Stick))
                                (mass ((a Mass-Value))))
                 (*myshortstick has (instance-of (Stick))
                              (mass
                                 ((a Mass-Value with
                                     (value ((:pair 43 *gram)
                                             (:pair *hefty Stick)
                                             (:pair *light Tree)
                                     ))
                                     (less-than
                                        ((the mass of *mybigstick)))
                              ))))

                 (the value of (the mass of *myshortstick))

                 ((the less-than of (the mass of *myshortstick))
                       includes (the mass of *mybigstick))
                 ((the greater-than of (the mass of *mybigstick))
                       includes (the mass of *myshortstick))
))))
;; 
;;    $Id: Move-Apart.km,v 1.16 2002/05/31 15:59:19 kbarker Exp $ 
;; 

(Move-Apart has
  (superclasses        (Action))
  (required-slot       (object origin))
  (primary-slot        (agent subevent))
  (cmap-correspondence (
			(:seq object "the things being moved apart")
			(:seq agent "the doer")
			(:seq origin "starting point")
			(:seq subevent "subevents")
		       )))

(every Move-Apart has
  (object         ((at-least 2 Tangible-Entity)
                   (a Tangible-Entity)
                   (a Tangible-Entity)))
  (origin         ((a Spatial-Entity)))

  ;; The subevents of this scenario.
  (first-subevent ((the subevent of Self)))
  (subevent       ((forall (the object of Self)
                     (a Move with
                        (object (It))
                        (origin ((the origin of Self)))
			(path ((if (has-value (the path of Self)) 
				   then
				   (the path of Self))))
			(away-from ((if (has-value (the away-from of Self)) 
					then
					(the away-from of Self))))
			(toward ((if (has-value (the toward of Self)) 
				     then
				     (the toward of Self))))
			(destination ((if (has-value 
					   (the destination of Self)) 
					  then
					  (the destination of Self))))
			)))))

(every Move-Apart has
  (text-active-verbseq-sg ("causes to move apart"))
  (text-active-verbseq-pl ("cause to move apart"))
  (text-passive-verbseq-sg ("moves apart"))
  (text-passive-verbseq-pl ("move apart"))
)


(Move-Apart has 
  (test-case ( '(
		 (*Blue-Cow    has (instance-of (Living-Entity)))
		 (*Purple-Cow  has (instance-of (Living-Entity)))
		 (*Farmer-Bill has (instance-of (Living-Entity)))
		 (*Prairie     has (instance-of (Place)))
		
		 (*Blue-Cow   has (location (*Prairie)))
		 (*Purple-Cow has (location (*Prairie)))
                            
		 ;; *Purple-Cow and *Blue-Cow dispersed from the *Prairie
		 (a Move-Apart with
		    (object  (*Blue-Cow *Purple-Cow))
		    (agent   (*Farmer-Bill))	
		    (origin  (*Prairie)))
		 (do-script (thelast Move-Apart))

		 ;; Test1: *Blue-Cow is not at the *Prairie
		 ((the location of *Blue-Cow) /= *Prairie)

		 ;; Test2: *Purple-Cow is not at the *Prairie
		 ((the location of *Purple-Cow) /= *Prairie)

		 ;; Test3: Each subevent was a move from 
		 ;;	   involing the object.
		 (forall (the subevent of (thelast Move-Apart))
		    ((It isa Move) and
		     ((:set *Blue-Cow *Purple-Cow) includes 
                      (the object of It)))) 

                 (new-situation)
                 (*me has (instance-of (Living-Entity))
                          (is-near (*my-brother *my-sister *the-folks)))
                 (*my-brother has (instance-of (Living-Entity))
                          (is-near (*me *my-sister *the-folks)))
                 (*my-sister has (instance-of (Living-Entity))
                          (is-near (*my-brother *me *the-folks)))
                 (*the-folks has (instance-of (Living-Entity)))

                 (a Move-Apart with
                    (object (*me *my-brother *my-sister))
                    (origin (*the-folks)))
		 (do-script (thelast Move-Apart))

                 (not ((the is-near of *me) includes *my-brother))
                 (not ((the is-near of *me) includes *my-sister))
                 (not ((the is-near of *me) includes *the-folks))
                 (not ((the is-near of *my-brother) includes *me))
                 (not ((the is-near of *my-brother) includes *my-sister))
                 (not ((the is-near of *my-brother) includes *the-folks))
                 (not ((the is-near of *my-sister) includes *my-brother))
                 (not ((the is-near of *my-sister) includes *me))
                 (not ((the is-near of *my-sister) includes *the-folks))

		)))
)

;; 
;;    $Id: Move-Into.km,v 1.33 2002/06/05 16:11:37 jarred Exp $ 
;; 

(Move-Into has
           (superclasses        (Move-Through))
           (required-slot       (object base destination))
           (primary-slot        (agent path))
           (secondary-slot      ())
           (cmap-correspondence (
                                 (:seq object "the thing moved")
                                 (:seq base "the enclosure")
                                 (:seq destination "moved to")
                                 (:seq agent "the mover")
                                 (:seq origin "moved from")
                                 (:seq path "moved along or through")
                                 (:seq toward "moved toward")
                                 (:seq away-from "moved away from")
                                 ))
)


(every Move-Into has
	(resulting-state ((a Be-Contained)))
       (object ((a Tangible-Entity)))	
       (base        ((a Tangible-Entity with
                        (plays ((a Container)))
                        (encloses ((the destination of Self)))
                        (has-region ((a Spatial-Entity with 
					(plays ((a Portal)))))))))
       (destination ((a Spatial-Entity with
                        (is-inside ((the base of Self))))))
       (origin      ((a Spatial-Entity with
                        (is-outside ((the base of Self))))))
       (path        ((a Spatial-Entity with 
			(plays ((a Portal)))
			(is-region-of ((the base of Self)))
	)))
       ;;; specified in Move-Through already
       
       (pcs-list  (
                   (forall (the object of Self)
                     (:triple It 
                              object-of
                              (mustnt-be-a Be-Shut-Out with 
                                (base ((the base of Self)))) [Move-Into-pcs-1]))
	           (if (has-value (the path of Self))
                       then
			(forall (the path of Self)
                       (:triple 
			   (the path of Self)
			   object-of
			   (mustnt-be-a Be-Closed))))	  
	))

       (add-list  (
                   (:triple (the base of Self)
                            content
                            (the object of Self) [Move-Into-add-1])
		   (:triple (the resulting-state of Self) object (the object of Self))
	))

	(interrupted-by ((must-be-a Move-Out-Of with 
				(object ((the object of Self)))
				(base ((the base of Self))))))

)

(comment [Move-Into-pcs-1] (:seq (the object of Self) " cannot be shut out of " (the base of Self))
	 "Something cannot move into something else if it has been shut out of it.")

(comment [Move-Into-add-1] (:seq (the base of Self) " now contains " (the object of Self))
	 "Something is contained by the thing it moves into.")



(every Move-Into has
  (text-active-verbseq-sg ("moves"))
  (text-active-verbseq-pl ("move"))
  (text-passive-verbseq-sg ("gets moved"))
  (text-passive-verbseq-pl ("get moved"))

  (text-argslots ((:seq base path)))
  (text-base ("into"))
  (text-path ("through"))

)


;; additional contextual info needs to be added
(every Move-Into has
   (preparatory-event (#|default|#
	(a Admit with
	   (object ((the object of Self)))
	   (base   ((the base of Self))))
	(a Open with
	   (object ((the base of Self))))
	(a Move-Out-Of with
	   (object ((the object of Self)))
	   (base   ((the base of Self))))
)))



(Move-Into has
           (test-case ('(
                         (*Troy has 
                          (instance-of (Tangible-Entity)))

                         (*TrojanHorse has 
                          (instance-of (Object))
                          (is-outside (*Troy)))

                         ; *TrojanHorse Move-Into's *Troy
                         (a Move-Into with
                          (base (*Troy))
                          (object (*TrojanHorse)))

                         (do-and-next (thelast Move-Into))
			 (the text-gen of (thelast Move-Into))
                         ((the is-inside of *TrojanHorse) includes *Troy)

                         ((the content of *Troy) includes *TrojanHorse)
			 ((the Container plays of *Troy) isa Container)
			 (has-value (the Be-Contained object-of of *TrojanHorse))
))))





;; 
;;    $Id: Move-Out-Of.km,v 1.37 2002/06/05 16:11:36 jarred Exp $
;; 

(Move-Out-Of has
	   (superclasses   (Move-Through))
	   (required-slot  (object base origin))
	   (primary-slot   (agent))
	   (cmap-correspondence (
				 (:seq object "the thing moved")
				 (:seq agent "the mover")
				 (:seq base "the enclosure")
				 (:seq origin "moved from")
				 (:seq destination "moved to")
				 (:seq path "moved through or along")
				 (:seq toward "moved toward")
				 (:seq away-from "moved away from")
				 )))


(every Move-Out-Of has
       
	(defeats ((allof (the object-of of (the object of Self))
			where
			(((the classes of It) = Be-Contained) and
			((the base of It) = (the base of Self))))))
	(object      ((must-be-a Tangible-Entity)))
       (base        ((must-be-a Tangible-Entity with  ;; it has to be a must-be-a instead of "a" because
                        (plays ((a Container)))       ;; if it's an "a" then after an Exit action, this inherited rule
			;; will conflict with the local value that doesn't have any content
                        (encloses ((the origin of Self)))
                        (content ((the object of Self)))
                        (has-region ((a Spatial-Entity))))
       ))
       (origin	    ((a Spatial-Entity with 
                        (is-inside ((the base of Self))))))
       (destination ((a Spatial-Entity with 
                        (is-outside ((the base of Self))))))
       (path        ((a Spatial-Entity with 
			(plays ((a Portal))) 	    
			(is-region-of ((the base of Self)))
	)))

       (pcs-list (
                  (forall (the object of Self)
                    (:triple It
                             object-of
                             (mustnt-be-a Be-Confined with
                               (base ((the base of Self)))) [Move-Out-Of-pcs-1]))
		(if (has-value (the path of Self))
                       then
			(forall (the path of Self)
                       (:triple 
			   (the path of Self)
			   object-of
			   (mustnt-be-a Be-Closed))))       


))

       (del-list (
                  (:triple (the base of Self)
                           content
                           (the content of (the base of Self) [Move-Out-Of-del-1]))
		  ((forall (the defeats of Self)
				(:set
					(:triple It object (the object of Self))
					(:triple It base (the base of Self))
			)))
	))
	(interrupted-by ((must-be-a Move-Into with 
				(object ((the object of Self)))
				(base ((the base of Self))))))

)

(comment [Move-Out-Of-pcs-1] (:seq (the object of Self) " must not be confined in " (the base of Self))
	 "Only an unconfined thing can move out of the thing that contains it.")

(comment [Move-Out-Of-del-1] (:seq (the base of Self) " no longer contains " (the object of Self))
	 "A move out of stops something from being contained by something else.")

(every Move-Out-Of has
  (text-active-verbseq-sg ("moves"))
  (text-active-verbseq-pl ("move"))
  (text-passive-verbseq-sg ("gets moved"))

  (text-argslots ((:seq base path)))
  (text-base ("out of"))
  (text-path ("through"))

)


;; contextual info needs to be added
(every Move-Out-Of has
   (preparatory-event (#|default|#
	(a Shut-Out with
	   (object ((the object of Self)))
	   (base   ((the base of Self))))
	(a Open with
	   (object ((the base of Self))))
	(a Move-Into with
	   (object ((the object of Self)))
	   (base   ((the base of Self))))
)))


(Move-Out-Of has 
	     (test-case ('(
                            (*student has (instance-of (Tangible-Entity)))
			    (*bag has (instance-of (Tangible-Entity))
                                      (content (*book)))
			    (*book has (instance-of (Tangible-Entity))
                                       (is-inside (*bag)))
			    (*outside has (instance-of (Place))
                                          (is-outside (*bag)))
			    (a Move-Out-Of with
			       (agent (*student))
			       (object (*book))
                               (base (*bag))
                               (destination (*outside))
			       (origin ((a Place with (is-inside (*bag))))))
			    (do-and-next (thelast Move-Out-Of))
			    (the text-gen of (thelast Move-Out-Of))
                            (the location of *book)
                            (the location of *bag)
                            (the is-outside of *book)
                            (the does-not-enclose of *bag)

			    ;Test 1: *book is not inside of the *bag anymore
			    (not ((the is-inside of (the location of *book))
                                  includes
                                  (the location of *bag)))

			    ;Test 2: *book is outside of the *bag
			    ((the is-outside of (the location of *book)) 
                             includes *bag)
			    
			    ;Test 3: *bag is assumed to be a container
			    ((the Container plays of *bag) isa Container)
))))


;; 
;;    $Id: Move-Through.km,v 1.17 2002/03/20 17:58:05 jfan Exp $ 
;; 

(Move-Through has
	      (superclasses   (Move))
	      (required-slot  (object path base))
	      (primary-slot   (agent origin destination))
	      (secondary-slot ())
	      (cmap-correspondence (
				    (:seq object "the thing moved")
                                    (:seq agent "the mover")
                                    (:seq origin "moved from")
                                    (:seq destination "moved to")
                                    (:seq path "moved through")
                                   )))


; Move-Through is a specialization of the Move component with a required 
; path through a Barrier

(every Move-Through has
       (object ((a Tangible-Entity)))
       (base   ((a Tangible-Entity with
		   (plays ((a Barrier)))
		   (has-region ((a Spatial-Entity))))))
       (path   ((the has-region of (the base of Self))))
)

(every Move-Through has
  (text-active-verbseq-sg ("moves"))
  (text-active-verbseq-pl ("move"))
  (text-passive-verbseq-sg ("moves"))
  (text-passive-verbseq-pl ("move"))

  (text-argslots ((:seq path base)))
  (text-path ("through"))
  (text-base ("in"))
)


;; nothing extra to say about contextual info
;; inherited from Move and Action

(Move-Through has
  (test-case ( '(
		 (*Fence    has (instance-of (Tangible-Entity)))
		 (*David    has (instance-of (Tangible-Entity)))
                       
		 ;; David moved-through the fence
		 (*Move-Through  has
			(instance-of (Move-Through))
			(object (*David))
                        (base   (*Fence)))
		 (do-and-next *Move-Through)
		 (the text-gen of (thelast Move-Through))

		 ;; Test1: The path was Indiana
		 ((the is-region-of of (the path of *Move-Through)) = *Fence)

))))


;; 
;;    $Id: Move-Together.km,v 1.17 2001/11/19 16:54:49 kbarker Exp $ 
;; 

(Move-Together has
  (superclasses        (Action))
  (required-slot       (object destination))
  (primary-slot        (agent subevent))
  (cmap-correspondence (
			(:seq object "the things Moved-Together")
			(:seq agent "the Mover")
			(:seq destination "the place to which the objects are Moved-Together")
			(:seq subevent "the Move of each object")
		       )))

(every Move-Together has
  (object         ((at-least 2 Tangible-Entity)
                   (a Tangible-Entity)
                   (a Tangible-Entity)))
  (destination    ((a Spatial-Entity)))
  
  ;; The subevents of this scenario     
  (first-subevent ((the subevent of Self)))
  (subevent       ((forall (the object of Self)
		     (a Move with
			(object      (It))
			(destination ((the destination of Self)))
			(path ((if (has-value (the path of Self)) 
				   then
				   (the path of Self))))
			(away-from ((if (has-value (the away-from of Self)) 
					then
					(the away-from of Self))))
			(toward ((if (has-value (the toward of Self)) 
				     then
				     (the toward of Self))))
			(origin ((if (has-value (the origin of Self)) 
				     then
				     (the origin of Self))))
			)))))

(every Move-Together has
  (text-active-verbseq-sg ("causes to move together"))
  (text-active-verbseq-pl ("cause to move together"))
  (text-passive-verbseq-sg ("moves together"))
  (text-passive-verbseq-pl ("move together"))
)


(Move-Together has 
  (test-case ( '(
		 (*soccer-ball has (instance-of (Object)))
		 (*soccer-player has (instance-of (Object)))
		 (*midfield has (instance-of (Place)))

		 ; the ball and the player converge at midfield
		 (a Move-Together with 
		    (object (*soccer-ball *soccer-player))
		    (destination (*midfield)))
		 (do-script (thelast Move-Together))

		 ; Test1: both the player and the play should be at the
		 ;	  same location afterwards.
		 ((the location of *soccer-ball) = *midfield)
		 ((the location of *soccer-player) = *midfield)

		 ; Test2: Each subevent was a move to
                 ;        involving the object.
                 (forall (the subevent of (thelast Move-Together))
                    ((It isa Move) and
                     ((:set *soccer-player *soccer-ball) 
                      includes (the object of It))))

                 (new-situation)

                 (*comet has (instance-of (Object)))
                 (*asteroid has (instance-of (Object))
                                (is-near (*pluto)))
                 (*earth has (instance-of (Object)))
                 (*mercury has (instance-of (Object)))
                 (*pluto has (instance-of (Object)))
                 (*sun has (instance-of (Object))
                           (is-near (*mercury)))

                 (a Move-Together with
                    (object (*comet *asteroid *earth))
                    (destination (*sun)))
                 (do-script (thelast Move-Together))

                 ((the location-of of (the location of *sun))
                  is-superset-of (*comet *asteroid *earth))
                 ((the is-near of *comet) includes *mercury)
                 ((the is-near of *asteroid) includes *mercury)
                 (not ((the is-near of *asteroid) includes *pluto))
                 ((the is-near of *earth) includes *mercury)

		)))
)


;; 
;;    $Id: Move.km,v 1.26 2002/05/16 18:21:03 kbarker Exp $ 
;; 

(Move has
      (superclasses   (Action))
;      (required-slot  (object))
;      (primary-slot   (agent origin destination path))
      (primary-slot   (object agent origin destination path))
      (secondary-slot (toward away-from))
      (cmap-correspondence (
                            (:seq object "the thing moved")
                            (:seq agent "the mover")
                            (:seq origin "moved from")
                            (:seq destination "moved to")
                            (:seq path "moved through")
                            (:seq toward "moved toward")
                            (:seq away-from "moved away from")
                           )))

(every Move has
;  (object       ((a Tangible-Entity) 
;                 (excluded-values (the origin of Self) (the destination of Self) (the away-from of Self) (the toward of Self) (the path of Self))))
  (origin       ((must-be-a Spatial-Entity)))
  (destination  ((must-be-a Spatial-Entity)))
  (away-from    ((must-be-a Spatial-Entity)))
  (toward       ((must-be-a Spatial-Entity)))
  (path         ((must-be-a Spatial-Entity)))

  (pcs-list     (
                 ; if origin is specified, then the object(s) are at 
                 ; that location
                 (if (has-value (the origin of Self))
                     then 
                     (forall (the object of Self)
                       (:triple
                         It
                         location
                         (if ((the origin of Self) isa Place)
                          then (the origin of Self)
                          else (the location of (the origin of Self))))))

                 ; if an object of the move is also an object of a 
                 ; Be-Held, then the agent of the move must be the 
                 ; agent of that Be-Held 
                 (forall (the object of Self)
                   (forall2 (the object-of of It)
                     (if (It2 isa Be-Held)
                         then   
                         (:triple It2 agent (the agent of Self)))))

                 ; the object(s) must not be restrained
                 (forall (the object of Self)
                   (:triple
                     It
                     object-of
                     (mustnt-be-a Be-Restrained)))
                       
                 ; *NEW* if the object is held, then it cannot move or 
                 ;       be moved unless the move is caused by the agent 
                 ;       holding it.
                 (if (has-value (the Be-Held object-of of (the object of Self)))
                     then
                     (forall (the agent of Self)
                       (:triple 
                         It
                         agent-of
                         (a Be-Held with 
                            (object ((the object of Self)))
                            (agent  ((the agent of Self)))))))

                 ; the path must not be blocked
                 (if (has-value (the path of Self))
                     then
                     (forall (the path of Self)
                       (:triple 
                          (the path of Self)
                          object-of
                          (mustnt-be-a Be-Blocked))))))
       
  ; Post-Condition:
  ;  1) if destination is specified, then the object is at that location
  ;     and inherits _most_ of the spatial properties of the destination
  ;     (the spatial properties not inherited are marked ;; odni
  ;  2) if origin is specified, then the object is NOT at that
  ;     location.
  (add-list     ((if (has-value (the destination of Self))
                     then
                     (forall (the object of Self)
                       (:set
                         (:triple 
                            It 
                            is-near 
                            (the is-near of (the destination of Self)))
;; odni                   (:triple 
;; odni                      It 
;; odni                      abuts 
;; odni                      (the abuts of (the destination of Self)))
                         (:triple 
                            It 
                            is-above 
                            (the is-above of (the destination of Self)))
                         (:triple 
                            It 
                            is-below 
                            (the is-below of (the destination of Self)))
                         (:triple 
                            It 
                            is-along 
                            (the is-along of (the destination of Self)))
                         (:triple 
                            It 
                            is-at 
                            (the is-at of (the destination of Self)))
                         (:triple 
                            It 
                            is-at-of 
                            (the is-at-of of (the destination of Self)))
                         (:triple 
                            It 
                            is-beside 
                            (the is-beside of (the destination of Self)))
                         (:triple 
                            It 
                            is-between 
                            (the is-between of (the destination of Self)))
                         (:triple 
                            It 
                            is-behind 
                            (the is-behind of (the destination of Self)))
                         (:triple 
                            It 
                            is-in-front-of 
                            (the is-in-front-of of (the destination of Self)))
                         (:triple 
                            It 
                            is-inside 
                            (the is-inside of (the destination of Self)))
;; odni                   (:triple 
;; odni                      It 
;; odni                      encloses 
;; odni                      (the encloses of (the destination of Self)))
                         (:triple 
                            It 
                            is-on 
                            (the is-on of (the destination of Self)))
;; odni                   (:triple 
;; odni                      It 
;; odni                      has-on-it 
;; odni                      (the has-on-it of (the destination of Self)))
                         (:triple 
                            It 
                            is-opposite 
                            (the is-opposite of (the destination of Self)))
                         (:triple 
                            It 
                            is-outside 
                            (the is-outside of (the destination of Self)))
                         (:triple 
                            It 
                            does-not-enclose 
                            (the does-not-enclose of (the destination of Self)))
                         (:triple 
                            It 
                            is-over 
                            (the is-over of (the destination of Self)))
                         (:triple 
                            It 
                            is-under 
                            (the is-under of (the destination of Self)))

;                           If the destination is specified, it will either
;                           be a Place or a Tangible-Entity, not the more
;                           general Spatial-Entity. If it is specified to
;                           be a Place, that's the new location of the
;                           objects. If it is specified to be a Tangible,
;                           the objects' new location is the location of
;                           that Tangible. If no destination is specified,
;                           the destination will be a Spatial-Entity. Here
;                           we force it to be a Place arbitrarily.
                         (:triple 
                            It 
                            location 
                            (if ((the destination of Self) isa Place)
                             then (the destination of Self)
                             else ((if ((the destination of Self) isa
                                        Tangible-Entity)
                                    then (the location of 
                                              (the destination of Self))
                                    else ((the destination of Self)
                                          &
                                          (a Place))))))
  )))))

  (del-list     ((forall (the object of Self) 
                   (:set
                     (:triple It location (the location of It))
                     (forall2 (the is-near of It)
                       (if (not ((the is-near of (the destination of Self))
                                  includes It2))
                        then
                           (:triple It is-near It2)))
                     (forall2 (the abuts of It)
                       (if (not ((the abuts of (the destination of Self))
                                  includes It2))
                        then
                           (:triple It abuts It2)))
                     (forall2 (the is-above of It)
                       (if (not ((the is-above of (the destination of Self))
                                  includes It2))
                        then
                           (:triple It is-above It2)))
                     (forall2 (the is-below of It)
                       (if (not ((the is-below of (the destination of Self))
                                  includes It2))
                        then
                           (:triple It is-below It2)))
                     (forall2 (the is-along of It)
                       (if (not ((the is-along of (the destination of Self))
                                  includes It2))
                        then
                           (:triple It is-along It2)))
                     (forall2 (the is-at of It)
                       (if (not ((the is-at of (the destination of Self))
                                  includes It2))
                        then
                           (:triple It is-at It2)))
                     (forall2 (the is-at-of of It)
                       (if (not ((the is-at-of of (the destination of Self))
                                  includes It2))
                        then
                           (:triple It is-at-of It2)))
                     (forall2 (the is-beside of It)
                       (if (not ((the is-beside of (the destination of Self))
                                  includes It2))
                        then
                           (:triple It is-beside It2)))
                     (forall2 (the is-between of It)
                       (if (not ((the is-between of (the destination of Self))
                                  includes It2))
                        then
                           (:triple It is-between It2)))
                     (forall2 (the is-behind of It)
                       (if (not ((the is-behind of (the destination of Self))
                                  includes It2))
                        then
                           (:triple It is-behind It2)))
                     (forall2 (the is-in-front-of of It)
                       (if (not ((the is-in-front-of of (the destination of Self))
                                  includes It2))
                        then
                           (:triple It is-in-front-of It2)))
                     (forall2 (the is-inside of It)
                       (if (not ((the is-inside of (the destination of Self))
                                  includes It2))
                        then
                           (:triple It is-inside It2)))
                     (forall2 (the encloses of It)
                       (if (not ((the encloses of (the destination of Self))
                                  includes It2))
                        then
                           (:triple It encloses It2)))
                     (forall2 (the is-on of It)
                       (if (not ((the is-on of (the destination of Self))
                                  includes It2))
                        then
                           (:triple It is-on It2)))
                     (forall2 (the has-on-it of It)
                       (if (not ((the has-on-it of (the destination of Self))
                                  includes It2))
                        then
                           (:triple It has-on-it It2)))
                     (forall2 (the is-opposite of It)
                       (if (not ((the is-opposite of (the destination of Self))
                                  includes It2))
                        then
                           (:triple It is-opposite It2)))
                     (forall2 (the is-outside of It)
                       (if (not ((the is-outside of (the destination of Self))
                                  includes It2))
                        then
                           (:triple It is-outside It2)))
                     (forall2 (the does-not-enclose of It)
                       (if (not ((the does-not-enclose of (the destination of Self))
                                  includes It2))
                        then
                           (:triple It does-not-enclose It2)))
                     (forall2 (the is-over of It)
                       (if (not ((the is-over of (the destination of Self))
                                  includes It2))
                        then
                           (:triple It is-over It2)))
                     (forall2 (the is-under of It)
                       (if (not ((the is-under of (the destination of Self))
                                  includes It2))
                        then
                           (:triple It is-under It2)))
  ))))
)


;; here's the extended version with contextual information
(every Move has
       ; During-Condition:
       ;   if path is specified, then the object is at that Place
       (dcs-list ((if (has-value (the path of Self))
                   then
                   ((forall (the object of Self)
                            (:triple
                               It
                               location
                               (if ((the path of Self) isa Place)
                                then (the path of Self)
                                else (the location of (the path of Self)))))))))

       (preparatory-event (#|default|#
                          ;; if origin specified, then Move to origin
                          ;; notice the recursive use of Move here.

                          (if (has-value (the origin of Self))
                              then
                            (a Move with
                               (object ((the object of Self)))
                               (destination ((the origin of Self)))))
                          ;; mustn't be restrained 
                          #|default|#
                          (forall (the object of Self)
                                  ((a Release with 
                                      (object (It)))))
                          ;; path mustn't be blocked
                          (if (has-value (the path of Self))
                              then
                            ((a Unblock with
                                (object ((the path of Self))))))
			  ;;needs to be held, so hold it
			  (if (has-value (the Be-Held object-of of (the object of Self)))
                     		then
			    ((a Hold with
			    	(object ((the object of Self)))
			    	(agent  ((the agent of Self))))))
))

       (interrupted-by ((must-be-a Block with 
                                   (object ((the path of Self)))))))


(every Move has
  (text-active-verbseq-sg ("moves"))
  (text-active-verbseq-pl ("move"))
  (text-passive-verbseq-sg ("moves"))
  (text-passive-verbseq-pl ("move"))

  (text-argslots ((:seq origin path destination base instrument site)))

)

; many more test cases should be added now that Move deals explicitly
; with all of the spatial relations

(Move has 
      (test-case         ('(
                            (new-situation)
                            (*Boston has (instance-of (Place)))
                            (*Austin has (instance-of (Place)))
                            (*John has (instance-of (Tangible-Entity)))
                            (*John has (location (*Boston)))
                            
                                ; *John moves from Boston to Austin
                            (a Move with
                               (object (*John))
                               (origin (*Boston))
                               (destination   (*Austin)))
                            (do-and-next (thelast Move))
                            (the text-gen of (thelast Move))
                                ; Test1: *John is now in Austin
                            ((the location of *John) = *Austin)
                            
                                ; Test2: *John was in Boston in the previous
                                ; situation, but is no longer
                            ((in-situation 
                              (the1 of (the prev-situation of 
                                            (curr-situation)))
                              (the location of *John)) = *Boston)
                            ((the location of *John) /= *Boston)
                            
                                ; Test3: *Boston cannot be the same as *Austin
                            (not (*Boston &? *Austin))

                            (new-situation)

                            (*book has (instance-of (Object))
                                       (is-on (*table))
                                       (is-beside (*mug)))
                            (*table has (instance-of (Object)))
                            (*mug has (instance-of (Object)))
                            (*phone has (instance-of (Object))
                                        (is-on (*table)))

                            (a Move with (object (*book))
                                         (destination (*phone)))

                            (do-and-next (thelast Move))

                            ((the is-on of *book) = *table)
                            ((the is-beside of *book) /= *mug)
                            ((the location of *book) = (the location of *phone))


                            ))))


;
;   $Id: Narrow.km,v 1.5 2002/05/18 17:03:46 jarred Exp $
;

(Narrow has 
  (superclasses (Decrease)))

(every Narrow has-definition
  (instance-of (Decrease))
  (property (width))
)

(every Narrow has
   (test-case ('(
                 (*myroad has (instance-of (Object))
                             (width (*myroadwidth)))
                 (*myroadwidth has (instance-of (Width-Value))
                                        (value ((:pair 30 *foot))))

                 (a Decrease with (object (*myroad))
                                  (property (width)))

                 ((thelast Decrease) isa Narrow)

                 (do-and-next (thelast Narrow))

                 ((the less-than of (the width of *myroad))
                       includes *myroadwidth)

))));; 
;;    $Id: Object.km,v 1.4 2001/05/23 02:37:38 kbarker Exp $ 
;; 

(Object has
	(superclasses (Tangible-Entity)))





;; 
;;    $Id: Obstruct.km,v 1.20 2002/06/10 14:52:49 porter Exp $ 
;; 

(Obstruct has
  (superclasses		(Make-Inaccessible))
  (required-slot   	(object))
  (primary-slot 	(agent))
  (secondary-slot      	())
  (cmap-correspondence 	(
			 (:seq object "the thing Obstructed")
			 (:seq agent "the Obstructor")
			 (:seq destination "the place to which the object is Obstructed")
			)))

(every Obstruct has
       (object ((a Tangible-Entity)))
       (agent  ((must-be-a Entity)))

       (resulting-state ((a Be-Obstructed)))

       (add-list ((:triple
		   (the resulting-state of Self)
		   object
		   (the object of Self) [Obstruct-add-1])
		  (if (has-value (the agent of Self))
		      then
		    (forall (the agent of Self)
			    (:triple
			     It
			     agent-of
			     (the resulting-state of Self) [Obstruct-add-2]))))))
       
(comment [Obstruct-add-1] (:seq (the object of Self) " is obstructed.")
	 "An obstruct causes something to be obstructed.")

(comment [Obstruct-add-2] (:seq (the agent of Self) " caused the obstruction.")
	 "Somthing can cause something else to be obstructed.")


(every Obstruct has
  (text-active-verbseq-sg ("obstructs"))
  (text-active-verbseq-pl ("obstruct"))
  (text-passive-verbseq-sg ("gets obstructed"))
  (text-passive-verbseq-pl ("get obstructed"))

  (text-argslots ((:seq base instrument site path result)))
)


;; Extra contextual info that the agent (if one is specified)
;; must move to the location of the object as part of the
;; prepatory step in an attempt to obstruct the object. 
(every Obstruct has
       (preparatory-event 
	((#|default|#
	     (if (has-value (the agent of Self))
		 then	
		 (a Move with 
		    (object 	 ((the agent of Self)))
		    (destination ((a Spatial-Entity with
				     (is-at ((the object of Self)))))))

)))))

(Obstruct has 
	  (test-case      ('(
			     (*pedestrian has (instance-of (Object)))
                            
			     (a Obstruct with 
			      (object (*pedestrian)))
                            
			     (do-and-next (thelast Obstruct))
                            (the text-gen of (thelast Obstruct))
			     (has-value (the Be-Obstructed object-of of 
				      *pedestrian))
			   (forall (the resulting-state of (thelast Obstruct)) (the text-gen of It))
			     (a Move with (object (*car))(path (*path)))
			     (try-do (thelast Move)) ; Obstruct doesn't
					; *prevent* move's

			     ))))





















;; 
;;    $Id: Obtain.km,v 1.8 2001/09/29 23:28:49 arcane Exp $ 
;; 

(Obtain has
	(superclasses (Receive))
	(required-slot  (agent recipient object))
	(primary-slot 	(donor instrument))
	(secondary-slot ())
	(cmap-correspondence (
			      (:seq object "the thing obtained")
			      (:seq agent "obtainer")
                              (:seq donor "donor")
                              (:seq recipient "recipient")
                              (:seq instrument "instrument")
			     ))
)

(every Obtain has
  (agent     ((the recipient of Self)))
  (recipient ((the agent of Self)))
)

(every Obtain has
  (text-active-verbseq-sg ("obtains"))
  (text-active-verbseq-pl ("obtain"))
  (text-passive-verbseq-sg ("is obtained"))
  (text-passive-verbseq-pl ("are obtained"))
)


;; nothing extra to say about contextual info

(Obtain has
  (test-case ('( 
		 (*Johnathan has (instance-of (Tangible-Entity)))
		 (*Big-Green-Book has (instance-of (Tangible-Entity)))

		 ;; *Johnathan Obtaining the *Big-Green-Book
		 (a Obtain with
			(agent (*Johnathan))
			(object (*Big-Green-Book)))
		 (do-and-next (thelast Obtain))
		 (the text-gen of (thelast Obtain))
		 ;; Test 1: *Johnation has possesion of the book.
		 ((the possesses of *Johnathan) = *Big-Green-Book)
	
		 ;; Test 2: the Book is possessed-by *Johnathan
		 ((the is-possessed-by of *Big-Green-Book) = *Johnathan)

		 ;; Test 3: the agent should be the recipient
		 ((the agent of (thelast Obtain)) = 
		  (the recipient of (thelast Obtain)))
	       )))
)





;; 
;;    $Id: Open.km,v 1.26 2002/04/17 19:32:30 kbarker Exp $ 
;; 

(Open has
  (superclasses 	(Unblock))
  (required-slot	(object))
  (primary-slot 	(agent instrument))
  (secondary-slot 	())
  (cmap-correspondence 	(
			 (:seq object "thing opened")
			 (:seq agent "opener")
			 (:seq instrument "portal covering")
			)))

(every Open has
  (object ((a Spatial-Entity with
              (object-of 
                 ((a Be-Closed with
                     (instrument ((a Tangible-Entity with
                                     (plays ((a Portal-Covering))))))))))))

  ;; The state that is voided.
  (defeats 	    ((allof (the object-of of (the object of Self))
                             where 
                             ((the classes of It) = Be-Closed))))
	
  (resulting-state  ((a Be-Open)))

  ;; Preconditions.
  (pcs-list 	    ((:triple
		       (the object of Self) 
		       object-of
		       (mustnt-be-a Be-Open) [Open-pcs-1])
		     (:triple
		       (the object of Self)
		       object-of
		       (a Be-Closed) [Open-pcs-2])
  ))

  (del-list ((forall (the defeats of Self)
               (:triple It object (the object of Self) [Open-del-1]))
             (forall (the defeats of Self)
               (:triple (the instrument of It) 
                        plays 
                        (a Portal-Covering)) [Open-del-2])
             (forall (the defeats of Self)
               (:triple It instrument (the instrument of It)) [Open-del-3])
  ))

  (add-list 	   ((:triple
                      (the resulting-state of Self)
		      object
		      (the object of Self) [Open-add-1])
                    (:triple
                      (the object of Self)
                      plays
                      (a Portal) [Open-add-2])
)))

(comment [Open-pcs-1] (:seq (the object of Self) " must not be open yet.")
	 "Something that is open cannot be opened again.")

(comment [Open-pcs-2] (:seq (the object of Self) " must be closed.")
	 "Something must be closed before it can be opened.")

(comment [Open-del-1] (:seq (the object of Self) " is no longer closed.")
	 "When something is opened, it is no longer closed.")

(comment [Open-del-2] (:seq "The blockage is no longer a portal covering")
         "Something is only a portal covering when it is blocking the portal.")

(comment [Open-del-3] (:seq "The portal cover no longer blocks " 
                            (the object of Self))
	 "An open removes the portal covering from the portal.")

(comment [Open-add-1] (:seq (the object of Self) " is now a portal.")
	 "An open results in a portal.")

(every Open has
  (text-active-verbseq-sg ("opens"))
  (text-active-verbseq-pl ("open"))
  (text-passive-verbseq-sg ("gets opened"))
  (text-passive-verbseq-pl ("get opened"))

  (text-argslots ((:seq base instrument site path result)))
)

(every Open has 
  (preparatory-event (#|default|#
	(a Close with 
	   (object 	((the object of Self)))
	   (base   	((the base of Self)))
	   (agent  	((the agent of Self)))
	   (instrument  ((the instrument of Self))))
	(a Unblock with
	   (object	((the object of Self))))
)))


(Open has 
  (test-case ('(
		(*the-Jar-Opening has (instance-of (Spatial-Entity)))
		(*the-Jar-Lid has (instance-of (Tangible-Entity)))
		(*the-Cookie-Jar has 
		  (instance-of 	(Tangible-Entity))
		  (has-region 	(*the-Jar-Opening))
		  (has-part (*the-Jar-Lid)))
		(*Ralf has (instance-of (Living-Entity)))

		(not (the Be-Open object-of of *the-Jar-Opening))

                (a Be-Closed with
                   (object (*the-Jar-Opening))
                   (instrument (*the-Jar-Lid)))
                (the text-gen of (thelast Be-Closed))

		(a Open with 
		   (object 	     (*the-Jar-Opening))
		   (agent  	     (*Ralf)))
		(do-and-next (thelast Open))
		(the text-gen of (thelast Open))
		(forall 
                   (the resulting-state of (thelast Open)) 
                   (the text-gen of It))

		(the Be-Open object-of of *the-Jar-Opening)
		(not (the Be-Closed object-of of *the-Jar-Opening))

		(a Close with
		   (object           (*the-Jar-Opening))
                   (instrument       (*the-Jar-Lid))
                   (agent            (*Ralf)))
		(do-and-next (thelast Close))
		(the text-gen of (thelast Close))

		(not (the Be-Open object-of of *the-Jar-Opening))
 		(the Be-Closed object-of of *the-Jar-Opening)
		(forall 
                   (the resulting-state of (thelast Close)) 
                   (the text-gen of It))
))))


;;
;;    $Id: Outlet.km,v 1.2 2001/12/03 15:56:10 tierney Exp $
;;

(Outlet  has
        (superclasses (Portal))
        (required-slot ())
        (primary-slot ())
        (secondary-slot ())
        (description ())
        (cmap-correspondence ()))  

(every Outlet has
	(in-event ((a Move-Out-Of)))
	(played-by ((a Spatial-Entity with
			(path-of ((the in-event of Self))))))
	(is-between ((:args (the is-inside of Self)
			    (the is-outside of Self)))))
(PH-Constant has
	   (superclasses (Constant)))
  
(*basic has 
	(instance-of (PH-Constant)))

(*acidic has 
	(instance-of (PH-Constant)))

(*neutral has 
	(instance-of (PH-Constant)))

;;
;; $Id: PH-Value.km,v 1.11 2002/03/12 14:29:32 kbarker Exp $
;;


(PH-Value has 
       (superclasses (Property-Value)))

(every PH-Value has
   (pH-of ((must-be-a Chemical-Object)))
   (less-than ((must-be-a PH-Value)))
   (greater-than ((must-be-a PH-Value)))
   (same-as ((must-be-a PH-Value)))
)


(PH-Value has
   (test-case ('(
                 (Drink has (superclasses (Substance)))
                 (Water has (superclasses (Substance)))
                 (*mycoffee has (instance-of (Drink))
                                (pH ((a PH-Value))))
                 (*mybeer has (instance-of (Drink))
                              (pH
                                 ((a PH-Value with
                                     (value ((:pair 300 *gram-atoms/liter)
                                             (:pair *basic Drink)
                                             (:pair *acidic Water)
                                     ))
                                     (less-than
                                        ((the pH of *mycoffee)))
                              ))))

                 (the value of (the pH of *mybeer))

                 ((the less-than of (the pH of *mybeer))
                       includes (the pH of *mycoffee))
                 ((the greater-than of (the pH of *mycoffee))
                       includes (the pH of *mybeer))
))))
;; 
;;    $Id: Penetrate.km,v 1.27 2002/01/16 19:43:27 jfan Exp $ 
;; 

(Penetrate has
  (superclasses        (Action))
  (required-slot       (agent object))
  (primary-slot        ())
  (secondary-slot      ())
  (cmap-correspondence (
		 	(:seq object "the barrier penetrated")
		 	(:seq agent "the penetrator")
		       )))

(every Penetrate has 
       (agent 		((a Tangible-Entity)))
       #| implementing partial roles|#
       (object  ((a Tangible-Entity with
		    (plays ((a Barrier))))))
       #|(object (((a Barrier) &
		 (a Tangible-Entity)
		 )))|#
       (path 		((the result of (the Breach subevent of Self))))
       (first-subevent  ((the Breach subevent of Self)))
       (subevent 	((a Breach with
		     	    (agent  	((the agent of Self)))
		     	    (object 	((the object of Self)))
			    (next-event ((the Go-Through subevent of Self))))
		  	 (a Go-Through with
		     	    (agent ((the agent of Self)))
			    (path  ((the result of 
				         (the Breach subevent of Self))))))))

(every Penetrate has
  (text-active-verbseq-sg ("penetrates"))
  (text-active-verbseq-pl ("penetrate"))
  (text-passive-verbseq-sg ("gets penetrated"))
  (text-passive-verbseq-pl ("get penetrated"))

  (text-path ("through"))
)


(Penetrate has
  (test-case  ( '(
		  (*forces has (instance-of (Tangible-Entity))
                               (is-outside (*castle)))
		  (*castle has (instance-of (Object))
                               (has-part (*castle-wall)))
		  (*castle-wall has (instance-of (Object)))
		  (a Penetrate with 
		     (agent (*forces))
		     (object (*castle-wall)))
		  
		  (do-script (thelast Penetrate))
		 (the text-gen of (thelast Penetrate))
		 (forall (the subevent of (thelast Penetrate)) (the text-gen of It))
                  #| implementing partial role
		  ((the Portal has-region of (the Barrier plays of *castle-wall))
                    = (the path of (thelast Penetrate)))|#
		  ((the has-region of *castle-wall) = (the path of (thelast Penetrate)))

                  (not ((the is-outside of *forces) includes *castle))
		
		 ))))






;; 
;;    $Id: Perceive.km,v 1.8 2001/09/20 18:27:56 kbarker Exp $
;; 

(Perceive has
     (superclasses        (Action))
     (required-slot       (object))
     (primary-slot        (agent))
     (secondary-slot      ())
     (cmap-correspondence (
                           (:seq agent "the perceiver")
                           (:seq object "the perceived")
                          )))

(every Perceive has
  (object ((a Entity)))
  (agent ((must-be-a Tangible-Entity)))
)

(every Perceive has
  (text-active-verbseq-sg ("perceives"))
  (text-active-verbseq-pl ("perceive"))
  (text-passive-verbseq-sg ("is perceived"))
  (text-passive-verbseq-pl ("are perceived"))
)


;; 
;;    $Id: Place.km,v 1.7 2001/05/22 21:14:13 kbarker Exp $ 
;; 

(Place has
       (superclasses (Spatial-Entity))
       (required-slot ())
       (primary-slot ())
       (secondary-slot ())
       (cmap-correspondence ())
       (test-case ()))


(every Place has
       (location ((exactly 0 Place)))

       (is-near ((forall (the location-of of Self) (the is-near of It))))
       (abuts ((forall (the location-of of Self) (the abuts of It))))
       (is-above ((forall (the location-of of Self) (the is-above of It))))
       (is-below ((forall (the location-of of Self) (the is-below of It))))
       (is-along ((forall (the location-of of Self) (the is-along of It))))
       (is-at ((forall (the location-of of Self) (the is-at of It))))
       (is-at-of ((forall (the location-of of Self) (the is-at-of of It))))
       (is-beside ((forall (the location-of of Self) (the is-beside of It))))
       (is-between ((forall (the location-of of Self) (the is-between of It))))
       (is-behind ((forall (the location-of of Self) (the is-behind of It))))
       (is-in-front-of ((forall (the location-of of Self) (the is-in-front-of of It))))
       (is-inside ((forall (the location-of of Self) (the is-inside of It))))
       (encloses ((forall (the location-of of Self) (the encloses of It))))
       (is-on ((forall (the location-of of Self) (the is-on of It))))
       (has-on-it ((forall (the location-of of Self) (the has-on-it of It))))
       (is-opposite ((forall (the location-of of Self) (the is-opposite of It))))
       (is-outside ((forall (the location-of of Self) (the is-outside of It))))
       (does-not-enclose ((forall (the location-of of Self) (the does-not-enclose of It))))
       (is-over ((forall (the location-of of Self) (the is-over of It))))
       (is-under ((forall (the location-of of Self) (the is-under of It))))

)


(Polarity-Constant has
 (superclasses (Constant)))

  (*positive has
	(instance-of (Polarity-Constant)))

  (*negative has
	(instance-of (Polarity-Constant)))
;;
;; $Id: Polarity-Value.km,v 1.4 2002/03/12 14:29:32 kbarker Exp $
;;


(Polarity-Value has 
       (superclasses (Property-Value)))

(every Polarity-Value has
   (polarity-of ((must-be-a Chemical-Object)))
   (same-as ((must-be-a Polarity-Value)))
)

;; 
;;    $Id: Portal-Covering.km,v 1.8 2002/02/06 20:44:52 porter Exp $ 
;; 

(Portal-Covering has
		 (superclasses (Barrier))  ;; a type of Role
		 (required-slot ())
		 (primary-slot ())
		 (secondary-slot ())
		 (cmap-correspondence ()))

(every Portal-Covering has
	(played-by  ((a Tangible-Entity with       
			(is-part-of ((a Tangible-Entity with 
					(plays ((a Container))))))
			))))
;;
;;    $Id: Portal.km,v 1.7 2001/12/03 16:33:50 tierney Exp $
;;

(Portal has
        (superclasses (Conduit))
        (required-slot ())
        (primary-slot ())
        (secondary-slot ())
        (description ())
        (cmap-correspondence ()))

(every Portal has
	(in-event ((a Move-Through)))
	(played-by ((a Spatial-Entity with
			(path-of ((the in-event of Self)))))));; 
;;    $Id: Pressure.km,v 1.3 2001/05/01 22:24:03 pnav Exp $ 
;; 

(Pressure has (superclasses (Force)))




;; 
;;    $Id: Produce.km,v 1.21 2002/03/18 22:27:37 kbarker Exp $ 
;; 

;; this version of Produce still has the following problem:
;; how to specify the type of the outcome, other than the generic "Tangible-Entity"?

(Produce has
	 (superclasses (Create))
	 (required-slot (raw-material))
	 (primary-slot (agent instrument))
	 (cmap-correspondence ((:seq raw-material "the raw material/parts"))))

(every Produce has
       (raw-material ((a Tangible-Entity)))
       (add-list ((if (has-value (the result of Self))
		      then
		    (if ((the raw-material of Self) isa Substance)
			then
		      (forall (the result of Self)
			      (:triple
			       It
			       material
			       (the raw-material of Self) [Produce-add-1]))
		      else
		      (forall (the result of Self)
			      (:triple
			       It
			       has-part
			       (the raw-material of Self) [Produce-add-2])))
		    else
		    (if ((the raw-material of Self) isa Substance)
			then
		      (:triple
		       Self
		       result
		       (a Tangible-Entity with
			  (material ((the raw-material of Self)))) [Produce-add-3])
		      else
		      (:triple
		       Self
		       result
		       (a Tangible-Entity with
			  (has-part ((the raw-material of Self)))) [Produce-add-4]))
		    ))))

(comment [Produce-add-1] (:seq (the result of Self) " was created from " (the raw-material of Self))
	 "A produce consumes raw material substances to create a Tangible-Entity.")

(comment [Produce-add-2] (:seq (the raw-material of Self) " is part of " (the result of Self))
	 "A produce uses raw material parts to create a Tangible-Entity.")

(comment [Produce-add-3] (:seq (the result of Self) " was created from " (the raw-material of Self))
	 "A produce consumes raw material substances to create a Tangible-Entity.")

(comment [Produce-add-4] (:seq (the raw-material of Self) " is part of " (the result of Self))
	 "A produce uses raw material parts to create a Tangible-Entity.")


(every Produce has
;; causes problems for subclasses with other superclasses
  (text-argslots ((:seq raw-material instrument)))

  (text-active-verbseq-sg ("produces"))
  (text-active-verbseq-pl ("produce"))
  (text-passive-verbseq-sg ("gets produced"))
  (text-passive-verbseq-pl ("get produced"))
)


(Produce has
	 (test-case ('(
		       (new-situation)
		       (*metal has (instance-of (Substance)))
		       (a Produce with
			  (raw-material (*metal)))
		       (do-and-next (thelast Produce))
		      
		       ((the material of (the result of (thelast Produce))) = *metal)
		           (the text-gen of (thelast Produce))
		       (new-situation)
		       (*brick has (instance-of (Object)))
		       (a Produce with
			  (raw-material (*brick)))
		       (do-and-next (thelast Produce))
		       ((the has-part of (the result of (thelast Produce))) = *brick)
			(the text-gen of (thelast Produce))

))))

;;
;;    $Id: Product.km,v 1.6 2002/06/04 22:31:56 jfan Exp $
;;

(Product has
	 (superclasses (Role))
	 (required-slot ())
	 (primary-slot ())
	 (secondary-slot ())
	 (cmap-correspondence ())
	 (test-case ()))

(every Product has
       	(in-event ((a Produce)))
       	(played-by ((a Tangible-Entity with
                      (result-of ((the in-event of Self)))
		      (material ((the raw-material of (the in-event of Self))))))))




;; $Id: Propel.km,v 1.1 2002/03/20 20:26:23 kbarker Exp $

;; needs to be fleshed out

(Propel has (superclasses (Move)))

(every Propel has
  (destination ((a Spatial-Entity with
                   (plays ((a Target))))))
)



(Property-Group has
   (superclasses (Thing)))

;;
;; $Id: Property-Value.km,v 1.8 2002/05/20 15:34:41 kbarker Exp $
;;


(Property-Value has
  (superclasses (Property-Group)))

(every Property-Value has
  (property-slot ((the range-of of (the instance-of of Self))))
  (property-of-slot ((the domain-of of (the instance-of of Self))))
  (text-phrase ((the1 of
		  (oneof
		   (the value of Self)
		   where
		   ((the2 of It) =
		    (the instance-of of (the (the property-of-slot of Self) of Self))
		  )
	         )
  )))
                 ; this assumes that the particular *-Value class is
                 ; the range of exactly one (property) slot

  (max-value (
    (constraint (
      (if (has-value (the scalar-constant-class of
                          (the property-slot of Self)))
       then (
         (((the1 of TheValue) isa Number)
          and
          (oneof (the cardinal-unit-class of (the property-slot of Self))
                 where (It covers (the2 of TheValue))))
         or
          ((oneof (the scalar-constant-class of (the property-slot of Self))
                 where (It covers (the1 of TheValue)))
           and
           ((the2 of TheValue) is-subsumed-by 
                 (the domain of (the property-slot of Self)))))
       else (
         (oneof (the categorical-constant-class of (the property-slot of Self))
                 where (It covers TheValue))))
  ))))

  (min-value (
    (constraint (
      (if (has-value (the scalar-constant-class of
                          (the property-slot of Self)))
       then (
         (((the1 of TheValue) isa Number)
          and
          (oneof (the cardinal-unit-class of (the property-slot of Self))
                 where (It covers (the2 of TheValue))))
         or
          ((oneof (the scalar-constant-class of (the property-slot of Self))
                 where (It covers (the1 of TheValue)))
           and
           ((the2 of TheValue) is-subsumed-by 
                 (the domain of (the property-slot of Self)))))
       else (
         (oneof (the categorical-constant-class of (the property-slot of Self))
                 where (It covers TheValue))))
  ))))
  (value (
    (constraint (
      (if (has-value (the scalar-constant-class of
                          (the property-slot of Self)))
       then (
         (((the1 of TheValue) isa Number)
          and
          (oneof (the cardinal-unit-class of (the property-slot of Self))
                 where (It covers (the2 of TheValue))))
         or
          ((oneof (the scalar-constant-class of (the property-slot of Self))
                 where (It covers (the1 of TheValue)))
           and
           ((the2 of TheValue) is-subsumed-by 
                 (the domain of (the property-slot of Self)))))
       else (
         (oneof (the categorical-constant-class of (the property-slot of Self))
                 where (It covers TheValue))))
  ))))
)



;; 
;;    $Id: Property.km,v 1.3 2001/05/01 22:24:04 pnav Exp $ 
;; 

(Property has 
	  (superclasses (Slot)))





(Rate-Constant has
             (superclasses (Constant)))

(*slow has
       (instance-of (Rate-Constant)))

(*fast has
       (instance-of (Rate-Constant)))


 

;; 
;;    $Id: Rate-Scale.km,v 1.5 2001/10/09 00:55:04 jarred Exp $ 
;; 

(Rate-Scale has
 (superclasses (Scale)))
 


;;
;; $Id: Rate-Value.km,v 1.11 2002/03/12 14:29:33 kbarker Exp $
;;


(Rate-Value has 
       (superclasses (Property-Value)))

(every Rate-Value has
   (rate-of ((must-be-a Event)))
   (less-than ((must-be-a Rate-Value)))
   (greater-than ((must-be-a Rate-Value)))
   (same-as ((must-be-a Rate-Value)))
)

(Rate-Value has
   (test-case ('(
                 (Trip has (superclasses (Event)))
                 (*fly-to-Utah has (instance-of (Trip))
                                (rate ((a Rate-Value))))
                 (*drive-to-Utah has (instance-of (Trip))
                              (rate
                                 ((a Rate-Value with
                                     (value ((:pair *slow Trip)
                                     ))
                                     (less-than
                                        ((the rate of *fly-to-Utah)))
                              ))))

                 (the value of (the rate of *drive-to-Utah))

                 ((the less-than of (the rate of *drive-to-Utah))
                       includes (the rate of *fly-to-Utah))
                 ((the greater-than of (the rate of *fly-to-Utah))
                       includes (the rate of *drive-to-Utah))
))))

;; 
;;    $Id: Receive.km,v 1.10 2002/05/16 18:18:17 kbarker Exp $ 
;; 

(Receive has
  	(superclasses	(Transfer))
	(required-slot  (recipient object))
	(primary-slot	(agent donor instrument))
	(secondary-slot ())
	(cmap-correspondence (
			       (:seq object "the thing received")
                               (:seq agent "causer")
                               (:seq donor "donor")
                               (:seq recipient "recipient")
                               (:seq instrument "instrument")
			     ))
)


(every Receive has
  (recipient ((a Tangible-Entity)))
    
  ;; This axiom is temporarily ommitted because it
  ;; may be too restrictive.
  ;;
  ;; (donor     ((<> (the recipient of Self))))  

  ;; The pre and post-conditions of this concept
  ;; are directly inheritted from Transfer.
)

(every Receive has
  (text-active-verbseq-sg ("receives"))
  (text-active-verbseq-pl ("receive"))
  (text-passive-verbseq-sg ("is received"))
  (text-passive-verbseq-pl ("are received"))

  (text-subj ((if (has-value (the agent of Self))
               then (the agent of Self)
               else (if (has-value (the instrument of Self))
                     then (the instrument of Self)
                     else (the recipient of Self)))))

  (text-argslots ((:seq donor instrument)))        ; recipient will be subj

  (text-active-sentence (
     (:seq (if ((the text-subj of Self) /= (the recipient of Self))
            then (:seq
                    (the text-subj-phrase of Self)
                    (if ((the number of (the text-subj of Self)) = 1)
                     then ("causes")
                     else ("cause"))
                    (andify (the text-phrase of (the recipient of Self)))
                    ("to")
                    (the text-active-verbseq-pl of Self)
                 )
            else (:seq
                    (the text-subj-phrase of Self)
                    (the text-active-phrase of Self)
                 ))
           (the text-dobj-phrase of Self)
           (the text-arguments of Self)
  )))

)


;; nothing extra to say about contextual info

(Receive has 
  (test-case ('( 
		 (*Present has
			(instance-of (Tangible-Entity)))
		 (*Maple has
			(instance-of (Tangible-Entity)))

		 ;; *Maple received *Present
		 (*Receive has
			(instance-of (Receive))
			(recipient   (*Maple))
			(object      (*Present)))
		 (do-and-next *Receive)
		 (the text-gen of (thelast Receive))
		 ;; Test 1: The *Maple now has *Present
		 ((the possesses of *Maple) = *Present)

		 ;; Test 2: The *Present is owned by *Maple
		 ((the is-possessed-by of *Present) = *Maple)
	       )))
)






;; 
;;    $Id: Recipient-Role.km,v 1.1 2001/09/25 19:36:35 kbarker Exp $
;; 

(Recipient-Role has
	   (superclasses (Role))
	   (required-slot ())
	   (primary-slot ())
	   (secondary-slot ())
	   (cmap-correspondence ())
	   (test-case ()))

(every Recipient-Role has
       (in-event ((must-be-a Event)))
       (played-by ((a Entity with
		      (recipient-of ((the in-event of Self)))))))
;; 
;;    $Id: Recognize.km,v 1.8 2001/09/20 18:27:57 kbarker Exp $
;; 

(Recognize has
     (superclasses        (Perceive))
     (required-slot       (object))
     (primary-slot        (agent))
     (secondary-slot      ())
     (cmap-correspondence (
                           (:seq agent "the recognizer")
                           (:seq object "the recognized")
                          )))

(every Recognize has
  (object ((a Entity)))
  (agent ((must-be-a Tangible-Entity)))
)

(every Recognize has
  (text-active-verbseq-sg ("recognizes"))
  (text-active-verbseq-pl ("recognize"))
  (text-passive-verbseq-sg ("is recognized"))
  (text-passive-verbseq-pl ("are recognized"))
)



;; 
;;    $Id: Reflexive-Cliche.km,v 1.9 2002/05/31 15:59:19 kbarker Exp $ 
;; 

(Reflexive-Cliche has (superclasses (Cliche)))

(every Reflexive-Cliche has-definition
       (instance-of (Thing))
       (agent ((the object of Self)))
       (object ((the agent of Self))))

; The definition should state (instance-of (Event)) but that causes
; a multiple-inheritance problem for text generation of reflexive
; actions (they "become" instances of Event). Luckily, only Events
; will ever satisfy the definition anyway, since only Events have
; agents and objects


(every Reflexive-Cliche has
       (agent  ((exactly 1 Entity)
		(the object of Self)))
       (object (((the agent of Self) & (a Entity)))))      

(Reflexive-Cliche has
  (test-case ('(
		 (*John has  
			(instance-of (Living-Entity)))
                 (*RC has 
			(instance-of (Reflexive-Cliche))
			(agent (*John)))
                 ((the agent of *RC) = (the object of *RC))
               ))))





;; 
;;    $Id: Region.km,v 1.3 2001/05/01 22:24:06 pnav Exp $ 
;; 

(Region has
         (superclasses (Place))
         (required-slot ())
         (primary-slot ())
         (secondary-slot ())
         (cmap-correspondence ())
         (test-case ()))

;; 
;;    $Id: Relation.km,v 1.3 2001/05/01 22:24:06 pnav Exp $ 
;; 

(Relation has 
	  (superclasses (Slot)))




;; 
;;    $Id: Release.km,v 1.15 2001/12/17 20:46:13 pnav Exp $ 
;; 


(Release has
  (superclasses		(Unobstruct))
  (required-slot   	(object base))
  (primary-slot 	(agent instrument))
  (secondary-slot      	())
  (cmap-correspondence 	(
			 (:seq object "object")
			 (:seq base "the enclosure")
			 (:seq agent "releaser")
			 (:seq instrument "instrument")
			)))

(every Release has
  (base ((a Tangible-Entity)))
  (defeats ((allof (the object-of of (the object of Self))
		   where (((the base of It) = (the base of Self))
			  and ((the classes of It) = Be-Confined)))))

  (object ((a Tangible-Entity with  
              (is-inside ((the base of Self))))))

  (pcs-list ((forall (the object of Self)
	       (:triple
		 It
	         object-of
	         (a Be-Confined with
	   	    (base ((the base of Self)))) [Release-pcs-1]))))

  (del-list ((forall (the defeats of Self)
	       (:set
		 (:triple It object (the object of Self) [Release-del-1])
		 (:triple It base (the base of Self) [Release-del-2])))))
)

(comment [Release-pcs-1] (:seq (the object of Self) " must be confined in " (the base of Self))
	 "Something must be confined before it can be released.")

(comment [Release-del-1] (:seq (the object of Self) " is no longer confined in " (the base of Self))
	 "A release stops something from being confined in something else.")

(comment [Release-del-2] (:seq (the object of Self) " is no longer confined in " (the base of Self))
	 "A release stops something from being confined in something else.")


(every Release has
  (text-active-verbseq-sg ("releases"))
  (text-active-verbseq-pl ("release"))
  (text-passive-verbseq-sg ("gets released"))
  (text-passive-verbseq-pl ("get released"))

  (text-base ((if (has-value (the base of Self))
                  then ("from"))))

)


(every Release has
       (preparatory-event (#|default|#
			  (a Confine with
			     (base ((the base of Self)))
			     (object ((the object of Self))))))
)

;; Test cases are incorporated with that of Confine and can be 
;; found in Confine.km
(Release has (test-case ()))




;; 
;;    $Id: Relinquish.km,v 1.11 2001/09/30 01:20:17 arcane Exp $ 
;; 

(Relinquish has
	(superclasses 	(Lose))
	(required-slot  (agent donor object))
	(primary-slot 	(recipient instrument))
	(secondary-slot ())
	(cmap-correspondence (
			      (:seq object "the thing Relinquished")
			      (:seq agent "the Relinquisher")
                              (:seq donor "the original possessor")
                              (:seq recipient "the final possessor")
                              (:seq instrument "the thing used to Relinquish")
			     ))
)

; the agent/donor is required, and they are equal
(every Relinquish has
  (agent (((a Tangible-Entity) & (the donor of Self))))
  (donor ((exactly 1 Tangible-Entity)
	  (the agent of Self)))
)

(every Relinquish has
  (text-active-verbseq-sg ("relinquishes"))
  (text-active-verbseq-pl ("relinquish"))
  (text-passive-verbseq-sg ("is relinquished"))
  (text-passive-verbseq-pl ("are relinquished"))
)


;; nothing extra to say about contextual info

(Relinquish has
  (test-case ('(
		 (*Gold has (instance-of (Tangible-Entity)))
                 (*Bill has 
			(instance-of (Tangible-Entity))
			(possesses (*Gold)))

		 ;; Bill relinquished the *Gold
                 (*Relinquish has
                        (instance-of (Relinquish))
                        (agent     (*Bill))
                        (object    (*Gold)))
                 (do-and-next *Relinquish)
		 (the text-gen of (thelast Relinquish))
		 ;; Test 1: The agent and the donor is *Bill
		 ( ((the agent of *Relinquish) = *Bill) and
		   ((the donor of *Relinquish) = *Bill) )

		 ;; Test 2: *Bill does not the possess *Gold
                 ((the possesses of *Bill) = nil)

		 ;; Test 3: *Gold is not possessed-by *Bill
		 ((the is-possessed-by of *Gold) /= *Bill)
	       )))
)




;; 
;;    $Id: Remove.km,v 1.16 2002/01/21 17:39:54 jarred Exp $ 
;; 

(Remove has
  	(superclasses        (Action))
        (required-slot 	     (object base))
	(primary-slot        (agent instrument))
	(secondary-slot      ())
	(cmap-correspondence (
                 	      (:seq agent "the remover")
			      (:seq object "the part removed.")	
			      (:seq base "the thing from which the part is being removed")
                 	      (:seq instrument "instrument of the remove")
                 	     )))


(every Remove has
  ;; The agent and the instrument are inheritted from Action.
  (object 	((a Tangible-Entity)))
  (base	((a Tangible-Entity)))

  (pcs-list 	((forall (the object of Self)
		   (:triple It is-part-of (the base of Self) [Remove-pcs-1]))))

  (del-list 	((forall (the object of Self)
		   (:triple It is-part-of (the base of Self) [Remove-del-1]))))
)

(comment [Remove-pcs-1] (:seq (the object of Self) " must be part of " (the base of Self))
	 "Only parts of something can be removed from it.")

(comment [Remove-del-1] (:seq (the object of Self) " is no longer part of " (the base of Self))
	 "A remove stops something from being a part of something else.")

(every Remove has
  (text-active-verbseq-sg ("removes"))
  (text-active-verbseq-pl ("remove"))
  (text-passive-verbseq-sg ("gets removed"))
  (text-passive-verbseq-pl ("get removed"))

  (text-base ("from"))
)


;; 
;;    $Id: Repair.km,v 1.16 2002/01/21 17:39:55 jarred Exp $ 
;; 

(Repair has
        (superclasses   (Action))
        (required-slot  (object))
        (primary-slot   ((agent instrument by-means-of)))
        (secondary-slot ())
        (cmap-correspondence (
                              (:seq object "the thing being repaired")
                              (:seq agent "the one doing the repair")
                              (:seq instrument "the instrument of the repair")
                              (:seq by-means-of "how the repair is achieved")
                             )))

(every Repair has
       ;; object must be broken
       (object   ((a Tangible-Entity)))
       (defeats  ((allof (the object-of of (the object of Self)) 
			 where ((the classes of It) = Be-Broken))))
       (pcs-list ((forall (the object of Self)
			  (:triple
			   It
			   object-of
			   (a Be-Broken) [Repair-pcs-1]))
		  
		  ; This condition captures the requirement that a
		  ; ruined object cannot be repaired.
		  (forall (the object of Self)
			  (:triple
			   It
			   object-of
			   (mustnt-be-a Be-Ruined with
					(object ((the object of Self)))) [Repair-pcs-2]) )))
       
       (del-list ((forall (the defeats of Self)
               	          (:triple It object (the object of Self) [Repair-del-1])))))

(comment [Repair-pcs-1] (:seq (the object of Self) " must be broken to be repaired.")
	 "Only broken objects need repair.")

(comment [Repair-pcs-2] (:seq (the object of Self) " must not be ruined.")
	 "Ruined objects cannot be repaired.")

(comment [Repair-del-1] (:seq (the object of Self) " is no longer broken.")
	 "A repair stops something from being broken.")

(every Repair has
  (text-active-verbseq-sg ("repairs"))
  (text-active-verbseq-pl ("repair"))
  (text-passive-verbseq-sg ("gets repaired"))
  (text-passive-verbseq-pl ("get repaired"))
)


(every Repair has
       (preparatory-event (#|default|#
			  (a Break with
			     (object ((the object of Self))))
)))
			

(Repair has 
	(test-case     ('(
			  (*Vase has (instance-of (Object)))
			 
			  (a Break with (object (*Vase)))

			  (do-and-next (thelast Break))
			  (the text-gen of (thelast Break))
			  (has-value (the Be-Broken object-of of *Vase))

			  (a Repair with (object (*Vase)))
			  (do-and-next (thelast Repair))
			  (the text-gen of (thelast Repair))
			  (not (has-value (the Be-Broken object-of of *Vase)))

			  ))))

;;
;;    $Id: Replace.km,v 1.17 2002/05/16 18:19:55 kbarker Exp $
;; 

(Replace has
         (superclasses (Action))
         (required-slot ((object base)))
         (primary-slot ((instrument agent))))

(every Replace has
       (agent ((must-be-a Tangible-Entity)))
       (object ((a Tangible-Entity called "old entity")
                (a Tangible-Entity called "new entity")))
       (base ((a Tangible-Entity)))
       (first-subevent (((the Detach subevent of Self) called "RemoveOld")))
       (subevent ((a Detach called "RemoveOld" with
                     (agent 	 ((the agent of Self)))
                     (object 	 (((the object of Self) called "old entity")))
		     (base  	 ((the base of Self)))
                     (instrument ((the instrument of Self)))
                     (next-event (((the Attach subevent of Self) called "AttachNew"))))
                  (a Attach called "AttachNew" with
                     (agent 	 ((the agent of Self)))
                     (object 	 (((the object of Self) called "new entity")))
                     (base 	 ((the base of Self)))
                     (instrument ((the instrument of Self))))))
)

(every Replace has
  (text-active-verbseq-sg ("replaces"))
  (text-active-verbseq-pl ("replace"))
  (text-passive-verbseq-sg ("gets replaced"))
  (text-passive-verbseq-pl ("gets replaced"))

  (text-base ((if (has-value (the base of Self))
                  then ("in"))))
  (text-instrument ((if (has-value (the instrument of Self))
                        then ("using"))))

  (text-active-sentence (
      (:seq (the text-subj-phrase of Self)
            (the text-active-phrase of Self)
            (the text-phrase of ((the object of Self) called "old entity"))
            ("with")
            (the text-phrase of ((the object of Self) called "new entity"))
            (the text-arguments of Self)
   )))
   (text-passive-sentence (
      (:seq 
            (the text-phrase of ((the object of Self) called "old entity"))
            (the text-passive-phrase of Self)
            ("with")
            (the text-phrase of ((the object of Self) called "new entity"))
            (the text-arguments of Self)
   )))

)


(Replace has
   (test-case ('(
                 (*blownfuse has (instance-of (Object)))
                 (*newfuse has (instance-of (Object)))
                 (*socket has (instance-of (Object)))

                 (a Replace with (object (*blownfuse *newfuse))
                                 (base (*socket)))

                 (do-script (thelast Replace))

                 ((the resulting-state of 
                       (the Attach subevent of (thelast Replace)))
                  isa Be-Attached-To)
		 (the text-gen of (thelast Replace))
		 (forall (the subevent of (thelast Replace)) (the text-gen of It))
                 ((the object of (thelast Be-Attached-To)) includes *newfuse)
                 ((the object of (thelast Be-Attached-To)) includes *socket)

))))

;; 
;;    $Id: Restrain.km,v 1.12 2002/01/21 20:50:19 jarred Exp $ 
;; 

(Restrain has
	  (superclasses		(Obstruct))
	  (required-slot   	(object))
	  (primary-slot 	(agent))
	  (secondary-slot      	())
	  (cmap-correspondence 	(
				 (:seq object "restrainee")
				 (:seq agent  "restrainer")
				 ))
	  )

(every Restrain has
       (object ((a Object)))

       ;; The agent (if one is specified) is inherited from Obstruct.

       (resulting-state ((a Be-Restrained)))

       ;; The precondition is that the object cannot be restrained 
       ;; by the same agent more than once.
       (pcs-list ((forall (the object of Self)
			  ((:triple 
			    It
			    object-of
			    (mustnt-be-a Be-Restrained with
					 (object ((the object of Self)))
					 (agent  ((the agent of Self)))))))))

       ;; The post-conditions are inherited from the superclass
       ;; Obstruct.
       )

(every Restrain has
  (text-active-verbseq-sg ("restrains"))
  (text-active-verbseq-pl ("restrain"))
  (text-passive-verbseq-sg ("gets restrained"))
  (text-passive-verbseq-pl ("get restrained"))
)


(every Restrain has
       (preparatory-event (#|default|#
			  (a Unrestrain with
			     (object ((the object of Self))))))
)

(Restrain has 
  (test-case      ('(
		     (*mugger has (instance-of (Object)))
                            
		     (a Restrain with 
		      (object (*mugger)))
                            
		     (do-and-next (thelast Restrain))
                     (the text-gen of (thelast Restrain))
		     (forall (the resulting-state of (thelast Restrain)) (the text-gen of It))
		     (has-value (the Be-Restrained object-of of *mugger))

		     (a Move with (object (*mugger)))
		     (not (try-do (thelast Move)))
		     (the text-gen of (thelast Move))
		     ))))


;; 
;;    $Id: Role.km,v 1.9 2002/05/16 18:21:44 kbarker Exp $ 
;; 

;; partial role implementation
(Role has (superclasses (Thing)))
;;(Role has (superclasses (Tangible-Entity)))
#|(a Partition with
   (members (Role Entity)))
|#


(every Role has
        (name ((if (anonymous-instancep Self) then
                   (oneof (the instance-of of Self) where t))))

        (text-head ((the name of Self)))

;; text-gen of Events needs to have control over whether NPs in clauses
;; are def or indef; but only the Role knows how to form its NP
        (text-def-head ((if (anonymous-instancep Self) then
                            (:seq (:seq "the")    ;; to match Entity dets
                                  (:seq Self NIL))
                         else
                            (the text-head of Self))))
        (text-indef-head ((if (anonymous-instancep Self) then
                              (:seq (:seq "a")
                                    (:seq Self NIL))
                           else
                              (the text-head of Self))))

)

;; 
;;    $Id: Ruin.km,v 1.12 2001/12/17 20:46:24 pnav Exp $ 
;; 

(Ruin has
      (superclasses   (Break))
      (required-slot  (object))
      (primary-slot   (agent instrument by-means-of))
      (secondary-slot ())
      (cmap-correspondence (
                 (:seq agent "the destroyer")
		 (:seq object "the object ruined")
		 (:seq by-means-of "an event necessary to ruining the object")
			    )))

(every Ruin has
       (object 		((a Tangible-Entity)))
       (agent 		((must-be-a Tangible-Entity)))
       (instrument 	((must-be-a Tangible-Entity)))
       (by-means-of	((must-be-a Event)))
       (resulting-state ((a Be-Ruined)))
       (add-list 	((:triple
		 	   (the resulting-state of Self)
		   	   object
		   	   (the object of Self) [Ruin-add-1]))))

(comment [Ruin-add-1] (:seq (the object of Self) " is ruined.")
	 "A ruin causes a Tangible-Entity to be ruined.")

(every Ruin has
  (text-active-verbseq-sg ("ruins"))
  (text-active-verbseq-pl ("ruin"))
  (text-passive-verbseq-sg ("gets ruined"))
  (text-passive-verbseq-pl ("get ruined"))
)


;; nothing extra to say about contextual info

(Ruin has
      (test-case   ('(
		      (*House has 
			(instance-of (Tangible-Entity)))
		      (a Ruin with 
			 (object (*House)))

		      ; Ruin *House
		      (do-and-next (thelast Ruin))
		      (the text-gen of (thelast Ruin))
		      (forall (the resulting-state of (thelast Ruin)) (the text-gen of It))
		      ; *House is in a Be-Ruined state
		      (has-value (the Be-Ruined object-of of *House))

		      ; *House cannot be repaired.
		      (a Repair with
			 (object (*House)))

		      (not (try-do (thelast Repair)))
		     (the text-gen of (thelast Repair))
		     ))))
   


(Scale has
   (superclasses (Property-Group)))

;; 
;;    $Id: Send.km,v 1.23 2002/05/31 16:18:48 kbarker Exp $ 
;; 

(Send has
      (superclasses 	   (Action))
      (required-slot  	   (recipient agent donor object))
      (primary-slot 	   (instrument origin path destination subevent))
      (secondary-slot 	   ())
      (cmap-correspondence (
			    (:seq recipient   "recipient")
                            (:seq agent       "sender")
                            (:seq donor       "donor")
			    (:seq object      "the thing sent")
			    (:seq subevent    "subevent")	
                            (:seq instrument  "instrument")
			    (:seq origin      "moved from")
			    (:seq path 	      "moved through")
                            (:seq destination "moved to")
			   )))

(every Send has 
  (recipient 	  ((a Tangible-Entity)))
  (agent 	  ((a Entity)))
  (donor 	  ((the agent of Self)))	
  (object	  ((a Tangible-Entity)))
  (origin    	  ((the donor of Self)))
  (path 	  ((must-be-a Spatial-Entity)))
  (destination    ((the recipient of Self)))

  ;; The subevents of this scenario.
  (first-subevent ((the Relinquish subevent of Self)))
  (subevent ((a Relinquish with
		(agent      	((the agent of Self)))
		(object     	((the object of Self)))
		(next-event 	((the Move subevent of Self))))
	     (a Move with
		(object     	((the object of Self)))
		(origin 	((the origin of Self)))
		(path           ((the path of Self)))
		(destination	((the destination of Self)))
		(next-event 	((the Deliver subevent of Self))))
	     (a Deliver with
		(object     	((the object of Self)))
		(donor		((the donor of Self)))
		(recipient  	((the recipient of Self))))))
)

(every Send has
  (text-active-verbseq-sg ("sends"))
  (text-active-verbseq-pl ("send"))
  (text-passive-verbseq-sg ("gets sent"))
  (text-passive-verbseq-pl ("get sent"))
)


(every Send has
  ;; During-Condition: if path is specified, then this
  ;; is the transient location of the object.
  ;;
  ;; Note: Not sure as to the status of during-condition.
  ;;	   Need to fix accordingly when a decision has
  ;;	   been made.
  (dcs-list 	    ((if (has-value (the path of Self))
                         then
			 ((forall (the object of Self)
                           (:triple
			     It	
			     location
			     (if ((the path of Self) isa Place)
                              then (the path of Self)
                              else (the location of (the path of Self)))))))))

  (preparatory-event ((#|default|#
		       (forall (the object of Self)
			 (a Move with
			    (object (It))
			    (destination ((the origin of Self))))))))
)

(Send has 
  (test-case ('(
		 (*Fresno has (instance-of (Place)))
		 (*Detroit has (instance-of (Place)))
                 (*Blue-Package has            
			(instance-of (Object))
			(location (*Fresno)))
		 (*Victor has
			(instance-of (Tangible-Entity))
			(possesses   (*Blue-Package))
			(location    (*Fresno)))
		 (*Maurice has 
			(instance-of (Tangible-Entity))
			(location    (*Detroit)))

		 ;; *Victor sent *Blue-Package to *Maurice.
		 (*Send has
			(instance-of (Send))
			(agent 	     (*Victor))
			(recipient   (*Maurice))			
			(object      (*Blue-Package)))
		 (do-script *Send)
		 (the text-gen of (thelast Send))
		 (forall (the subevent of (thelast Send)) (the text-gen of It))
		 ;; Test 1: *Maurice has *Blue-Package and he is
		 ;;	    still in *Detroit
		 ((the possesses of *Maurice) = *Blue-Package)
		 ((the location of *Maurice) = *Detroit) 

		 ;; Test 2: *Victor does not have *Blue-Package, 
		 ;;	    but he is still in *Fresno
		 ((the possesses of *Victor) /= *Blue-Package)
		 ((the location of *Victor) = *Fresno)   

		 ;; Test 3: The *Blue-Package is now in *Detroit
		 ((the location of *Blue-Package) = *Detroit)

		 ;; Test 4: *Blue-Package was in *Fresno in the 
		 ;;	    previous situation, but is no longer
		 ((the location of *Blue-Package) /= *Fresno)


                 (new-situation)

                 (*virus has (instance-of (Object)))
                 (*CDC has (instance-of (Entity))
                           (location (*Atlanta)))
                 (*Atlanta has (instance-of (Place)))
                 (*Bossie has (instance-of (Living-Entity))
                              (possesses (*virus)))
                 (*river has (instance-of (Tangible-Entity)))

                 (a Send with
                         (object (*virus))
                         (path (*river))
                         (donor (*Bossie))
                         (recipient (*CDC)))
                 (do-script (thelast Send))

                 ((the is-possessed-by of *virus) = *CDC) 
                 ((the is-possessed-by of *virus) /= *Bossie) 
                 ((the location of *virus) = *Atlanta)
	       )))
)



(Sentience-Constant has
 (superclasses (Constant)))

  (*sentient has
        (instance-of (Sentience-Constant)))

  (*not-sentient has
        (instance-of (Sentience-Constant)))

;;
;; $Id: Sentience-Value.km,v 1.8 2002/05/31 15:59:19 kbarker Exp $
;;


(Sentience-Value has 
       (superclasses (Property-Value)))

(every Sentience-Value has
   (sentience-of ((must-be-a Living-Entity)))
   (same-as ((must-be-a Sentience-Value)))
)
;; 
;;    $Id: Sequence.km,v 1.17 2001/12/21 05:26:06 tecuci Exp $ 
;; 

(Sequence has
         (superclasses (Aggregate))
         (required-slot ())
         (primary-slot ())
         (secondary-slot ())
         (cmap-correspondence ()))

(every Sequence has
       ;; first element of the sequence 
       (first-element ((<> Self)
		       (oneof (the element-type of Self) 	
			      where ((oneof2 (the classes of It) 
					     where (TheValue isa It2)))))))

(Sequence has
	  (test-case ('(
                (*e1 has (instance-of (Entity))
		     (next-element (*e2)))
                (*e2 has (instance-of (Entity))
		     (next-element (*e3)))
                (*e3 has (instance-of (Entity)))

                (*e4 has (instance-of (Entity))
		     (next-element (*e5)))
                (*e5 has (instance-of (Entity)))

                (*e6 has (instance-of (Entity))
		     (next-element (*e7)))
                (*e7 has (instance-of (Entity))
		     (next-element (*e8)))
                (*e8 has (instance-of (Entity))
		     (next-element (*e9)))
                (*e9 has (instance-of (Entity)))
		
                (*S1 has 
		     (instance-of (Sequence))
		     (element-type ((a Entity)))
		     (first-element (*e1))
		     (element (*e1 *e2 *e3)))

                (*S2 has 
		     (instance-of (Sequence))
		     (element-type ((a Entity)))
		     (first-element (*e4))
		     (element (*e4 *e5)))

                (*S3 has 
		     (instance-of (Sequence))
		     (element-type ((a Entity)))
		     (first-element (*e6))
		     (element (*e6 *e7 *e8 *e9)))
		
                (*S4 has
		     (instance-of (Sequence))
       	             (element-type ((a Entity)))
		     (first-element (*S1))
		     (element (*S1 *S2 *S3)))

		((the element of *S1) = (:set *e1 *e2 *e3))

		((the element of *S4) = (:set *S1 *S2 *S3))))))

 


(Sex-Constant has
 (superclasses (Constant)))

  (*female has
        (instance-of (Sex-Constant)))

  (*male has
        (instance-of (Sex-Constant)))

;;
;; $Id: Sex-Value.km,v 1.10 2002/05/31 15:59:20 kbarker Exp $
;;


(Sex-Value has 
       (superclasses (Property-Value)))

(every Sex-Value has
   (sex-of ((must-be-a Living-Entity)))
   (same-as ((must-be-a Sex-Value)))
   (text-phrase ((the value of Self)))
)


(Shape-Constant has
 (superclasses (Constant)))

  (*circle has
	(instance-of (Shape-Constant)))

  (*square has
	(instance-of (Shape-Constant)))

  (*triangle has
	(instance-of (Shape-Constant)))

  (*rectangle has
	(instance-of (Shape-Constant)))

  (*oval has
	(instance-of (Shape-Constant)))

  (*polygon has
	(instance-of (Shape-Constant)))
 
  (*parallelogram has
	(instance-of (Shape-Constant)))

  (*hollow-volume has
	(instance-of (Shape-Constant)))

 

;;
;; $Id: Shape-Value.km,v 1.9 2002/03/16 00:15:26 jarred Exp $
;;


(Shape-Value has 
       (superclasses (Property-Value)))

(every Shape-Value has
   (shape-of ((must-be-a Tangible-Entity)))
   (same-as ((must-be-a Shape-Value)))
   (text-phrase ((the value of Self)))
)

;
;   $Id: Shorten.km,v 1.5 2002/05/18 17:03:47 jarred Exp $
;

(Shorten has 
  (superclasses (Decrease)))

(every Shorten has-definition
  (instance-of (Decrease))
  (property (length))
)

(every Shorten has
   (test-case ('(
                 (*mycarantenna has (instance-of (Substance))
                             (length (*mycarantennalength)))
                 (*mycarantennalength has (instance-of (Length-Value))
                                        (value ((:pair 10000 *millimeter))))

                 (a Decrease with (object (*mycarantenna))
                                  (property (length)))

                 ((thelast Decrease) isa Shorten)

                 (do-and-next (thelast Shorten))

                 ((the less-than of (the length of *mycarantenna))
                       includes *mycarantennalength)

))))
;; 
;;    $Id: Shut-Out.km,v 1.22 2002/03/20 17:58:05 jfan Exp $ 
;; 

(Shut-Out has
	  (superclasses		(Obstruct))
	  (required-slot   	(object base))
	  (primary-slot 	(agent))
	  (secondary-slot      	())
	  (cmap-correspondence 	(
				 (:seq object "the thing Shut-Out")
				 (:seq base "the enclosure")
				 (:seq agent "the Out-Shutter")
				 ))
	  )

(every Shut-Out has
       (resulting-state ((a Be-Shut-Out)))
       (base            ((a Tangible-Entity
                          with
                            (plays ((a Container)))
       )))

       (object 	        ((a Tangible-Entity)))

       (ncs-list 	((forall (the object of Self) 
                                 (:triple It is-inside (the base of Self) [Shut-Out-ncs-1]))
       ))

       (add-list 	((forall (the object of Self) 
				 (:triple
				    It
				    object-of
				    (the resulting-state of Self) [Shut-Out-add-1]))
			  (:triple
			     (the base of Self)
			     base-of
			     (the resulting-state of Self) [Shut-Out-add-2]))))

(comment [Shut-Out-ncs-1] (:seq (the object of Self) " cannot be inside something.")
	 "A Tangible-Entity cannot be shut out of another Tangible-Entity if it is already inside of it.")

(comment [Shut-Out-add-1] (:seq (the object of Self) " is now shut out of " (the base of Self))
	 "A shut out causes a Tangible-Entity to be shut out of another Tangible-Entity.")

(comment [Shut-Out-add-2] (:seq (the base of Self) " now shuts out " (the object of Self))
	 "A shut out causes a Tangible-Entity to be shut out of another Tangible-Entity.")

(every Shut-Out has
  (text-active-verbseq-sg ("shuts out"))
  (text-active-verbseq-pl ("shut out"))
  (text-passive-verbseq-sg ("gets shut out"))
  (text-passive-verbseq-pl ("get shut out"))

  (text-base ((if (has-value (the base of Self))
                  then ("of"))))

)

(every Shut-Out has
       (preparatory-event (#|default|#
			  (a Admit with
			     (base ((the base of Self)))
			     (object ((the object of Self))))
			  (a Exit with
			     (base ((the base of Self)))
			     (object ((the object of Self))))
)))



;; nothing extra to say about contextual info

(Shut-Out has (test-case ()))





(Size-Constant has
  (superclasses (Constant)))


  (*microscopic has
    (instance-of (Size-Constant))) 

  (*tiny has
    (instance-of (Size-Constant))) 

  (*big has
    (instance-of (Size-Constant)))

  (*little has
    (instance-of (Size-Constant)))

  (*gigantic has
    (instance-of (Size-Constant))) 

  (*undersized has
    (instance-of (Size-Constant)))

  (*huge has
     (instance-of (Size-Constant)))

  (*oversized has
    (instance-of (Size-Constant)))   



;; 
;;    $Id: Size-Scale.km,v 1.5 2001/10/09 00:55:06 jarred Exp $ 
;; 

(Size-Scale has
 (superclasses (Scale)))


;;
;; $Id: Size-Value.km,v 1.11 2002/03/12 14:29:35 kbarker Exp $
;;


(Size-Value has 
       (superclasses (Property-Value)))

(every Size-Value has
   (size-of ((must-be-a Tangible-Entity)))
   (less-than ((must-be-a Size-Value)))
   (greater-than ((must-be-a Size-Value)))
   (same-as ((must-be-a Size-Value)))
)

(Size-Value has
   (test-case ('(
                 (Drink has (superclasses (Substance)))
                 (Ocean has (superclasses (Substance)))
                 (*mycoffee has (instance-of (Drink))
                                (size ((a Size-Value))))
                 (*mybeer has (instance-of (Drink))
                              (size
                                 ((a Size-Value with
                                     (value ((:pair *big Drink)
                                             (:pair *tiny Ocean)
                                     ))
                                     (less-than
                                        ((the size of *mycoffee)))
                              ))))

                 (the value of (the size of *mybeer))

                 ((the less-than of (the size of *mybeer))
                       includes (the size of *mycoffee))
                 ((the greater-than of (the size of *mycoffee))
                       includes (the size of *mybeer))
))))
; 
;;    $Id: Slide.km,v 1.15 2001/11/20 20:40:23 kbarker Exp $ 
;; 

(Slide has
       (superclasses   (Move))
       (required-slot  (object path))
       (primary-slot   (agent origin destination))
       (secondary-slot ())
       (cmap-correspondence (
                                (:seq object "the thing slid")
                                (:seq agent "the mover")
                                (:seq origin "slid from")
                                (:seq destination "slid to")
                                (:seq path "slid along")
                            )))


; Slide is a specialization of the Move-Through component with the
; condition that the object be touching the thing whose location is
; the path

(every Slide has
  ; The object is inherited from Slide's superclasses.  
  (path     ((a Tangible-Entity)))           ; force path to T-E for Slide
  
  (pcs-list ((forall (the object of Self)
                     (:triple
                       It
                       object-of
                       (a Be-Touching with
                          (object ((the path of Self))))))))
)

(every Slide has
  (text-active-verbseq-sg ("slides"))
  (text-active-verbseq-pl ("slide"))
  (text-passive-verbseq-sg ("slides"))
  (text-passive-verbseq-pl ("slide"))
)


;; nothing extra to say about contextual info
;; inherited from Move and Action

(Slide has
  (test-case ( '(
                 (*ice  has (instance-of (Tangible-Entity)))
                 (*puck has (instance-of (Tangible-Entity)))
                 (*Be-Touching-for-Slide has 
                        (instance-of (Be-Touching))
                        (object (*puck *ice)))
                       
                 ;; the puck slides along the ice
                 (*Slide has
                         (instance-of (Slide))
                         (object (*puck))
                         (path   (*ice)))
                 (do-and-next *Slide)
		 (the text-gen of (thelast Slide))
                 ;; Test1: The path is the ice
                 ((the path of *Slide) = *ice)

                 ;; Test2: The puck and ice are still touching (i.e. the 
                 ;;        object of *Be-Touching-for-Slide includes *ice 
                 ;;        and *puck).
                 ((the object of *Be-Touching-for-Slide) includes *ice)
                 ((the object of *Be-Touching-for-Slide) includes *puck)
                )))
)






;; 
;;    $Id: Slot.km,v 1.4 2001/05/23 02:37:38 kbarker Exp $ 
;; 

(Slot has 
      (superclasses (Thing)))







(Smell-Constant has
 (superclasses (Constant)))

  (*smokey has
	(instance-of (Smell-Constant)))

  (*flowery has
	(instance-of (Smell-Constant)))

  (*rancid has
	(instance-of (Smell-Constant)))

  (*odorless has
	(instance-of (Smell-Constant)))

  (*fruity has
	(instance-of (Smell-Constant)))

  (*musky has
	(instance-of (Smell-Constant)))
 
  (*spicy has
	(instance-of (Smell-Constant)))

   (*foul has
	(instance-of (Smell-Constant)))

  (*fresh has
	(instance-of (Smell-Constant)))

  (*stinky has
	(instance-of (Smell-Constant)))

  



;;
;; $Id: Smell-Value.km,v 1.9 2002/03/16 00:15:26 jarred Exp $
;;


(Smell-Value has 
       (superclasses (Property-Value)))

(every Smell-Value has
   (smell-of ((must-be-a Tangible-Entity)))
   (same-as ((must-be-a Smell-Value)))
   (text-phrase ((the value of Self)))
)
;; 
;;    $Id: Soluble-Substance.km,v 1.4 2001/05/01 22:24:16 pnav Exp $ 
;; 

;; Not yet released:
;; - no specs yet, but used in Pinocytose

(Soluble-Substance has
           (superclasses (Chemical-Substance))
           (required-slot ())
           (primary-slot ())
           (secondary-slot ())
	   (description ("Substance which dissolves in a fluid."))
           (cmap-correspondence ())
           (test-case ()))




(Spatial-Entity has
                (superclasses (Entity))
                (required-slot ())
                (primary-slot ())
                (secondary-slot ())
                (cmap-correspondence ())
                (test-case ()))


(every Spatial-Entity has
  (location ((must-be-a Place)))

  (is-outside ((must-be-a Spatial-Entity)))
  (does-not-enclose ((must-be-a Spatial-Entity)))
  (is-inside ((must-be-a Spatial-Entity)))
  (encloses ((must-be-a Spatial-Entity)))
  (abuts ((must-be-a Spatial-Entity) 
	  (excluded-values (Self))))
  (is-above ((must-be-a Spatial-Entity)))
  (is-below ((must-be-a Spatial-Entity)))
  (is-along ((must-be-a Spatial-Entity)))
  (is-at ((must-be-a Spatial-Entity)))
  (is-behind ((must-be-a Spatial-Entity)))
  (is-in-front-of ((must-be-a Spatial-Entity)))
  (is-on ((must-be-a Spatial-Entity)))
  (has-on-it ((must-be-a Spatial-Entity)))
  (is-opposite ((must-be-a Spatial-Entity)))
  (is-over ((must-be-a Spatial-Entity)))
  (is-under ((must-be-a Spatial-Entity)))

  (is-near ((must-be-a Spatial-Entity)))

;; This is how we'd like to encode is-near, but it's causing 
;; interference. To be revisited.
#| 
  (is-near ((:set (the is-near of Self)
                  (the abuts of Self)
                  (the is-above of Self) (the is-below of Self)
                  (the is-along of Self)
                  (the is-at of Self) (the is-at-of of Self)
                  (the is-beside of Self)
                  (the is-between of Self)
                  (the is-behind of Self) (the is-in-front-of of Self)
                  (the is-inside of Self) (the encloses of Self)
                  (the is-on of Self) (the has-on-it of Self)
                  (the is-opposite of Self)
                  (the is-outside of Self) (the does-not-enclose of Self)
                  (the is-over of Self) (the is-under of Self))))
|#
)

;; 
;;    $Id: State.km,v 1.10 2002/04/17 19:37:45 kbarker Exp $ 
;; 

(State has
  (superclasses 	(Event))
  (required-slot 	())
  (primary-slot 	(object experiencer))
  (secondary-slot 	())               
  (cmap-correspondence  (
			 (:seq experiencer "the thing experiencing the state")
			 (:seq object "the thing that in the state")
			)))

(every State has 
  ;; the time of existence of a state is 
  ;; right after the creation action
  ;; right before the defeating action
  (time ((must-be-a Time-Interval with
	   (temporally-started-by ((the time of (the resulting-state-of of Self))))
	   (temporally-finished-by ((the time of (the defeated-by of Self)))))))
       
  (experiencer ((must-be-a Living-Entity with
		  (time-of-existence 
		    ((a Time-Interval with
			(temporally-overlaps
			  ((the time-of-existence of (the object of Self))
			   (if (has-value (the beneficiary of Self))
			       then
			       (the time-of-existence of (the beneficiary of Self)))
			   (if (has-value (the agent of Self))
			       then
			       (the time-of-existence of (the agent of Self)))
			   (if (has-value (the instrument of Self))
			       then
			       (the time-of-existence of (the instrument of Self)))
			   (if (has-value (the recipient of Self))
			       then
			       (the time-of-existence of (the recipient of Self))))))))))))

(every State has
  (text-active-verbseq-sg ("keeps"))
  (text-active-verbseq-pl ("keep"))
  (text-passive-verbseq-sg ("is"))
  (text-passive-verbseq-pl ("are"))

  (text-particle ((:seq "in a state of" (the instance-of of Self))))

  (text-argslots ((:seq text-particle base instrument site)))
)

(State has (test-case ()))

;;
;;    $Id: Store.km,v 1.10 2002/01/21 20:50:21 jarred Exp $
;;

(Store has
  (superclasses 	(Action))
  (required-slot        (object base))
  (primary-slot         (agent instrument))
  (secondary-slot       ())
  (cmap-correspondence  (
                         (:seq object "the thing being stored")
                         (:seq base "the thing stored in")
                         (:seq agent "the agent")
			 (:seq instrument "the instrument used")
                        )))

(every Store has
  (object 	   ((a Entity)))
  (base		   ((exactly 1 Tangible-Entity)
		    (a Tangible-Entity)))
  (agent  	   ((must-be-a Entity)))
  (instrument	   ((must-be-a Entity)))
  (resulting-state ((a Be-Stored)))

  ;; Pre and Post conditions.
  (pcs-list ((forall (the object of Self)
	       (:triple
	       	 It
		 object-of
		 (mustnt-be-a Be-Stored with
		   (base ((the base of Self)))) [Store-pcs-1]))))
  (add-list ((:triple
               (the base of Self)
               content
               (the object of Self) [Store-add-1])
	     (:triple
	       (the resulting-state of Self)
	       object
	       (the object of Self) [Store-add-2])	
	     (:triple
	       (the resulting-state of Self)
	       base
	       (the base of Self) [Store-add-3]))))
		
(comment [Store-pcs-1] (:seq (the object of Self) " must not be stored already.")
	 "Something cannot be stored more than once.")

(comment [Store-add-1] (:seq (the base of Self) " now contains " (the object of Self))
	 "A store causes an Entity to be stored inside a Tangible-Entity.")

(comment [Store-add-2] (:seq (the object of Self) " is now stored in " (the base of Self))
	 "A store causes an Entity to be stored inside a Tangible-Entity.")

(comment [Store-add-3] (:seq (the base of Self) " now has " (the object of Self) " stored inside it.")
	 "A store causes an Entity to be stored inside a Tangible-Entity.")

(every Store has
  (text-active-verbseq-sg ("stores"))
  (text-active-verbseq-pl ("store"))
  (text-passive-verbseq-sg ("gets stored"))
  (text-passive-verbseq-pl ("get stored"))

  (text-base ((if (has-value (the base of Self))
                  then ("in"))))

)

(every Store has
   (preparatory-event (#|default|#
	(a Withdraw with 
	 (object ((the object of Self))))
	(a Open with 
	 (base ((the base of Self)))
	 (agent ((the agent of Self))))
)))
;; 
;;    $Id: Substance.km,v 1.4 2002/04/10 21:32:15 kbarker Exp $ 
;; 

;; KJB: Instances of our Substance class are amounts of the Substance.
;; KJB: The classes themselves refer to Substances independent of the
;; KJB: individual "amounts" they constitute.

(Substance has
	   (superclasses (Tangible-Entity))
	   (required-slot ())
	   (primary-slot ())
	   (secondary-slot ())
	   (cmap-correspondence ())
	   (test-case ()))




;; 
;;    $Id: Supply.km,v 1.10 2001/09/30 01:47:30 arcane Exp $ 
;; 

(Supply has
	(superclasses 	(Give))
	(required-slot  (recipient agent donor object enables))
	(primary-slot 	(instrument))
	(secondary-slot ())
	(cmap-correspondence (
			      (:seq object "the thing Supplied")
			      (:seq agent "the Supplier")
                              (:seq donor "the original possessor")
                              (:seq recipient "the final possessor")
                              (:seq instrument "the thing used to Supply")
			      (:seq enables "enable")	
			     ))
)

(every Supply has
  (agent     ((a Tangible-Entity)))   
  (enables   ((a Obtain with 
		(recipient ((the recipient of Self)))
		(object    ((the object of Self))))))
)

(every Supply has
  (text-active-verbseq-sg ("supplies"))
  (text-active-verbseq-pl ("supply"))
  (text-passive-verbseq-sg ("is supplied"))
  (text-passive-verbseq-pl ("are supplied"))
)


;; nothing extra to say about contextual info

(Supply has
  (test-case ('(
                 (*Money has (instance-of (Object)))
                 (*Fred has
                        (instance-of (Living-Entity)) 
                        (possesses   (*Money)))
                 (*Steven has (instance-of (Tangible-Entity)))

		 ;; *Fred Supplied *Money to *Steven
                 (*Supply has
                        (instance-of (Supply))
                        (agent       (*Fred))
                        (recipient   (*Steven))
                        (object      (*Money)))
                 (do-and-next *Supply)
		 (the text-gen of (thelast Supply))
		

		 ;; Test 1: Supply enables an Obtain
		 ((the enables of *Supply) isa Obtain)

		 ;; Test 2: The entity with the intent of obtaining
		 ;;	    the object should be *Steven.
		 ((the agent of (the enables of *Supply)) = *Steven)

		 ;; Test 3: The recipient of the Obtain enabled by Supply
		 ;;	    is also *Steven.
		 ((the recipient of (the enables of *Supply)) = *Steven)

		 ;; Test 4: The object intentionally obtained should be *Money
		 ((the object of (the enables of *Supply)) = *Money)
	
		  
		 ;; Test 5: *Fred no longer has the *Money
                 ((the possesses of *Fred) /= *Money)

                 ;; Test 6: *Steven now has the *Money
                 ((the possesses of *Steven) = *Money)

	       )))
)








;; 
;;    $Id: Support.km,v 1.16 2002/01/21 20:50:21 jarred Exp $ 
;; 

(Support has
	(superclasses 	(Obstruct))
	(required-slot  (object))
	(primary-slot 	(instrument))
	(secondary-slot ())
	(cmap-correspondence (
			      (:seq object "the thing supported")
                              (:seq instrument "instrument")
			     ))
)

(every Support has
  (object     	   ((a Tangible-Entity)))
  (resulting-state ((a Be-Supported)))
  (instrument 	   ((must-be-a Tangible-Entity)))       

  ;; object is the object of a Be-Supported 
  (add-list ((:triple
	       (the resulting-state of Self)
	       object		
	       (the object of Self) [Support-add-1])

	     (if (has-value (the instrument of Self))
		 then
		 (:triple
		   (the resulting-state of Self)
		   instrument
		   (the instrument of Self) [Support-add-2]))))
)

(comment [Support-add-1] (:seq (the object of Self) " is now supported.")
	 "A support causes the object to be supported.")

(comment [Support-add-2] (:seq (the instrument of Self) " is now used to support " (the object of Self))
	 "A Tangible-Entity can be used to support the object.")


(every Support has
  (text-active-verbseq-sg ("supports"))
  (text-active-verbseq-pl ("support"))
  (text-passive-verbseq-sg ("gets supported"))
  (text-passive-verbseq-pl ("get supported"))
)


;; Additional contextual information about Support.
(every Support has
  (preparatory-event (
                   ; The agent must first move to where the
                   ; object is.
		   (if (has-value (the agent of Self))
		       then
                       (#|default|#
                         (a Move with
                            (object      ((the agent of Self)))
                            (destination ((a Spatial-Entity with
                                             (is-at ((the object of Self))))))
                         )))))
  (interrupted-by ((must-be-a Break with
                     (object ((the instrument of Self))))))
)


;; Test cases for Support/Let-Fall quad
(Support has
  (test-case ('(

		(*dumb-bell has
		  (instance-of (Tangible-Entity)))

		(*body-builder has
		  (instance-of (Living-Entity)))

		(a Support with
		   (object (*dumb-bell))
		   (agent  (*body-builder)))

		(not (has-value (the Be-Supported object-of of *dumb-bell)))

		(do-and-next (thelast Support))
		(the text-gen of (thelast Support))
		(forall (the resulting-state of (thelast Support)) (the text-gen of It))
		(has-value (the Be-Supported object-of of *dumb-bell))

		(a Fall with 
		   (object (*dumb-bell)))
		
		(not (try-do (thelast Fall)))
		(the text-gen of (thelast Fall))
		(a Let-Fall with
		   (object (*dumb-bell))
		   (agent  (*body-builder)))

		(do-and-next (thelast Let-Fall))
		(the text-gen of (thelast Let-Fall))
		(not (has-value (the Be-Supported object-of of *dumb-bell)))

		(try-do (thelast Fall))
	      )))
)






;; 
;;    $Id: Take-Apart.km,v 1.11 2001/12/17 20:46:39 pnav Exp $ 
;; 

(Take-Apart has
  (superclasses   	(Destroy))
  (required-slot  	(object))
  (primary-slot   	(agent instrument))
  (secondary-slot 	())
  (cmap-correspondence 	(
			 (:seq agent "the agent")
                         (:seq object "the thing taken apart")
                         (:seq instrument "instrument of used in the take apart")
			)))

(every Take-Apart has
  (object ((a Tangible-Entity)))

  (del-list ((forall (the object of Self)
                (:triple It has-part (the has-part of It) [Take-Apart-del-1]))))

  ;; To Do: The object must exist
  ;;	    (pcs-list ())
  ;; To Do: We need to add that the object ceases to exist
  ;;	    in the del-list.
)

(comment [Take-Apart-del-1] (:seq (the object of Self) " no longer has " (the has-part of (the object of Self)))
	 "A take-apart removes parts from something.")

(every Take-Apart has
  (text-active-verbseq-sg ("takes apart"))
  (text-active-verbseq-pl ("take apart"))
  (text-passive-verbseq-sg ("gets taken apart"))
  (text-passive-verbseq-pl ("get taken apart"))
)


;; 
;;    $Id: Take-Control.km,v 1.3 2002/05/24 20:39:20 kbarker Exp $
;; 

(Take-Control has
  (superclasses 	(Action))
  (required-slot 	(agent object))
  (primary-slot  	())
  (secondary-slot 	())
  (cmap-correspondence 	(
			 (:seq object "the object taken control of")
			 (:seq agent "the agent taking control")
			)))

(every Take-Control has
       (object 		((a Entity)))
       (agent  		((a Entity)))

       (defeats         ((allof (the object-of of (the object of Self))
                          where
                          ((the classes of It) = Be-Controlled))))

       (resulting-state ((a Be-Controlled)))

       (add-list (
		  (:triple
		   (the resulting-state of Self)
		   agent 
		   (the agent of Self) [Take-Control-add-1])
		  (:triple
		   (the resulting-state of Self)
		   object 
		   (the object of Self) [Take-Control-add-2])))

       (del-list (
                  (forall (the defeats of Self)
                    (:triple It 
                             object 
                             (the object of Self) [Take-Control-del-1]))
                  (forall (the defeats of Self)
                    (:triple It
                             agent
                             (the agent of It) [Take-Control-del-2]))
       ))
)


(comment [Take-Control-add-1] 
         (:seq (the agent of Self) " now controls " (the object of Self))
	 "The agent of a Take-Control is subsequently in control of the object."
)

(comment [Take-Control-add-2] 
         (:seq (the object of Self) " is now controlled by " (the agent of Self))
	 "If something takes control of X, X is now controlled."
)

(comment [Take-Control-del-1] 
         (:seq (the object of Self) " is no longer controlled by someone else.")
	 "An object taken control of is no longer controlled by someone else."
)

(comment [Take-Control-del-2] 
         (:seq "The original controller no longer controls" (the object of Self))
	 "An object taken control of is no longer controlled by someone else."
)


(every Take-Control has
  (text-active-verbseq-sg ("takes control of"))
  (text-active-verbseq-pl ("take control of"))

  (text-argslots ((:seq instrument site path result)))
)


(Take-Control has (test-case      
   ('(
      (new-situation)

      (*ShinerBock has (instance-of (Object)))
      (*MyOwnSelf has (instance-of (Object)))
      (*MyOwnLife has (instance-of (Object)))

      (a Be-Controlled with
         (agent (*ShinerBock))
         (object (*MyOwnLife)))

      (a Take-Control with
         (agent (*MyOwnSelf))
         (object (*MyOwnLife)))

      ((the agent of (the Be-Controlled object-of of *MyOwnLife))
       = *ShinerBock)

      (do-and-next (thelast Take-Control))

      (not ((the agent of (the Be-Controlled object-of of *MyOwnLife))
             = *ShinerBock))

      ((the agent of (the Be-Controlled object-of of *MyOwnLife))
       = *MyOwnSelf)
))))



;; 
;;    $Id: Take-In.km,v 1.15 2002/03/20 17:58:06 jfan Exp $ 
;; 

(Take-In has
         (superclasses 	 (Move-Into))
         (required-slot  (agent object destination))
         (primary-slot 	 (agent origin path))
         (secondary-slot ())
	 (cmap-correspondence (
			       (:seq agent "the one causing the take-in")
			       (:seq object "the Tangible-Entity taken-in")
			       (:seq destination "final location")
			       (:seq origin "original location")
			       (:seq path "the portal")
			       ))
)


; Take something from the outside into oneself
(every Take-In has 
	(object ((a Tangible-Entity)))

        (agent ((a Tangible-Entity
                  with (plays ((a Container)))
        )))

        (base ((the agent of Self)))
)

(every Take-In has
  (text-active-verbseq-sg ("takes in"))
  (text-active-verbseq-pl ("take in"))
  (text-passive-verbseq-sg ("gets taken in"))
  (text-passive-verbseq-pl ("get taken in"))
)


;; nothing extra to say about contextual info
;; inherited from Move and Action
                        
(Take-In has 
       (test-case ('(
		     (*John has  
			    (instance-of (Tangible-Entity)))
			    
		     (*Nasal-Passage has  (instance-of (Spatial-Entity)))

                     (*Air has 
                        (instance-of (Tangible-Entity))
                        (is-outside (*John)))

		     ; *John takes-in air
		     (a Take-In with
		      (agent (*John))
                      (object (*Air))
                      (path (*Nasal-Passage)))

		     (do-and-next (thelast Take-In))
		     (the text-gen of (thelast Take-In))
		     ; Test1: the *Air went through the *Nasal-Passage
		     ((the path of (thelast Take-In)) = *Nasal-Passage)

		     ; Test2: *Lungs now contain *Air
		     ((the content of *John) = *Air)
		     
		     ; Test3: *Air is now located inside *John
		     ((the is-inside of (the location of *Air)) includes *John)

		     ; Test4: *Air is no longer located outside *John
		     ((the is-outside of (the location of *Lungs)) /= 
                      (the location of *John))
))))

;; 
;;    $Id: Take-Up.km,v 1.15 2002/05/31 16:00:16 kbarker Exp $ 
;; 

(Take-Up has
         (superclasses 	 (Take-In))
         (required-slot  (agent object destination))
	 (primary-slot 	 (origin path))
	 (secondary-slot ())
         (cmap-correspondence (
			       (:seq object "the thing Taken-Up")
			       (:seq destination "the place Taken-Up to")	
			       (:seq agent "the Up-Taker")
			       (:seq origin "the place Taken-Up from")
			       (:seq path "the place Taken-Up through or along")
			      )))
(every Take-Up has
       (agent ((a Living-Entity))))

(every Take-Up has
  (text-active-verbseq-sg ("takes up"))
  (text-active-verbseq-pl ("take up"))
  (text-passive-verbseq-sg ("gets taken up"))
  (text-passive-verbseq-pl ("get taken up"))
)


;; nothing extra to say about contextual info
;; inherited from Move and Action
(Take-Up has
         (test-case  ('(
			(*Cell has
			 (instance-of (Living-Entity))
                         (encloses (*inside)))
			(*Food has
			 (instance-of (Tangible-Entity))
			 (is-outside (*Cell)))
			(a Take-Up with
			 (agent (*Cell))
			 (object (*Food)))
			(do-and-next (thelast Take-Up))
			(the text-gen of (thelast Take-Up))
			((the is-inside of *Food) includes *Cell)
			((the content of *Cell) includes *Food)
))))




;; 
;;    $Id: Take.km,v 1.9 2001/11/29 20:50:01 kbarker Exp $ 
;; 

(Take has
         (superclasses 	 (Obtain))
         (required-slot  (donor agent recipient object))
         (primary-slot 	 (instrument))
         (secondary-slot ())
         (cmap-correspondence (
			       (:seq object "the thing taken")      
                               (:seq agent "taker")
                               (:seq donor "donor")
                               (:seq recipient "recipient")
                               (:seq instrument "instrument")
			      ))
)

;; nothing extra to say about contextual info

(every Take has 
  (donor ((a Tangible-Entity)))
)

(every Take has
  (text-active-verbseq-sg ("takes"))
  (text-active-verbseq-pl ("take"))
  (text-passive-verbseq-sg ("is taken"))
  (text-passive-verbseq-pl ("are taken"))
)


(Take has 
  (test-case ('( 
		 (*Book-Taken has
			(instance-of (Tangible-Entity)))
		 (*John-In-Take has
			(instance-of (Tangible-Entity))
			(possesses   (*Book-Taken)))
		 (*Fred-In-Take has
			(instance-of (Tangible-Entity)))

		 ;; *Fred-In-Book took *Book-Taken from *John-In-Take
		 (a Take with
			(agent  (*Fred-In-Take))
			(donor  (*John-In-Take))
			(object (*Book-Taken)))
		 (do-and-next (thelast Take))
		 (the text-gen of (thelast Take))

		 ;; Test 1:  *Fred-In-Take now has *Book-Taken
		 ((the possesses of *Fred-In-Take) = *Book-Taken)

		 ;; Test 2: *John-In-Take lost *Book-Taken
		 ((the possesses of *John-In-Take) = nil)

		 ;; Test 3: *Book-Taken is now possessed-by *Fred-In-Take
		 ((the is-possessed-by of *Book-Taken) = *Fred-In-Take)

		 ;; Test 4: The agent and the recipient are the same.
		 ((the agent of (thelast Take)) = (the recipient of (thelast Take)))
	       )))
)





;; 
;;    $Id: Tangible-Entity.km,v 1.5 2001/05/23 02:37:39 kbarker Exp $ 
;; 

(Tangible-Entity has
		(superclasses (Spatial-Entity))
		(required-slot ())
		(primary-slot (location))
		(secondary-slot ())
		(cmap-correspondence ())
		(test-case ()))


(every Tangible-Entity has
   (location ((a Place)))

)



;; $Id: Target.km,v 1.2 2002/04/04 19:58:08 kbarker Exp $

(Target has (superclasses (Role)))

(every Target has
  (in-event ((must-be-a Move)))
  (played-by ((a Spatial-Entity with
                 (destination-of ((the in-event of Self))))))
)



(Taste-Constant has
 (superclasses (Constant)))

  (*buttery has
	(instance-of (Taste-Constant)))

  (*creamy has
	(instance-of (Taste-Constant)))

  (*sour has
	(instance-of (Taste-Constant)))

  (*sweet has
	(instance-of (Taste-Constant)))

  (*bitter has
	(instance-of (Taste-Constant)))

  (*tasteless has
	(instance-of (Taste-Constant)))
 
  (*watery has
	(instance-of (Taste-Constant)))

   (*juicy has
	(instance-of (Taste-Constant)))



  



;;
;; $Id: Taste-Value.km,v 1.9 2002/03/16 00:15:27 jarred Exp $
;;


(Taste-Value has 
       (superclasses (Property-Value)))

(every Taste-Value has
   (taste-of ((must-be-a Tangible-Entity)))
   (same-as ((must-be-a Taste-Value)))
   (text-phrase ((the value of Self)))
)


(Temperature-Constant has
  (superclasses (Constant)))

  (*cold has
     (instance-of (Temperature-Constant))
     (greater-than (*freezing)))

  (*cool has
     (instance-of (Temperature-Constant))
     (greater-than (*cold)))

  (*mild has
     (instance-of (Temperature-Constant))
     (greater-than (*cool)))

  (*warm has
     (instance-of (Temperature-Constant))
     (greater-than (*mild)))

  (*hot has
     (instance-of (Temperature-Constant)) 
     (greater-than (*warm)))

  (*freezing has
     (instance-of (Temperature-Constant)))

  (*boiling has
     (instance-of (Temperature-Constant)) 
     (greater-than (*hot)))

  (*normal has
     (instance-of (Temperature-Constant)))

  (*abnormal has
     (instance-of (Temperature-Constant))) 
  
;; 
;;    $Id: Temperature-Scale.km,v 1.5 2001/10/09 00:55:12 jarred Exp $ 
;; 

(Temperature-Scale has
 (superclasses (Scale)))
 
;; 
;;    $Id: Temperature-Value.km,v 1.11 2002/04/18 16:41:04 jarred Exp $
;; 

(Temperature-Value has 
       (superclasses (Property-Value)))

(every Temperature-Value has
   (temperature-of ((must-be-a Tangible-Entity)))
   (less-than ((must-be-a Temperature-Value)))
   (greater-than ((must-be-a Temperature-Value)))
   (same-as ((must-be-a Temperature-Value)))
)

(Temperature-Value has
   (test-case ('(
                 (Drink has (superclasses (Substance)))
                 (Ice has (superclasses (Substance)))
                 (*mycoffee has (instance-of (Drink))
                                (temperature ((a Temperature-Value))))
                 (*mybeer has (instance-of (Drink))
                              (temperature
                                 ((a Temperature-Value with
                                     (value ((:pair 5 *Celsius)
                                             (:pair *cool Drink)
                                             (:pair *warm Ice)
                                     ))
                                     (less-than
                                        ((the temperature of *mycoffee)))
                              ))))

                 (the value of (the temperature of *mybeer))

                 ((the less-than of (the temperature of *mybeer))
                       includes (the temperature of *mycoffee))
                 ((the greater-than of (the temperature of *mycoffee))
                       includes (the temperature of *mybeer))
))))

























;;
;;    $Id: Template.km,v 1.2 2001/12/03 15:16:45 tierney Exp $
;;

(Template has
            (superclasses (Role))
            (required-slot ())
            (primary-slot ())
            (secondary-slot ())
            (cmap-correspondence ())
	    (description ("A role played by an object in a copy event, 
                           serving as the thing from which a copy is made.
                           Souther. "))
            (test-case ()))

(every Template has
       (in-event ((a Copy)))
       (played-by ((a Tangible-Entity with
                      (object-of ((the in-event of Self)))))))
(Texture-Constant has
  (superclasses (Constant)))

  (*smooth has
     (instance-of (Texture-Constant)))

  (*rough has
     (instance-of (Texture-Constant))) 

 

;;
;; $Id: Texture-Value.km,v 1.7 2002/03/16 00:15:27 jarred Exp $
;;


(Texture-Value has 
       (superclasses (Property-Value)))

(every Texture-Value has
   (texture-of ((must-be-a Tangible-Entity)))
   (same-as ((must-be-a Texture-Value)))
   (text-phrase ((the value of Self)))
)


(Thickness-Constant has
  (superclasses (Constant)))

  (*thin has
     (instance-of (Thickness-Constant)))

  (*thick has
     (instance-of (Thickness-Constant))) 
 

;; 
;;    $Id: Thickness-Scale.km,v 1.5 2001/10/09 00:55:16 jarred Exp $ 
;; 

(Thickness-Scale has
 (superclasses (Scale)))
 


;;
;; $Id: Thickness-Value.km,v 1.11 2002/03/12 14:29:37 kbarker Exp $
;;


(Thickness-Value has 
       (superclasses (Property-Value)))

(every Thickness-Value has
   (thickness-of ((must-be-a Tangible-Entity)))
   (less-than ((must-be-a Thickness-Value)))
   (greater-than ((must-be-a Thickness-Value)))
   (same-as ((must-be-a Thickness-Value)))
)


(Thickness-Value has
   (test-case ('(
                 (Stick has (superclasses (Object)))
                 (Tree has (superclasses (Object)))
                 (*mybigstick has (instance-of (Stick))
                                (thickness ((a Thickness-Value))))
                 (*myshortstick has (instance-of (Stick))
                              (thickness
                                 ((a Thickness-Value with
                                     (value ((:pair 3 *inch)
                                             (:pair *thick Stick)
                                             (:pair *thick Tree)
                                     ))
                                     (less-than
                                        ((the thickness of *mybigstick)))
                              ))))

                 (the value of (the thickness of *myshortstick))

                 ((the less-than of (the thickness of *myshortstick))
                       includes (the thickness of *mybigstick))
                 ((the greater-than of (the thickness of *mybigstick))
                       includes (the thickness of *myshortstick))
))))

;; 
;;    $Id: Time-Interval.km,v 1.3 2001/05/01 22:24:23 pnav Exp $ 
;; 


(Time-Interval has
       (superclasses (Intangible-Entity))
       (required-slot ())
       (primary-slot ())
       (secondary-slot ())
       (cmap-correspondence ())
       (test-case ()))



(Trait-Constant has
  (superclasses (Constant)))

  (*submissive has
     (instance-of (Trait-Constant)))

  (*aggressive has
     (instance-of (Trait-Constant))) 

  (*dishonest has
	(instance-of (Trait-Constant)))

  (*honest has
	(instance-of (Trait-Constant)))

  (*lazy has
	(instance-of (Trait-Constant)))

  (*tireless has
	(instance-of (Trait-Constant)))

  (*vulnerable has
        (instance-of (Trait-Constant)))
  



;;
;; $Id: Trait-Value.km,v 1.11 2002/05/31 15:59:20 kbarker Exp $
;;


(Trait-Value has 
       (superclasses (Property-Value)))

(every Trait-Value has
   (trait-of ((must-be-a Living-Entity)))
   (same-as ((must-be-a Trait-Value)))
   (text-phrase ((the value of Self)))
)
;; 
;;    $Id: Transfer.km,v 1.17 2002/05/16 18:20:34 kbarker Exp $ 
;; 

(Transfer has
	(superclasses	(Action))
	(required-slot	(object))
	(primary-slot	(agent donor recipient instrument))
	(secondary-slot	())
	(cmap-correspondence (
			       (:seq object "the thing transfered")
			       (:seq agent "causer")            
			       (:seq donor "donor")	
			       (:seq recipient "recipient")
			       (:seq instrument "instrument")
			     ))
)

(every Transfer has
  (object 	((a Entity))) ; this is 'Entity' instead of 'Tangible-Entity'
                              ; so that Information can be Transfer'ed
  (donor	((must-be-a Tangible-Entity)))
  (recipient	((must-be-a Tangible-Entity)
		 (if (has-value (the donor of Self))
		     then
		     (excluded-values (the donor of Self)))))

  ; Precondition:
  ;	If the donor is specified, then the donor must 
  ;	possess the object.
  ;
  ; Note: The pcs-list will be declared as being the del-list 
  ;	  plus something extra. This will make the following 
  ;	  declaration unnecessary. Therefore remove the following
  ;	  after the afore-mentioned has been declared.
  (pcs-list ((if (has-value (the donor of Self)) 
		   then
	       (forall (the donor of Self)
		   ((:triple
		     It
		     possesses
		     (the object of Self) [Transfer-pcs-1]))))))

  ; Post-condition:
  ;	1) If the donor is specified, then the donor will
  ;	   no longer possess the object.
  ;	2) If the recipient is specified, then the recipient
  ;	   will now possess the object.
  (del-list ((if (has-value (the donor of Self))
		 then
	       (forall (the donor of Self)
		 ((:triple 
		   It
		   possesses
		   (the object of Self) [Transfer-del-1]))))))		     

  (add-list ((if (has-value (the recipient of Self))
		 then
	       (forall (the recipient of Self)
		 ((:triple 
		   It
		   possesses
		   (the object of Self) [Transfer-add-1])))))))

(comment [Transfer-pcs-1] (:seq (the donor of Self) " must possess " (the object of Self))
	 "The donor must have the object to transfer it.")

(comment [Transfer-del-1] (:seq (the donor of Self) " no longer possesses " (the object of Self))
	 "A transfer moves possessions from the donor to the recipient.")

(comment [Transfer-add-1] (:seq (the recipient of Self) " now possesses " (the object of Self))
	 "A transfer moves possessions from the donor to the recipient.")


;; will need its own templates to add donor and recipient
(every Transfer has
  (text-active-verbseq-sg ("transfers"))
  (text-active-verbseq-pl ("transfer"))
  (text-passive-verbseq-sg ("gets transferred"))
  (text-passive-verbseq-pl ("get transferred"))

  (text-donor ((if (has-value (the donor of Self))
                then ("from"))))
  (text-recipient ((if (has-value (the recipient of Self))
                    then ("to"))))

  (text-argslots ((:seq donor recipient instrument)))

)


(every Transfer has
       (preparatory-event (#|default|#
			  ;; Obtain isa Transfer, so there's a recursion here
			  (a Obtain with
			     (recipient ((the donor of Self)))
			     (object ((the object of Self))))))
)
(Transfer has
  (test-case ('( 
		(*Us has (instance-of (Tangible-Entity)))
		(*Alaska has (instance-of (Tangible-Entity)))
		(*Russia has
		 (instance-of (Tangible-Entity))
		 (possesses (*Alaska)))

		; Russia transfers Alaska to the US
		(a Transfer with
		 (donor (*Russia))
		 (recipient (*Us))
		 (object (*Alaska)))
		(do-and-next (thelast Transfer))
		(the text-gen of (thelast Transfer))
		; Test1: Alaska is now possessed by the US
		((the is-possessed-by of *Alaska) = *Us)

		; Test2: Alaska is no longer possessed by Russia
		((the possesses of *Russia) /= *Alaska)

		; Test3: Alaska cannot be unified with Russia
		(not (*Alaska &? *Russia))
	      )))
)





; 
;;    $Id: Trespass.km,v 1.1 2002/05/23 15:09:50 kbarker Exp $
;; 

(Trespass has
  (superclasses         (Go-To Unauthorized))
  (required-slot        (agent object destination))
)


;; because it's Unauthorized, there is some Entity who has a
;; has-goal Goal to prevent the Trespass; that Goal inhibits the Trespass;
;; the Entity possesses the destination of the Trespass

(every Trespass has
  (destination ((a Spatial-Entity with
                   (is-possessed-by 
                      ((the is-goal-of of (the inhibited-by of Self)))))))
)

(every Trespass has
  (text-active-verbseq-sg ("trespasses"))
  (text-active-verbseq-pl ("trespass"))

  (text-argslots ((:seq destination)))
  (text-destination ("on"))
)


(Trespass has 
    (test-case ('(
                  (new-situation)

                  (*Cletus has (instance-of (Entity)))
                  (*CletusesProperty has (instance-of (Spatial-Entity))
                                         (is-possessed-by (*Cletus)))
                  (*Martian has (instance-of (Entity)))

                  (a Trespass with (agent (*Martian))
                                   (destination (*CletusesProperty)))

                  ((the is-possessed-by of 
                        (the destination of (thelast Trespass)))
                   = *Cletus)

                  ((the prevents of (the has-goal of *Cletus))
                   includes
                   (thelast Trespass))

                  (do-and-next (thelast Trespass))

                  ((the location of *Martian) = *CletusesProperty)

))))


;; 
;;    $Id: Unauthorized.km,v 1.1 2002/05/23 15:03:11 kbarker Exp $
;; 

(Unauthorized has (superclasses (Cliche)))

(every Unauthorized has-definition
       (instance-of (Thing))
       (agent ((a Entity)))
       (prevented-by ((a Event with (is-goal-of ((a Entity))))))
)

;; note: the Unauthorized is not really prevented, it merely appears
;; on the prevents slot of somebody's goal (a Goal with prevents... is
;; different from a Event with prevents...: goals aren't simulated)

(every Unauthorized has
       (agent ((a Entity)))
       (prevented-by ((a Event with (is-goal-of ((a Entity))))))
       (inhibited-by ((the prevented-by of Self)))
)

(Unauthorized has
  (test-case ('(
                 (new-situation)
                 (Kiss has (superclasses (Action)))
                 (*me has (instance-of (Entity)))
                 (*her has (instance-of (Entity)))

                 (*herFather has 
                     (instance-of (Entity))
                     (has-goal ((a Goal with
                                   (prevents ((a Kiss with
                                                 (agent (*me))
                                                 (object (*her)))))))))

                 (the prevents of (the has-goal of *herFather))

                 ((thelast Kiss) isa Unauthorized)

))))

;; 
;;    $Id: Unblock.km,v 1.17 2002/04/10 21:32:47 kbarker Exp $ 
;; 

(Unblock has
  (superclasses		(Make-Accessible))
  (required-slot   	(object))
  (primary-slot 	(agent))
  (secondary-slot      	())
  (cmap-correspondence 	(
			 (:seq object "the place blocked")
			 (:seq agent "blocker")
			)))

(every Unblock has
       (object 	((a Spatial-Entity)))

       (defeats ((allof (the object-of of (the object of Self))
		  where (((the classes of It) = Be-Blocked)))))
	 
       (pcs-list ((forall (the object of Self)
			  ((:triple
			    (It)
			    object-of
			    (a Be-Blocked) [Unblock-pcs-1])))))
		 
       ;; object is neither the object nor the location of a Be-Blocked 
       (del-list ((forall (the defeats of Self) 
			  (:set
                             (:triple It object (the object of Self) [Unblock-del-1])
                             (if (has-value (the instrument of It))
                              then 
                                (:triple It instrument (the instrument of It) [Unblock-del-2])))
       )))
)

(comment [Unblock-pcs-1] (:seq (the object of Self) " must be blocked to be unblocked.")
	 "Only a blocked object can be unblocked.")

(comment [Unblock-del-1] (:seq (the object of Self) " is no longer blocked.")
	 "An unblock stops something from being blocked.")

(comment [Unblock-del-2] (:seq (the instrument of Self) " is no longer being used to block " (the object of Self))
	 "An unblock stops something from being used to block something else.")


(every Unblock has
  (text-active-verbseq-sg ("unblocks"))
  (text-active-verbseq-pl ("unblock"))
  (text-passive-verbseq-sg ("gets unblocked"))
  (text-passive-verbseq-pl ("get unblocked"))

  (text-argslots ((:seq base instrument site path result)))
)


(every Unblock has
       (preparatory-event (#|default|#
			  (a Block with
			     (object ((the object of Self))))))
)


(Unblock has 
	 (test-case      ('(
			    (*p1 has (instance-of (Place)))
                            
			    (a Block with 
			     (object (*p1)))

			    (try-do-and-next (thelast Block))
                            (the text-gen of (thelast Block))
			    (has-value (the Be-Blocked object-of of *p1))

			    (a Move with 
			       (object (*c1))
			       (path (*p1)))

			    (not (try-do (thelast Move)))
			   (the text-gen of (thelast Move))
			    (a Unblock with 
			     (object (*p1)))

			    (try-do-and-next (thelast Unblock))
			    (the text-gen of (thelast Unblock))
			    (not
			     (has-value (the Be-Blocked object-of of *p1)))

			    (try-do (thelast Move))
				(the text-gen of (thelast Move))
))))			    

;; 
;;    $Id: Unit-of-Measurement.km,v 1.4 2001/10/07 03:52:10 jarred Exp $ 
;; 

(Unit-of-Measurement has
  (superclasses (Property-Group)))

;; 
;;    $Id: Unobstruct.km,v 1.19 2002/04/10 21:32:48 kbarker Exp $ 
;; 

(Unobstruct has
	    (superclasses	(Make-Accessible))
	    (required-slot   	(object))
	    (primary-slot 	 (agent instrument))
	    (secondary-slot      	())
	    (cmap-correspondence 	(
					 (:seq object "object")
					 (:seq agent "unobstructor")
					 (:seq instrument "instrument used")
					 )))

(every Unobstruct has
       (object  ((a Entity)))
       (agent   ((must-be-a Entity)))
       (defeats ((allof (the object-of of (the object of Self))
			where
			((the classes of It) = Be-Obstructed))))

       ;; The precondition is not needed since it is the 
       ;; same as the del-list.
       ;; (pcs-list ())

       (del-list ((forall (the defeats of Self)
			  (:triple (It) object (the object of Self) [Unobstruct-del-1])))))

(comment [Unobstruct-del-1] (:seq (the object of Self) " is no longer obstructed.")
	 "An unobstruct removes an obstruction from something.")

(every Unobstruct has
  (text-active-verbseq-sg ("unobstructs"))
  (text-active-verbseq-pl ("unobstruct"))
  (text-passive-verbseq-sg ("gets unobstructed"))
  (text-passive-verbseq-pl ("get unobstructed"))

  (text-argslots ((:seq base instrument site path result)))
)


;; As with Obstruct, we must specify that the agent must 
;; move to the location of the object as part of the
;; prepatory step in an attempt to obstruct the object.
(every Unobstruct has
       (preparatory-event 
	((#|default|#
	     (if (has-value (the agent of Self))
		 then
		 (a Move with
		    (object      ((the agent of Self)))
		    (destination ((a Spatial-Entity with
				     (is-at ((the object of Self))))))
)))))) 

(Unobstruct has 
	    (test-case      ('(
			       (*pedestrian has (instance-of (Object)))
                            
			       (a Obstruct with 
				(object (*pedestrian)))
                            
			       (do-and-next (thelast Obstruct))
                            	(the text-gen of (thelast Obstruct))
			       (has-value (the Be-Obstructed object-of of 
					       *pedestrian))

			       (a Move with (object (*car))(path (*path)))
			       (try-do (thelast Move)) ; Obstruct doesn't
					               ; *prevent* move's
			       (the text-gen of (thelast Move))
			       (a Unobstruct with 
				(object (*pedestrian)))

			       (do-and-next (thelast Unobstruct))
			       (the text-gen of (thelast Unobstruct))
			       (not
				(has-value (the Be-Obstructed object-of of 
						*pedestrian)))

			       (try-do (thelast Move))
			       ))))




;; 
;;    $Id: Unrestrain.km,v 1.12 2002/01/21 20:50:22 jarred Exp $ 
;; 

(Unrestrain has
	    (superclasses	(Unobstruct))
	    (required-slot   	(object))
	    (primary-slot 	(agent))
	    (secondary-slot      	())
	    (cmap-correspondence 	(
					 (:seq object "the thing Unrestrained")
					 (:seq agent "the Unrestrainer")
					 (:seq instrument "the thing used to Unrestrain")
					  ))
	    )

(every Unrestrain has
       (object ((a Tangible-Entity)))

       (defeats ((if (has-value (the agent of Self))
		     then
		     (allof (the object-of of (the object of Self))
			    where 
			    ( ((the classes of It) = Be-Restrained) and
			      ((the agent of It) = (the agent of Self))))
		     else
		     (allof (the object-of of (the object of Self))
			    where
			    ((the classes of It) = Be-Restrained)))))

       ;; Like Unobstruct, the precondition does not need to be 
       ;; specified because it is the same as the del-list.
       ;; (pcs-list ())

       (del-list ((forall (the defeats of Self)
			  (:triple It object (the object of Self) [Unrestrain-del-1])))))
 
(comment [Unrestrain-del-1] (:seq (the object of Self) " is no longer restrained.")
	 "An unrestrain removes restraints on something.")

(every Unrestrain has
  (text-active-verbseq-sg ("unrestrains"))
  (text-active-verbseq-pl ("unrestrain"))
  (text-passive-verbseq-sg ("gets unrestrained"))
  (text-passive-verbseq-pl ("get unrestrained"))
)

(every Unrestrain has
       (preparatory-event (#|default|#
			  (a Restrain with
			     (object ((the object of Self))))))
)



;; nothing extra to say about contextual info

(Unrestrain has 
    (test-case      ('(
		       (*mugger has (instance-of (Object)))
		       
		       (a Restrain with 
			(object (*mugger)))
		       
		       (do-and-next (thelast Restrain))
		       
		       (has-value (the Be-Restrained object-of of *mugger))
		       
		       (a Move with (object (*mugger)))
		       (not (try-do (thelast Move)))
		       
		       (a Unrestrain with 
			(object (*mugger)))

		       (do-and-next (thelast Unrestrain))
		       
		       (not
			(has-value (the Be-Restrained object-of of *mugger)))

		       (try-do (thelast Move))
		       ))))



;; 
;;    $Id: UoM-Area.km,v 1.3 2001/05/01 22:24:27 pnav Exp $ 
;; 

(UoM-Area has
 (superclasses (Unit-of-Measurement))
 (instances (*square-inch *square-meter)))
;; 
;;    $Id: UoM-Density.km,v 1.5 2001/05/01 22:24:28 pnav Exp $ 
;; 

(UoM-Density has
 (superclasses (Unit-of-Measurement))
 (instances (*gram/liter  *kilogram/gallon)))

(*gram/liter has 
	(instance-of (UoM-Density)))

(*kilogram/gallon has
	(instance-of (UoM-Density)))

;;
;; $id: UoM-Force.km, 2002/4/12 marwan
;;


(UoM-Force has
 (superclasses (Unit-of-Measurement))

(instances (*newton)))

(*newton has
 (instance-of (UoM-Force)))




;; 
;;    $Id: UoM-Intensity.km,v 1.2 2001/05/01 22:24:28 pnav Exp $ 
;; 

(UoM-Intensity has
 (superclasses (Unit-of-Measurement))
 (instances (*kilocalorie/mole)))


;; 
;;    $Id: UoM-Length.km,v 1.9 2002/03/07 18:56:28 kbarker Exp $ 
;; 

(UoM-Length has
 (superclasses (Unit-of-Measurement))
 (instances (*kilometer *inch *foot *yard *meter *centimeter *millimeter 
             *micrometer *nanometer)))



;; 
;;    $Id: UoM-Mass.km,v 1.5 2001/05/01 22:24:29 pnav Exp $ 
;; 

(UoM-Mass has
 (superclasses (Unit-of-Measurement))
 (instances (*gram *kilogram *dalton)))
;;
;; $id: UoM-MonetaryValue.km, 2002/4/12 marwan
;;


(UoM-MonetaryValue has
 (superclasses (Unit-of-Measurement))

(instances (*usdollar *deutschmark *lira *franc *britishpound)))

(*usdollar has
 (instance-of (UoM-MonetaryValue)))

(*deutschmark has
 (instance-of (UoM-MonetaryValue)))

(*lira has
  (instance-of (UoM-MonetaryValue)))

(*franc has
  (instance-of (UoM-MonetaryValue)))

(*britishpound has
  (instance-of (UoM-MonetaryValue)))






;; 
;;    $Id: UoM-PH.km,v 1.2 2002/05/30 18:55:17 jarred Exp $ 
;; 

(UoM-PH has
 (superclasses (Unit-of-Measurement))
 (instances (*gram-atoms/liter)))

;;
;;     $Id: UoM-Pressure.km, 2002/4/12
;;

(UoM-Pressure has
  (superclasses (Unit-of-Measurement))

  (instances (*pounds-per-square-inch)))

(*pounds-per-square-inch has
  (instance-of (UoM-Pressure)))
;; 
;;    $Id: UoM-Temperature.km,v 1.4 2001/09/20 20:34:50 kbarker Exp $ 
;; 

(UoM-Temperature has
 (superclasses (Unit-of-Measurement))
 (instances (*Fahrenheit *Celsius *Kelvin)))


;; 
;;    $Id: UoM-Time.km,v 1.5 2001/05/01 22:24:30 pnav Exp $ 
;; 

(UoM-Time has
 (superclasses (Unit-of-Measurement))
 (instances (*day *month *year *hour *minute)))
                                         
(*day has 
(instance-of (UoM-Time)))

(*month has
(instance-of (UoM-Time)))

(*year has
(instance-of (UoM-Time)))

(*hour has
(instance-of (UoM-Time)))

(*minute has
(instance-of (UoM-Time)))


;;
;; $id: UoM-Velocity.km, 2002/4/12 marwan
;;


(UoM-Velocity has
 (superclasses (Unit-of-Measurement))
 (instances (*centimeter-per-second *feet-per-second *meter-per-second *mile-per-second *kilometer-per-hour *mile-per-hour)))

(*centimeter-per-second has
 (instance-of (UoM-Velocity)))

(*feet-per-second has
 (instance-of (UoM-Velocity)))

(*meter-per-second has
  (instance-of (UoM-Velocity)))

(*mile-per-second has
  (instance-of (UoM-Velocity)))

(*kilometer-per-hour has
  (instance-of (UoM-Velocity)))






;; 
;;    $Id: UoM-Volume.km,v 1.4 2001/05/01 22:24:30 pnav Exp $ 
;; 

(UoM-Volume has
 (superclasses (Unit-of-Measurement))
 (instances (*liter *gallon)))

(*liter has
	(instance-of (UoM-Volume)))

(*gallon has
	(instance-of (UoM-Volume)))

;; 
;;    $Id: Vehicle.km,v 1.2 2001/12/03 15:15:53 tierney Exp $
;; 

(Vehicle has
        (superclasses (Role))
        (required-slot ())
        (primary-slot ())
        (secondary-slot ())
        (description ("The object or medium which transports the object moved
                       during a move event."))
        (cmap-correspondence ()))  

(every Vehicle has
       	(in-event ((a Carry)))
       	(played-by ((a Tangible-Entity with
                      (instrument-of ((the in-event of Self)))))))

;; 
;;    $Id: View.km,v 1.1 2002/05/24 18:59:05 kbarker Exp $
;; 

(View has
  (superclasses (Aggregate))
)

;; A View is a way to collect elements of some concept together
;; so you can consider them as a unified way of looking at the 
;; concept. For example, you could define a spatial View of an 
;; Entity by making its parts, contents, and spatial slots all
;; elements of a View called "Spatial View"

(View has (test-case      
   ('(
      (*myWallet has (instance-of (Object))
                     (is-possessed-by (*myWife))
                     (content (*myDough))
                     (material (*fakeLeather))
                     (color ((a Color-Value with (value (*red)))))
                     (is-inside (*myPants)))
      (*myWife has (instance-of (Object)))
      (*myDough has (instance-of (Object)))
      (*fakeLeather has (instance-of (Substance)))
      (*myPants has (instance-of (Object)))

      (*myWallet has
          (viewpoint ((a View called "Spatial View" with
                         (element ((the content of Self)
                                   (the material of Self)
                                   (the is-inside of Self)))))))

      ((the element of ((the viewpoint of *myWallet) called "Spatial View"))
       is-superset-of
       (*myDough *fakeLeather *myPants))

      (not
         ((the element of ((the viewpoint of *myWallet) called "Spatial View"))
          includes
          *myWife))
       
))))




(Volume-Constant has
  (superclasses (Constant)))

  (*small has
     (instance-of (Volume-Constant)))

  (*large has
     (instance-of (Volume-Constant))) 
  
;; 
;;    $Id: Volume-Scale.km,v 1.5 2001/10/09 00:55:21 jarred Exp $ 
;; 

(Volume-Scale has
 (superclasses (Scale)))

;;
;; $Id: Volume-Value.km,v 1.12 2002/03/12 14:29:38 kbarker Exp $
;;


(Volume-Value has 
       (superclasses (Property-Value)))

(every Volume-Value has
   (volume-of ((must-be-a Tangible-Entity)))
   (less-than ((must-be-a Volume-Value)))
   (greater-than ((must-be-a Volume-Value)))
   (same-as ((must-be-a Volume-Value)))
)

(Volume-Value has
   (test-case ('(
                 (Drink has (superclasses (Substance)))
                 (*mycoffee has (instance-of (Drink))
                                (volume ((a Volume-Value))))
                 (*mybeer has (instance-of (Drink))
                              (volume
                                 ((a Volume-Value with
                                     (value ((:pair 0.5 *liter)
                                             (:pair *small Drink)
                                     ))
                                     (less-than
                                        ((the volume of *mycoffee)))
                              ))))

                 (the value of (the volume of *mybeer))

                 ((the less-than of (the volume of *mybeer))
                       includes (the volume of *mycoffee))
                 ((the greater-than of (the volume of *mycoffee))
                       includes (the volume of *mybeer))
))))

;
;   $Id: Wet.km,v 1.5 2002/05/18 17:03:48 jarred Exp $
;

(Wet has 
  (superclasses (Increase)))

(every Wet has-definition
  (instance-of (Increase))
  (property (wetness))
)

(every Wet has
   (test-case ('(
                 (*mytowel has (instance-of (Object))
                             (wetness (*mytowelwetness)))
                 (*mytowelwetness has (instance-of (Wetness-Value))
                                        (value ((:pair *dry Object))))

                 (a Increase with (object (*mytowel))
                                  (property (wetness)))

                 ((thelast Increase) isa Wet)

                 (do-and-next (thelast Wet))

                 ((the greater-than of (the wetness of *mytowel))
                       includes *mytowelwetness)

))))
(Wetness-Constant has
  (superclasses (Constant)))

  (*wet has
     (instance-of (Wetness-Constant))) 

  (*damp has
     (instance-of (Wetness-Constant)))    

  (*moist has
     (instance-of (Wetness-Constant)))
                                       
                                                                   
  (*dry has
     (instance-of (Wetness-Constant)))

  (*arid has
     (instance-of (Wetness-Constant)))
                                         
;; 
;;    $Id: Wetness-Scale.km,v 1.5 2001/10/09 00:55:23 jarred Exp $ 
;; 

(Wetness-Scale has
 (superclasses (Scale)))
 


;;
;; $Id: Wetness-Value.km,v 1.11 2002/03/12 14:29:38 kbarker Exp $
;;


(Wetness-Value has 
       (superclasses (Property-Value)))

(every Wetness-Value has
   (wetness-of ((must-be-a Tangible-Entity)))
   (less-than ((must-be-a Wetness-Value)))
   (greater-than ((must-be-a Wetness-Value)))
   (same-as ((must-be-a Wetness-Value)))
)

(Wetness-Value has
   (test-case ('(
                 (Towel has (superclasses (Object)))
                 (Bone has (superclasses (Object)))
                 (*wettowel has (instance-of (Towel))
                                (wetness ((a Wetness-Value))))
                 (*freshtowel has (instance-of (Towel))
                              (wetness
                                 ((a Wetness-Value with
                                     (value ((:pair *dry Towel)
					     (:pair *wet Bone)
                                     ))
                                     (less-than
                                        ((the wetness of *wettowel)))
                              ))))

                 (the value of (the wetness of *freshtowel))

                 ((the less-than of (the wetness of *freshtowel))
                       includes (the wetness of *wettowel))
                 ((the greater-than of (the wetness of *wettowel))
                       includes (the wetness of *freshtowel))
))))




;
;   $Id: Widen.km,v 1.5 2002/05/18 17:03:49 jarred Exp $
;

(Widen has 
  (superclasses (Increase)))

(every Widen has-definition
  (instance-of (Increase))
  (property (width))
)

(every Widen has
   (test-case ('(
                 (*myroad has (instance-of (Object))
                             (width (*myroadwidth)))
                 (*myroadwidth has (instance-of (Width-Value))
                                        (value ((:pair 30 *foot))))

                 (a Increase with (object (*myroad))
                                  (property (width)))

                 ((thelast Increase) isa Widen)

                 (do-and-next (thelast Widen))

                 ((the greater-than of (the width of *myroad))
                       includes *myroadwidth)

))))
(Width-Constant has
  (superclasses (Constant)))

  (*narrow has
     (instance-of (Width-Constant)))

  (*wide has
     (instance-of (Width-Constant))) 
  


;; 
;;    $Id: Width-Scale.km,v 1.5 2001/10/09 00:55:25 jarred Exp $ 
;; 

(Width-Scale has
 (superclasses (Scale)))

;;
;; $Id: Width-Value.km,v 1.11 2002/03/12 14:29:39 kbarker Exp $
;;


(Width-Value has 
       (superclasses (Property-Value)))

(every Width-Value has
   (width-of ((must-be-a Tangible-Entity)))
   (less-than ((must-be-a Width-Value)))
   (greater-than ((must-be-a Width-Value)))
   (same-as ((must-be-a Width-Value)))
)


(Width-Value has
   (test-case ('(
                 (Stick has (superclasses (Object)))
                 (Tree has (superclasses (Object)))
                 (*mybigstick has (instance-of (Stick))
                                (width ((a Width-Value))))
                 (*myshortstick has (instance-of (Stick))
                              (width
                                 ((a Width-Value with
                                     (value ((:pair 3 *inch)
                                             (:pair *narrow Stick)
                                             (:pair *wide Tree)
                                     ))
                                     (less-than
                                        ((the width of *mybigstick)))
                              ))))

                 (the value of (the width of *myshortstick))

                 ((the less-than of (the width of *myshortstick))
                       includes (the width of *mybigstick))
                 ((the greater-than of (the width of *mybigstick))
                       includes (the width of *myshortstick))
))))
;;
;;    $Id: Withdraw.km,v 1.10 2002/01/21 20:50:22 jarred Exp $
;;

(Withdraw has
  (superclasses         (Action))
  (required-slot        (object base))
  (primary-slot         (agent instrument))
  (secondary-slot       ())
  (cmap-correspondence  (
                         (:seq object "the thing being withdrawn")      
                         (:seq base "the thing withdrawed from")                     
                         (:seq agent "the agent")
			 (:seq instrument "the instrument used")
                        )))

(every Withdraw has
  (object     ((a Entity)))
  (base       ((exactly 1 Tangible-Entity)
	       (a Tangible-Entity)))
  (agent      ((must-be-a Entity)))
  (instrument ((must-be-a Entity)))  

  (defeats  ((allof (the object-of of (the base of Self))
                    where
                    (((the classes of It) = Be-Stored) and
                     ((the object of It) includes (the object of Self))))))

  (del-list ((:triple
	       (the base of Self)
	       content	
	       (the object of Self) [Withdraw-del-1])	
	     (forall (the defeats of Self)
                     (:set
		       (:triple It object (the object of Self) [Withdraw-del-2])
		       (:triple It base (the base of Self) [Withdraw-del-3]))))))

(comment [Withdraw-del-1] (:seq (the base of Self) " no longer contains " (the object of Self))
	 "When something is withdrawn from a container, it is no longer contained by the container.")

(comment [Withdraw-del-2] (:seq (the object of Self) " is no longer stored in " (the base of Self))
	 "When something is withdrawn from a container, it is no longer stored in the container.")

(comment [Withdraw-del-3] (:seq (the object of Self) " is no longer stored in " (the base of Self))
	 "When something is withdrawn from a container, it is no longer stored in the container.")

(every Withdraw has
   (preparatory-event (#|default|#
	(a Store with 
	 (object ((the object of Self))))
	(a Open with 
	 (base ((the base of Self)))
	 (agent ((the agent of Self))))
)))



(every Withdraw has
  (text-active-verbseq-sg ("withdraws"))
  (text-active-verbseq-pl ("withdraw"))
  (text-passive-verbseq-sg ("gets withdrawn"))
  (text-passive-verbseq-pl ("get withdrawn"))

  (text-base ((if (has-value (the base of Self))
                  then ("from"))))

)


;; 
;;    $Id: abuts.km,v 1.7 2002/04/18 18:26:13 kbarker Exp $ 
;; 

(abuts has
       (instance-of 	   (Relation))
       (superslots 	   ())
       (subslots 	   ())
       (domain 		   (Spatial-Entity))
       (range 		   (Spatial-Entity))
       (inverse 	   (abuts))
       (text-slot          (text-abuts))
       (cardinality 	   (N-to-N))
       (situation-specific (t))
       (fluent-status 	   (*Inertial-Fluent)))

(text-abuts has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Spatial-Entity))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)


;; 
;;    $Id: actions.km,v 1.6 2001/06/01 22:46:58 porter Exp $ 
;; 

(actions has
	 (instance-of (KM-Slot-Group))
	 (superslots ())
	 (subslots ())
	 (domain (Event))
	 (range (Event))
	 (inverse (actions-of))
	 (cardinality (N-to-N))
	 (fluent-status (*Non-Fluent)))

;; 
;;    $Id: age.km,v 1.6 2001/11/14 23:45:09 jarred Exp $ 
;; 

(age has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Entity))    
   (range       (Age-Value))
   (scale-class (Age-Scale))    
   (scalar-constant-class (Age-Constant))
   (cardinal-unit-class (UoM-Time))
   (fluent-status (*Inertial-Fluent))
   (situation-specific 	(t))
   (inverse 	(age-of))
   (cardinality (N-to-N)))








;; 
;;    $Id: agent.km,v 1.4 2001/05/01 22:24:34 pnav Exp $ 
;; 

(agent has
       (instance-of 	   (Relation))
       (superslots 	   ())
       (subslots 	   ())
       (domain      	   (Event))
       (range       	   (Entity))
       (inverse  	   (agent-of))
       (fluent-status 	   (*Inertial-Fluent))
       (situation-specific (t))
       (cardinality 	   (N-to-N)))




;; 
;;    $Id: all-subevents.km,v 1.7 2001/07/11 15:04:53 kbarker Exp $ 
;; 


(all-subevents has
  (instance-of 	 (KM-Slot-Group))
  (domain 	 (Event))
  (range 	 (Event))
  (fluent-status (*Non-Fluent))
  (cardinality 	 (N-to-N)))



;; 
;;    $Id: animacy.km,v 1.4 2001/11/06 00:05:39 jarred Exp $ 
;; 

(animacy has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Entity))    
   (range       (Animacy-Value))
   (categorical-constant-class (Animacy-Constant))
   (inverse 	(animacy-of))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-1)))





;; 
;;    $Id: area.km,v 1.7 2002/02/13 14:46:02 kbarker Exp $ 
;; 

(area has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Tangible-Entity))    
   (range       (Area-Value))
   (scale-class (Area-Scale))
   (scalar-constant-class   (Area-Constant))
   (cardinal-unit-class     (UoM-Area))  
   (inverse (area-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-N)))








;; 
;;    $Id: away-from.km,v 1.4 2001/05/22 21:14:20 kbarker Exp $ 
;; 

(away-from has
   (instance-of (Relation))
   (superslots ())
   (subslots ())
   (domain      (Event))
   (range       (Spatial-Entity))
   (inverse (away-from-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-1)))




;; 
;;    $Id: base.km,v 1.7 2002/02/08 16:49:07 kbarker Exp $
;; 

(base has
   (instance-of   	(Relation))
   (superslots    	())
   (subslots 	  	())
   (domain        	(Event))
   (range         	(Thing))  ; Entity or Event (for Make-Accessible, etc.)
   (inverse 		(base-of))
   (text-slot           (text-base))
   (fluent-status 	(*Inertial-Fluent))
   (situation-specific 	(t))
   (cardinality 	(N-to-1)))


(text-base has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)


;; 
;;    $Id: before.km,v 1.3 2001/05/01 22:24:36 pnav Exp $ 
;; 

(before has
	(instance-of (Relation))
	(subslots ())
	(domain (Time-Interval))
	(range (Time-Interval))
	(inverse (after))
	(fluent-status (*Inertial-Fluent))
	(situation-specific (t))
	(cardinality (N-to-N)))




;; 
;;    $Id: beneficiary.km,v 1.5 2001/09/17 21:59:33 tecuci Exp $ 
;; 

(beneficiary has
  (instance-of 		(Relation))
  (superslots 		())
  (subslots 		())
  (domain      		(Event))
  (range       		(Entity))
  (fluent-status 	(*Non-Fluent))
  (inverse 		(beneficiary-of))
  (situation-specific 	(t))
  (cardinality 	 	(N-to-N)))




;; 
;;    $Id: breakability.km,v 1.7 2001/11/14 23:45:10 jarred Exp $ 
;; 

(breakability has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Tangible-Entity))    
   (range       (Breakability-Value))
   (scale-class (Breakability-Scale))
   (scalar-constant-class (Breakability-Constant))
   (inverse 	(breakability-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-1)))





;; 
;;    $Id: breakable-unbreakable-scale.km,v 1.6 2001/10/12 19:17:48 jarred Exp $ 
;; 

(*breakable-unbreakable-scale has
 (instance-of (Breakability-Scale))
 (element-type ((must-be-a Breakability-Constant)))
 (members ((:seq *breakable *fragile *delicate *brittle *unbreakable))))

(brightness has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Tangible-Entity))    
   (range       (Brightness-Value))
   (scalar-constant-class (Brightness-Constant))
   (inverse 	(brightness-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-1)))



















;; 
;;    $Id: by-means-of.km,v 1.3 2001/05/01 22:24:38 pnav Exp $ 
;; 

(by-means-of has
       (instance-of (Relation))
       (superslots ())
       (subslots ())
       (domain (Event))
       (range (Event))
       (inverse (means-by-which))
       (fluent-status (*Inertial-Fluent))
       (situation-specific (t))
       (cardinality (N-to-N)))




;; 
;;    $Id: capacity.km,v 1.5 2001/11/14 23:45:10 jarred Exp $ 
;; 

(capacity has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Tangible-Entity))    
   (range       (Capacity-Value))
   (scale-class (Capacity-Scale))
   (scalar-constant-class (Capacity-Constant))      
   (inverse 	(capacity-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-N)))

;;
;; $Id: cardinal-unit-class.km,v 1.4 2002/03/12 14:29:39 kbarker Exp $
;;

(cardinal-unit-class has
   (instance-of (KM-Slot-Group))
   (domain (Property))
   (range  (Unit-of-Measurement))
   (cardinality (N-to-N))
   (fluent-status (*Non-Fluent))
) 
;;
;; $Id: categorical-constant-class.km,v 1.5 2002/03/12 14:29:40 kbarker Exp $
;;

(categorical-constant-class has
   (instance-of (KM-Slot-Group))
   (domain (Property))
   (range  (Constant))
   (cardinality (N-to-N))
   (fluent-status (*Non-Fluent))
) 
;; 
;;    $Id: caused-by-class.km,v 1.1 2001/07/11 16:15:44 kbarker Exp $
;; 

(caused-by-class has
                 (instance-of (KM-Slot-Group))
                 (superslots ())
                 (subslots ())
                 (domain (Class))
                 (range (Class))
                 (fluent-status (*Non-Fluent))
                 (cardinality (N-to-N)))

;; 
;;    $Id: causes.km,v 1.3 2001/05/01 22:24:39 pnav Exp $ 
;; 

(causes has
       (instance-of (Relation))
       (superslots ())
       (subslots ())
       (domain (Event))
       (range (Event))
       (inverse (caused-by))
       (situation-specific (t))
       (cardinality (N-to-N)))









;; 
;;    $Id: chemical-formula.km,v 1.1 2001/09/26 15:59:52 tecuci Exp $ 
;; 

(chemical-formula has
         (instance-of    (Property))
         (superslots     (Property))
         (subslots       ())
         (domain         (Chemical-Entity))
         (range          (String))
         (fluent-status  (*Non-Fluent))
         (cardinality    (1-to-1))
         (inverse        (chemical-formula-of)))


;; 
;;    $Id: cmap-correspondence.km,v 1.4 2001/05/01 22:24:39 pnav Exp $ 
;; 

(cmap-correspondence has
		     (instance-of (KM-Slot-Group))
		     (superslots ())
		     (subslots ())
		     (domain (Thing))
		     (range (Thing))
		     (cardinality (N-to-N)))








;; 
;;    $Id: cold-hot-scale.km,v 1.6 2001/10/09 20:33:05 jarred Exp $ 
;; 

(*cold-hot-scale has
 (instance-of (Temperature-Scale))
 (element-type ((must-be-a Temperature-Constant)))
 (members ((:seq *cold *warm *hot))))


;; 
;;    $Id: color.km,v 1.4 2001/11/06 03:36:26 jarred Exp $ 
;; 

(color has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Tangible-Entity))    
   (range       (Color-Value))
   (categorical-constant-class (Color-Constant))
   (inverse 	(color-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-1)))





;; 
;;    $Id: complement.km,v 1.4 2001/09/17 21:59:50 tecuci Exp $ 
;; 


(complement has
      (instance-of (Relation))
      (superslots ()) 
      (subslots ())
      (domain (Spatial-Entity))
      (range (Spatial-Entity))
      (fluent-status (*Non-Fluent))
      (inverse (complement-of))
      (cardinality (N-to-N)))




;; 
;;    $Id: consistency.km,v 1.4 2001/11/11 21:33:21 jarred Exp $ 
;; 

(consistency has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Tangible-Entity))    
   (range       (Consistency-Value))
   (categorical-constant-class (Consistency-Constant))
   (inverse 	(consistency-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-1)))





;; 
;;    $Id: content.km,v 1.8 2002/04/26 16:09:17 kbarker Exp $ 
;; 
(content has
	 (instance-of (Relation))
	 (superslots ())
	 (subslots ())
	 (domain (Tangible-Entity))  ; s.b. Container (when Roles fully op'nl)
	 (range (Entity))
	 (inverse (content-of))
         (text-slot (text-content))
	 (fluent-status (*Inertial-Fluent))
	 (situation-specific (t))
	 (cardinality (N-to-N)))


(text-content has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Tangible-Entity))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)

;; 
;;    $Id: continually-never-scale.km,v 1.7 2001/10/09 20:33:05 jarred Exp $ 
;; 

(*continually-never-scale has
 (instance-of (Frequency-Scale))
 (element-type ((must-be-a Frequency-Constant)))
 (members ((:seq *continually *hourly *daily *weekly *monthly *annually *rarely *never))))
;; 
;;    $Id: dcs-list.km,v 1.3 2001/05/01 22:24:42 pnav Exp $ 
;; 

(dcs-list has
  (instance-of 	 (KM-Slot-Group))
  (superslots 	 ())
  (subslots 	 ())
  (domain 	 (Event))
  (range	 ())	
  (inverse 	 (dcs-list-of))
  (cardinality 	 (N-to-N))
  (fluent-status (*Non-Fluent)))





;; 
;;    $Id: defeated-by-class.km,v 1.1 2001/07/11 16:15:45 kbarker Exp $
;; 

(defeated-by-class has
                   (instance-of (KM-Slot-Group))
                   (superslots ())
                   (subslots ())
                   (domain (Class))
                   (range (Class))
                   (fluent-status (*Non-Fluent))
                   (cardinality (N-to-N)))

;; 
;;    $Id: defeats.km,v 1.3 2001/05/01 22:24:42 pnav Exp $ 
;; 

; note use of inherit-with-overrides.  This ensures that KM returns only
; the most specific value of the defeats slot
(defeats has
         (instance-of (Relation))
         (superslots ())
	 (subslots ())
	 (domain (Action))
	 (range (State))
	 (inverse (defeated-by))
	 (fluent-status (*Inertial-Fluent))
	 (situation-specific (t))
	 (inherit-with-overrides (t))
	 (cardinality (N-to-N)))







;; 
;;    $Id: density.km,v 1.5 2001/11/14 23:45:11 jarred Exp $ 
;; 

(density has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Tangible-Entity))    
   (range       (Density-Value))
   (scale-class (Density-Scale))
   (scalar-constant-class (Density-Constant))
   (cardinal-unit-class   (UoM-Density))
   (inverse 	(density-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-N)))

;; 
;;    $Id: depth.km,v 1.5 2001/11/14 23:45:11 jarred Exp $ 
;; 

(depth has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Tangible-Entity))    
   (range       (Depth-Value))
   (scale-class (Depth-Scale))
   (scalar-constant-class (Depth-Constant))
   (cardinal-unit-class   (UoM-Length)) 
   (inverse 	(depth-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-N)))



;; 
;;    $Id: description.km,v 1.4 2001/07/30 15:04:04 jfan Exp $ 
;; 

(description has
 	(instance-of (KM-Slot-Group))
	(superslots  ())
	(subslots    ())
	(domain      (Thing))
	(range 	     (Thing))
	(fluent-status (*Non-Fluent))
	(cardinality (N-to-N)))

;; 
;;    $Id: destination.km,v 1.7 2002/02/08 16:49:07 kbarker Exp $ 
;; 

(destination has
   (instance-of (Relation))
   (superslots ())
   (subslots ())
   (domain      (Event))
   (range       (Spatial-Entity))
   (inverse (destination-of))
   (text-slot (text-destination))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-1)))


(text-destination has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)




;; 
;;    $Id: direction.km,v 1.6 2001/11/11 21:33:21 jarred Exp $ 
;; 

(direction has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Event))    
   (range       (Direction-Value))
   (categorical-constant-class (Direction-Constant))
   (inverse 	(direction-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-1)))





;; 
;;    $Id: disjunctive-next-events.km,v 1.7 2001/07/11 15:04:53 kbarker Exp $ 
;; 


(disjunctive-next-events has
  (instance-of 	 (KM-Slot-Group))
  (superslots 	 (next-event))
  (domain 	 (Event))
  (range 	 (Event))
  (fluent-status (*Non-Fluent))
  (cardinality 	 (N-to-N)))


;; 
;;    $Id: distance.km,v 1.4 2001/11/14 23:45:11 jarred Exp $ 
;; 

(distance has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Event))    
   (range       (Distance-Value))
   (scale-class (Distance-Scale))
   (scalar-constant-class (Distance-Constant))
   (cardinal-unit-class   (UoM-Length))
   (inverse 	(distance-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-1)))





;; 
;;    $Id: donor.km,v 1.8 2002/02/08 16:49:08 kbarker Exp $ 
;; 

(donor has
   (instance-of (Relation))
   (superslots ())
   (subslots ())
   (domain      (Event))
   (range       (Entity))
   (fluent-status (*Inertial-Fluent))
   (inverse (donor-of))
   (text-slot (text-donor))
   (situation-specific (t))
   (cardinality (N-to-N)))


(text-donor has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)


;; 
;;    $Id: dry-wet-scale.km,v 1.5 2001/10/09 20:33:07 jarred Exp $ 
;; 

(*dry-wet-scale has
 (instance-of (Wetness-Scale))
 (element-type ((must-be-a Wetness-Constant)))
 (members ((:seq  *dry *arid *damp *moist *wet))))

;; 
;;    $Id: duration.km,v 1.4 2001/11/07 20:50:17 tierney Exp $
;; 

(duration has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Event))    
   (range       (Duration-Value))
   (scalar-constant-class (Duration-Constant))
   (cardinal-unit-class   (UoM-Time))
   (inverse 	(duration-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-1)))





;; 
;;    $Id: during.km,v 1.3 2001/05/01 22:24:47 pnav Exp $ 
;; 

(during has
	(instance-of (Relation))
	(subslots ())
	(domain (Time-Interval))
	(range (Time-Interval))
	(inverse (temporally-contains))
	(fluent-status (*Inertial-Fluent))
	(situation-specific (t))
	(cardinality (N-to-N)))





;; 
;;    $Id: edit-state.km,v 1.2 2001/07/02 21:16:54 kbarker Exp $
;; 

(edit-state has
            (instance-of (KM-Slot-Group))
            (superslots ())
            (subslots ())
            (domain (Thing))
            (range (Thing))                ; values: *draft, *final
            (fluent-status (*Non-Fluent))
            (cardinality (N-to-1)))

;; 
;;    $Id: element-type.km,v 1.8 2002/01/15 22:05:15 tecuci Exp $
;; 

(element-type has
	      (instance-of 	(KM-Slot-Group))
	      (superslots 		())
	      (subslots 		())
	      (domain 		(Aggregate))
	      (range 		(Entity))
	      (inverse 		(element-type-of))
	      (fluent-status 	(*Non-Fluent))
	      (cardinality 	(N-to-N)))




(element has
	 (instance-of (Relation))
	 (domain (Aggregate))
	 (range (Entity))
	 (cardinality (N-to-N))
	 (fluent-status (*Inertial-Fluent)))

;; 
;;    $Id: enables.km,v 1.3 2001/05/01 22:24:47 pnav Exp $ 
;; 

(enables has
       (instance-of (Relation))
       (superslots ())
       (subslots ())
       (domain (Event))
       (range (Event))
       (inverse (enabled-by))
       (fluent-status (*Inertial-Fluent))
       (situation-specific (t))
       (cardinality (N-to-N)))







;; 
;;    $Id: experiencer.km,v 1.6 2001/09/17 22:00:03 tecuci Exp $ 
;; 

(experiencer has
       (instance-of (Relation))
       (superslots ())
       (subslots ())
       (domain      (Event))
       (range       (Entity))
       (fluent-status (*Non-Fluent))
       (inverse (experiencer-of))
       (situation-specific (t))
       (cardinality (N-to-N)))






;;
;; $Id: first-element.km,v 1.3 2002/01/29 22:33:19 kbarker Exp $
;;

(first-element has
	 (instance-of (Relation))
	 (domain (Aggregate))
	 (range (Entity))
	 (cardinality (N-to-N))
	 (fluent-status (*Inertial-Fluent)))
;; 
;;    $Id: first-subevent.km,v 1.7 2001/07/11 15:04:54 kbarker Exp $ 
;; 

(first-subevent has
  (instance-of 	 (Relation))
  (domain 	 (Event))
  (range 	 (Event))
  (fluent-status (*Non-Fluent))
  (cardinality 	 (N-to-N)))



;; 
;;    $Id: freezing-boiling-scale.km,v 1.6 2001/10/09 20:33:08 jarred Exp $ 
;; 

(*freezing-boiling-scale has
 (instance-of (Temperature-Scale))
 (element-type ((must-be-a Temperature-Constant)))
 (members ((:seq  *freezing *cold *warm *hot *boiling))))

;; 
;;    $Id: frequency.km,v 1.5 2001/11/14 23:45:12 jarred Exp $ 
;; 

(frequency has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Event))    
   (range       (Frequency-Value))
   (scale-class (Frequency-Scale))
   (scalar-constant-class (Frequency-Constant))
   (inverse 	(frequency-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-1)))





(goal has
      (instance-of        (Relation))
      (superslots         ())
      (subslots           ())
      (domain             (Thing))
      (range              (Event))
      (inverse            (goal-of))
      (fluent-status      (*Inertial-Fluent))
      (cardinality        (N-to-N)))


;
;   $Id: greater-than.km,v 1.5 2001/12/05 17:23:39 kbarker Exp $
;

(greater-than has
  (instance-of (Relation))      ; not a property (even though domain is Value)
  (domain (Property-Value))
  (range (Property-Value))
  (inverse (less-than))
  (cardinality (N-to-N))
  (fluent-status (*Non-Fluent))
)

;; 
;;    $Id: has-basic-functional-unit.km,v 1.5 2001/07/24 17:55:59 pzyeh Exp $
;; 

(has-basic-functional-unit has
     (instance-of 	 (Relation))
     (superslots  	 ())
     (subslots 	  	 ())
     (domain 	  	 (Entity))
     (range 	  	 (Entity))
     (inverse 	  	 (is-basic-functional-unit-of))
     (fluent-status 	 (*Inertial-Fluent))
     (situation-specific (t))
     (cardinality 	 (N-to-N)))








;; 
;;    $Id: has-basic-structural-unit.km,v 1.5 2001/07/24 17:56:39 pzyeh Exp $
;; 

(has-basic-structural-unit has
    (instance-of 	(Relation))
    (superslots 	())
    (subslots 		())
    (domain 		(Tangible-Entity))
    (range 		(Tangible-Entity))
    (inverse 		(is-basic-structural-unit-of))
    (fluent-status 	(*Inertial-Fluent))
    (situation-specific (t))
    (cardinality 	(N-to-N)))








;; 
;;    $Id: has-functional-part.km,v 1.5 2001/07/24 17:57:39 pzyeh Exp $
;; 

(has-functional-part has
    (instance-of	(Relation))
    (superslots 	(has-part))
    (subslots 		())
    (domain 		(Entity))
    (range 		(Entity))
    (inverse 		(is-functional-part-of))
    (fluent-status 	(*Inertial-Fluent))
    (situation-specific (t))
    (cardinality 	(N-to-N)))








; 
;;    $Id: has-goal.km,v 1.1 2002/05/22 19:48:55 kbarker Exp $
;; 

(has-goal has
   (instance-of           (Relation))
   (superslots            ())
   (subslots              ())
   (domain                (Entity))
   (range                 (Event))             ;; a Goal or any other Event
   (inverse               (is-goal-of))
   (fluent-status         (*Inertial-Fluent))
   (situation-specific    (t))
   (cardinality           (N-to-N)))

;; 
;;    $Id: has-part.km,v 1.12 2002/04/26 16:09:18 kbarker Exp $ 
;; 

(has-part has
  (instance-of 	      (Relation))
  (superslots  	      ())
  (subslots 	      (has-structural-part has-functional-part))
  (domain 	      (Entity))
  (range 	      (Entity))
  (inverse 	      (is-part-of))
  (fluent-status      (*Inertial-Fluent))
  (situation-specific (t))
  (cardinality 	      (N-to-N)))

(is-part-of has
  (text-slot          (text-is-part-of)))

(text-is-part-of has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Entity))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)

;; 
;;    $Id: has-region.km,v 1.2 2001/05/31 23:41:04 jfan Exp $ 
;; 

(has-region has
	  (instance-of (Relation))
	  (superslots ())
	  (subslots ())
	  (domain (Tangible-Entity))
	  (range (Spatial-Entity))
	  (inverse (is-region-of))
	  (cardinality (N-to-N))
	  (situation-specific (t))
	  (fluent-status (*Inertial-Fluent)))



;; 
;;    $Id: has-structural-part.km,v 1.5 2001/07/24 17:58:44 pzyeh Exp $
;; 

(has-structural-part has
    (instance-of 	(Relation))
    (superslots 	(has-part))
    (subslots 		())
    (domain 		(Tangible-Entity))
    (range 		(Tangible-Entity))
    (inverse 		(is-structural-part-of))
    (fluent-status 	(*Inertial-Fluent))
    (situation-specific (t))
    (cardinality 	(N-to-N)))








;; 
;;    $Id: height.km,v 1.6 2001/11/14 23:45:12 jarred Exp $ 
;; 

(height has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Tangible-Entity))    
   (range       (Height-Value))
   (scale-class (Height-Scale))
   (scalar-constant-class (Height-Constant))
   (cardinal-unit-class   (UoM-Length))
   (inverse 	(height-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-N)))

;; 
;;    $Id: impermeable-permeable-scale.km,v 1.4 2001/10/09 20:33:09 jarred Exp $
;; 

(*impermeable-permeable-scale has
 (instance-of (Integrity-Scale))
 (element-type ((must-be-a Integrity-Constant)))
 (members ((:seq *impermeable *semi-permeable *permeable))))


;; 
;;    $Id: in-event.km,v 1.6 2001/09/20 15:11:02 kbarker Exp $ 
;; 

(in-event has
	  (instance-of (Relation))
	  (superslots ())
	  (subslots ())
	  (domain (Role))
	  (range (Event))
	  (inverse (in-event-of))
	  (cardinality (N-to-1))
	  (fluent-status (*Non-Fluent)))

;; 
;;    $Id: inhibits.km,v 1.3 2001/05/01 22:24:51 pnav Exp $ 
;; 

(inhibits has
       (instance-of (Relation))
       (superslots ())
       (subslots ())
       (domain (Event))
       (range (Event))
       (inverse (inhibited-by))
       (fluent-status (*Inertial-Fluent))
       (situation-specific (t))
       (cardinality (N-to-N)))




;; 
;;    $Id: instrument.km,v 1.6 2002/02/08 16:49:08 kbarker Exp $ 
;; 

(instrument has
	    (instance-of (Relation))
	    (superslots ())
	    (subslots ())
	    (domain (Event))
	    (range (Entity))
	    (inverse (instrument-of))
            (text-slot (text-instrument))
	    (fluent-status (*Inertial-Fluent))
	    (situation-specific (t))
	    (cardinality (N-to-N)))


(text-instrument has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)





;; 
;;    $Id: integrity.km,v 1.3 2001/11/14 23:45:12 jarred Exp $
;; 

(integrity has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Tangible-Entity))    
   (range       (Integrity-Value))
   (scale-class (Integrity-Scale))
   (scalar-constant-class (Integrity-Constant))
   (inverse 	(integrity-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-N)))

;; 
;;    $Id: intensity.km,v 1.7 2001/11/14 23:45:13 jarred Exp $ 
;; 

(intensity has
   (instance-of   	(Property))
   (superslots    	())
   (subslots 	  	())
   (domain        	(Thing))    ;;could be both Event & Entity
   (range         	(Intensity-Value))
   (scale-class         (Intensity-Scale))
   (scalar-constant-class (Intensity-Constant))
   (cardinal-unit-class   (UoM-Intensity))
   (inverse 	  	(intensity-of))
   (fluent-status      	(*Inertial-Fluent))
   (situation-specific 	(t))
   (cardinality        	(N-to-N)))





;; 
;;    $Id: interrupted-by.km,v 1.3 2001/05/01 22:24:53 pnav Exp $ 
;; 

(interrupted-by has
  (instance-of 	 (KM-Slot-Group))
  (superslots 	 ())
  (subslots 	 ())
  (domain 	 (Event))
  (range	 (Event))
  (inverse 	 (interrupts))
  (cardinality 	 (N-to-N))
  (fluent-status (*Non-Fluent)))





;; 
;;    $Id: is-above.km,v 1.5 2002/03/14 06:16:24 jarred Exp $ 
;; 

(is-above has
       (instance-of (Relation)) ;;; more general than over (which applies only
       (superslots ())      ;;; to surfaces)
       (subslots ())
       (domain (Spatial-Entity))
       (range (Spatial-Entity))
       (fluent-status (*Inertial-Fluent))
       (inverse (is-below))
       (text-slot (text-is-above))
       (situation-specific (t))
       (cardinality (N-to-N)))

(text-is-above has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Spatial-Entity))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)




;; 
;;    $Id: is-along.km,v 1.5 2002/03/14 06:16:25 jarred Exp $ 
;; 

(is-along has
       (instance-of (Relation))
       (superslots ())
       (subslots ())
       (domain (Spatial-Entity))
       (range (Spatial-Entity))
       (inverse (is-along))
       (text-slot (text-is-along))
       (fluent-status (*Inertial-Fluent))
       (situation-specific (t))
       (cardinality (N-to-N)))

(text-is-along has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Spatial-Entity))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)



;; 
;;    $Id: is-at.km,v 1.5 2002/03/14 06:16:25 jarred Exp $ 
;; 

(is-at has
    (instance-of (Relation))
    (superslots ())
    (subslots ())
    (domain (Spatial-Entity))
    (range (Spatial-Entity))
    (inverse (is-at-of))
    (text-slot (text-is-at))
    (fluent-status (*Inertial-Fluent))
    (situation-specific (t))
    (cardinality (N-to-N)))

(text-is-at has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Spatial-Entity))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)




;; 
;;    $Id: is-behind.km,v 1.5 2002/03/14 06:16:26 jarred Exp $ 
;; 

(is-behind has
	(instance-of (Relation))
	(superslots ())
	(subslots ())
	(domain (Spatial-Entity))
	(range (Spatial-Entity))
	(inverse (is-in-front-of))
	(text-slot (text-is-behind))
	(fluent-status (*Inertial-Fluent))
	(situation-specific (t))
	(cardinality (N-to-N)))

(text-is-behind has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Spatial-Entity))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)




;; 
;;    $Id: is-beside.km,v 1.3 2002/03/14 06:16:26 jarred Exp $
;; 

(is-beside has
       (instance-of (Relation))
       (superslots ())
       (subslots ())
       (domain (Spatial-Entity))
       (range (Spatial-Entity))
       (fluent-status (*Inertial-Fluent))
       (inverse (is-beside))
       (text-slot (text-is-beside))
       (situation-specific (t))
       (cardinality (N-to-N)))

(text-is-beside has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Spatial-Entity))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)




;; 
;;    $Id: is-between.km,v 1.5 2002/03/14 06:16:26 jarred Exp $ 
;; 

(is-between has
	    (instance-of (Relation))
	    (superslots ())     
	    (subslots ())
	    (domain (Spatial-Entity))
	    (range (Spatial-Entity))
	    (range2 (Spatial-Entity))
	    (fluent-status (*Inertial-Fluent))
	    (situation-specific (t))
	    (text-slot (text-is-between))
	    (inverse ())                       ; no inverse - it's more
	    (cardinality (N-to-N)))            ; confusing than it's worth!

(text-is-between has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Spatial-Entity))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)



;; 
;;    $Id: is-inside.km,v 1.5 2002/03/14 06:16:27 jarred Exp $ 
;; 

(is-inside has
	(instance-of (Relation))
	(superslots ())
	(subslots ())
	(domain (Spatial-Entity))
	(range (Spatial-Entity))
	(inverse (encloses))
	(text-slot (text-is-inside))
	(fluent-status (*Inertial-Fluent))
	(situation-specific (t))
	(cardinality (N-to-N)))

(text-is-inside has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Spatial-Entity))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)





;; 
;;    $Id: is-near.km,v 1.5 2002/03/12 17:25:03 kbarker Exp $ 
;; 

(is-near has
  (instance-of 		(Relation)) 
  (superslots 		())     
  (subslots 		())
  (domain 		(Spatial-Entity))
  (range 		(Spatial-Entity))
  (inverse 		(is-near))
  (text-slot            (text-is-near))
  (fluent-status 	(*Inertial-Fluent))
  (situation-specific 	(t))
  (cardinality 		(N-to-N)))


(text-is-near has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Spatial-Entity))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)




;; 
;;    $Id: is-on.km,v 1.5 2002/03/14 06:16:27 jarred Exp $ 
;; 

(is-on has
       (instance-of (Relation)) ;;; more general than over (which applies only
       (superslots ())      ;;; to surfaces)
       (subslots ())
       (domain (Spatial-Entity))
       (range (Spatial-Entity))
       (inverse (has-on-it))
       (text-slot (text-is-on))
       (fluent-status (*Inertial-Fluent))
       (situation-specific (t))	
       (cardinality (N-to-N)))

(text-is-on has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Spatial-Entity))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)



;; 
;;    $Id: is-opposite.km,v 1.5 2002/03/14 06:16:27 jarred Exp $ 
;; 

(is-opposite has
  (instance-of 		(Relation)) 
  (superslots 		())     
  (subslots 		())
  (domain 		(Spatial-Entity))
  (range 		(Spatial-Entity))
  (inverse 		(is-opposite))
  (text-slot            (text-is-opposite))
  (fluent-status 	(*Inertial-Fluent))
  (situation-specific 	(t))
  (cardinality 		(N-to-N)))

(text-is-opposite has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Spatial-Entity))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)




;; 
;;    $Id: is-outside.km,v 1.5 2002/03/14 06:16:28 jarred Exp $ 
;; 

(is-outside has
	 (instance-of (Relation))
	 (superslots ())
	 (domain (Spatial-Entity))
	 (range (Spatial-Entity))
	 (inverse (does-not-enclose))
	 (text-slot (text-is-outside))
	 (fluent-status (*Inertial-Fluent))
	 (situation-specific (t))
	 (cardinality (N-to-N)))

(text-is-outside has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Spatial-Entity))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)



;; 
;;    $Id: is-over.km,v 1.5 2002/03/14 06:16:28 jarred Exp $ 
;; 

(is-over has
       (instance-of (Relation)) 
       (superslots ())     
       (subslots ())
       (domain (Spatial-Entity))
       (range (Spatial-Entity))
       (inverse (is-under))
       (text-slot (text-is-over))
       (fluent-status (*Inertial-Fluent))
       (situation-specific (t))
       (cardinality (N-to-N)))

(text-is-over has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Spatial-Entity))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)



;; 
;;    $Id: length.km,v 1.7 2001/11/14 23:45:13 jarred Exp $ 
;; 

(length has
   (instance-of 	(Property))
   (superslots 		())
   (subslots 		())
   (domain      	(Spatial-Entity))    
   (range       	(Length-Value))
   (scale-class         (Length-Scale))
   (scalar-constant-class (Length-Constant))
   (cardinal-unit-class   (UoM-Length))
   (inverse 		(length-of))
   (fluent-status 	(*Inertial-Fluent))
   (situation-specific 	(t))
   (cardinality 	(N-to-N)))


;; 
;;    $Id: light-hefty-scale.km,v 1.5 2001/10/09 20:33:10 jarred Exp $ 
;; 

(*light-hefty-scale has
 (instance-of (Mass-Scale))
 (element-type ((must-be-a Mass-Constant)))
 (members ((:seq *light *hefty))))


;; 
;;    $Id: little-gigantic-scale.km,v 1.6 2001/10/09 20:33:11 jarred Exp $ 
;; 

(*little-gigantic-scale has
 (instance-of (Size-Scale))
 (element-type ((must-be-a Size-Constant)))
 (members ((:seq *little *undersized *oversized *gigantic))))


;; 
;;    $Id: location.km,v 1.7 2001/09/20 16:20:08 jfan Exp $ 
;; 

(location has
	  (instance-of (Relation))
	  (superslots ())
	  (subslots ())
;;	  (domain (Tangible-Entity Event)) this causes a unification error
	  (domain (Thing))  ;; try this instead for representing T-E or Event
	  (range (Place))
	  (inverse (location-of))
	  (cardinality (N-to-1))
	  (situation-specific (t))
	  (fluent-status (*Inertial-Fluent)))




;; 
;;    $Id: manner.km,v 1.4 2001/11/11 21:33:23 jarred Exp $ 
;; 

(manner has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Event))    
   (range       (Manner-Value))
   (categorical-constant-class (Manner-Constant))
   (inverse 	(manner-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-N)))





;; 
;;    $Id: mass.km,v 1.6 2001/11/14 23:45:14 jarred Exp $ 
;; 

(mass has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Tangible-Entity))    
   (range       (Mass-Value))
   (scale-class (Mass-Scale))
   (scalar-constant-class (Mass-Constant))
   (cardinal-unit-class   (UoM-Mass))   
   (inverse 	(mass-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-N)))

;; 
;;    $Id: material.km,v 1.7 2002/04/26 16:09:18 kbarker Exp $ 
;; 

;; Note the range should be Substance but currently changed 
;; to Tangible-Entity.
(material has
  (instance-of 		(Relation))
  (superslots 		())
  (subslots 		())
  (domain 		(Tangible-Entity))
  (range 		(Tangible-Entity))
  (inverse 		(material-of))
  (text-slot            (text-material))
  (fluent-status 	(*Inertial-Fluent))
  (situation-specific 	(t))
  (cardinality 		(N-to-N)))


(text-material has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Tangible-Entity))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)


;;
;;   $Id: max-value.km,v 1.1 2002/03/12 21:57:08 kbarker Exp $
;;

(max-value has
  (instance-of (KM-Slot-Group))
  (domain (Property-Value))
  (range (Thing))
  (inverse (max-value-of))
  (cardinality (N-to-N))
  (fluent-status (*Inertial-Fluent))
  (inherit-with-overrides (t))
)

;; 
;;    $Id: mcs-list.km,v 1.3 2001/05/01 22:25:00 pnav Exp $ 
;; 

(mcs-list has
  (instance-of 	 (KM-Slot-Group))
  (superslots 	 ())
  (subslots 	 ())
  (domain 	 (Event))
  (range	 ())
  (inverse 	 (mcs-list-of))
  (cardinality 	 (N-to-N))
  (fluent-status (*Non-Fluent)))





;; 
;;    $Id: microscopic-gigantic-scale.km,v 1.6 2001/10/09 20:33:11 jarred Exp $ 
;; 

(*microscopic-gigantic-scale has
 (instance-of (Size-Scale))
 (element-type ((must-be-a Size-Constant)))
 (members ((:seq *microscopic *tiny *little *undersized *average *oversized *big *huge *gigantic))))


;;
;;   $Id: min-value.km,v 1.1 2002/03/12 21:57:09 kbarker Exp $
;;

(min-value has
  (instance-of (KM-Slot-Group))
  (domain (Property-Value))
  (range (Thing))
  (inverse (min-value-of))
  (cardinality (N-to-N))
  (fluent-status (*Inertial-Fluent))
  (inherit-with-overrides (t))
)

;; 
;;    $Id: narrow-wide-scale.km,v 1.6 2001/10/09 20:33:12 jarred Exp $ 
;; 

(*narrow-wide-scale has
 (instance-of (Width-Scale))
 (element-type ((must-be-a Width-Constant)))
 (members ((:seq  *narrow *wide))))

;; 
;;    $Id: near-far-scale.km,v 1.5 2001/10/09 20:33:13 jarred Exp $ 
;; 

(*near-far-scale has
 (instance-of (Distance-Scale))
 (element-type ((must-be-a Distance-Constant)))
 (members ((:seq *near *far))))
;;
;; $Id: next-element.km,v 1.2 2001/12/21 05:26:08 tecuci Exp $
;;

(next-element has
	     (instance-of (Relation))
	     (domain (Entity))
	     (range (Entity))
	     (cardinality (N-to-N))
	     (fluent-status (*Inertial-Fluent))
	     (inverse (previous-element)))
;; 
;;    $Id: next-event.km,v 1.6 2001/07/11 15:04:54 kbarker Exp $ 
;; 

(next-event has
  (instance-of 	 (Relation))
  (subslots 	 (disjunctive-next-events))
  (domain 	 (Event))
  (range 	 (Event))
  (fluent-status (*Non-Fluent))
  (cardinality 	 (N-to-N))
  (inverse 	 (prev-event)))



;; 
;;    $Id: none-unlimited-scale.km,v 1.6 2001/10/09 20:33:13 jarred Exp $ 
;; 

(*none-unlimited-scale has
 (instance-of (Capacity-Scale))
 (element-type ((must-be-a Capacity-Constant)))
 (members ((:seq *none *roomy *capacious *unlimited))))
;; 
;;    $Id: number-of-elements.km,v 1.2 2002/01/10 17:07:12 kbarker Exp $
;; 

(number-of-elements has
		(instance-of (Property))
		(superslots  ())
		(subslots    ())
		(domain      (Aggregate))    
		(range       (Number))
		(fluent-status (*Inertial-Fluent))
		(situation-specific  (t))
                (dont-cache-values (t))
		(inverse     (number-of-elements-of))
		(cardinality (N-to-N)))
;; 
;;    $Id: object.km,v 1.3 2001/05/01 22:25:03 pnav Exp $ 
;; 

(object has
   (instance-of (Relation))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (Entity))
   (inverse (object-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-N)))






; 
;;    $Id: objective.km,v 1.1 2002/05/22 19:48:54 kbarker Exp $
;; 

(objective has
   (instance-of           (Relation))
   (superslots            ())
   (subslots              ())
   (domain                (Event))
   (range                 (Event))             ;; a Goal or any other Event
   (inverse               (objective-of))
   (fluent-status         (*Inertial-Fluent))
   (situation-specific    (t))
   (cardinality           (N-to-N)))

;; 
;;    $Id: origin.km,v 1.6 2002/02/08 16:49:08 kbarker Exp $
;; 

(origin has
   (instance-of (Relation))
   (superslots ())
   (subslots ())
   (domain      (Event))
   (range       (Spatial-Entity))
   (inverse (origin-of))
   (text-slot (text-origin))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-1)))


(text-origin has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)





;; 
;;    $Id: pH.km,v 1.3 2002/02/13 14:46:01 kbarker Exp $ 
;; 

(pH has
    (instance-of (Property))
    (superslots 	())
    (subslots 	())
    (domain      (Tangible-Entity))    
    (range       (PH-Value))    
    (scalar-constant-class (PH-Constant))
    (cardinal-unit-class   (UoM-PH))
    (fluent-status (*Inertial-Fluent))
    (situation-specific 	(t))
    (inverse 	(pH-of))
    (cardinality (N-to-1)))


;; 
;;    $Id: path.km,v 1.7 2002/02/08 16:49:09 kbarker Exp $ 
;; 

(path has
   (instance-of (Relation))   
   (superslots 	())
   (subslots 	())
   (domain      (Event))
   (range       (Spatial-Entity))
   ;; one object can move through only one place.
   (inverse 	(path-of))
   (text-slot (text-path))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-N)))

   
(text-path has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)



;; 
;;    $Id: plays.km,v 1.7 2001/05/15 18:41:09 pnav Exp $ 
;; 

(plays has
       (instance-of (Relation))
       (subslots ())
       (domain (Entity))
       (range (Role))
       (inverse (played-by))
       (cardinality (N-to-N))
       (fluent-status (*Inertial-Fluent)))

 

(polarity has
	(instance-of (Property))
	(superslots 	())
	(subslots 	())
	(domain      (Chemical-Object))    
	(range       (Polarity-Value))
        (categorical-constant-class   (Polarity-Constant))    
	(fluent-status (*Inertial-Fluent))
	(situation-specific 	(t))
	(inverse 	(polarity-of))
	(cardinality (N-to-1)))


;; 
;;    $Id: possesses.km,v 1.6 2002/03/16 00:15:29 jarred Exp $ 
;; 

(possesses has
	    (instance-of   	(Relation))
	    (superslots    	())
	    (subslots      	())
	    (domain 	   	(Entity))
	    (range 	   	(Entity))
	    (inverse 	   	(is-possessed-by))
	    (fluent-status 	(*Inertial-Fluent))
	    (situation-specific (t))
	    (cardinality   	(N-to-N)))

(is-possessed-by has
	(text-slot (text-is-possessed-by))
)

(text-is-possessed-by has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Entity))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)





;; 
;;    $Id: preparatory-event.km,v 1.8 2002/05/30 21:37:13 jfan Exp $ 
;; 

(preparatory-event has
  (instance-of 	 (KM-Slot-Group))
  (domain 	 (Event))
  (range 	 (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality 	 (N-to-N)))



;; 
;;    $Id: prevents.km,v 1.3 2001/05/01 22:25:05 pnav Exp $ 
;; 

(prevents has
	 (instance-of 		(Relation))
	 (superslots 		())
	 (subslots 		())
	 (domain 		(Event))
	 (range 		(Event))
	 (inverse 		(prevented-by))
	 (fluent-status 	(*Inertial-Fluent))
	 (situation-specific 	(t))
	 (cardinality 		(N-to-N)))





;; 
;;    $Id: primary-slot.km,v 1.6 2001/05/17 16:20:07 pzyeh Exp $ 
;; 

(primary-slot has
	      (instance-of (KM-Slot-Group))
	      (superslots ())
	      (subslots ())
	      (domain (Thing))
	      (range (Slot))
	      (fluent-status (*Non-Fluent))
	      (cardinality (N-to-N)))








;; 
;;    $Id: primitive-actions.km,v 1.6 2001/06/01 22:47:00 porter Exp $ 
;; 

(primitive-actions has
  (instance-of 	 (KM-Slot-Group))
  (domain 	 (Event))
  (range 	 (Event))
  (fluent-status (*Inertial-Fluent))
  (cardinality 	 (N-to-N)))





(property-of-slot has
  (instance-of (KM-Slot-Group))
  (domain (Property-Value))
  (range (Slot))
  (cardinality (1-to-1))
  (fluent-status (*Non-Fluent))
)


;;
;;   $Id: property-slot.km,v 1.1 2002/03/11 23:36:32 kbarker Exp $
;;

(property-slot has
  (instance-of (KM-Slot-Group))
  (domain (Property-Value))
  (range (Slot))
  (cardinality (1-to-1))
  (fluent-status (*Non-Fluent))
)


;
;   $Id: property.km,v 1.4 2002/05/18 17:03:49 jarred Exp $
;

(property has
  (instance-of (KM-Slot-Group))
  (domain (Action))
  (range (Slot))
  (inverse (property-of))
  (cardinality (N-to-1))
  (fluent-status (*Non-Fluent))
)

;; 
;;    $Id: purpose.km,v 1.6 2001/05/15 18:41:11 pnav Exp $ 
;; 

(purpose has
	 (instance-of (Relation))
	 (subslots ())
	 (domain (Entity))
	 (range (Role))
	 (inverse (purpose-of))
	 (cardinality (N-to-N))
	 (fluent-status (*Non-Fluent)))

;; 
;;    $Id: rare-dense-scale.km,v 1.5 2001/10/09 20:33:16 jarred Exp $ 
;; 

(*rare-dense-scale has
 (instance-of (Density-Scale))
 (element-type ((must-be-a Density-Constant)))
 (members ((:seq *rare *dense ))))


;; 
;;    $Id: rate.km,v 1.5 2001/11/14 23:45:14 jarred Exp $ 
;; 

(rate has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Event))    
   (range       (Rate-Value))
   (scale-class (Rate-Scale))
   (scalar-constant-class (Rate-Constant))
   (inverse 	(rate-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-1)))






;; 
;;    $Id: raw-material.km,v 1.3 2002/03/07 18:56:50 kbarker Exp $
;; 

(raw-material has
   (instance-of (Relation))
   (superslots ())
   (subslots ())
   (domain      (Event))
   (range       (Tangible-Entity))
   (inverse (raw-material-of))
   (text-slot (text-raw-material))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-N)))

(text-raw-material has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)


;; 
;;    $Id: recipient.km,v 1.8 2002/02/08 16:49:10 kbarker Exp $ 
;; 

(recipient has
   (instance-of (Relation))
   (superslots ())
   (subslots ())
   (domain      (Event))
   (range       (Entity))
   (fluent-status (*Inertial-Fluent))
   (inverse (recipient-of))
   (text-slot (text-recipient))
   (situation-specific (t))
   (cardinality (N-to-N)))


(text-recipient has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)





;; 
;;    $Id: required-slot.km,v 1.6 2001/05/17 16:19:21 pzyeh Exp $ 
;; 

(required-slot has
	       (instance-of (KM-Slot-Group))
	       (superslots ())
	       (subslots ())
	       (domain (Thing))
	       (range (Slot))
	       (fluent-status (*Non-Fluent))
	       (cardinality (N-to-N)))








;; 
;;    $Id: result.km,v 1.6 2002/03/07 18:57:56 kbarker Exp $ 
;; 

(result has
        (instance-of 	    (Relation))
	(superslots 	    ())
	(subslots 	    ())
        (domain 	    (Event))
        (range 		    (Entity))
	(inverse 	    (result-of))
        (text-slot          (text-result))
	(fluent-status 	    (*Inertial-Fluent))
	(situation-specific (t))
        (cardinality 	    (N-to-N)))


(text-result has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)






;; 
;;    $Id: resulting-state.km,v 1.4 2001/07/03 13:42:32 kbarker Exp $ 
;; 

(resulting-state has
       (instance-of   (Relation))
       (domain        (Event))
       (range  	      (State))
       (inverse       (resulting-state-of))
       (fluent-status (*Inertial-Fluent))
       (cardinality   (1-to-1)))








;;
;;   $Id: same-as.km,v 1.4 2001/12/05 17:23:40 kbarker Exp $
;;

(same-as has
  (instance-of (Relation))      ; not a property (even though domain is Value)
  (domain (Property-Value))
  (range (Property-Value))
  (inverse (same-as))
  (cardinality (N-to-N))
  (fluent-status (*Non-Fluent))
)

;;
;; $Id: scalar-constant-class.km,v 1.4 2002/03/12 14:29:40 kbarker Exp $
;;

(scalar-constant-class has
   (instance-of (KM-Slot-Group))
   (domain (Property))
   (range  (Constant))
   (cardinality (N-to-N))
   (fluent-status (*Non-Fluent))
) 
;;
;; $Id: scale-class.km,v 1.4 2002/03/12 14:29:41 kbarker Exp $
;;

(scale-class has
   (instance-of (KM-Slot-Group))
   (domain (Property))
   (range  (Scale))
   (cardinality (N-to-N))
   (fluent-status (*Non-Fluent))
) 
;; 
;;    $Id: secondary-slot.km,v 1.6 2001/05/17 16:06:22 pzyeh Exp $ 
;; 

(secondary-slot has
		(instance-of (KM-Slot-Group))
		(superslots ())
		(subslots ())
		(domain (Thing))
		(range (Slot))
		(fluent-status (*Non-Fluent))
		(cardinality (N-to-N)))








;; 
;;    $Id: sentience.km,v 1.5 2002/05/31 15:59:21 kbarker Exp $ 
;; 

(sentience has
   (instance-of (Property))
   (superslots ())
   (subslots ())
   (domain      (Living-Entity))    
   (range       (Sentience-Value))
   (categorical-constant-class (Sentience-Constant))
   (inverse (sentience-of))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-1)))





;; 
;;    $Id: sex.km,v 1.5 2002/05/31 15:59:21 kbarker Exp $ 
;; 

(sex has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Living-Entity))    
   (range       (Sex-Value))
   (categorical-constant-class (Sex-Constant))
   (inverse 	(sex-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-1)))





;; 
;;    $Id: shallow-deep-scale.km,v 1.5 2001/10/09 20:33:17 jarred Exp $ 
;; 

(*shallow-deep-scale has
 (instance-of (Depth-Scale))
 (element-type ((must-be-a Depth-Constant)))
 (members ((:seq *shallow *deep))))
;; 
;;    $Id: shape.km,v 1.4 2001/11/11 21:33:24 jarred Exp $ 
;; 

(shape has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Tangible-Entity))    
   (range       (Shape-Value))
   (categorical-constant-class (Shape-Constant))
   (inverse 	(shape-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-N)))






;; 
;;    $Id: short-long-scale.km,v 1.5 2001/10/09 20:33:17 jarred Exp $ 
;; 

(*short-long-scale has
 (instance-of (Length-Scale))
 (element-type ((must-be-a Length-Constant)))
 (members ((:seq *short *long))))
;; 
;;    $Id: short-tall-scale.km,v 1.5 2001/10/09 20:33:18 jarred Exp $ 
;; 

(*short-tall-scale has
 (instance-of (Height-Scale))
 (element-type ((must-be-a Height-Constant)))
 (members ((:seq *short *average *tall))))


;; 
;;    $Id: site.km,v 1.7 2002/02/08 16:49:10 kbarker Exp $ 
;; 

(site has
      (instance-of (Relation))
      (superslots ()) 
      (subslots ())
      (domain (Event))
      (range (Spatial-Entity))
      (fluent-status (*Inertial-Fluent))
      (inverse (site-of))
      (text-slot (text-site))
      (cardinality (N-to-N)))

(text-site has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
)




;; 
;;    $Id: size.km,v 1.5 2001/11/14 23:45:14 jarred Exp $ 
;; 

(size has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Tangible-Entity))    
   (range       (Size-Value))
   (scale-class (Size-Scale))
   (scalar-constant-class (Size-Constant))
   (inverse 	(size-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-1)))





;; 
;;    $Id: slow-fast-scale.km,v 1.6 2001/10/09 20:33:18 jarred Exp $ 
;; 

(*slow-fast-scale has
 (instance-of (Rate-Scale))
 (element-type ((must-be-a Rate-Constant)))
 (members ((:seq *slow *fast ))))

;; 
;;    $Id: small-large-scale.km,v 1.5 2001/10/09 20:33:19 jarred Exp $ 
;; 

(*small-large-scale has
 (instance-of (Volume-Scale))
 (element-type ((must-be-a Volume-Constant)))
 (members ((:seq  *small *large))))

;; 
;;    $Id: smell.km,v 1.4 2001/11/11 21:33:25 jarred Exp $ 
;; 

(smell has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Tangible-Entity))    
   (range       (Smell-Value))
   (categorical-constant-class (Smell-Constant))
   (inverse 	(smell-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-N)))





;; 
;;    $Id: subevent.km,v 1.7 2001/11/22 00:30:39 tecuci Exp $ 
;; 

(subevent has
          (instance-of 	 (Relation))
          (domain 	 (Event))
          (range 	 (Event))
          (fluent-status (*Non-Fluent))
          (cardinality 	 (N-to-N))
          (inverse 	 (subevent-of)))

;; 
;;    $Id: substrate.km,v 1.1 2001/05/29 22:12:47 tecuci Exp $
;; 

(substrate has
   (instance-of (Relation))
   (superslots ())
   (subslots ())
   (domain      (Event))
   (range       (Tangible-Entity))
   (inverse (substrate-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-N)))



;; 
;;    $Id: supports.km,v 1.1 2002/05/22 21:33:46 kbarker Exp $
;; 

(supports has
	 (instance-of 		(Relation))
	 (superslots 		())
	 (subslots 		())
	 (domain 		(Event))
	 (range 		(Event))
	 (inverse 		(supported-by))
	 (fluent-status 	(*Inertial-Fluent))
	 (situation-specific 	(t))
	 (cardinality 		(N-to-N)))





;; 
;;    $Id: taste.km,v 1.4 2001/11/11 21:33:25 jarred Exp $ 
;; 

(taste has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Tangible-Entity))    
   (range       (Taste-Value))
   (categorical-constant-class (Taste-Constant))
   (inverse 	(taste-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-N)))





;; 
;;    $Id: temperature.km,v 1.6 2001/11/14 23:45:15 jarred Exp $ 
;; 

(temperature has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Tangible-Entity))
   (range       (Temperature-Value))
   (scale-class (Temperature-Scale))    
   (scalar-constant-class (Temperature-Constant))
   (cardinal-unit-class   (UoM-Temperature))
   (inverse 	(temperature-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-N)))


;; 
;;    $Id: temporally-finishes.km,v 1.4 2001/05/01 22:25:17 pnav Exp $ 
;; 

(temporally-finishes has
   	(instance-of 	(Relation))
	(subslots 	())
	(domain 	(Time-Interval))
	(range 		(Time-Interval))
	(inverse 	(temporally-finished-by))
	(fluent-status 	(*Inertial-Fluent))
	(situation-specific (t))
	(cardinality 	(N-to-N)))










;; 
;;    $Id: temporally-meets.km,v 1.4 2001/05/01 22:25:17 pnav Exp $ 
;; 

(temporally-meets has
		 (instance-of (Relation))
		 (subslots ())
		 (domain (Time-Interval))
		 (range (Time-Interval))
		 (inverse (temporally-met-by))
		 (fluent-status (*Inertial-Fluent))
		 (situation-specific (t))
		 (cardinality (N-to-N)))










;; 
;;    $Id: temporally-overlaps.km,v 1.3 2001/05/01 22:25:17 pnav Exp $ 
;; 

(temporally-overlaps has
		    (instance-of (Relation))
		    (subslots ())
		    (domain (Time-Interval))
		    (range (Time-Interval))
		    (inverse (temporally-overlapped-by))
		    (fluent-status (*Inertial-Fluent))
		    (situation-specific (t))
		    (cardinality (N-to-N)))










;; 
;;    $Id: temporally-starts.km,v 1.4 2001/05/01 22:25:18 pnav Exp $ 
;; 

(temporally-starts has
		  (instance-of (Relation))
		  (subslots ())
		  (domain (Time-Interval))
		  (range (Time-Interval))
		  (inverse (temporally-started-by))
		  (fluent-status (*Inertial-Fluent))
		  (situation-specific (t))
		  (cardinality (N-to-N)))










;; 
;;    $Id: test-case.km,v 1.4 2001/05/01 22:25:18 pnav Exp $ 
;; 

(test-case has
	   (instance-of (KM-Slot-Group))
	   (superslots ())
	   (subslots ())
	   (domain (Thing))
	   (range (Thing))
	   (inverse ())
	   (cardinality (N-to-N)))








;; 
;;    $Id: text-active-phrase.km,v 1.5 2002/02/08 16:49:11 kbarker Exp $
;; 

(text-active-phrase has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (String))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-1))
   (inherit-with-overrides (t))
   (dont-cache-values (t))
)

;; 
;;    $Id: text-active-sentence.km,v 1.2 2002/02/08 16:49:11 kbarker Exp $
;; 

(text-active-sentence has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-1))
   (inherit-with-overrides (t))
   (dont-cache-values (t))
)

;; 
;;    $Id: text-active-verbseq-pl.km,v 1.4 2002/02/08 16:49:12 kbarker Exp $
;; 

(text-active-verbseq-pl has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (String))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
   (dont-cache-values (t))
)

;; 
;;    $Id: text-active-verbseq-sg.km,v 1.4 2002/02/08 16:49:13 kbarker Exp $
;; 

(text-active-verbseq-sg has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (String))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
   (dont-cache-values (t))
)

;; 
;;    $Id: text-active-verbseq.km,v 1.4 2002/02/08 16:49:14 kbarker Exp $
;; 

(text-active-verbseq has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (String))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
   (dont-cache-values (t))
)

;; 
;;    $Id: text-argslots.km,v 1.2 2002/02/08 16:49:14 kbarker Exp $
;; 

(text-argslots has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Thing))
   (range (Slot))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-1))
   (inherit-with-overrides (t))
)

;; 
;;    $Id: text-arguments.km,v 1.3 2002/02/08 16:49:15 kbarker Exp $
;; 

(text-arguments has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-1))
   (inherit-with-overrides (t))
   (dont-cache-values (t))
)

;; 
;;    $Id: text-base-phrase.km,v 1.1 2002/04/26 16:08:43 kbarker Exp $
;; 


(text-base-phrase has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Thing))                      ; Entity or Role
   (range (Thing))                       ; sequence of strings etc.
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (dont-cache-values (t))
   (inherit-with-overrides (t))
)

;; 
;;    $Id: text-def-determiner.km,v 1.1 2002/05/16 18:16:25 kbarker Exp $
;; 


(text-def-determiner has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Thing))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (dont-cache-values (t))
   (inherit-with-overrides (t))
)

;; 
;;    $Id: text-def-head.km,v 1.1 2002/04/04 21:57:48 kbarker Exp $
;; 


(text-def-head has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Thing))                      ; Entity or Role
   (range (Thing))                       ; the Entity itself or a Role it plays
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (dont-cache-values (t))
   (inherit-with-overrides (t))
)

;; 
;;    $Id: text-dobj-phrase.km,v 1.1 2002/05/16 18:16:26 kbarker Exp $
;; 

(text-dobj-phrase has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Thing))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-1))
   (inherit-with-overrides (t))
   (dont-cache-values (t))
)

;; 
;;    $Id: text-dobj.km,v 1.4 2002/02/08 16:49:15 kbarker Exp $
;; 

;; text-dobj takes the value of either the object or result of an Event

(text-dobj has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (Entity))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (dont-cache-values (t))
   (inherit-with-overrides (t))
)

;; 
;;    $Id: text-gen.km,v 1.4 2002/02/08 16:49:16 kbarker Exp $
;; 

(text-gen has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Thing))
   (range (String))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-1))
   (inherit-with-overrides (t))
   (dont-cache-values (t))
)

;; 
;;    $Id: text-head.km,v 1.1 2002/04/04 21:57:50 kbarker Exp $
;; 


(text-head has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Thing))                      ; Entity or Role
   (range (Thing))                       ; the Entity itself or a Role it plays
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (dont-cache-values (t))
   (inherit-with-overrides (t))
)

;; 
;;    $Id: text-indef-determiner.km,v 1.1 2002/05/16 18:16:24 kbarker Exp $
;; 


(text-indef-determiner has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Thing))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (dont-cache-values (t))
   (inherit-with-overrides (t))
)

;; 
;;    $Id: text-indef-head.km,v 1.1 2002/04/04 21:57:49 kbarker Exp $
;; 


(text-indef-head has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Thing))                      ; Entity or Role
   (range (Thing))                       ; the Entity itself or a Role it plays
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (dont-cache-values (t))
   (inherit-with-overrides (t))
)

;; 
;;    $Id: text-number.km,v 1.4 2002/02/08 16:49:16 kbarker Exp $
;; 

(text-number has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (Number))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-1))
   (inherit-with-overrides (t))
   (dont-cache-values (t))
)

;; 
;;    $Id: text-particle.km,v 1.1 2002/04/10 21:30:41 kbarker Exp $
;; 

(text-particle has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-1))
   (inherit-with-overrides (t))
)

;; 
;;    $Id: text-passive-phrase.km,v 1.5 2002/02/08 16:49:17 kbarker Exp $
;; 

(text-passive-phrase has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (String))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-1))
   (inherit-with-overrides (t))
   (dont-cache-values (t))
)

;; 
;;    $Id: text-passive-sentence.km,v 1.3 2002/02/08 16:49:17 kbarker Exp $
;; 

(text-passive-sentence has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-1))
   (inherit-with-overrides (t))
   (dont-cache-values (t))
)

;; 
;;    $Id: text-passive-verbseq-pl.km,v 1.4 2002/02/08 16:49:17 kbarker Exp $
;; 

(text-passive-verbseq-pl has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (String))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
   (dont-cache-values (t))
)

;; 
;;    $Id: text-passive-verbseq-sg.km,v 1.4 2002/02/08 16:49:18 kbarker Exp $
;; 

(text-passive-verbseq-sg has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (String))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
   (dont-cache-values (t))
)

;; 
;;    $Id: text-passive-verbseq.km,v 1.4 2002/02/08 16:49:18 kbarker Exp $
;; 

(text-passive-verbseq has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (String))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (inherit-with-overrides (t))
   (dont-cache-values (t))
)

;; 
;;    $Id: text-phrase.km,v 1.3 2002/02/08 16:49:19 kbarker Exp $
;; 

(text-phrase has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Thing))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-1))
   (inherit-with-overrides (t))
   (dont-cache-values (t))
)


(text-postmods has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Thing))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-1))
   (inherit-with-overrides (t))
   (dont-cache-values (t))
)

(text-postmodslots has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Thing))
   (range (Slot))
   (fluent-status (*Non-Fluent))
   (cardinality (N-to-1))
   (inherit-with-overrides (t))
   (dont-cache-values (t))
)

(text-premods has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Thing))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-1))
   (inherit-with-overrides (t))
   (dont-cache-values (t))
)

(text-premodslots has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Thing))
   (range (Slot))
   (fluent-status (*Non-Fluent))
   (cardinality (N-to-1))
   (inherit-with-overrides (t))
   (dont-cache-values (t))
)
;; 
;;    $Id: text-sentence.km,v 1.4 2002/04/26 16:08:21 kbarker Exp $
;; 

(text-sentence has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Thing))     ;; Entities can now have sentences built for them too
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-1))
   (inherit-with-overrides (t))
   (dont-cache-values (t))
)

;; 
;;    $Id: text-slot.km,v 1.3 2002/02/08 16:49:19 kbarker Exp $
;; 

(text-slot has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Thing))
   (range (Slot))
   (fluent-status (*Inertial-Fluent))
   (cardinality (1-to-1))
)

;; 
;;    $Id: text-subj-phrase.km,v 1.1 2002/05/16 18:16:27 kbarker Exp $
;; 

(text-subj-phrase has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Thing))
   (range (Thing))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-1))
   (inherit-with-overrides (t))
   (dont-cache-values (t))
)

;; 
;;    $Id: text-subj.km,v 1.2 2002/02/08 16:49:20 kbarker Exp $
;; 


(text-subj has
   (instance-of (KM-Slot-Group))
   (superslots ())
   (subslots ())
   (domain (Event))
   (range (Entity))
   (fluent-status (*Inertial-Fluent))
   (cardinality (N-to-N))
   (dont-cache-values (t))
   (inherit-with-overrides (t))
)

;; 
;;    $Id: texture.km,v 1.4 2001/11/11 21:33:26 jarred Exp $ 
;; 

(texture has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Tangible-Entity))    
   (range       (Texture-Value))
   (categorical-constant-class (Texture-Constant))
   (inverse 	(texture-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-1)))





;; 
;;    $Id: thickness.km,v 1.5 2001/11/14 23:45:15 jarred Exp $ 
;; 

(thickness has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Tangible-Entity))    
   (range       (Thickness-Value))
   (scale-class (Thickness-Scale))
   (scalar-constant-class (Thickness-Constant))
   (cardinal-unit-class (UoM-Length))
   (inverse 	(thickness-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-1)))






;; 
;;    $Id: thin-thick-scale.km,v 1.5 2001/10/09 20:33:21 jarred Exp $ 
;; 

(*thin-thick-scale has
 (instance-of (Thickness-Scale))
 (element-type ((must-be-a Thickness-Constant)))
 (members ((:seq  *thin *thick))))

;; 
;;    $Id: time-of-existence.km,v 1.4 2001/06/01 22:47:01 porter Exp $ 
;; 

(time-of-existence has
       (instance-of (KM-Slot-Group))
       (superslots ())
       (subslots ())
       (domain (Entity))
       (range (Time-Interval))
       (inverse (time-of-existence-of))
       (fluent-status (*Inertial-Fluent))
       (cardinality (N-to-1)))




;; 
;;    $Id: time.km,v 1.3 2001/05/01 22:25:20 pnav Exp $ 
;; 

(time has
       (instance-of (Relation))
       (superslots ())
       (subslots ())
       (domain (Event))
       (range (Time-Interval))
       (inverse (time-of))
       (fluent-status (*Inertial-Fluent))
       (situation-specific (t))
       (cardinality (N-to-1)))




;; 
;;    $Id: tiny-huge-scale.km,v 1.5 2001/10/09 20:33:22 jarred Exp $ 
;; 

(*tiny-huge-scale has
 (instance-of (Area-Scale))
 (element-type ((must-be-a Area-Constant)))
 (members ((:seq *tiny *huge))))
;; 
;;    $Id: toward.km,v 1.4 2001/05/22 21:14:30 kbarker Exp $ 
;; 

(toward has
   (instance-of 	(Relation))
   (superslots 		())
   (subslots 		())
   (domain      	(Event))
   (range       	(Spatial-Entity))
   (inverse 		(toward-of))
   (fluent-status 	(*Inertial-Fluent))
   (situation-specific 	(t))
   (cardinality 	(N-to-1)))




;; 
;;    $Id: trait.km,v 1.5 2002/02/21 22:33:00 pzyeh Exp $ 
;; 

(trait has
   (instance-of   (Property))
   (superslots    ())
   (subslots      ())
   (domain        (Entity))    
   (range         (Trait-Value))
   (categorical-constant-class (Trait-Constant))
   (inverse       (trait-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality   (N-to-N)))










;; 
;;    $Id: up-down-scale.km,v 1.5 2001/10/09 20:33:23 jarred Exp $ 
;; 

(*up-down-scale has
 (instance-of (Direction-Scale))
 (element-type ((must-be-a Direction-Constant)))
 (members ((:seq *up *down))))



;;
;;   $Id: value.km,v 1.5 2002/03/12 21:57:11 kbarker Exp $
;;

(value has
  (instance-of (KM-Slot-Group))
  (domain (Property-Value))
  (range (Thing))                    ;    (:pair <scalar-const> <refclass>)
                                     ; or (:pair <number> <UoM>)
                                     ; or <cardinal-const>
  (inverse (value-of))
  (cardinality (N-to-N))
  (fluent-status (*Inertial-Fluent))
  (inherit-with-overrides (t))
)

;; 
;;    $Id: viewpoint.km,v 1.1 2002/05/24 18:59:04 kbarker Exp $
;; 

(viewpoint has
   (instance-of   	(Relation))
   (superslots    	())
   (subslots 	  	())
   (domain        	(Thing))
   (range         	(Thing))
   (inverse 		(viewpoint-of))
   (fluent-status 	(*Inertial-Fluent))
   (situation-specific 	(t))
   (cardinality 	(N-to-N)))


;; 
;;    $Id: volume.km,v 1.5 2001/11/14 23:45:15 jarred Exp $ 
;; 

(volume has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Tangible-Entity))    
   (range       (Volume-Value))
   (scale-class (Volume-Scale))
   (scalar-constant-class (Volume-Constant))
   (cardinal-unit-class   (UoM-Volume))
   (inverse 	(volume-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-N)))




;; 
;;    $Id: weak-strong-scale.km,v 1.5 2001/10/09 20:33:23 jarred Exp $ 
;; 

(*weak-strong-scale has
 (instance-of (Intensity-Scale))
 (element-type ((must-be-a Intensity-Constant)))
 (members ((:seq *weak *strong))))


;; 
;;    $Id: wetness.km,v 1.5 2001/11/14 23:45:16 jarred Exp $ 
;; 

(wetness has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Tangible-Entity))    
   (range       (Wetness-Value))
   (scale-class (Wetness-Scale))
   (scalar-constant-class (Wetness-Constant))
   (inverse 	(wetness-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-1)))



(Light-Infantry-Unit has
   (superclasses (Infantry-Unit)))


(Light-Cavalry-Unit has
   (superclasses (Cavalry-Unit)))

;; 
;;    $Id: width.km,v 1.6 2001/11/14 23:45:16 jarred Exp $ 
;; 

(Engineer-Unit has
   (superclasses (Military-Unit)))
(Armor-Unit has
   (superclasses (Military-Unit)))
(Cavalry-Unit has
   (superclasses (Military-Unit)))
(Engineer-Unit has
   (superclasses (Military-Unit)))
(Infantry-Unit has
   (superclasses (Military-Unit)))
(Main-Command-Post-Unit has
   (superclasses (Military-Unit)))
(Mechanized-Infantry-Unit has
   (superclasses (Armor-Unit Infantry-Unit)))
(Rear-Command-Post-Unit has
   (superclasses (Military-Unit)))
(Special-Forces-Unit has
   (superclasses (Military-Unit)))
(Tactical-Command-Post-Unit has
   (superclasses (Military-Unit)))
(Task-Organized-Unit has
   (superclasses (Military-Unit)))

(width has
   (instance-of (Property))
   (superslots 	())
   (subslots 	())
   (domain      (Tangible-Entity))    
   (range       (Width-Value))
   (scale-class (Width-Scale))
   (scalar-constant-class (Width-Constant))
   (cardinal-unit-class   (UoM-Length)) 
   (inverse 	(width-of))
   (fluent-status (*Inertial-Fluent))
   (situation-specific (t))
   (cardinality (N-to-N)))

;; 
;;    $Id: young-old-scale.km,v 1.7 2001/10/09 20:33:23 jarred Exp $ 
;; 

(*young-old-scale has
 (instance-of (Age-Scale))
 (element-type ((must-be-a Age-Constant)))
 (members ((:seq *young *adolescent *juvenile *teenage *middle-aged *old))))

